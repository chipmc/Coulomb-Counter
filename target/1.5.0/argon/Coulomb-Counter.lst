
/Users/chipmc/Documents/Maker/Particle/Projects/Coulomb-Counter/target/1.5.0/argon/Coulomb-Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005830  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9850  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000114  2003e220  000d9854  0001e220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004bc  2003e334  2003e334  0002e334  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9968  000d9968  00029968  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9990  000d9990  00029990  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ebf75  00000000  00000000  00029994  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012512  00000000  00000000  00115909  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001f832  00000000  00000000  00127e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002678  00000000  00000000  0014764d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004920  00000000  00000000  00149cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000357e4  00000000  00000000  0014e5e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002aa0d  00000000  00000000  00183dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105c6c  00000000  00000000  001ae7d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000dae8  00000000  00000000  002b4444  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 ff09 	bl	d6e48 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 ff0e 	bl	d6e5e <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e220 	.word	0x2003e220
   d404c:	000d9854 	.word	0x000d9854
   d4050:	2003e334 	.word	0x2003e334
   d4054:	2003e334 	.word	0x2003e334
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 fe7d 	bl	d5d5c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d9844 	.word	0x000d9844
   d4084:	000d980c 	.word	0x000d980c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b8ea 	b.w	d4260 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fa01 	bl	d4494 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 be23 	b.w	d5ce0 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bd05 	b.w	d4aa8 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bd0b 	b.w	d4ab8 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bd09 	b.w	d4ab8 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z5myISRv>:
  snprintf(data, sizeof(data), "Status: %4.0f mAh, %3.1f%% charge, %4.3f mA at time %i:%i:%i:%i seconds", battery_data.currentCapacity_mAh, battery_data.currentCharge_percent, mA, Time.day(elapsedSec)-1, Time.hour(elapsedSec), Time.minute(elapsedSec), Time.second(elapsedSec));
  Particle.publish("Status",data,PRIVATE);
}

void myISR() // Run automatically for falling edge on D3 (INT1)
{
   d40b8:	b570      	push	{r4, r5, r6, lr}
  static boolean polarity;
  // Determine delay since last interrupt (for mA calculation)
  // Note that first interrupt will be incorrect (no previous time!)
  lasttime = runTime;
   d40ba:	4c29      	ldr	r4, [pc, #164]	; (d4160 <_Z5myISRv+0xa8>)
   d40bc:	4d29      	ldr	r5, [pc, #164]	; (d4164 <_Z5myISRv+0xac>)
   d40be:	6823      	ldr	r3, [r4, #0]
   d40c0:	602b      	str	r3, [r5, #0]
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d40c2:	f000 fae5 	bl	d4690 <HAL_Timer_Get_Micro_Seconds>
  runTime = micros();
   d40c6:	6020      	str	r0, [r4, #0]

  // Get polarity value 
  polarity = digitalRead(polPin);
   d40c8:	2003      	movs	r0, #3
   d40ca:	f001 febf 	bl	d5e4c <digitalRead>
   d40ce:	4b26      	ldr	r3, [pc, #152]	; (d4168 <_Z5myISRv+0xb0>)
   d40d0:	4926      	ldr	r1, [pc, #152]	; (d416c <_Z5myISRv+0xb4>)
   d40d2:	1e06      	subs	r6, r0, #0
   d40d4:	bf14      	ite	ne
   d40d6:	2201      	movne	r2, #1
   d40d8:	2200      	moveq	r2, #0
   d40da:	701a      	strb	r2, [r3, #0]
   d40dc:	4b24      	ldr	r3, [pc, #144]	; (d4170 <_Z5myISRv+0xb8>)
   d40de:	4a25      	ldr	r2, [pc, #148]	; (d4174 <_Z5myISRv+0xbc>)
  if (polarity) // high = charging
  {
    battery_data.currentCapacity_mAh += ah_quanta;
   d40e0:	edd3 7a02 	vldr	s15, [r3, #8]
   d40e4:	ed91 7a00 	vldr	s14, [r1]
  lasttime = runTime;
  runTime = micros();

  // Get polarity value 
  polarity = digitalRead(polPin);
  if (polarity) // high = charging
   d40e8:	d00a      	beq.n	d4100 <_Z5myISRv+0x48>
  {
    battery_data.currentCapacity_mAh += ah_quanta;
   d40ea:	ee77 7a87 	vadd.f32	s15, s15, s14
    battery_data.currentCharge_percent += percent_quanta;
   d40ee:	ed92 7a00 	vldr	s14, [r2]

  // Get polarity value 
  polarity = digitalRead(polPin);
  if (polarity) // high = charging
  {
    battery_data.currentCapacity_mAh += ah_quanta;
   d40f2:	edc3 7a02 	vstr	s15, [r3, #8]
    battery_data.currentCharge_percent += percent_quanta;
   d40f6:	edd3 7a04 	vldr	s15, [r3, #16]
   d40fa:	ee77 7a87 	vadd.f32	s15, s15, s14
   d40fe:	e009      	b.n	d4114 <_Z5myISRv+0x5c>
  }
  else // low = discharging
  {
    battery_data.currentCapacity_mAh -= ah_quanta;
   d4100:	ee77 7ac7 	vsub.f32	s15, s15, s14
    battery_data.currentCharge_percent -= percent_quanta;
   d4104:	ed92 7a00 	vldr	s14, [r2]
    battery_data.currentCapacity_mAh += ah_quanta;
    battery_data.currentCharge_percent += percent_quanta;
  }
  else // low = discharging
  {
    battery_data.currentCapacity_mAh -= ah_quanta;
   d4108:	edc3 7a02 	vstr	s15, [r3, #8]
    battery_data.currentCharge_percent -= percent_quanta;
   d410c:	edd3 7a04 	vldr	s15, [r3, #16]
   d4110:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d4114:	edc3 7a04 	vstr	s15, [r3, #16]
  }

  // Calculate mA from time delay (optional)
  mA = 614.4/((runTime-lasttime)/1000000);
   d4118:	6823      	ldr	r3, [r4, #0]
   d411a:	6828      	ldr	r0, [r5, #0]
   d411c:	1a1b      	subs	r3, r3, r0
   d411e:	4816      	ldr	r0, [pc, #88]	; (d4178 <_Z5myISRv+0xc0>)
   d4120:	fbb3 f0f0 	udiv	r0, r3, r0
   d4124:	f002 f9c8 	bl	d64b8 <__aeabi_ui2d>
   d4128:	460b      	mov	r3, r1
   d412a:	4602      	mov	r2, r0
   d412c:	a10a      	add	r1, pc, #40	; (adr r1, d4158 <_Z5myISRv+0xa0>)
   d412e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d4132:	f002 fb61 	bl	d67f8 <__aeabi_ddiv>
   d4136:	f002 fd2d 	bl	d6b94 <__aeabi_d2f>
   d413a:	4b10      	ldr	r3, [pc, #64]	; (d417c <_Z5myISRv+0xc4>)
   d413c:	6018      	str	r0, [r3, #0]

  // If charging, we'll set mA negative (optional)
  if (polarity) mA = mA * -1.0;
   d413e:	b12e      	cbz	r6, d414c <_Z5myISRv+0x94>
   d4140:	edd3 7a00 	vldr	s15, [r3]
   d4144:	eef1 7a67 	vneg.f32	s15, s15
   d4148:	edc3 7a00 	vstr	s15, [r3]
  
  // Set isrflag so main loop knows an interrupt occurred
  isrflag = true;
   d414c:	4b0c      	ldr	r3, [pc, #48]	; (d4180 <_Z5myISRv+0xc8>)
   d414e:	2201      	movs	r2, #1
   d4150:	701a      	strb	r2, [r3, #0]
   d4152:	bd70      	pop	{r4, r5, r6, pc}
   d4154:	f3af 8000 	nop.w
   d4158:	33333333 	.word	0x33333333
   d415c:	40833333 	.word	0x40833333
   d4160:	2003e33c 	.word	0x2003e33c
   d4164:	2003e364 	.word	0x2003e364
   d4168:	2003e338 	.word	0x2003e338
   d416c:	2003e240 	.word	0x2003e240
   d4170:	2003e340 	.word	0x2003e340
   d4174:	2003e360 	.word	0x2003e360
   d4178:	000f4240 	.word	0x000f4240
   d417c:	2003e35c 	.word	0x2003e35c
   d4180:	2003e368 	.word	0x2003e368

000d4184 <_Z9resetTest6String>:
  }
  return 1;
}

int resetTest(String command)                                       // Resets the current hourly and daily counts
{
   d4184:	b513      	push	{r0, r1, r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4186:	4915      	ldr	r1, [pc, #84]	; (d41dc <_Z9resetTest6String+0x58>)
   d4188:	f001 fb7b 	bl	d5882 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d418c:	b318      	cbz	r0, d41d6 <_Z9resetTest6String+0x52>
  {
    battery_data.startTime = Time.now();            // When did we start the test
   d418e:	4c14      	ldr	r4, [pc, #80]	; (d41e0 <_Z9resetTest6String+0x5c>)
   d4190:	f001 fc33 	bl	d59fa <_ZN9TimeClass3nowEv>
    battery_data.currentCapacity_mAh = battery_data.startingCapacity_mAh;
   d4194:	6863      	ldr	r3, [r4, #4]
   d4196:	60a3      	str	r3, [r4, #8]
    battery_data.currentCharge_percent = battery_data.startingCharge_percent;
   d4198:	68e3      	ldr	r3, [r4, #12]
   d419a:	6123      	str	r3, [r4, #16]

int resetTest(String command)                                       // Resets the current hourly and daily counts
{
  if (command == "1")
  {
    battery_data.startTime = Time.now();            // When did we start the test
   d419c:	6020      	str	r0, [r4, #0]
    battery_data.currentCapacity_mAh = battery_data.startingCapacity_mAh;
    battery_data.currentCharge_percent = battery_data.startingCharge_percent;
    EEPROM.put(0,battery_data);    
   d419e:	f001 fe69 	bl	d5e74 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d41a2:	2214      	movs	r2, #20
   d41a4:	4621      	mov	r1, r4
   d41a6:	2000      	movs	r0, #0
   d41a8:	f000 fa9a 	bl	d46e0 <HAL_EEPROM_Put>
    snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",battery_data.currentCapacity_mAh);
   d41ac:	68a0      	ldr	r0, [r4, #8]
   d41ae:	f002 f9a5 	bl	d64fc <__aeabi_f2d>
   d41b2:	4a0c      	ldr	r2, [pc, #48]	; (d41e4 <_Z9resetTest6String+0x60>)
   d41b4:	e9cd 0100 	strd	r0, r1, [sp]
   d41b8:	2110      	movs	r1, #16
   d41ba:	480b      	ldr	r0, [pc, #44]	; (d41e8 <_Z9resetTest6String+0x64>)
   d41bc:	f000 fc94 	bl	d4ae8 <snprintf>
    snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",battery_data.currentCharge_percent);
   d41c0:	6920      	ldr	r0, [r4, #16]
   d41c2:	f002 f99b 	bl	d64fc <__aeabi_f2d>
   d41c6:	4a09      	ldr	r2, [pc, #36]	; (d41ec <_Z9resetTest6String+0x68>)
   d41c8:	e9cd 0100 	strd	r0, r1, [sp]
   d41cc:	2110      	movs	r1, #16
   d41ce:	4808      	ldr	r0, [pc, #32]	; (d41f0 <_Z9resetTest6String+0x6c>)
   d41d0:	f000 fc8a 	bl	d4ae8 <snprintf>
   d41d4:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
   d41d6:	b002      	add	sp, #8
   d41d8:	bd10      	pop	{r4, pc}
   d41da:	bf00      	nop
   d41dc:	000d92a2 	.word	0x000d92a2
   d41e0:	2003e340 	.word	0x2003e340
   d41e4:	000d915c 	.word	0x000d915c
   d41e8:	2003e220 	.word	0x2003e220
   d41ec:	000d9166 	.word	0x000d9166
   d41f0:	2003e230 	.word	0x2003e230

000d41f4 <_Z20meterParticlePublishv>:

bool meterParticlePublish(void)
{
   d41f4:	b510      	push	{r4, lr}
  static unsigned long lastPublish=0;                                   // Initialize and store value here
  if(millis() - lastPublish >= 1000) {                                  // Particle rate limits at 1 publish per second
   d41f6:	4c07      	ldr	r4, [pc, #28]	; (d4214 <_Z20meterParticlePublishv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41f8:	f000 fa52 	bl	d46a0 <HAL_Timer_Get_Milli_Seconds>
   d41fc:	6823      	ldr	r3, [r4, #0]
   d41fe:	1ac0      	subs	r0, r0, r3
   d4200:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4204:	d304      	bcc.n	d4210 <_Z20meterParticlePublishv+0x1c>
   d4206:	f000 fa4b 	bl	d46a0 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d420a:	6020      	str	r0, [r4, #0]
   d420c:	2001      	movs	r0, #1
   d420e:	bd10      	pop	{r4, pc}
    return 1;
  }
  else return 0;
   d4210:	2000      	movs	r0, #0
   d4212:	bd10      	pop	{r4, pc}
   d4214:	2003e354 	.word	0x2003e354

000d4218 <_ZN11SystemClass18waitConditionWhileIZ9setCharge6StringEUlvE_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.13>:
    }


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
   d4218:	b508      	push	{r3, lr}
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
  if ((inputValue < 0.0) || (inputValue > 100.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
  battery_data.startingCharge_percent = inputValue;                                              // Assign the input to the battery capacity variable
  snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",battery_data.startingCharge_percent);
  if (Particle.connected()) {                                            // Publish result if feeling verbose
    waitUntil(meterParticlePublish);
   d421a:	f7ff ffeb 	bl	d41f4 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
   d421e:	b118      	cbz	r0, d4228 <_ZN11SystemClass18waitConditionWhileIZ9setCharge6StringEUlvE_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.13+0x10>
            spark_process();
        }
        return _condition();
    }
   d4220:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4224:	f7ff bfe6 	b.w	d41f4 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d4228:	f000 fbc6 	bl	d49b8 <spark_process>
   d422c:	e7f5      	b.n	d421a <_ZN11SystemClass18waitConditionWhileIZ9setCharge6StringEUlvE_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.13+0x2>

000d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d422e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4230:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4232:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4234:	b17c      	cbz	r4, d4256 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4236:	6863      	ldr	r3, [r4, #4]
   d4238:	3b01      	subs	r3, #1
   d423a:	6063      	str	r3, [r4, #4]
   d423c:	b95b      	cbnz	r3, d4256 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d423e:	6823      	ldr	r3, [r4, #0]
   d4240:	4620      	mov	r0, r4
   d4242:	689b      	ldr	r3, [r3, #8]
   d4244:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4246:	68a3      	ldr	r3, [r4, #8]
   d4248:	3b01      	subs	r3, #1
   d424a:	60a3      	str	r3, [r4, #8]
   d424c:	b91b      	cbnz	r3, d4256 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d424e:	6823      	ldr	r3, [r4, #0]
   d4250:	4620      	mov	r0, r4
   d4252:	68db      	ldr	r3, [r3, #12]
   d4254:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4256:	4628      	mov	r0, r5
   d4258:	bd38      	pop	{r3, r4, r5, pc}
   d425a:	0000      	movs	r0, r0
   d425c:	0000      	movs	r0, r0
	...

000d4260 <setup>:
};

battery_test_struct battery_data;

void setup()
{
   d4260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Set up I/O pins:
  pinMode(intPin,INPUT);                          // Interrupt input pin (must be D2 or D3)
   d4262:	2100      	movs	r1, #0
   d4264:	2002      	movs	r0, #2
   d4266:	f001 fdc7 	bl	d5df8 <pinMode>
  pinMode(polPin,INPUT);                          // Polarity input pin
   d426a:	2100      	movs	r1, #0
   d426c:	2003      	movs	r0, #3
   d426e:	f001 fdc3 	bl	d5df8 <pinMode>
  pinMode(blueLED,OUTPUT);                        // Standard Particle status LED
   d4272:	2101      	movs	r1, #1
   d4274:	2007      	movs	r0, #7
   d4276:	f001 fdbf 	bl	d5df8 <pinMode>
  digitalWrite(blueLED,LOW);  
   d427a:	2100      	movs	r1, #0
   d427c:	2007      	movs	r0, #7
   d427e:	f001 fdcc 	bl	d5e1a <digitalWrite>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4282:	4a45      	ldr	r2, [pc, #276]	; (d4398 <setup+0x138>)
   d4284:	4945      	ldr	r1, [pc, #276]	; (d439c <setup+0x13c>)
   d4286:	4846      	ldr	r0, [pc, #280]	; (d43a0 <setup+0x140>)
   d4288:	f000 fce7 	bl	d4c5a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d428c:	4a45      	ldr	r2, [pc, #276]	; (d43a4 <setup+0x144>)
   d428e:	4946      	ldr	r1, [pc, #280]	; (d43a8 <setup+0x148>)
   d4290:	4843      	ldr	r0, [pc, #268]	; (d43a0 <setup+0x140>)
   d4292:	f000 fce2 	bl	d4c5a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4296:	4a45      	ldr	r2, [pc, #276]	; (d43ac <setup+0x14c>)
   d4298:	4945      	ldr	r1, [pc, #276]	; (d43b0 <setup+0x150>)
   d429a:	4841      	ldr	r0, [pc, #260]	; (d43a0 <setup+0x140>)
   d429c:	f000 fcdd 	bl	d4c5a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d42a0:	2300      	movs	r3, #0
   d42a2:	2204      	movs	r2, #4
   d42a4:	4943      	ldr	r1, [pc, #268]	; (d43b4 <setup+0x154>)
   d42a6:	4844      	ldr	r0, [pc, #272]	; (d43b8 <setup+0x158>)
   d42a8:	f000 fb76 	bl	d4998 <spark_variable>
   d42ac:	2300      	movs	r3, #0
   d42ae:	2204      	movs	r2, #4
   d42b0:	4942      	ldr	r1, [pc, #264]	; (d43bc <setup+0x15c>)
   d42b2:	4843      	ldr	r0, [pc, #268]	; (d43c0 <setup+0x160>)
   d42b4:	f000 fb70 	bl	d4998 <spark_variable>
  Particle.function("Reset-Test",resetTest);      // Set all the values back to start

  Particle.variable("Capacity", capacityStr);
  Particle.variable("Charge", chargeStr);                   // charge value

  attachInterrupt(intPin,myISR,FALLING);
   d42b8:	2300      	movs	r3, #0
   d42ba:	2202      	movs	r2, #2
   d42bc:	9300      	str	r3, [sp, #0]
   d42be:	4941      	ldr	r1, [pc, #260]	; (d43c4 <setup+0x164>)
   d42c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d42c4:	4610      	mov	r0, r2
   d42c6:	f000 ffed 	bl	d52a4 <_Z15attachInterrupttPFvvE13InterruptModeah>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d42ca:	f000 fb7d 	bl	d49c8 <spark_cloud_flag_connected>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d42ce:	2800      	cmp	r0, #0
   d42d0:	d05b      	beq.n	d438a <setup+0x12a>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d42d2:	4c3d      	ldr	r4, [pc, #244]	; (d43c8 <setup+0x168>)
   d42d4:	f000 fb78 	bl	d49c8 <spark_cloud_flag_connected>

  waitUntil(Particle.connected);                  // Get connected first - helps to ensure we have the right time

  EEPROM.get(0,battery_data);
   d42d8:	f001 fdcc 	bl	d5e74 <_Z21__fetch_global_EEPROMv>
   d42dc:	2214      	movs	r2, #20
   d42de:	4621      	mov	r1, r4
   d42e0:	2000      	movs	r0, #0
   d42e2:	f000 f9f5 	bl	d46d0 <HAL_EEPROM_Get>

  if (Time.now() - battery_data.startTime > 300) {    // Too much time went by, must be a new test
   d42e6:	f001 fb88 	bl	d59fa <_ZN9TimeClass3nowEv>
   d42ea:	6823      	ldr	r3, [r4, #0]
   d42ec:	1ac0      	subs	r0, r0, r3
   d42ee:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
   d42f2:	d90d      	bls.n	d4310 <setup+0xb0>
    battery_data.startTime = Time.now();            // When did we start the test
   d42f4:	f001 fb81 	bl	d59fa <_ZN9TimeClass3nowEv>
    battery_data.currentCapacity_mAh = battery_data.startingCapacity_mAh;
   d42f8:	6863      	ldr	r3, [r4, #4]
   d42fa:	60a3      	str	r3, [r4, #8]
    battery_data.currentCharge_percent = battery_data.startingCharge_percent;
   d42fc:	68e3      	ldr	r3, [r4, #12]
  waitUntil(Particle.connected);                  // Get connected first - helps to ensure we have the right time

  EEPROM.get(0,battery_data);

  if (Time.now() - battery_data.startTime > 300) {    // Too much time went by, must be a new test
    battery_data.startTime = Time.now();            // When did we start the test
   d42fe:	6020      	str	r0, [r4, #0]
    battery_data.currentCapacity_mAh = battery_data.startingCapacity_mAh;
    battery_data.currentCharge_percent = battery_data.startingCharge_percent;
   d4300:	6123      	str	r3, [r4, #16]
    EEPROM.put(0,battery_data);
   d4302:	f001 fdb7 	bl	d5e74 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4306:	2214      	movs	r2, #20
   d4308:	4621      	mov	r1, r4
   d430a:	2000      	movs	r0, #0
   d430c:	f000 f9e8 	bl	d46e0 <HAL_EEPROM_Put>
  }

  percent_quanta = 1.0/(battery_data.startingCapacity_mAh/1000.0*5859.0/100.0);   // % battery for each INT
   d4310:	6860      	ldr	r0, [r4, #4]
   d4312:	f002 f8f3 	bl	d64fc <__aeabi_f2d>
   d4316:	2200      	movs	r2, #0
   d4318:	4b2c      	ldr	r3, [pc, #176]	; (d43cc <setup+0x16c>)
   d431a:	f002 fa6d 	bl	d67f8 <__aeabi_ddiv>
   d431e:	a31c      	add	r3, pc, #112	; (adr r3, d4390 <setup+0x130>)
   d4320:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4324:	f002 f93e 	bl	d65a4 <__aeabi_dmul>
   d4328:	2200      	movs	r2, #0
   d432a:	4b29      	ldr	r3, [pc, #164]	; (d43d0 <setup+0x170>)
   d432c:	f002 fa64 	bl	d67f8 <__aeabi_ddiv>
   d4330:	4602      	mov	r2, r0
   d4332:	460b      	mov	r3, r1
   d4334:	2000      	movs	r0, #0
   d4336:	4927      	ldr	r1, [pc, #156]	; (d43d4 <setup+0x174>)
   d4338:	f002 fa5e 	bl	d67f8 <__aeabi_ddiv>
   d433c:	f002 fc2a 	bl	d6b94 <__aeabi_d2f>
   d4340:	4b25      	ldr	r3, [pc, #148]	; (d43d8 <setup+0x178>)
   d4342:	6018      	str	r0, [r3, #0]
  
  snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",battery_data.currentCapacity_mAh);
   d4344:	68a0      	ldr	r0, [r4, #8]
   d4346:	f002 f8d9 	bl	d64fc <__aeabi_f2d>
   d434a:	4a24      	ldr	r2, [pc, #144]	; (d43dc <setup+0x17c>)
   d434c:	e9cd 0100 	strd	r0, r1, [sp]
   d4350:	2110      	movs	r1, #16
   d4352:	4818      	ldr	r0, [pc, #96]	; (d43b4 <setup+0x154>)
   d4354:	f000 fbc8 	bl	d4ae8 <snprintf>
  snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",battery_data.currentCharge_percent);
   d4358:	6920      	ldr	r0, [r4, #16]
   d435a:	f002 f8cf 	bl	d64fc <__aeabi_f2d>
   d435e:	4a20      	ldr	r2, [pc, #128]	; (d43e0 <setup+0x180>)
   d4360:	e9cd 0100 	strd	r0, r1, [sp]
   d4364:	2110      	movs	r1, #16
   d4366:	4815      	ldr	r0, [pc, #84]	; (d43bc <setup+0x15c>)
   d4368:	f000 fbbe 	bl	d4ae8 <snprintf>
   d436c:	4b1d      	ldr	r3, [pc, #116]	; (d43e4 <setup+0x184>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d436e:	4a1e      	ldr	r2, [pc, #120]	; (d43e8 <setup+0x188>)
   d4370:	781b      	ldrb	r3, [r3, #0]
   d4372:	f88d 3000 	strb.w	r3, [sp]
   d4376:	491d      	ldr	r1, [pc, #116]	; (d43ec <setup+0x18c>)
   d4378:	233c      	movs	r3, #60	; 0x3c
   d437a:	a802      	add	r0, sp, #8
   d437c:	f000 fd8e 	bl	d4e9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4380:	a803      	add	r0, sp, #12
   d4382:	f7ff ff54 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  Particle.publish("Startup","LTC4150 Coulomb Counter",PRIVATE);
}
   d4386:	b004      	add	sp, #16
   d4388:	bd10      	pop	{r4, pc}
            spark_process();
   d438a:	f000 fb15 	bl	d49b8 <spark_process>
   d438e:	e79c      	b.n	d42ca <setup+0x6a>
   d4390:	00000000 	.word	0x00000000
   d4394:	40b6e300 	.word	0x40b6e300
   d4398:	000d916f 	.word	0x000d916f
   d439c:	000d4511 	.word	0x000d4511
   d43a0:	000d4c2f 	.word	0x000d4c2f
   d43a4:	000d917c 	.word	0x000d917c
   d43a8:	000d4599 	.word	0x000d4599
   d43ac:	000d9187 	.word	0x000d9187
   d43b0:	000d4185 	.word	0x000d4185
   d43b4:	2003e220 	.word	0x2003e220
   d43b8:	000d9173 	.word	0x000d9173
   d43bc:	2003e230 	.word	0x2003e230
   d43c0:	000d9180 	.word	0x000d9180
   d43c4:	000d40b9 	.word	0x000d40b9
   d43c8:	2003e340 	.word	0x2003e340
   d43cc:	408f4000 	.word	0x408f4000
   d43d0:	40590000 	.word	0x40590000
   d43d4:	3ff00000 	.word	0x3ff00000
   d43d8:	2003e360 	.word	0x2003e360
   d43dc:	000d915c 	.word	0x000d915c
   d43e0:	000d9166 	.word	0x000d9166
   d43e4:	2003e358 	.word	0x2003e358
   d43e8:	000d9192 	.word	0x000d9192
   d43ec:	000d91aa 	.word	0x000d91aa

000d43f0 <_Z13publishResultv>:
    snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",battery_data.currentCapacity_mAh);
    snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",battery_data.currentCharge_percent);
  }
}

void publishResult() {
   d43f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d43f4:	b0a4      	sub	sp, #144	; 0x90
  char data[96];
  int elapsedSec = Time.now() - battery_data.startTime;
   d43f6:	f001 fb00 	bl	d59fa <_ZN9TimeClass3nowEv>
   d43fa:	4b21      	ldr	r3, [pc, #132]	; (d4480 <_Z13publishResultv+0x90>)
   d43fc:	681c      	ldr	r4, [r3, #0]
  snprintf(data, sizeof(data), "Status: %4.0f mAh, %3.1f%% charge, %4.3f mA at time %i:%i:%i:%i seconds", battery_data.currentCapacity_mAh, battery_data.currentCharge_percent, mA, Time.day(elapsedSec)-1, Time.hour(elapsedSec), Time.minute(elapsedSec), Time.second(elapsedSec));
   d43fe:	689e      	ldr	r6, [r3, #8]
   d4400:	691f      	ldr	r7, [r3, #16]
   d4402:	4b20      	ldr	r3, [pc, #128]	; (d4484 <_Z13publishResultv+0x94>)
  }
}

void publishResult() {
  char data[96];
  int elapsedSec = Time.now() - battery_data.startTime;
   d4404:	1b04      	subs	r4, r0, r4
  snprintf(data, sizeof(data), "Status: %4.0f mAh, %3.1f%% charge, %4.3f mA at time %i:%i:%i:%i seconds", battery_data.currentCapacity_mAh, battery_data.currentCharge_percent, mA, Time.day(elapsedSec)-1, Time.hour(elapsedSec), Time.minute(elapsedSec), Time.second(elapsedSec));
   d4406:	4620      	mov	r0, r4
   d4408:	f8d3 8000 	ldr.w	r8, [r3]
   d440c:	f001 facc 	bl	d59a8 <_ZN9TimeClass3dayEl>
   d4410:	4605      	mov	r5, r0
   d4412:	4620      	mov	r0, r4
   d4414:	f001 fab0 	bl	d5978 <_ZN9TimeClass4hourEl>
   d4418:	4681      	mov	r9, r0
   d441a:	4620      	mov	r0, r4
   d441c:	f001 fab4 	bl	d5988 <_ZN9TimeClass6minuteEl>
   d4420:	4682      	mov	sl, r0
   d4422:	4620      	mov	r0, r4
   d4424:	f001 fab8 	bl	d5998 <_ZN9TimeClass6secondEl>
   d4428:	3d01      	subs	r5, #1
   d442a:	9009      	str	r0, [sp, #36]	; 0x24
   d442c:	4640      	mov	r0, r8
   d442e:	f8cd a020 	str.w	sl, [sp, #32]
   d4432:	f8cd 901c 	str.w	r9, [sp, #28]
   d4436:	9506      	str	r5, [sp, #24]
   d4438:	f002 f860 	bl	d64fc <__aeabi_f2d>
   d443c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4440:	4638      	mov	r0, r7
   d4442:	f002 f85b 	bl	d64fc <__aeabi_f2d>
   d4446:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d444a:	4630      	mov	r0, r6
   d444c:	f002 f856 	bl	d64fc <__aeabi_f2d>
   d4450:	4a0d      	ldr	r2, [pc, #52]	; (d4488 <_Z13publishResultv+0x98>)
   d4452:	e9cd 0100 	strd	r0, r1, [sp]
   d4456:	2160      	movs	r1, #96	; 0x60
   d4458:	a80c      	add	r0, sp, #48	; 0x30
   d445a:	f000 fb45 	bl	d4ae8 <snprintf>
   d445e:	4b0b      	ldr	r3, [pc, #44]	; (d448c <_Z13publishResultv+0x9c>)
   d4460:	490b      	ldr	r1, [pc, #44]	; (d4490 <_Z13publishResultv+0xa0>)
   d4462:	781b      	ldrb	r3, [r3, #0]
   d4464:	f88d 3000 	strb.w	r3, [sp]
   d4468:	aa0c      	add	r2, sp, #48	; 0x30
   d446a:	233c      	movs	r3, #60	; 0x3c
   d446c:	a80a      	add	r0, sp, #40	; 0x28
   d446e:	f000 fd15 	bl	d4e9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4472:	a80b      	add	r0, sp, #44	; 0x2c
   d4474:	f7ff fedb 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.publish("Status",data,PRIVATE);
}
   d4478:	b024      	add	sp, #144	; 0x90
   d447a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d447e:	bf00      	nop
   d4480:	2003e340 	.word	0x2003e340
   d4484:	2003e35c 	.word	0x2003e35c
   d4488:	000d91b2 	.word	0x000d91b2
   d448c:	2003e358 	.word	0x2003e358
   d4490:	000d91fa 	.word	0x000d91fa

000d4494 <loop>:

  Particle.publish("Startup","LTC4150 Coulomb Counter",PRIVATE);
}

void loop()
{
   d4494:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (isrflag) {
   d4496:	4b18      	ldr	r3, [pc, #96]	; (d44f8 <loop+0x64>)
   d4498:	781a      	ldrb	r2, [r3, #0]
   d449a:	b352      	cbz	r2, d44f2 <loop+0x5e>
    isrflag = false;                              // Reset the flag to false so we only do this once per INT
   d449c:	2500      	movs	r5, #0
    // Blink the LED
    digitalWrite(blueLED,HIGH);
   d449e:	2101      	movs	r1, #1
   d44a0:	2007      	movs	r0, #7
}

void loop()
{
  if (isrflag) {
    isrflag = false;                              // Reset the flag to false so we only do this once per INT
   d44a2:	701d      	strb	r5, [r3, #0]
   d44a4:	4c15      	ldr	r4, [pc, #84]	; (d44fc <loop+0x68>)
    // Blink the LED
    digitalWrite(blueLED,HIGH);
   d44a6:	f001 fcb8 	bl	d5e1a <digitalWrite>
    delay(100);
   d44aa:	2064      	movs	r0, #100	; 0x64
   d44ac:	f000 fb34 	bl	d4b18 <delay>
    digitalWrite(blueLED,LOW);
   d44b0:	4629      	mov	r1, r5
   d44b2:	2007      	movs	r0, #7
   d44b4:	f001 fcb1 	bl	d5e1a <digitalWrite>
    publishResult();                              // Print out current status (variables set by myISR())
   d44b8:	f7ff ff9a 	bl	d43f0 <_Z13publishResultv>
    EEPROM.put(0,battery_data);                   // Write the value to EEPROM
   d44bc:	f001 fcda 	bl	d5e74 <_Z21__fetch_global_EEPROMv>
   d44c0:	2214      	movs	r2, #20
   d44c2:	4621      	mov	r1, r4
   d44c4:	4628      	mov	r0, r5
   d44c6:	f000 f90b 	bl	d46e0 <HAL_EEPROM_Put>
    snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",battery_data.currentCapacity_mAh);
   d44ca:	68a0      	ldr	r0, [r4, #8]
   d44cc:	f002 f816 	bl	d64fc <__aeabi_f2d>
   d44d0:	4a0b      	ldr	r2, [pc, #44]	; (d4500 <loop+0x6c>)
   d44d2:	e9cd 0100 	strd	r0, r1, [sp]
   d44d6:	2110      	movs	r1, #16
   d44d8:	480a      	ldr	r0, [pc, #40]	; (d4504 <loop+0x70>)
   d44da:	f000 fb05 	bl	d4ae8 <snprintf>
    snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",battery_data.currentCharge_percent);
   d44de:	6920      	ldr	r0, [r4, #16]
   d44e0:	f002 f80c 	bl	d64fc <__aeabi_f2d>
   d44e4:	4a08      	ldr	r2, [pc, #32]	; (d4508 <loop+0x74>)
   d44e6:	e9cd 0100 	strd	r0, r1, [sp]
   d44ea:	2110      	movs	r1, #16
   d44ec:	4807      	ldr	r0, [pc, #28]	; (d450c <loop+0x78>)
   d44ee:	f000 fafb 	bl	d4ae8 <snprintf>
  }
}
   d44f2:	b003      	add	sp, #12
   d44f4:	bd30      	pop	{r4, r5, pc}
   d44f6:	bf00      	nop
   d44f8:	2003e368 	.word	0x2003e368
   d44fc:	2003e340 	.word	0x2003e340
   d4500:	000d915c 	.word	0x000d915c
   d4504:	2003e220 	.word	0x2003e220
   d4508:	000d9166 	.word	0x000d9166
   d450c:	2003e230 	.word	0x2003e230

000d4510 <_Z11setCapacity6String>:
  // Set isrflag so main loop knows an interrupt occurred
  isrflag = true;
}

int setCapacity(String command)
{
   d4510:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  char * pEND;
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
   d4512:	a903      	add	r1, sp, #12
   d4514:	6800      	ldr	r0, [r0, #0]
   d4516:	f003 fb3b 	bl	d7b90 <strtof>
  if ((inputValue < 0.0) || (inputValue > 6000.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d451a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d451e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4522:	d427      	bmi.n	d4574 <_Z11setCapacity6String+0x64>
   d4524:	eddf 7a16 	vldr	s15, [pc, #88]	; d4580 <_Z11setCapacity6String+0x70>
   d4528:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d452c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4530:	dc20      	bgt.n	d4574 <_Z11setCapacity6String+0x64>
  battery_data.startingCapacity_mAh = inputValue;                                              // Assign the input to the battery capacity variable
   d4532:	4b14      	ldr	r3, [pc, #80]	; (d4584 <_Z11setCapacity6String+0x74>)
  snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",battery_data.startingCapacity_mAh);
   d4534:	ee10 0a10 	vmov	r0, s0
int setCapacity(String command)
{
  char * pEND;
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
  if ((inputValue < 0.0) || (inputValue > 6000.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
  battery_data.startingCapacity_mAh = inputValue;                                              // Assign the input to the battery capacity variable
   d4538:	ed83 0a01 	vstr	s0, [r3, #4]
  snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",battery_data.startingCapacity_mAh);
   d453c:	f001 ffde 	bl	d64fc <__aeabi_f2d>
   d4540:	4a11      	ldr	r2, [pc, #68]	; (d4588 <_Z11setCapacity6String+0x78>)
   d4542:	e9cd 0100 	strd	r0, r1, [sp]
   d4546:	2110      	movs	r1, #16
   d4548:	4810      	ldr	r0, [pc, #64]	; (d458c <_Z11setCapacity6String+0x7c>)
   d454a:	f000 facd 	bl	d4ae8 <snprintf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d454e:	f000 fa3b 	bl	d49c8 <spark_cloud_flag_connected>
  if (Particle.connected()) {                                            // Publish result if feeling verbose
   d4552:	b188      	cbz	r0, d4578 <_Z11setCapacity6String+0x68>
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
   d4554:	f7ff fe60 	bl	d4218 <_ZN11SystemClass18waitConditionWhileIZ9setCharge6StringEUlvE_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.13>
   d4558:	4b0d      	ldr	r3, [pc, #52]	; (d4590 <_Z11setCapacity6String+0x80>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d455a:	4a0c      	ldr	r2, [pc, #48]	; (d458c <_Z11setCapacity6String+0x7c>)
   d455c:	781b      	ldrb	r3, [r3, #0]
   d455e:	f88d 3000 	strb.w	r3, [sp]
   d4562:	a804      	add	r0, sp, #16
   d4564:	233c      	movs	r3, #60	; 0x3c
   d4566:	490b      	ldr	r1, [pc, #44]	; (d4594 <_Z11setCapacity6String+0x84>)
   d4568:	f000 fc98 	bl	d4e9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d456c:	a805      	add	r0, sp, #20
   d456e:	f7ff fe5e 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4572:	e001      	b.n	d4578 <_Z11setCapacity6String+0x68>

int setCapacity(String command)
{
  char * pEND;
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
  if ((inputValue < 0.0) || (inputValue > 6000.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4574:	2000      	movs	r0, #0
   d4576:	e000      	b.n	d457a <_Z11setCapacity6String+0x6a>
  snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",battery_data.startingCapacity_mAh);
  if (Particle.connected()) {                                            // Publish result if feeling verbose
    waitUntil(meterParticlePublish);
    Particle.publish("Capacity",capacityStr, PRIVATE);
  }
  return 1;
   d4578:	2001      	movs	r0, #1
}
   d457a:	b007      	add	sp, #28
   d457c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4580:	45bb8000 	.word	0x45bb8000
   d4584:	2003e340 	.word	0x2003e340
   d4588:	000d915c 	.word	0x000d915c
   d458c:	2003e220 	.word	0x2003e220
   d4590:	2003e358 	.word	0x2003e358
   d4594:	000d9173 	.word	0x000d9173

000d4598 <_Z9setCharge6String>:

int setCharge(String command)
{
   d4598:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  char * pEND;
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
   d459a:	a903      	add	r1, sp, #12
   d459c:	6800      	ldr	r0, [r0, #0]
   d459e:	f003 faf7 	bl	d7b90 <strtof>
  if ((inputValue < 0.0) || (inputValue > 100.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d45a2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d45a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d45aa:	d427      	bmi.n	d45fc <_Z9setCharge6String+0x64>
   d45ac:	eddf 7a16 	vldr	s15, [pc, #88]	; d4608 <_Z9setCharge6String+0x70>
   d45b0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d45b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d45b8:	dc20      	bgt.n	d45fc <_Z9setCharge6String+0x64>
  battery_data.startingCharge_percent = inputValue;                                              // Assign the input to the battery capacity variable
   d45ba:	4b14      	ldr	r3, [pc, #80]	; (d460c <_Z9setCharge6String+0x74>)
  snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",battery_data.startingCharge_percent);
   d45bc:	ee10 0a10 	vmov	r0, s0
int setCharge(String command)
{
  char * pEND;
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
  if ((inputValue < 0.0) || (inputValue > 100.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
  battery_data.startingCharge_percent = inputValue;                                              // Assign the input to the battery capacity variable
   d45c0:	ed83 0a03 	vstr	s0, [r3, #12]
  snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",battery_data.startingCharge_percent);
   d45c4:	f001 ff9a 	bl	d64fc <__aeabi_f2d>
   d45c8:	4a11      	ldr	r2, [pc, #68]	; (d4610 <_Z9setCharge6String+0x78>)
   d45ca:	e9cd 0100 	strd	r0, r1, [sp]
   d45ce:	2110      	movs	r1, #16
   d45d0:	4810      	ldr	r0, [pc, #64]	; (d4614 <_Z9setCharge6String+0x7c>)
   d45d2:	f000 fa89 	bl	d4ae8 <snprintf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d45d6:	f000 f9f7 	bl	d49c8 <spark_cloud_flag_connected>
  if (Particle.connected()) {                                            // Publish result if feeling verbose
   d45da:	b188      	cbz	r0, d4600 <_Z9setCharge6String+0x68>
   d45dc:	f7ff fe1c 	bl	d4218 <_ZN11SystemClass18waitConditionWhileIZ9setCharge6StringEUlvE_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.13>
   d45e0:	4b0d      	ldr	r3, [pc, #52]	; (d4618 <_Z9setCharge6String+0x80>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d45e2:	4a0c      	ldr	r2, [pc, #48]	; (d4614 <_Z9setCharge6String+0x7c>)
   d45e4:	781b      	ldrb	r3, [r3, #0]
   d45e6:	f88d 3000 	strb.w	r3, [sp]
   d45ea:	a804      	add	r0, sp, #16
   d45ec:	233c      	movs	r3, #60	; 0x3c
   d45ee:	490b      	ldr	r1, [pc, #44]	; (d461c <_Z9setCharge6String+0x84>)
   d45f0:	f000 fc54 	bl	d4e9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d45f4:	a805      	add	r0, sp, #20
   d45f6:	f7ff fe1a 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d45fa:	e001      	b.n	d4600 <_Z9setCharge6String+0x68>

int setCharge(String command)
{
  char * pEND;
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
  if ((inputValue < 0.0) || (inputValue > 100.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d45fc:	2000      	movs	r0, #0
   d45fe:	e000      	b.n	d4602 <_Z9setCharge6String+0x6a>
  snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",battery_data.startingCharge_percent);
  if (Particle.connected()) {                                            // Publish result if feeling verbose
    waitUntil(meterParticlePublish);
    Particle.publish("Charge",chargeStr, PRIVATE);
  }
  return 1;
   d4600:	2001      	movs	r0, #1
}
   d4602:	b007      	add	sp, #28
   d4604:	f85d fb04 	ldr.w	pc, [sp], #4
   d4608:	42c80000 	.word	0x42c80000
   d460c:	2003e340 	.word	0x2003e340
   d4610:	000d9166 	.word	0x000d9166
   d4614:	2003e230 	.word	0x2003e230
   d4618:	2003e358 	.word	0x2003e358
   d461c:	000d9180 	.word	0x000d9180

000d4620 <_GLOBAL__sub_I_capacityStr>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4620:	4b02      	ldr	r3, [pc, #8]	; (d462c <_GLOBAL__sub_I_capacityStr+0xc>)
   d4622:	2201      	movs	r2, #1
   d4624:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4626:	f000 b86b 	b.w	d4700 <HAL_Pin_Map>
   d462a:	bf00      	nop
   d462c:	2003e358 	.word	0x2003e358

000d4630 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <os_thread_is_current+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	689b      	ldr	r3, [r3, #8]
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	00030248 	.word	0x00030248

000d4640 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <os_thread_join+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	691b      	ldr	r3, [r3, #16]
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	00030248 	.word	0x00030248

000d4650 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b02      	ldr	r3, [pc, #8]	; (d465c <os_thread_cleanup+0xc>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	695b      	ldr	r3, [r3, #20]
   d4658:	9301      	str	r3, [sp, #4]
   d465a:	bd08      	pop	{r3, pc}
   d465c:	00030248 	.word	0x00030248

000d4660 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <os_mutex_recursive_create+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	00030248 	.word	0x00030248

000d4670 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4670:	b508      	push	{r3, lr}
   d4672:	4b02      	ldr	r3, [pc, #8]	; (d467c <os_mutex_recursive_destroy+0xc>)
   d4674:	681b      	ldr	r3, [r3, #0]
   d4676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4678:	9301      	str	r3, [sp, #4]
   d467a:	bd08      	pop	{r3, pc}
   d467c:	00030248 	.word	0x00030248

000d4680 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4680:	b508      	push	{r3, lr}
   d4682:	4b02      	ldr	r3, [pc, #8]	; (d468c <HAL_RNG_GetRandomNumber+0xc>)
   d4684:	681b      	ldr	r3, [r3, #0]
   d4686:	685b      	ldr	r3, [r3, #4]
   d4688:	9301      	str	r3, [sp, #4]
   d468a:	bd08      	pop	{r3, pc}
   d468c:	00030218 	.word	0x00030218

000d4690 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b02      	ldr	r3, [pc, #8]	; (d469c <HAL_Timer_Get_Micro_Seconds+0xc>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	691b      	ldr	r3, [r3, #16]
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	bd08      	pop	{r3, pc}
   d469c:	00030218 	.word	0x00030218

000d46a0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b02      	ldr	r3, [pc, #8]	; (d46ac <HAL_Timer_Get_Milli_Seconds+0xc>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	695b      	ldr	r3, [r3, #20]
   d46a8:	9301      	str	r3, [sp, #4]
   d46aa:	bd08      	pop	{r3, pc}
   d46ac:	00030218 	.word	0x00030218

000d46b0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b02      	ldr	r3, [pc, #8]	; (d46bc <HAL_RTC_Get_UnixTime+0xc>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	69db      	ldr	r3, [r3, #28]
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	00030218 	.word	0x00030218

000d46c0 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <HAL_EEPROM_Init+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	00030218 	.word	0x00030218

000d46d0 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <HAL_EEPROM_Get+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	00030218 	.word	0x00030218

000d46e0 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <HAL_EEPROM_Put+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	00030218 	.word	0x00030218

000d46f0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <HAL_RTC_Time_Is_Valid+0xc>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d46f8:	9301      	str	r3, [sp, #4]
   d46fa:	bd08      	pop	{r3, pc}
   d46fc:	00030218 	.word	0x00030218

000d4700 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <HAL_Pin_Map+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	681b      	ldr	r3, [r3, #0]
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	0003022c 	.word	0x0003022c

000d4710 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <HAL_Pin_Mode+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	689b      	ldr	r3, [r3, #8]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	0003022c 	.word	0x0003022c

000d4720 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <HAL_Get_Pin_Mode+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	68db      	ldr	r3, [r3, #12]
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	0003022c 	.word	0x0003022c

000d4730 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <HAL_GPIO_Write+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	691b      	ldr	r3, [r3, #16]
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	0003022c 	.word	0x0003022c

000d4740 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <HAL_GPIO_Read+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	695b      	ldr	r3, [r3, #20]
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	0003022c 	.word	0x0003022c

000d4750 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <HAL_Interrupts_Attach+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	699b      	ldr	r3, [r3, #24]
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	0003022c 	.word	0x0003022c

000d4760 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <HAL_Interrupts_Detach+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	69db      	ldr	r3, [r3, #28]
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	0003022c 	.word	0x0003022c

000d4770 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <HAL_I2C_Write_Data+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	6a1b      	ldr	r3, [r3, #32]
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	00030228 	.word	0x00030228

000d4780 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <HAL_I2C_Available_Data+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	00030228 	.word	0x00030228

000d4790 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <HAL_I2C_Read_Data+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	00030228 	.word	0x00030228

000d47a0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <HAL_I2C_Peek_Data+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	00030228 	.word	0x00030228

000d47b0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <HAL_I2C_Flush_Data+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	00030228 	.word	0x00030228

000d47c0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <HAL_I2C_Is_Enabled+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	00030228 	.word	0x00030228

000d47d0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <HAL_I2C_Init+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	00030228 	.word	0x00030228

000d47e0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <inet_inet_ntop+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	695b      	ldr	r3, [r3, #20]
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	00030264 	.word	0x00030264

000d47f0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <netdb_freeaddrinfo+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	689b      	ldr	r3, [r3, #8]
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	00030268 	.word	0x00030268

000d4800 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <netdb_getaddrinfo+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	68db      	ldr	r3, [r3, #12]
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	00030268 	.word	0x00030268

000d4810 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <HAL_SPI_Init+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	69db      	ldr	r3, [r3, #28]
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	00030230 	.word	0x00030230

000d4820 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <HAL_SPI_Is_Enabled+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	6a1b      	ldr	r3, [r3, #32]
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	00030230 	.word	0x00030230

000d4830 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <HAL_USART_Init+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	681b      	ldr	r3, [r3, #0]
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	0003023c 	.word	0x0003023c

000d4840 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <HAL_USART_Write_Data+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	68db      	ldr	r3, [r3, #12]
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	0003023c 	.word	0x0003023c

000d4850 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <HAL_USART_Available_Data+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	691b      	ldr	r3, [r3, #16]
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	0003023c 	.word	0x0003023c

000d4860 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <HAL_USART_Read_Data+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	695b      	ldr	r3, [r3, #20]
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	0003023c 	.word	0x0003023c

000d4870 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <HAL_USART_Peek_Data+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	699b      	ldr	r3, [r3, #24]
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	0003023c 	.word	0x0003023c

000d4880 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <HAL_USART_Flush_Data+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	69db      	ldr	r3, [r3, #28]
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	0003023c 	.word	0x0003023c

000d4890 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <HAL_USART_Is_Enabled+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	6a1b      	ldr	r3, [r3, #32]
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	0003023c 	.word	0x0003023c

000d48a0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <HAL_USART_Available_Data_For_Write+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	0003023c 	.word	0x0003023c

000d48b0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <HAL_USB_USART_Init+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	681b      	ldr	r3, [r3, #0]
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	0003024c 	.word	0x0003024c

000d48c0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <HAL_USB_USART_Available_Data+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	691b      	ldr	r3, [r3, #16]
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	0003024c 	.word	0x0003024c

000d48d0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	695b      	ldr	r3, [r3, #20]
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	0003024c 	.word	0x0003024c

000d48e0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <HAL_USB_USART_Receive_Data+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	699b      	ldr	r3, [r3, #24]
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	0003024c 	.word	0x0003024c

000d48f0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b02      	ldr	r3, [pc, #8]	; (d48fc <HAL_USB_USART_Send_Data+0xc>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	69db      	ldr	r3, [r3, #28]
   d48f8:	9301      	str	r3, [sp, #4]
   d48fa:	bd08      	pop	{r3, pc}
   d48fc:	0003024c 	.word	0x0003024c

000d4900 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b02      	ldr	r3, [pc, #8]	; (d490c <HAL_USB_USART_Flush_Data+0xc>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	6a1b      	ldr	r3, [r3, #32]
   d4908:	9301      	str	r3, [sp, #4]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	0003024c 	.word	0x0003024c

000d4910 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b02      	ldr	r3, [pc, #8]	; (d491c <system_mode+0xc>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	681b      	ldr	r3, [r3, #0]
   d4918:	9301      	str	r3, [sp, #4]
   d491a:	bd08      	pop	{r3, pc}
   d491c:	00030220 	.word	0x00030220

000d4920 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4920:	b508      	push	{r3, lr}
   d4922:	4b02      	ldr	r3, [pc, #8]	; (d492c <set_system_mode+0xc>)
   d4924:	681b      	ldr	r3, [r3, #0]
   d4926:	685b      	ldr	r3, [r3, #4]
   d4928:	9301      	str	r3, [sp, #4]
   d492a:	bd08      	pop	{r3, pc}
   d492c:	00030220 	.word	0x00030220

000d4930 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b02      	ldr	r3, [pc, #8]	; (d493c <system_delay_ms+0xc>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	695b      	ldr	r3, [r3, #20]
   d4938:	9301      	str	r3, [sp, #4]
   d493a:	bd08      	pop	{r3, pc}
   d493c:	00030220 	.word	0x00030220

000d4940 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4940:	b508      	push	{r3, lr}
   d4942:	4b02      	ldr	r3, [pc, #8]	; (d494c <application_thread_current+0xc>)
   d4944:	681b      	ldr	r3, [r3, #0]
   d4946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4948:	9301      	str	r3, [sp, #4]
   d494a:	bd08      	pop	{r3, pc}
   d494c:	00030220 	.word	0x00030220

000d4950 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4950:	b508      	push	{r3, lr}
   d4952:	4b02      	ldr	r3, [pc, #8]	; (d495c <application_thread_invoke+0xc>)
   d4954:	681b      	ldr	r3, [r3, #0]
   d4956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4958:	9301      	str	r3, [sp, #4]
   d495a:	bd08      	pop	{r3, pc}
   d495c:	00030220 	.word	0x00030220

000d4960 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4960:	b508      	push	{r3, lr}
   d4962:	4b02      	ldr	r3, [pc, #8]	; (d496c <system_thread_get_state+0xc>)
   d4964:	681b      	ldr	r3, [r3, #0]
   d4966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4968:	9301      	str	r3, [sp, #4]
   d496a:	bd08      	pop	{r3, pc}
   d496c:	00030220 	.word	0x00030220

000d4970 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4970:	b508      	push	{r3, lr}
   d4972:	4b03      	ldr	r3, [pc, #12]	; (d4980 <system_ctrl_set_app_request_handler+0x10>)
   d4974:	681b      	ldr	r3, [r3, #0]
   d4976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d497a:	9301      	str	r3, [sp, #4]
   d497c:	bd08      	pop	{r3, pc}
   d497e:	0000      	.short	0x0000
   d4980:	00030220 	.word	0x00030220

000d4984 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b03      	ldr	r3, [pc, #12]	; (d4994 <system_ctrl_set_result+0x10>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d498e:	9301      	str	r3, [sp, #4]
   d4990:	bd08      	pop	{r3, pc}
   d4992:	0000      	.short	0x0000
   d4994:	00030220 	.word	0x00030220

000d4998 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <spark_variable+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	681b      	ldr	r3, [r3, #0]
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	00030244 	.word	0x00030244

000d49a8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <spark_function+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	685b      	ldr	r3, [r3, #4]
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	00030244 	.word	0x00030244

000d49b8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <spark_process+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	689b      	ldr	r3, [r3, #8]
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	00030244 	.word	0x00030244

000d49c8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <spark_cloud_flag_connected+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	695b      	ldr	r3, [r3, #20]
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	00030244 	.word	0x00030244

000d49d8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <spark_send_event+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	6a1b      	ldr	r3, [r3, #32]
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	00030244 	.word	0x00030244

000d49e8 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <spark_sync_time_pending+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	00030244 	.word	0x00030244

000d49f8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <spark_set_random_seed_from_cloud_handler+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	00030244 	.word	0x00030244

000d4a08 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <network_connect+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	685b      	ldr	r3, [r3, #4]
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	00030240 	.word	0x00030240

000d4a18 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <network_connecting+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	689b      	ldr	r3, [r3, #8]
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	00030240 	.word	0x00030240

000d4a28 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b02      	ldr	r3, [pc, #8]	; (d4a34 <network_disconnect+0xc>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	68db      	ldr	r3, [r3, #12]
   d4a30:	9301      	str	r3, [sp, #4]
   d4a32:	bd08      	pop	{r3, pc}
   d4a34:	00030240 	.word	0x00030240

000d4a38 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4a38:	b508      	push	{r3, lr}
   d4a3a:	4b02      	ldr	r3, [pc, #8]	; (d4a44 <network_ready+0xc>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	691b      	ldr	r3, [r3, #16]
   d4a40:	9301      	str	r3, [sp, #4]
   d4a42:	bd08      	pop	{r3, pc}
   d4a44:	00030240 	.word	0x00030240

000d4a48 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a48:	b508      	push	{r3, lr}
   d4a4a:	4b02      	ldr	r3, [pc, #8]	; (d4a54 <network_on+0xc>)
   d4a4c:	681b      	ldr	r3, [r3, #0]
   d4a4e:	695b      	ldr	r3, [r3, #20]
   d4a50:	9301      	str	r3, [sp, #4]
   d4a52:	bd08      	pop	{r3, pc}
   d4a54:	00030240 	.word	0x00030240

000d4a58 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a58:	b508      	push	{r3, lr}
   d4a5a:	4b02      	ldr	r3, [pc, #8]	; (d4a64 <network_off+0xc>)
   d4a5c:	681b      	ldr	r3, [r3, #0]
   d4a5e:	699b      	ldr	r3, [r3, #24]
   d4a60:	9301      	str	r3, [sp, #4]
   d4a62:	bd08      	pop	{r3, pc}
   d4a64:	00030240 	.word	0x00030240

000d4a68 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4a68:	b508      	push	{r3, lr}
   d4a6a:	4b02      	ldr	r3, [pc, #8]	; (d4a74 <network_listen+0xc>)
   d4a6c:	681b      	ldr	r3, [r3, #0]
   d4a6e:	69db      	ldr	r3, [r3, #28]
   d4a70:	9301      	str	r3, [sp, #4]
   d4a72:	bd08      	pop	{r3, pc}
   d4a74:	00030240 	.word	0x00030240

000d4a78 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4a78:	b508      	push	{r3, lr}
   d4a7a:	4b02      	ldr	r3, [pc, #8]	; (d4a84 <network_listening+0xc>)
   d4a7c:	681b      	ldr	r3, [r3, #0]
   d4a7e:	6a1b      	ldr	r3, [r3, #32]
   d4a80:	9301      	str	r3, [sp, #4]
   d4a82:	bd08      	pop	{r3, pc}
   d4a84:	00030240 	.word	0x00030240

000d4a88 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4a88:	b508      	push	{r3, lr}
   d4a8a:	4b02      	ldr	r3, [pc, #8]	; (d4a94 <network_set_listen_timeout+0xc>)
   d4a8c:	681b      	ldr	r3, [r3, #0]
   d4a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a90:	9301      	str	r3, [sp, #4]
   d4a92:	bd08      	pop	{r3, pc}
   d4a94:	00030240 	.word	0x00030240

000d4a98 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4a98:	b508      	push	{r3, lr}
   d4a9a:	4b02      	ldr	r3, [pc, #8]	; (d4aa4 <network_get_listen_timeout+0xc>)
   d4a9c:	681b      	ldr	r3, [r3, #0]
   d4a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4aa0:	9301      	str	r3, [sp, #4]
   d4aa2:	bd08      	pop	{r3, pc}
   d4aa4:	00030240 	.word	0x00030240

000d4aa8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4aa8:	b508      	push	{r3, lr}
   d4aaa:	4b02      	ldr	r3, [pc, #8]	; (d4ab4 <malloc+0xc>)
   d4aac:	681b      	ldr	r3, [r3, #0]
   d4aae:	681b      	ldr	r3, [r3, #0]
   d4ab0:	9301      	str	r3, [sp, #4]
   d4ab2:	bd08      	pop	{r3, pc}
   d4ab4:	0003021c 	.word	0x0003021c

000d4ab8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4ab8:	b508      	push	{r3, lr}
   d4aba:	4b02      	ldr	r3, [pc, #8]	; (d4ac4 <free+0xc>)
   d4abc:	681b      	ldr	r3, [r3, #0]
   d4abe:	685b      	ldr	r3, [r3, #4]
   d4ac0:	9301      	str	r3, [sp, #4]
   d4ac2:	bd08      	pop	{r3, pc}
   d4ac4:	0003021c 	.word	0x0003021c

000d4ac8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4ac8:	b508      	push	{r3, lr}
   d4aca:	4b02      	ldr	r3, [pc, #8]	; (d4ad4 <realloc+0xc>)
   d4acc:	681b      	ldr	r3, [r3, #0]
   d4ace:	689b      	ldr	r3, [r3, #8]
   d4ad0:	9301      	str	r3, [sp, #4]
   d4ad2:	bd08      	pop	{r3, pc}
   d4ad4:	0003021c 	.word	0x0003021c

000d4ad8 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d4ad8:	b508      	push	{r3, lr}
   d4ada:	4b02      	ldr	r3, [pc, #8]	; (d4ae4 <siscanf+0xc>)
   d4adc:	681b      	ldr	r3, [r3, #0]
   d4ade:	699b      	ldr	r3, [r3, #24]
   d4ae0:	9301      	str	r3, [sp, #4]
   d4ae2:	bd08      	pop	{r3, pc}
   d4ae4:	0003021c 	.word	0x0003021c

000d4ae8 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d4ae8:	b508      	push	{r3, lr}
   d4aea:	4b02      	ldr	r3, [pc, #8]	; (d4af4 <snprintf+0xc>)
   d4aec:	681b      	ldr	r3, [r3, #0]
   d4aee:	69db      	ldr	r3, [r3, #28]
   d4af0:	9301      	str	r3, [sp, #4]
   d4af2:	bd08      	pop	{r3, pc}
   d4af4:	0003021c 	.word	0x0003021c

000d4af8 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4af8:	b508      	push	{r3, lr}
   d4afa:	4b02      	ldr	r3, [pc, #8]	; (d4b04 <abort+0xc>)
   d4afc:	681b      	ldr	r3, [r3, #0]
   d4afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b00:	9301      	str	r3, [sp, #4]
   d4b02:	bd08      	pop	{r3, pc}
   d4b04:	0003021c 	.word	0x0003021c

000d4b08 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4b08:	b508      	push	{r3, lr}
   d4b0a:	4b02      	ldr	r3, [pc, #8]	; (d4b14 <_malloc_r+0xc>)
   d4b0c:	681b      	ldr	r3, [r3, #0]
   d4b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b10:	9301      	str	r3, [sp, #4]
   d4b12:	bd08      	pop	{r3, pc}
   d4b14:	0003021c 	.word	0x0003021c

000d4b18 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4b18:	2100      	movs	r1, #0
   d4b1a:	f7ff bf09 	b.w	d4930 <system_delay_ms>

000d4b1e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4b1e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4b20:	6883      	ldr	r3, [r0, #8]
   d4b22:	4604      	mov	r4, r0
   d4b24:	b90b      	cbnz	r3, d4b2a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4b26:	f001 fa3a 	bl	d5f9e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b2a:	68c3      	ldr	r3, [r0, #12]
   d4b2c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4b2e:	68a3      	ldr	r3, [r4, #8]
   d4b30:	b11b      	cbz	r3, d4b3a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4b32:	2203      	movs	r2, #3
   d4b34:	4621      	mov	r1, r4
   d4b36:	4620      	mov	r0, r4
   d4b38:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4b3a:	4620      	mov	r0, r4
   d4b3c:	2110      	movs	r1, #16
}
   d4b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4b42:	f001 ba10 	b.w	d5f66 <_ZdlPvj>

000d4b46 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4b46:	b510      	push	{r4, lr}
   d4b48:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4b4a:	6800      	ldr	r0, [r0, #0]
   d4b4c:	b108      	cbz	r0, d4b52 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4b4e:	f7ff fd8f 	bl	d4670 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4b52:	4620      	mov	r0, r4
   d4b54:	bd10      	pop	{r4, pc}

000d4b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4b56:	680b      	ldr	r3, [r1, #0]
   d4b58:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4b5a:	b113      	cbz	r3, d4b62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4b5c:	685a      	ldr	r2, [r3, #4]
   d4b5e:	3201      	adds	r2, #1
   d4b60:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4b62:	4770      	bx	lr

000d4b64 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4b64:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4b66:	4c06      	ldr	r4, [pc, #24]	; (d4b80 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4b68:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4b6a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4b6c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4b6e:	f7ff fd77 	bl	d4660 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4b72:	4620      	mov	r0, r4
   d4b74:	4a03      	ldr	r2, [pc, #12]	; (d4b84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4b76:	4904      	ldr	r1, [pc, #16]	; (d4b88 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4b7c:	f001 b9ee 	b.w	d5f5c <__aeabi_atexit>
   d4b80:	2003e36c 	.word	0x2003e36c
   d4b84:	2003e334 	.word	0x2003e334
   d4b88:	000d4b47 	.word	0x000d4b47

000d4b8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4b8c:	4770      	bx	lr

000d4b8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4b8e:	2000      	movs	r0, #0
   d4b90:	4770      	bx	lr

000d4b92 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4b92:	b510      	push	{r4, lr}
   d4b94:	2110      	movs	r1, #16
   d4b96:	4604      	mov	r4, r0
   d4b98:	f001 f9e5 	bl	d5f66 <_ZdlPvj>
   d4b9c:	4620      	mov	r0, r4
   d4b9e:	bd10      	pop	{r4, pc}

000d4ba0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4ba0:	b508      	push	{r3, lr}
      { delete this; }
   d4ba2:	b108      	cbz	r0, d4ba8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4ba4:	f7ff fff5 	bl	d4b92 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4ba8:	bd08      	pop	{r3, pc}

000d4baa <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4baa:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4bac:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4bae:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4bb0:	b113      	cbz	r3, d4bb8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4bb2:	2203      	movs	r2, #3
   d4bb4:	4601      	mov	r1, r0
   d4bb6:	4798      	blx	r3
    }
   d4bb8:	4620      	mov	r0, r4
   d4bba:	bd10      	pop	{r4, pc}

000d4bbc <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4bbc:	2200      	movs	r2, #0
   d4bbe:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4bc0:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4bc2:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4bc6:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4bc8:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4bcc:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4bce:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4bd0:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4bd2:	680c      	ldr	r4, [r1, #0]
   d4bd4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4bd6:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4bd8:	bd10      	pop	{r4, pc}

000d4bda <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4bda:	b510      	push	{r4, lr}
   d4bdc:	4604      	mov	r4, r0
    free((void*)msg_);
   d4bde:	6800      	ldr	r0, [r0, #0]
   d4be0:	f7ff ff6a 	bl	d4ab8 <free>
}
   d4be4:	4620      	mov	r0, r4
   d4be6:	bd10      	pop	{r4, pc}

000d4be8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4be8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4bea:	68c4      	ldr	r4, [r0, #12]
   d4bec:	b1f4      	cbz	r4, d4c2c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4bee:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4bf0:	2b02      	cmp	r3, #2
   d4bf2:	d103      	bne.n	d4bfc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4bf4:	f104 000c 	add.w	r0, r4, #12
   d4bf8:	f7ff ffef 	bl	d4bda <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4bfc:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4bfe:	b135      	cbz	r5, d4c0e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c00:	4628      	mov	r0, r5
   d4c02:	f7ff ffd2 	bl	d4baa <_ZNSt14_Function_baseD1Ev>
   d4c06:	2110      	movs	r1, #16
   d4c08:	4628      	mov	r0, r5
   d4c0a:	f001 f9ac 	bl	d5f66 <_ZdlPvj>
   d4c0e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4c10:	b135      	cbz	r5, d4c20 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4c12:	4628      	mov	r0, r5
   d4c14:	f7ff ffc9 	bl	d4baa <_ZNSt14_Function_baseD1Ev>
   d4c18:	2110      	movs	r1, #16
   d4c1a:	4628      	mov	r0, r5
   d4c1c:	f001 f9a3 	bl	d5f66 <_ZdlPvj>
   d4c20:	4620      	mov	r0, r4
   d4c22:	2114      	movs	r1, #20
   d4c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4c28:	f001 b99d 	b.w	d5f66 <_ZdlPvj>
   d4c2c:	bd38      	pop	{r3, r4, r5, pc}

000d4c2e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d4c2e:	b510      	push	{r4, lr}
   d4c30:	b088      	sub	sp, #32
   d4c32:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4c34:	4668      	mov	r0, sp
   d4c36:	f000 fdf7 	bl	d5828 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d4c3a:	4669      	mov	r1, sp
   d4c3c:	a804      	add	r0, sp, #16
   d4c3e:	f000 fe15 	bl	d586c <_ZN6StringC1ERKS_>
   d4c42:	a804      	add	r0, sp, #16
   d4c44:	47a0      	blx	r4
   d4c46:	4604      	mov	r4, r0
   d4c48:	a804      	add	r0, sp, #16
   d4c4a:	f000 fda6 	bl	d579a <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4c4e:	4668      	mov	r0, sp
   d4c50:	f000 fda3 	bl	d579a <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d4c54:	4620      	mov	r0, r4
   d4c56:	b008      	add	sp, #32
   d4c58:	bd10      	pop	{r4, pc}

000d4c5a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4c5a:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d4c5c:	2410      	movs	r4, #16
   d4c5e:	b085      	sub	sp, #20
   d4c60:	4607      	mov	r7, r0
   d4c62:	460e      	mov	r6, r1
   d4c64:	4615      	mov	r5, r2
   d4c66:	2100      	movs	r1, #0
   d4c68:	4622      	mov	r2, r4
   d4c6a:	4668      	mov	r0, sp
   d4c6c:	f002 f8f7 	bl	d6e5e <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4c70:	2200      	movs	r2, #0
   d4c72:	4669      	mov	r1, sp
   d4c74:	4610      	mov	r0, r2
         size = sizeof(*this);
   d4c76:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d4c7a:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d4c7c:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d4c7e:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4c80:	f7ff fe92 	bl	d49a8 <spark_function>
}
   d4c84:	b005      	add	sp, #20
   d4c86:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4c88 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4c88:	b513      	push	{r0, r1, r4, lr}
   d4c8a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4c8c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4c90:	2300      	movs	r3, #0
   d4c92:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4c94:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4c96:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4c98:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4c9a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4c9c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4c9e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ca0:	f7ff fac5 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ca4:	4620      	mov	r0, r4
   d4ca6:	b002      	add	sp, #8
   d4ca8:	bd10      	pop	{r4, pc}

000d4caa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4caa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4cac:	460c      	mov	r4, r1
   d4cae:	ad02      	add	r5, sp, #8
   d4cb0:	f854 3b04 	ldr.w	r3, [r4], #4
   d4cb4:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4cb8:	4606      	mov	r6, r0
   d4cba:	460f      	mov	r7, r1
   d4cbc:	a801      	add	r0, sp, #4
   d4cbe:	4621      	mov	r1, r4
   d4cc0:	f7ff ff49 	bl	d4b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4cc4:	4629      	mov	r1, r5
   d4cc6:	4630      	mov	r0, r6
   d4cc8:	f7ff ffde 	bl	d4c88 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ccc:	a801      	add	r0, sp, #4
   d4cce:	f7ff faae 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4cd2:	4620      	mov	r0, r4
   d4cd4:	f7ff faab 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4cd8:	4638      	mov	r0, r7
   d4cda:	2108      	movs	r1, #8
   d4cdc:	f001 f943 	bl	d5f66 <_ZdlPvj>
        return p;
    }
   d4ce0:	4630      	mov	r0, r6
   d4ce2:	b003      	add	sp, #12
   d4ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ce6 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4ce6:	b513      	push	{r0, r1, r4, lr}
   d4ce8:	460b      	mov	r3, r1
   d4cea:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4cec:	c803      	ldmia	r0, {r0, r1}
   d4cee:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4cf2:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4cf6:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4cfa:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4cfe:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4d02:	b002      	add	sp, #8
   d4d04:	bd10      	pop	{r4, pc}
	...

000d4d08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4d08:	b538      	push	{r3, r4, r5, lr}
   d4d0a:	2300      	movs	r3, #0
   d4d0c:	4604      	mov	r4, r0
   d4d0e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4d10:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4d12:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4d14:	f7ff f9c1 	bl	d409a <_Znwj>
   d4d18:	b128      	cbz	r0, d4d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4d1a:	2301      	movs	r3, #1
   d4d1c:	6043      	str	r3, [r0, #4]
   d4d1e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4d20:	4b02      	ldr	r3, [pc, #8]	; (d4d2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4d22:	6003      	str	r3, [r0, #0]
   d4d24:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4d26:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4d28:	4620      	mov	r0, r4
   d4d2a:	bd38      	pop	{r3, r4, r5, pc}
   d4d2c:	000d920c 	.word	0x000d920c

000d4d30 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4d30:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4d32:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4d34:	b90a      	cbnz	r2, d4d3a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4d36:	f001 f932 	bl	d5f9e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d3a:	68c3      	ldr	r3, [r0, #12]
    }
   d4d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d40:	4718      	bx	r3

000d4d42 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4d42:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4d44:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4d46:	f100 0110 	add.w	r1, r0, #16
   d4d4a:	f7ff fff1 	bl	d4d30 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4d4e:	bd08      	pop	{r3, pc}

000d4d50 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4d50:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4d52:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4d54:	b90a      	cbnz	r2, d4d5a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4d56:	f001 f922 	bl	d5f9e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d5a:	68c3      	ldr	r3, [r0, #12]
    }
   d4d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d60:	4718      	bx	r3

000d4d62 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4d62:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4d64:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4d66:	f100 0110 	add.w	r1, r0, #16
   d4d6a:	f7ff fff1 	bl	d4d50 <_ZNKSt8functionIFvRKbEEclES1_>
   d4d6e:	bd08      	pop	{r3, pc}

000d4d70 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4d70:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4d72:	2300      	movs	r3, #0
   d4d74:	6083      	str	r3, [r0, #8]
   d4d76:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4d78:	4604      	mov	r4, r0
   d4d7a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4d7c:	b12b      	cbz	r3, d4d8a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4d7e:	2202      	movs	r2, #2
   d4d80:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4d82:	68eb      	ldr	r3, [r5, #12]
   d4d84:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4d86:	68ab      	ldr	r3, [r5, #8]
   d4d88:	60a3      	str	r3, [r4, #8]
	}
    }
   d4d8a:	4620      	mov	r0, r4
   d4d8c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4d90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4d90:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4d92:	b089      	sub	sp, #36	; 0x24
   d4d94:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4d96:	4668      	mov	r0, sp
   d4d98:	f7ff ff10 	bl	d4bbc <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4d9c:	2300      	movs	r3, #0
   d4d9e:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4da2:	f04f 0202 	mov.w	r2, #2
   d4da6:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4daa:	2b00      	cmp	r3, #0
   d4dac:	d103      	bne.n	d4db6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4dae:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4db2:	2900      	cmp	r1, #0
   d4db4:	d1f7      	bne.n	d4da6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4db6:	d002      	beq.n	d4dbe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4db8:	f88d 3008 	strb.w	r3, [sp, #8]
   d4dbc:	e063      	b.n	d4e86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4dbe:	f114 050c 	adds.w	r5, r4, #12
   d4dc2:	d003      	beq.n	d4dcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4dc4:	4669      	mov	r1, sp
   d4dc6:	4628      	mov	r0, r5
   d4dc8:	f7ff fef8 	bl	d4bbc <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4dcc:	f3bf 8f5f 	dmb	sy
   d4dd0:	2301      	movs	r3, #1
   d4dd2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4dd4:	2000      	movs	r0, #0
   d4dd6:	f104 0308 	add.w	r3, r4, #8
   d4dda:	f3bf 8f5f 	dmb	sy
   d4dde:	e853 6f00 	ldrex	r6, [r3]
   d4de2:	e843 0200 	strex	r2, r0, [r3]
   d4de6:	2a00      	cmp	r2, #0
   d4de8:	d1f9      	bne.n	d4dde <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4dea:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4dee:	2e00      	cmp	r6, #0
   d4df0:	d049      	beq.n	d4e86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4df2:	f7ff fda5 	bl	d4940 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4df6:	b120      	cbz	r0, d4e02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4df8:	4629      	mov	r1, r5
   d4dfa:	4630      	mov	r0, r6
   d4dfc:	f7ff ff98 	bl	d4d30 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4e00:	e03a      	b.n	d4e78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4e02:	4631      	mov	r1, r6
   d4e04:	a802      	add	r0, sp, #8
   d4e06:	f7ff ffb3 	bl	d4d70 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4e0a:	68e0      	ldr	r0, [r4, #12]
   d4e0c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4e10:	b108      	cbz	r0, d4e16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4e12:	f002 f867 	bl	d6ee4 <strdup>
   d4e16:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4e18:	2010      	movs	r0, #16
   d4e1a:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4e1e:	f7ff f93c 	bl	d409a <_Znwj>
   d4e22:	4605      	mov	r5, r0
   d4e24:	b1e8      	cbz	r0, d4e62 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e26:	2700      	movs	r7, #0
   d4e28:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4e2a:	2018      	movs	r0, #24
   d4e2c:	f7ff f935 	bl	d409a <_Znwj>
   d4e30:	4604      	mov	r4, r0
   d4e32:	b188      	cbz	r0, d4e58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4e34:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e36:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4e38:	a802      	add	r0, sp, #8
   d4e3a:	f7ff ff54 	bl	d4ce6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e3e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4e40:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e42:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e44:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4e46:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4e48:	a906      	add	r1, sp, #24
   d4e4a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e4c:	60e3      	str	r3, [r4, #12]
   d4e4e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4e52:	9205      	str	r2, [sp, #20]
   d4e54:	f7ff feb2 	bl	d4bbc <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4e58:	4b0d      	ldr	r3, [pc, #52]	; (d4e90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4e5a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4e5c:	4b0d      	ldr	r3, [pc, #52]	; (d4e94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4e5e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4e60:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d4e62:	a806      	add	r0, sp, #24
   d4e64:	f7ff feb9 	bl	d4bda <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e68:	a802      	add	r0, sp, #8
   d4e6a:	f7ff fe9e 	bl	d4baa <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4e6e:	2200      	movs	r2, #0
   d4e70:	4629      	mov	r1, r5
   d4e72:	4809      	ldr	r0, [pc, #36]	; (d4e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d4e74:	f7ff fd6c 	bl	d4950 <application_thread_invoke>
   d4e78:	4630      	mov	r0, r6
   d4e7a:	f7ff fe96 	bl	d4baa <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4e7e:	2110      	movs	r1, #16
   d4e80:	4630      	mov	r0, r6
   d4e82:	f001 f870 	bl	d5f66 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d4e86:	4668      	mov	r0, sp
   d4e88:	f7ff fea7 	bl	d4bda <_ZN8particle5ErrorD1Ev>
    }
   d4e8c:	b009      	add	sp, #36	; 0x24
   d4e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4e90:	000d4d43 	.word	0x000d4d43
   d4e94:	000d4fb9 	.word	0x000d4fb9
   d4e98:	000d4b1f 	.word	0x000d4b1f

000d4e9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ea0:	b08b      	sub	sp, #44	; 0x2c
   d4ea2:	4606      	mov	r6, r0
   d4ea4:	460f      	mov	r7, r1
   d4ea6:	4690      	mov	r8, r2
   d4ea8:	4699      	mov	r9, r3
   d4eaa:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4eae:	f7ff fd8b 	bl	d49c8 <spark_cloud_flag_connected>
   d4eb2:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d4eb4:	4683      	mov	fp, r0
   d4eb6:	bb30      	cbnz	r0, d4f06 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4eb8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4ebc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4ebe:	a905      	add	r1, sp, #20
   d4ec0:	4628      	mov	r0, r5
   d4ec2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4ec6:	f7ff fe79 	bl	d4bbc <_ZN8particle5ErrorC1EOS0_>
   d4eca:	2014      	movs	r0, #20
   d4ecc:	f7ff f8e5 	bl	d409a <_Znwj>
   d4ed0:	4604      	mov	r4, r0
   d4ed2:	b158      	cbz	r0, d4eec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4ed4:	2302      	movs	r3, #2
   d4ed6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4ed8:	2301      	movs	r3, #1
   d4eda:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4edc:	f8c0 b004 	str.w	fp, [r0, #4]
   d4ee0:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d4ee4:	4629      	mov	r1, r5
   d4ee6:	300c      	adds	r0, #12
   d4ee8:	f7ff fe68 	bl	d4bbc <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4eec:	4630      	mov	r0, r6
   d4eee:	4621      	mov	r1, r4
   d4ef0:	f840 4b04 	str.w	r4, [r0], #4
   d4ef4:	f7ff ff08 	bl	d4d08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4ef8:	4628      	mov	r0, r5
   d4efa:	f7ff fe6e 	bl	d4bda <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4efe:	a805      	add	r0, sp, #20
   d4f00:	f7ff fe6b 	bl	d4bda <_ZN8particle5ErrorD1Ev>
   d4f04:	e052      	b.n	d4fac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4f06:	2400      	movs	r4, #0
   d4f08:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4f0a:	2014      	movs	r0, #20
   d4f0c:	606c      	str	r4, [r5, #4]
   d4f0e:	60ac      	str	r4, [r5, #8]
   d4f10:	9307      	str	r3, [sp, #28]
   d4f12:	f7ff f8c2 	bl	d409a <_Znwj>
   d4f16:	4601      	mov	r1, r0
   d4f18:	b118      	cbz	r0, d4f22 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d4f1a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f1c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4f1e:	6044      	str	r4, [r0, #4]
   d4f20:	6084      	str	r4, [r0, #8]
   d4f22:	a804      	add	r0, sp, #16
   d4f24:	9103      	str	r1, [sp, #12]
   d4f26:	f7ff feef 	bl	d4d08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4f2a:	4b22      	ldr	r3, [pc, #136]	; (d4fb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d4f2c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4f2e:	2008      	movs	r0, #8
   d4f30:	f7ff f8b3 	bl	d409a <_Znwj>
   d4f34:	4604      	mov	r4, r0
   d4f36:	b128      	cbz	r0, d4f44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f38:	9b03      	ldr	r3, [sp, #12]
   d4f3a:	f840 3b04 	str.w	r3, [r0], #4
   d4f3e:	a904      	add	r1, sp, #16
   d4f40:	f7ff fe09 	bl	d4b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4f44:	9500      	str	r5, [sp, #0]
   d4f46:	fa5f f38a 	uxtb.w	r3, sl
   d4f4a:	464a      	mov	r2, r9
   d4f4c:	4641      	mov	r1, r8
   d4f4e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4f50:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4f52:	f7ff fd41 	bl	d49d8 <spark_send_event>
   d4f56:	b920      	cbnz	r0, d4f62 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4f58:	9b03      	ldr	r3, [sp, #12]
   d4f5a:	785b      	ldrb	r3, [r3, #1]
   d4f5c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4f60:	b183      	cbz	r3, d4f84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d4f62:	9b03      	ldr	r3, [sp, #12]
   d4f64:	9305      	str	r3, [sp, #20]
   d4f66:	a904      	add	r1, sp, #16
   d4f68:	a806      	add	r0, sp, #24
   d4f6a:	f7ff fdf4 	bl	d4b56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4f6e:	a905      	add	r1, sp, #20
   d4f70:	4630      	mov	r0, r6
   d4f72:	f7ff fe89 	bl	d4c88 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f76:	a806      	add	r0, sp, #24
   d4f78:	f7ff f959 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f7c:	a804      	add	r0, sp, #16
   d4f7e:	f7ff f956 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f82:	e013      	b.n	d4fac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d4f84:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4f88:	a905      	add	r1, sp, #20
   d4f8a:	a803      	add	r0, sp, #12
   d4f8c:	9205      	str	r2, [sp, #20]
   d4f8e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4f92:	f7ff fefd 	bl	d4d90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4f96:	a805      	add	r0, sp, #20
   d4f98:	f7ff fe1f 	bl	d4bda <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4f9c:	a805      	add	r0, sp, #20
   d4f9e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4fa0:	f7ff fe83 	bl	d4caa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d4fa4:	a806      	add	r0, sp, #24
   d4fa6:	f7ff f942 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4faa:	e7da      	b.n	d4f62 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d4fac:	4630      	mov	r0, r6
   d4fae:	b00b      	add	sp, #44	; 0x2c
   d4fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4fb4:	000d5129 	.word	0x000d5129

000d4fb8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4fb8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4fbc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4fbe:	d006      	beq.n	d4fce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4fc0:	2a03      	cmp	r2, #3
   d4fc2:	d017      	beq.n	d4ff4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4fc4:	2a01      	cmp	r2, #1
   d4fc6:	d122      	bne.n	d500e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4fc8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4fca:	6003      	str	r3, [r0, #0]
	      break;
   d4fcc:	e01f      	b.n	d500e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4fce:	2018      	movs	r0, #24
   d4fd0:	680e      	ldr	r6, [r1, #0]
   d4fd2:	f7ff f862 	bl	d409a <_Znwj>
   d4fd6:	4605      	mov	r5, r0
   d4fd8:	b150      	cbz	r0, d4ff0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4fda:	4631      	mov	r1, r6
   d4fdc:	f7ff fec8 	bl	d4d70 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4fe0:	6930      	ldr	r0, [r6, #16]
   d4fe2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4fe6:	b108      	cbz	r0, d4fec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4fe8:	f001 ff7c 	bl	d6ee4 <strdup>
   d4fec:	6128      	str	r0, [r5, #16]
   d4fee:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4ff0:	6025      	str	r5, [r4, #0]
   d4ff2:	e00c      	b.n	d500e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4ff4:	6804      	ldr	r4, [r0, #0]
   d4ff6:	b154      	cbz	r4, d500e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d4ff8:	f104 0010 	add.w	r0, r4, #16
   d4ffc:	f7ff fded 	bl	d4bda <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5000:	4620      	mov	r0, r4
   d5002:	f7ff fdd2 	bl	d4baa <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5006:	2118      	movs	r1, #24
   d5008:	4620      	mov	r0, r4
   d500a:	f000 ffac 	bl	d5f66 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d500e:	2000      	movs	r0, #0
   d5010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5012 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5012:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5014:	2300      	movs	r3, #0
   d5016:	6083      	str	r3, [r0, #8]
   d5018:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d501a:	4604      	mov	r4, r0
   d501c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d501e:	b12b      	cbz	r3, d502c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5020:	2202      	movs	r2, #2
   d5022:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5024:	68eb      	ldr	r3, [r5, #12]
   d5026:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5028:	68ab      	ldr	r3, [r5, #8]
   d502a:	60a3      	str	r3, [r4, #8]
	}
    }
   d502c:	4620      	mov	r0, r4
   d502e:	bd38      	pop	{r3, r4, r5, pc}

000d5030 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5030:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5032:	b570      	push	{r4, r5, r6, lr}
   d5034:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5036:	d006      	beq.n	d5046 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5038:	2a03      	cmp	r2, #3
   d503a:	d011      	beq.n	d5060 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d503c:	2a01      	cmp	r2, #1
   d503e:	d118      	bne.n	d5072 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5040:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5042:	6003      	str	r3, [r0, #0]
	      break;
   d5044:	e015      	b.n	d5072 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5046:	2014      	movs	r0, #20
   d5048:	680e      	ldr	r6, [r1, #0]
   d504a:	f7ff f826 	bl	d409a <_Znwj>
   d504e:	4605      	mov	r5, r0
   d5050:	b120      	cbz	r0, d505c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5052:	4631      	mov	r1, r6
   d5054:	f7ff ffdd 	bl	d5012 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5058:	7c33      	ldrb	r3, [r6, #16]
   d505a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d505c:	6025      	str	r5, [r4, #0]
   d505e:	e008      	b.n	d5072 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5060:	6804      	ldr	r4, [r0, #0]
   d5062:	b134      	cbz	r4, d5072 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5064:	4620      	mov	r0, r4
   d5066:	f7ff fda0 	bl	d4baa <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d506a:	2114      	movs	r1, #20
   d506c:	4620      	mov	r0, r4
   d506e:	f000 ff7a 	bl	d5f66 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5072:	2000      	movs	r0, #0
   d5074:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5078 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5078:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d507a:	2300      	movs	r3, #0
   d507c:	b087      	sub	sp, #28
   d507e:	460c      	mov	r4, r1
   d5080:	f3bf 8f5f 	dmb	sy
   d5084:	e850 6f00 	ldrex	r6, [r0]
   d5088:	e840 3200 	strex	r2, r3, [r0]
   d508c:	2a00      	cmp	r2, #0
   d508e:	d1f9      	bne.n	d5084 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5090:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5094:	2e00      	cmp	r6, #0
   d5096:	d03f      	beq.n	d5118 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5098:	4618      	mov	r0, r3
   d509a:	f7ff fc51 	bl	d4940 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d509e:	4607      	mov	r7, r0
   d50a0:	b120      	cbz	r0, d50ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d50a2:	4621      	mov	r1, r4
   d50a4:	4630      	mov	r0, r6
   d50a6:	f7ff fe53 	bl	d4d50 <_ZNKSt8functionIFvRKbEEclES1_>
   d50aa:	e02e      	b.n	d510a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d50ac:	4631      	mov	r1, r6
   d50ae:	a801      	add	r0, sp, #4
   d50b0:	f7ff ffaf 	bl	d5012 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d50b4:	7823      	ldrb	r3, [r4, #0]
   d50b6:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d50ba:	2010      	movs	r0, #16
   d50bc:	f7fe ffed 	bl	d409a <_Znwj>
   d50c0:	4605      	mov	r5, r0
   d50c2:	b1d0      	cbz	r0, d50fa <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d50c4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d50c6:	2014      	movs	r0, #20
   d50c8:	f7fe ffe7 	bl	d409a <_Znwj>
   d50cc:	4604      	mov	r4, r0
   d50ce:	b178      	cbz	r0, d50f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d50d0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d50d2:	4601      	mov	r1, r0
   d50d4:	a801      	add	r0, sp, #4
   d50d6:	f7ff fe06 	bl	d4ce6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50da:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d50dc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d50de:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50e0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d50e2:	9203      	str	r2, [sp, #12]
   d50e4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d50e6:	60e3      	str	r3, [r4, #12]
   d50e8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d50ec:	9204      	str	r2, [sp, #16]
   d50ee:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d50f0:	4b0a      	ldr	r3, [pc, #40]	; (d511c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d50f2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d50f4:	4b0a      	ldr	r3, [pc, #40]	; (d5120 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d50f6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d50f8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d50fa:	a801      	add	r0, sp, #4
   d50fc:	f7ff fd55 	bl	d4baa <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5100:	2200      	movs	r2, #0
   d5102:	4629      	mov	r1, r5
   d5104:	4807      	ldr	r0, [pc, #28]	; (d5124 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5106:	f7ff fc23 	bl	d4950 <application_thread_invoke>
   d510a:	4630      	mov	r0, r6
   d510c:	f7ff fd4d 	bl	d4baa <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5110:	2110      	movs	r1, #16
   d5112:	4630      	mov	r0, r6
   d5114:	f000 ff27 	bl	d5f66 <_ZdlPvj>
        }
    }
   d5118:	b007      	add	sp, #28
   d511a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d511c:	000d4d63 	.word	0x000d4d63
   d5120:	000d5031 	.word	0x000d5031
   d5124:	000d4b1f 	.word	0x000d4b1f

000d5128 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5128:	b530      	push	{r4, r5, lr}
   d512a:	b085      	sub	sp, #20
   d512c:	4604      	mov	r4, r0
   d512e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5130:	4668      	mov	r0, sp
   d5132:	4611      	mov	r1, r2
   d5134:	f7ff fdb9 	bl	d4caa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5138:	b17c      	cbz	r4, d515a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d513a:	b224      	sxth	r4, r4
   d513c:	4628      	mov	r0, r5
   d513e:	b10d      	cbz	r5, d5144 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5140:	f001 fed0 	bl	d6ee4 <strdup>
   d5144:	9002      	str	r0, [sp, #8]
   d5146:	a902      	add	r1, sp, #8
   d5148:	4668      	mov	r0, sp
   d514a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d514e:	f7ff fe1f 	bl	d4d90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5152:	a802      	add	r0, sp, #8
   d5154:	f7ff fd41 	bl	d4bda <_ZN8particle5ErrorD1Ev>
   d5158:	e01d      	b.n	d5196 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d515a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d515c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5160:	f04f 0201 	mov.w	r2, #1
   d5164:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5168:	42a3      	cmp	r3, r4
   d516a:	d103      	bne.n	d5174 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d516c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5170:	2900      	cmp	r1, #0
   d5172:	d1f7      	bne.n	d5164 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5174:	d002      	beq.n	d517c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5176:	f88d 3008 	strb.w	r3, [sp, #8]
   d517a:	e00c      	b.n	d5196 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d517c:	f110 010c 	adds.w	r1, r0, #12
   d5180:	f04f 0301 	mov.w	r3, #1
   d5184:	bf18      	it	ne
   d5186:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5188:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d518c:	3004      	adds	r0, #4
   d518e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5192:	f7ff ff71 	bl	d5078 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5196:	a801      	add	r0, sp, #4
   d5198:	f7ff f849 	bl	d422e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d519c:	b005      	add	sp, #20
   d519e:	bd30      	pop	{r4, r5, pc}

000d51a0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d51a0:	2200      	movs	r2, #0
   d51a2:	4611      	mov	r1, r2
   d51a4:	6840      	ldr	r0, [r0, #4]
   d51a6:	f7ff bc67 	b.w	d4a78 <network_listening>

000d51aa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d51aa:	2200      	movs	r2, #0
   d51ac:	4611      	mov	r1, r2
   d51ae:	6840      	ldr	r0, [r0, #4]
   d51b0:	f7ff bc72 	b.w	d4a98 <network_get_listen_timeout>

000d51b4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d51b4:	2200      	movs	r2, #0
   d51b6:	6840      	ldr	r0, [r0, #4]
   d51b8:	f7ff bc66 	b.w	d4a88 <network_set_listen_timeout>

000d51bc <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d51bc:	2200      	movs	r2, #0
   d51be:	f081 0101 	eor.w	r1, r1, #1
   d51c2:	6840      	ldr	r0, [r0, #4]
   d51c4:	f7ff bc50 	b.w	d4a68 <network_listen>

000d51c8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d51c8:	2300      	movs	r3, #0
   d51ca:	461a      	mov	r2, r3
   d51cc:	4619      	mov	r1, r3
   d51ce:	6840      	ldr	r0, [r0, #4]
   d51d0:	f7ff bc42 	b.w	d4a58 <network_off>

000d51d4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d51d4:	2300      	movs	r3, #0
   d51d6:	461a      	mov	r2, r3
   d51d8:	4619      	mov	r1, r3
   d51da:	6840      	ldr	r0, [r0, #4]
   d51dc:	f7ff bc34 	b.w	d4a48 <network_on>

000d51e0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d51e0:	2200      	movs	r2, #0
   d51e2:	4611      	mov	r1, r2
   d51e4:	6840      	ldr	r0, [r0, #4]
   d51e6:	f7ff bc27 	b.w	d4a38 <network_ready>

000d51ea <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d51ea:	2200      	movs	r2, #0
   d51ec:	4611      	mov	r1, r2
   d51ee:	6840      	ldr	r0, [r0, #4]
   d51f0:	f7ff bc12 	b.w	d4a18 <network_connecting>

000d51f4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d51f4:	2200      	movs	r2, #0
   d51f6:	2102      	movs	r1, #2
   d51f8:	6840      	ldr	r0, [r0, #4]
   d51fa:	f7ff bc15 	b.w	d4a28 <network_disconnect>

000d51fe <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d51fe:	2300      	movs	r3, #0
   d5200:	461a      	mov	r2, r3
   d5202:	6840      	ldr	r0, [r0, #4]
   d5204:	f7ff bc00 	b.w	d4a08 <network_connect>

000d5208 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5208:	4b02      	ldr	r3, [pc, #8]	; (d5214 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d520a:	2203      	movs	r2, #3
   d520c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d520e:	4a02      	ldr	r2, [pc, #8]	; (d5218 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5210:	601a      	str	r2, [r3, #0]
   d5212:	4770      	bx	lr
   d5214:	2003e370 	.word	0x2003e370
   d5218:	000d9228 	.word	0x000d9228

000d521c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d521c:	4770      	bx	lr

000d521e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d521e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5220:	4606      	mov	r6, r0
   d5222:	4615      	mov	r5, r2
   d5224:	460c      	mov	r4, r1
   d5226:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5228:	42bc      	cmp	r4, r7
   d522a:	d006      	beq.n	d523a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d522c:	6833      	ldr	r3, [r6, #0]
   d522e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5232:	689b      	ldr	r3, [r3, #8]
   d5234:	4630      	mov	r0, r6
   d5236:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5238:	e7f6      	b.n	d5228 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d523a:	4628      	mov	r0, r5
   d523c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d523e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d523e:	2200      	movs	r2, #0
   d5240:	7c00      	ldrb	r0, [r0, #16]
   d5242:	f7ff ba95 	b.w	d4770 <HAL_I2C_Write_Data>

000d5246 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5246:	2100      	movs	r1, #0
   d5248:	7c00      	ldrb	r0, [r0, #16]
   d524a:	f7ff ba99 	b.w	d4780 <HAL_I2C_Available_Data>

000d524e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d524e:	2100      	movs	r1, #0
   d5250:	7c00      	ldrb	r0, [r0, #16]
   d5252:	f7ff ba9d 	b.w	d4790 <HAL_I2C_Read_Data>

000d5256 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5256:	2100      	movs	r1, #0
   d5258:	7c00      	ldrb	r0, [r0, #16]
   d525a:	f7ff baa1 	b.w	d47a0 <HAL_I2C_Peek_Data>

000d525e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d525e:	2100      	movs	r1, #0
   d5260:	7c00      	ldrb	r0, [r0, #16]
   d5262:	f7ff baa5 	b.w	d47b0 <HAL_I2C_Flush_Data>

000d5266 <_ZN7TwoWireD0Ev>:
   d5266:	b510      	push	{r4, lr}
   d5268:	2114      	movs	r1, #20
   d526a:	4604      	mov	r4, r0
   d526c:	f000 fe7b 	bl	d5f66 <_ZdlPvj>
   d5270:	4620      	mov	r0, r4
   d5272:	bd10      	pop	{r4, pc}

000d5274 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5274:	b510      	push	{r4, lr}
   d5276:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5278:	2300      	movs	r3, #0
   d527a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d527c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5280:	60a3      	str	r3, [r4, #8]
   d5282:	4b04      	ldr	r3, [pc, #16]	; (d5294 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5284:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5286:	4608      	mov	r0, r1
   d5288:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d528a:	4611      	mov	r1, r2
   d528c:	f7ff faa0 	bl	d47d0 <HAL_I2C_Init>
}
   d5290:	4620      	mov	r0, r4
   d5292:	bd10      	pop	{r4, pc}
   d5294:	000d925c 	.word	0x000d925c

000d5298 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5298:	2100      	movs	r1, #0
   d529a:	7c00      	ldrb	r0, [r0, #16]
   d529c:	f7ff ba90 	b.w	d47c0 <HAL_I2C_Is_Enabled>

000d52a0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d52a0:	4700      	bx	r0
	...

000d52a4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d52a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d52a6:	b085      	sub	sp, #20
   d52a8:	461c      	mov	r4, r3
   d52aa:	460e      	mov	r6, r1
   d52ac:	4617      	mov	r7, r2
   d52ae:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d52b0:	f7ff fa56 	bl	d4760 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d52b4:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d52b6:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d52b8:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d52bc:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d52be:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d52c2:	bfa5      	ittet	ge
   d52c4:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d52c8:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d52cc:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d52ce:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d52d0:	9300      	str	r3, [sp, #0]
   d52d2:	4632      	mov	r2, r6
   d52d4:	463b      	mov	r3, r7
   d52d6:	4906      	ldr	r1, [pc, #24]	; (d52f0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d52d8:	bfa8      	it	ge
   d52da:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d52de:	4628      	mov	r0, r5
   d52e0:	f7ff fa36 	bl	d4750 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d52e4:	fab0 f080 	clz	r0, r0
   d52e8:	0940      	lsrs	r0, r0, #5
   d52ea:	b005      	add	sp, #20
   d52ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d52ee:	bf00      	nop
   d52f0:	000d52a1 	.word	0x000d52a1

000d52f4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d52f4:	4770      	bx	lr

000d52f6 <_ZN9IPAddressD0Ev>:
   d52f6:	b510      	push	{r4, lr}
   d52f8:	2118      	movs	r1, #24
   d52fa:	4604      	mov	r4, r0
   d52fc:	f000 fe33 	bl	d5f66 <_ZdlPvj>
   d5300:	4620      	mov	r0, r4
   d5302:	bd10      	pop	{r4, pc}

000d5304 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5304:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5306:	7d03      	ldrb	r3, [r0, #20]
   d5308:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d530a:	b08d      	sub	sp, #52	; 0x34
   d530c:	460e      	mov	r6, r1
   d530e:	f100 0704 	add.w	r7, r0, #4
   d5312:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5316:	d002      	beq.n	d531e <_ZNK9IPAddress7printToER5Print+0x1a>
   d5318:	f100 0508 	add.w	r5, r0, #8
   d531c:	e018      	b.n	d5350 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d531e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5320:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5322:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5326:	232f      	movs	r3, #47	; 0x2f
   d5328:	462a      	mov	r2, r5
   d532a:	200a      	movs	r0, #10
   d532c:	f7ff fa58 	bl	d47e0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5330:	4628      	mov	r0, r5
   d5332:	f001 fdf2 	bl	d6f1a <strlen>
   d5336:	6833      	ldr	r3, [r6, #0]
   d5338:	4602      	mov	r2, r0
   d533a:	68db      	ldr	r3, [r3, #12]
   d533c:	4629      	mov	r1, r5
   d533e:	4630      	mov	r0, r6
   d5340:	4798      	blx	r3
   d5342:	e00f      	b.n	d5364 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5344:	b124      	cbz	r4, d5350 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5346:	212e      	movs	r1, #46	; 0x2e
   d5348:	4630      	mov	r0, r6
   d534a:	f000 f9d5 	bl	d56f8 <_ZN5Print5printEc>
   d534e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5350:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5354:	220a      	movs	r2, #10
   d5356:	4630      	mov	r0, r6
   d5358:	f000 f9d1 	bl	d56fe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d535c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d535e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5360:	d1f0      	bne.n	d5344 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5362:	4620      	mov	r0, r4
    }
    return n;
}
   d5364:	b00d      	add	sp, #52	; 0x34
   d5366:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5368 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5368:	b510      	push	{r4, lr}
   d536a:	4b05      	ldr	r3, [pc, #20]	; (d5380 <_ZN9IPAddressC1Ev+0x18>)
   d536c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d536e:	2211      	movs	r2, #17
   d5370:	f840 3b04 	str.w	r3, [r0], #4
   d5374:	2100      	movs	r1, #0
   d5376:	f001 fd72 	bl	d6e5e <memset>
{
    clear();
}
   d537a:	4620      	mov	r0, r4
   d537c:	bd10      	pop	{r4, pc}
   d537e:	bf00      	nop
   d5380:	000d9284 	.word	0x000d9284

000d5384 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5384:	4603      	mov	r3, r0
   d5386:	4a07      	ldr	r2, [pc, #28]	; (d53a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5388:	b510      	push	{r4, lr}
   d538a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d538e:	f101 0210 	add.w	r2, r1, #16
   d5392:	f851 4b04 	ldr.w	r4, [r1], #4
   d5396:	f843 4b04 	str.w	r4, [r3], #4
   d539a:	4291      	cmp	r1, r2
   d539c:	d1f9      	bne.n	d5392 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d539e:	780a      	ldrb	r2, [r1, #0]
   d53a0:	701a      	strb	r2, [r3, #0]
}
   d53a2:	bd10      	pop	{r4, pc}
   d53a4:	000d9284 	.word	0x000d9284

000d53a8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d53a8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d53aa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d53ae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d53b2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d53b6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d53ba:	2304      	movs	r3, #4
   d53bc:	6041      	str	r1, [r0, #4]
   d53be:	7503      	strb	r3, [r0, #20]
   d53c0:	bd10      	pop	{r4, pc}

000d53c2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d53c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d53c4:	780d      	ldrb	r5, [r1, #0]
   d53c6:	788b      	ldrb	r3, [r1, #2]
   d53c8:	784a      	ldrb	r2, [r1, #1]
   d53ca:	78c9      	ldrb	r1, [r1, #3]
   d53cc:	9100      	str	r1, [sp, #0]
   d53ce:	4629      	mov	r1, r5
   d53d0:	f7ff ffea 	bl	d53a8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d53d4:	b003      	add	sp, #12
   d53d6:	bd30      	pop	{r4, r5, pc}

000d53d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d53d8:	4b01      	ldr	r3, [pc, #4]	; (d53e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d53da:	4a02      	ldr	r2, [pc, #8]	; (d53e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d53dc:	601a      	str	r2, [r3, #0]
   d53de:	4770      	bx	lr
   d53e0:	2003e378 	.word	0x2003e378
   d53e4:	000d9303 	.word	0x000d9303

000d53e8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d53e8:	2200      	movs	r2, #0
   d53ea:	4611      	mov	r1, r2
   d53ec:	6840      	ldr	r0, [r0, #4]
   d53ee:	f7ff bb43 	b.w	d4a78 <network_listening>

000d53f2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d53f2:	2200      	movs	r2, #0
   d53f4:	4611      	mov	r1, r2
   d53f6:	6840      	ldr	r0, [r0, #4]
   d53f8:	f7ff bb4e 	b.w	d4a98 <network_get_listen_timeout>

000d53fc <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d53fc:	2200      	movs	r2, #0
   d53fe:	6840      	ldr	r0, [r0, #4]
   d5400:	f7ff bb42 	b.w	d4a88 <network_set_listen_timeout>

000d5404 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5404:	2200      	movs	r2, #0
   d5406:	f081 0101 	eor.w	r1, r1, #1
   d540a:	6840      	ldr	r0, [r0, #4]
   d540c:	f7ff bb2c 	b.w	d4a68 <network_listen>

000d5410 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5410:	2300      	movs	r3, #0
   d5412:	461a      	mov	r2, r3
   d5414:	2101      	movs	r1, #1
   d5416:	6840      	ldr	r0, [r0, #4]
   d5418:	f7ff bb1e 	b.w	d4a58 <network_off>

000d541c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d541c:	2300      	movs	r3, #0
   d541e:	461a      	mov	r2, r3
   d5420:	4619      	mov	r1, r3
   d5422:	6840      	ldr	r0, [r0, #4]
   d5424:	f7ff bb10 	b.w	d4a48 <network_on>

000d5428 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5428:	2200      	movs	r2, #0
   d542a:	4611      	mov	r1, r2
   d542c:	6840      	ldr	r0, [r0, #4]
   d542e:	f7ff bb03 	b.w	d4a38 <network_ready>

000d5432 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5432:	2200      	movs	r2, #0
   d5434:	4611      	mov	r1, r2
   d5436:	6840      	ldr	r0, [r0, #4]
   d5438:	f7ff baee 	b.w	d4a18 <network_connecting>

000d543c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d543c:	2200      	movs	r2, #0
   d543e:	2102      	movs	r1, #2
   d5440:	6840      	ldr	r0, [r0, #4]
   d5442:	f7ff baf1 	b.w	d4a28 <network_disconnect>

000d5446 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5446:	2300      	movs	r3, #0
   d5448:	461a      	mov	r2, r3
   d544a:	6840      	ldr	r0, [r0, #4]
   d544c:	f7ff badc 	b.w	d4a08 <network_connect>

000d5450 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5450:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5452:	4605      	mov	r5, r0
   d5454:	b188      	cbz	r0, d547a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5456:	6804      	ldr	r4, [r0, #0]
   d5458:	b14c      	cbz	r4, d546e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d545a:	68a3      	ldr	r3, [r4, #8]
   d545c:	b11b      	cbz	r3, d5466 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d545e:	2203      	movs	r2, #3
   d5460:	4621      	mov	r1, r4
   d5462:	4620      	mov	r0, r4
   d5464:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5466:	2110      	movs	r1, #16
   d5468:	4620      	mov	r0, r4
   d546a:	f000 fd7c 	bl	d5f66 <_ZdlPvj>
   d546e:	4628      	mov	r0, r5
   d5470:	2114      	movs	r1, #20
      }
   d5472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5476:	f000 bd76 	b.w	d5f66 <_ZdlPvj>
   d547a:	bd38      	pop	{r3, r4, r5, pc}

000d547c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d547c:	b110      	cbz	r0, d5484 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d547e:	6803      	ldr	r3, [r0, #0]
   d5480:	685b      	ldr	r3, [r3, #4]
   d5482:	4718      	bx	r3
   d5484:	4770      	bx	lr

000d5486 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5486:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5488:	6803      	ldr	r3, [r0, #0]
   d548a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d548c:	b1bb      	cbz	r3, d54be <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d548e:	6858      	ldr	r0, [r3, #4]
   d5490:	f7ff f8ce 	bl	d4630 <os_thread_is_current>
   d5494:	b978      	cbnz	r0, d54b6 <_ZN6ThreadD1Ev+0x30>
   d5496:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5498:	7c5a      	ldrb	r2, [r3, #17]
   d549a:	b912      	cbnz	r2, d54a2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d549c:	6858      	ldr	r0, [r3, #4]
   d549e:	f7ff f8cf 	bl	d4640 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d54a2:	6823      	ldr	r3, [r4, #0]
   d54a4:	6858      	ldr	r0, [r3, #4]
   d54a6:	f7ff f8d3 	bl	d4650 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d54aa:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d54ac:	2300      	movs	r3, #0
   d54ae:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d54b0:	b128      	cbz	r0, d54be <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d54b2:	f7ff ffcd 	bl	d5450 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d54b6:	6820      	ldr	r0, [r4, #0]
   d54b8:	b108      	cbz	r0, d54be <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d54ba:	f7ff ffc9 	bl	d5450 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d54be:	4620      	mov	r0, r4
   d54c0:	bd10      	pop	{r4, pc}

000d54c2 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d54c2:	b538      	push	{r3, r4, r5, lr}
   d54c4:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d54c6:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d54ca:	b108      	cbz	r0, d54d0 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d54cc:	f7fe fde9 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d54d0:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d54d4:	b108      	cbz	r0, d54da <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d54d6:	f7ff f8cb 	bl	d4670 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d54da:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d54de:	b135      	cbz	r5, d54ee <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d54e0:	4628      	mov	r0, r5
   d54e2:	f7ff ffd0 	bl	d5486 <_ZN6ThreadD1Ev>
   d54e6:	2104      	movs	r1, #4
   d54e8:	4628      	mov	r0, r5
   d54ea:	f000 fd3c 	bl	d5f66 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d54ee:	6820      	ldr	r0, [r4, #0]
   d54f0:	b108      	cbz	r0, d54f6 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d54f2:	f7ff ffc3 	bl	d547c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d54f6:	4620      	mov	r0, r4
   d54f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d54fc <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d54fc:	b510      	push	{r4, lr}
   d54fe:	4b04      	ldr	r3, [pc, #16]	; (d5510 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5500:	4604      	mov	r4, r0
   d5502:	f840 3b08 	str.w	r3, [r0], #8
   d5506:	f7ff ffdc 	bl	d54c2 <_ZN5spark11MeshPublishD1Ev>
   d550a:	4620      	mov	r0, r4
   d550c:	bd10      	pop	{r4, pc}
   d550e:	bf00      	nop
   d5510:	000d9378 	.word	0x000d9378

000d5514 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5514:	b538      	push	{r3, r4, r5, lr}
   d5516:	4c0e      	ldr	r4, [pc, #56]	; (d5550 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5518:	4b0e      	ldr	r3, [pc, #56]	; (d5554 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d551a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d551c:	2500      	movs	r5, #0
   d551e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5520:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5524:	6063      	str	r3, [r4, #4]
   d5526:	60a5      	str	r5, [r4, #8]
   d5528:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d552c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5530:	f7ff f896 	bl	d4660 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5534:	4b08      	ldr	r3, [pc, #32]	; (d5558 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5536:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d553a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d553e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5540:	4620      	mov	r0, r4
   d5542:	4a06      	ldr	r2, [pc, #24]	; (d555c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5544:	4906      	ldr	r1, [pc, #24]	; (d5560 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d554a:	f000 bd07 	b.w	d5f5c <__aeabi_atexit>
   d554e:	bf00      	nop
   d5550:	2003e37c 	.word	0x2003e37c
   d5554:	000d93ac 	.word	0x000d93ac
   d5558:	000d9378 	.word	0x000d9378
   d555c:	2003e334 	.word	0x2003e334
   d5560:	000d54fd 	.word	0x000d54fd

000d5564 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5564:	2300      	movs	r3, #0
   d5566:	461a      	mov	r2, r3
   d5568:	6840      	ldr	r0, [r0, #4]
   d556a:	f7ff ba4d 	b.w	d4a08 <network_connect>

000d556e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d556e:	2200      	movs	r2, #0
   d5570:	2102      	movs	r1, #2
   d5572:	6840      	ldr	r0, [r0, #4]
   d5574:	f7ff ba58 	b.w	d4a28 <network_disconnect>

000d5578 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5578:	2200      	movs	r2, #0
   d557a:	4611      	mov	r1, r2
   d557c:	6840      	ldr	r0, [r0, #4]
   d557e:	f7ff ba4b 	b.w	d4a18 <network_connecting>

000d5582 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5582:	2200      	movs	r2, #0
   d5584:	4611      	mov	r1, r2
   d5586:	6840      	ldr	r0, [r0, #4]
   d5588:	f7ff ba56 	b.w	d4a38 <network_ready>

000d558c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d558c:	2300      	movs	r3, #0
   d558e:	461a      	mov	r2, r3
   d5590:	4619      	mov	r1, r3
   d5592:	6840      	ldr	r0, [r0, #4]
   d5594:	f7ff ba58 	b.w	d4a48 <network_on>

000d5598 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5598:	2300      	movs	r3, #0
   d559a:	461a      	mov	r2, r3
   d559c:	4619      	mov	r1, r3
   d559e:	6840      	ldr	r0, [r0, #4]
   d55a0:	f7ff ba5a 	b.w	d4a58 <network_off>

000d55a4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d55a4:	2200      	movs	r2, #0
   d55a6:	f081 0101 	eor.w	r1, r1, #1
   d55aa:	6840      	ldr	r0, [r0, #4]
   d55ac:	f7ff ba5c 	b.w	d4a68 <network_listen>

000d55b0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d55b0:	2200      	movs	r2, #0
   d55b2:	6840      	ldr	r0, [r0, #4]
   d55b4:	f7ff ba68 	b.w	d4a88 <network_set_listen_timeout>

000d55b8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d55b8:	2200      	movs	r2, #0
   d55ba:	4611      	mov	r1, r2
   d55bc:	6840      	ldr	r0, [r0, #4]
   d55be:	f7ff ba6b 	b.w	d4a98 <network_get_listen_timeout>

000d55c2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d55c2:	2200      	movs	r2, #0
   d55c4:	4611      	mov	r1, r2
   d55c6:	6840      	ldr	r0, [r0, #4]
   d55c8:	f7ff ba56 	b.w	d4a78 <network_listening>

000d55cc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d55cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d55d0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d55d2:	b095      	sub	sp, #84	; 0x54
   d55d4:	4616      	mov	r6, r2
   d55d6:	460d      	mov	r5, r1
   d55d8:	4607      	mov	r7, r0
    IPAddress addr;
   d55da:	f7ff fec5 	bl	d5368 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d55de:	4621      	mov	r1, r4
   d55e0:	2220      	movs	r2, #32
   d55e2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d55e4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d55e6:	f001 fc3a 	bl	d6e5e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d55ea:	2340      	movs	r3, #64	; 0x40
   d55ec:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d55ee:	4621      	mov	r1, r4
   d55f0:	466b      	mov	r3, sp
   d55f2:	aa0c      	add	r2, sp, #48	; 0x30
   d55f4:	4630      	mov	r0, r6
   d55f6:	f7ff f903 	bl	d4800 <netdb_getaddrinfo>
    if (!r) {
   d55fa:	4604      	mov	r4, r0
   d55fc:	2800      	cmp	r0, #0
   d55fe:	d144      	bne.n	d568a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5600:	4602      	mov	r2, r0
   d5602:	2101      	movs	r1, #1
   d5604:	6868      	ldr	r0, [r5, #4]
   d5606:	f7ff fa17 	bl	d4a38 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d560a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d560c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d560e:	4622      	mov	r2, r4
   d5610:	6868      	ldr	r0, [r5, #4]
   d5612:	f7ff fa11 	bl	d4a38 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5616:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5618:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d561a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d561c:	2e00      	cmp	r6, #0
   d561e:	d034      	beq.n	d568a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5620:	2900      	cmp	r1, #0
   d5622:	d132      	bne.n	d568a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5624:	6873      	ldr	r3, [r6, #4]
   d5626:	2b02      	cmp	r3, #2
   d5628:	d002      	beq.n	d5630 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d562a:	2b0a      	cmp	r3, #10
   d562c:	d009      	beq.n	d5642 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d562e:	e02a      	b.n	d5686 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5630:	f1b8 0f00 	cmp.w	r8, #0
   d5634:	d027      	beq.n	d5686 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5636:	6971      	ldr	r1, [r6, #20]
   d5638:	4638      	mov	r0, r7
   d563a:	3104      	adds	r1, #4
   d563c:	f7ff fec1 	bl	d53c2 <_ZN9IPAddressaSEPKh>
   d5640:	e020      	b.n	d5684 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5642:	f1b9 0f00 	cmp.w	r9, #0
   d5646:	d01e      	beq.n	d5686 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5648:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d564a:	2211      	movs	r2, #17
   d564c:	a801      	add	r0, sp, #4
   d564e:	f001 fc06 	bl	d6e5e <memset>
                    a.v = 6;
   d5652:	2306      	movs	r3, #6
   d5654:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5658:	ad01      	add	r5, sp, #4
   d565a:	f104 0308 	add.w	r3, r4, #8
   d565e:	3418      	adds	r4, #24
   d5660:	6818      	ldr	r0, [r3, #0]
   d5662:	6859      	ldr	r1, [r3, #4]
   d5664:	462a      	mov	r2, r5
   d5666:	c203      	stmia	r2!, {r0, r1}
   d5668:	3308      	adds	r3, #8
   d566a:	42a3      	cmp	r3, r4
   d566c:	4615      	mov	r5, r2
   d566e:	d1f7      	bne.n	d5660 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5670:	a901      	add	r1, sp, #4
   d5672:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5674:	ad07      	add	r5, sp, #28
   d5676:	f7ff fe85 	bl	d5384 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d567a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d567c:	1d3c      	adds	r4, r7, #4
   d567e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5680:	682b      	ldr	r3, [r5, #0]
   d5682:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5684:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5686:	69f6      	ldr	r6, [r6, #28]
   d5688:	e7c8      	b.n	d561c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d568a:	9800      	ldr	r0, [sp, #0]
   d568c:	f7ff f8b0 	bl	d47f0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5690:	4638      	mov	r0, r7
   d5692:	b015      	add	sp, #84	; 0x54
   d5694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5698 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5698:	4b02      	ldr	r3, [pc, #8]	; (d56a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d569a:	4a03      	ldr	r2, [pc, #12]	; (d56a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d569c:	601a      	str	r2, [r3, #0]
   d569e:	2200      	movs	r2, #0
   d56a0:	605a      	str	r2, [r3, #4]
   d56a2:	4770      	bx	lr
   d56a4:	2003e550 	.word	0x2003e550
   d56a8:	000d93ac 	.word	0x000d93ac

000d56ac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d56ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56ae:	4606      	mov	r6, r0
   d56b0:	460d      	mov	r5, r1
   d56b2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d56b4:	2400      	movs	r4, #0
  while (size--) {
   d56b6:	42bd      	cmp	r5, r7
   d56b8:	d00c      	beq.n	d56d4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d56ba:	6833      	ldr	r3, [r6, #0]
   d56bc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d56c0:	689b      	ldr	r3, [r3, #8]
   d56c2:	4630      	mov	r0, r6
   d56c4:	4798      	blx	r3
     if (chunk>=0)
   d56c6:	2800      	cmp	r0, #0
   d56c8:	db01      	blt.n	d56ce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d56ca:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d56cc:	e7f3      	b.n	d56b6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d56ce:	2c00      	cmp	r4, #0
   d56d0:	bf08      	it	eq
   d56d2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d56d4:	4620      	mov	r0, r4
   d56d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d56d8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d56d8:	b570      	push	{r4, r5, r6, lr}
   d56da:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d56dc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d56de:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d56e0:	b149      	cbz	r1, d56f6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d56e2:	f001 fc1a 	bl	d6f1a <strlen>
   d56e6:	682b      	ldr	r3, [r5, #0]
   d56e8:	4602      	mov	r2, r0
   d56ea:	4621      	mov	r1, r4
   d56ec:	4628      	mov	r0, r5
   d56ee:	68db      	ldr	r3, [r3, #12]
    }
   d56f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d56f4:	4718      	bx	r3
    }
   d56f6:	bd70      	pop	{r4, r5, r6, pc}

000d56f8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d56f8:	6803      	ldr	r3, [r0, #0]
   d56fa:	689b      	ldr	r3, [r3, #8]
   d56fc:	4718      	bx	r3

000d56fe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d56fe:	b530      	push	{r4, r5, lr}
   d5700:	b08b      	sub	sp, #44	; 0x2c
   d5702:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5704:	2100      	movs	r1, #0
   d5706:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d570a:	2a01      	cmp	r2, #1
   d570c:	bf98      	it	ls
   d570e:	220a      	movls	r2, #10
   d5710:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5714:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5718:	fb05 3312 	mls	r3, r5, r2, r3
   d571c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5720:	2b09      	cmp	r3, #9
   d5722:	bf94      	ite	ls
   d5724:	3330      	addls	r3, #48	; 0x30
   d5726:	3337      	addhi	r3, #55	; 0x37
   d5728:	b2db      	uxtb	r3, r3
   d572a:	4621      	mov	r1, r4
   d572c:	f804 3901 	strb.w	r3, [r4], #-1
   d5730:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5732:	2d00      	cmp	r5, #0
   d5734:	d1ee      	bne.n	d5714 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5736:	f7ff ffcf 	bl	d56d8 <_ZN5Print5writeEPKc>
}
   d573a:	b00b      	add	sp, #44	; 0x2c
   d573c:	bd30      	pop	{r4, r5, pc}

000d573e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d573e:	b510      	push	{r4, lr}
   d5740:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5742:	f7ff fa32 	bl	d4baa <_ZNSt14_Function_baseD1Ev>
   d5746:	4620      	mov	r0, r4
   d5748:	bd10      	pop	{r4, pc}
	...

000d574c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d574c:	4803      	ldr	r0, [pc, #12]	; (d575c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d574e:	4a04      	ldr	r2, [pc, #16]	; (d5760 <_GLOBAL__sub_I_RGB+0x14>)
   d5750:	4904      	ldr	r1, [pc, #16]	; (d5764 <_GLOBAL__sub_I_RGB+0x18>)
   d5752:	2300      	movs	r3, #0
   d5754:	6083      	str	r3, [r0, #8]
   d5756:	f000 bc01 	b.w	d5f5c <__aeabi_atexit>
   d575a:	bf00      	nop
   d575c:	2003e558 	.word	0x2003e558
   d5760:	2003e334 	.word	0x2003e334
   d5764:	000d573f 	.word	0x000d573f

000d5768 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5768:	4770      	bx	lr

000d576a <_ZN8SPIClassD0Ev>:
   d576a:	b510      	push	{r4, lr}
   d576c:	210c      	movs	r1, #12
   d576e:	4604      	mov	r4, r0
   d5770:	f000 fbf9 	bl	d5f66 <_ZdlPvj>
   d5774:	4620      	mov	r0, r4
   d5776:	bd10      	pop	{r4, pc}

000d5778 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5778:	b510      	push	{r4, lr}
   d577a:	4b05      	ldr	r3, [pc, #20]	; (d5790 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d577c:	6003      	str	r3, [r0, #0]
   d577e:	4604      	mov	r4, r0
{
    _spi = spi;
   d5780:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d5782:	4608      	mov	r0, r1
   d5784:	f7ff f844 	bl	d4810 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5788:	2300      	movs	r3, #0
   d578a:	60a3      	str	r3, [r4, #8]
}
   d578c:	4620      	mov	r0, r4
   d578e:	bd10      	pop	{r4, pc}
   d5790:	000d93e0 	.word	0x000d93e0

000d5794 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5794:	7900      	ldrb	r0, [r0, #4]
   d5796:	f7ff b843 	b.w	d4820 <HAL_SPI_Is_Enabled>

000d579a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d579a:	b510      	push	{r4, lr}
   d579c:	4604      	mov	r4, r0
{
	free(buffer);
   d579e:	6800      	ldr	r0, [r0, #0]
   d57a0:	f7ff f98a 	bl	d4ab8 <free>
}
   d57a4:	4620      	mov	r0, r4
   d57a6:	bd10      	pop	{r4, pc}

000d57a8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d57a8:	b510      	push	{r4, lr}
   d57aa:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d57ac:	6800      	ldr	r0, [r0, #0]
   d57ae:	b108      	cbz	r0, d57b4 <_ZN6String10invalidateEv+0xc>
   d57b0:	f7ff f982 	bl	d4ab8 <free>
	buffer = NULL;
   d57b4:	2300      	movs	r3, #0
   d57b6:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d57b8:	60a3      	str	r3, [r4, #8]
   d57ba:	6063      	str	r3, [r4, #4]
   d57bc:	bd10      	pop	{r4, pc}

000d57be <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d57be:	b538      	push	{r3, r4, r5, lr}
   d57c0:	4604      	mov	r4, r0
   d57c2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d57c4:	6800      	ldr	r0, [r0, #0]
   d57c6:	3101      	adds	r1, #1
   d57c8:	f7ff f97e 	bl	d4ac8 <realloc>
	if (newbuffer) {
   d57cc:	b110      	cbz	r0, d57d4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d57ce:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d57d2:	2001      	movs	r0, #1
	}
	return 0;
}
   d57d4:	bd38      	pop	{r3, r4, r5, pc}

000d57d6 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d57d6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d57d8:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d57da:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d57dc:	b113      	cbz	r3, d57e4 <_ZN6String7reserveEj+0xe>
   d57de:	6843      	ldr	r3, [r0, #4]
   d57e0:	428b      	cmp	r3, r1
   d57e2:	d207      	bcs.n	d57f4 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d57e4:	4620      	mov	r0, r4
   d57e6:	f7ff ffea 	bl	d57be <_ZN6String12changeBufferEj>
   d57ea:	b120      	cbz	r0, d57f6 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d57ec:	68a3      	ldr	r3, [r4, #8]
   d57ee:	b90b      	cbnz	r3, d57f4 <_ZN6String7reserveEj+0x1e>
   d57f0:	6822      	ldr	r2, [r4, #0]
   d57f2:	7013      	strb	r3, [r2, #0]
   d57f4:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d57f6:	bd10      	pop	{r4, pc}

000d57f8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d57f8:	b570      	push	{r4, r5, r6, lr}
   d57fa:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d57fc:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d57fe:	4604      	mov	r4, r0
   d5800:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5802:	f7ff ffe8 	bl	d57d6 <_ZN6String7reserveEj>
   d5806:	b918      	cbnz	r0, d5810 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5808:	4620      	mov	r0, r4
   d580a:	f7ff ffcd 	bl	d57a8 <_ZN6String10invalidateEv>
		return *this;
   d580e:	e009      	b.n	d5824 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5810:	462a      	mov	r2, r5
   d5812:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5814:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5816:	6820      	ldr	r0, [r4, #0]
   d5818:	f001 fb16 	bl	d6e48 <memcpy>
	buffer[len] = 0;
   d581c:	6822      	ldr	r2, [r4, #0]
   d581e:	68a3      	ldr	r3, [r4, #8]
   d5820:	2100      	movs	r1, #0
   d5822:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5824:	4620      	mov	r0, r4
   d5826:	bd70      	pop	{r4, r5, r6, pc}

000d5828 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5828:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d582a:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d582c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d582e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5830:	6043      	str	r3, [r0, #4]
	len = 0;
   d5832:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5834:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5836:	460d      	mov	r5, r1
   d5838:	b139      	cbz	r1, d584a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d583a:	4608      	mov	r0, r1
   d583c:	f001 fb6d 	bl	d6f1a <strlen>
   d5840:	4629      	mov	r1, r5
   d5842:	4602      	mov	r2, r0
   d5844:	4620      	mov	r0, r4
   d5846:	f7ff ffd7 	bl	d57f8 <_ZN6String4copyEPKcj>
}
   d584a:	4620      	mov	r0, r4
   d584c:	bd38      	pop	{r3, r4, r5, pc}

000d584e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d584e:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5850:	b510      	push	{r4, lr}
   d5852:	460b      	mov	r3, r1
   d5854:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5856:	d007      	beq.n	d5868 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5858:	6809      	ldr	r1, [r1, #0]
   d585a:	b119      	cbz	r1, d5864 <_ZN6StringaSERKS_+0x16>
   d585c:	689a      	ldr	r2, [r3, #8]
   d585e:	f7ff ffcb 	bl	d57f8 <_ZN6String4copyEPKcj>
   d5862:	e001      	b.n	d5868 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5864:	f7ff ffa0 	bl	d57a8 <_ZN6String10invalidateEv>

	return *this;
}
   d5868:	4620      	mov	r0, r4
   d586a:	bd10      	pop	{r4, pc}

000d586c <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d586c:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d586e:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5870:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5872:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5874:	6043      	str	r3, [r0, #4]
	len = 0;
   d5876:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5878:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d587a:	f7ff ffe8 	bl	d584e <_ZN6StringaSERKS_>
}
   d587e:	4620      	mov	r0, r4
   d5880:	bd10      	pop	{r4, pc}

000d5882 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5882:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5884:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5886:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5888:	b912      	cbnz	r2, d5890 <_ZNK6String6equalsEPKc+0xe>
   d588a:	b919      	cbnz	r1, d5894 <_ZNK6String6equalsEPKc+0x12>
   d588c:	2001      	movs	r0, #1
   d588e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5890:	b911      	cbnz	r1, d5898 <_ZNK6String6equalsEPKc+0x16>
   d5892:	6803      	ldr	r3, [r0, #0]
   d5894:	7818      	ldrb	r0, [r3, #0]
   d5896:	e002      	b.n	d589e <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d5898:	6800      	ldr	r0, [r0, #0]
   d589a:	f001 fb11 	bl	d6ec0 <strcmp>
   d589e:	fab0 f080 	clz	r0, r0
   d58a2:	0940      	lsrs	r0, r0, #5
}
   d58a4:	bd08      	pop	{r3, pc}

000d58a6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d58a6:	b510      	push	{r4, lr}
   d58a8:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d58aa:	6800      	ldr	r0, [r0, #0]
   d58ac:	b118      	cbz	r0, d58b6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d58ae:	f7ff f903 	bl	d4ab8 <free>
            wakeupSource_ = nullptr;
   d58b2:	2300      	movs	r3, #0
   d58b4:	6023      	str	r3, [r4, #0]
   d58b6:	bd10      	pop	{r4, pc}

000d58b8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d58b8:	b510      	push	{r4, lr}
   d58ba:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d58bc:	f7ff fff3 	bl	d58a6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d58c0:	4620      	mov	r0, r4
   d58c2:	bd10      	pop	{r4, pc}

000d58c4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d58c4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d58c6:	4c09      	ldr	r4, [pc, #36]	; (d58ec <_GLOBAL__sub_I_System+0x28>)
   d58c8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d58ca:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d58ce:	6020      	str	r0, [r4, #0]
   d58d0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d58d2:	71a0      	strb	r0, [r4, #6]
   d58d4:	8120      	strh	r0, [r4, #8]
   d58d6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d58d8:	f7ff f822 	bl	d4920 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d58dc:	4620      	mov	r0, r4
   d58de:	4a04      	ldr	r2, [pc, #16]	; (d58f0 <_GLOBAL__sub_I_System+0x2c>)
   d58e0:	4904      	ldr	r1, [pc, #16]	; (d58f4 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d58e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d58e6:	f000 bb39 	b.w	d5f5c <__aeabi_atexit>
   d58ea:	bf00      	nop
   d58ec:	2003e568 	.word	0x2003e568
   d58f0:	2003e334 	.word	0x2003e334
   d58f4:	000d58b9 	.word	0x000d58b9

000d58f8 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d58f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d58fa:	4b14      	ldr	r3, [pc, #80]	; (d594c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d58fc:	4f14      	ldr	r7, [pc, #80]	; (d5950 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d58fe:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d5900:	4b14      	ldr	r3, [pc, #80]	; (d5954 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d5902:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d5904:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d5906:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d5908:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d590a:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d590c:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d590e:	d01b      	beq.n	d5948 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d5910:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d5912:	ad01      	add	r5, sp, #4
   d5914:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d5918:	f001 f99a 	bl	d6c50 <localtime>
	calendar_time->tm_year += 1900;
   d591c:	6943      	ldr	r3, [r0, #20]
   d591e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d5922:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d5924:	4604      	mov	r4, r0
   d5926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d592a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d592c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d592e:	f8d4 e000 	ldr.w	lr, [r4]
   d5932:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d5936:	ad01      	add	r5, sp, #4
   d5938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d593a:	4c07      	ldr	r4, [pc, #28]	; (d5958 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d593c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d593e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d5942:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d5944:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d5948:	b00b      	add	sp, #44	; 0x2c
   d594a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d594c:	2003e5a4 	.word	0x2003e5a4
   d5950:	2003e5a0 	.word	0x2003e5a0
   d5954:	2003e59c 	.word	0x2003e59c
   d5958:	2003e574 	.word	0x2003e574

000d595c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d595c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d595e:	2000      	movs	r0, #0
   d5960:	f7ff f842 	bl	d49e8 <spark_sync_time_pending>
   d5964:	b128      	cbz	r0, d5972 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5966:	f7ff f82f 	bl	d49c8 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d596a:	f080 0001 	eor.w	r0, r0, #1
   d596e:	b2c0      	uxtb	r0, r0
   d5970:	bd08      	pop	{r3, pc}
   d5972:	2001      	movs	r0, #1
    }
   d5974:	bd08      	pop	{r3, pc}
	...

000d5978 <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   d5978:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d597a:	f7ff ffbd 	bl	d58f8 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
   d597e:	4b01      	ldr	r3, [pc, #4]	; (d5984 <_ZN9TimeClass4hourEl+0xc>)
   d5980:	6898      	ldr	r0, [r3, #8]
   d5982:	bd08      	pop	{r3, pc}
   d5984:	2003e574 	.word	0x2003e574

000d5988 <_ZN9TimeClass6minuteEl>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   d5988:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d598a:	f7ff ffb5 	bl	d58f8 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_min;
}
   d598e:	4b01      	ldr	r3, [pc, #4]	; (d5994 <_ZN9TimeClass6minuteEl+0xc>)
   d5990:	6858      	ldr	r0, [r3, #4]
   d5992:	bd08      	pop	{r3, pc}
   d5994:	2003e574 	.word	0x2003e574

000d5998 <_ZN9TimeClass6secondEl>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
   d5998:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d599a:	f7ff ffad 	bl	d58f8 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_sec;
}
   d599e:	4b01      	ldr	r3, [pc, #4]	; (d59a4 <_ZN9TimeClass6secondEl+0xc>)
   d59a0:	6818      	ldr	r0, [r3, #0]
   d59a2:	bd08      	pop	{r3, pc}
   d59a4:	2003e574 	.word	0x2003e574

000d59a8 <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   d59a8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d59aa:	f7ff ffa5 	bl	d58f8 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
   d59ae:	4b01      	ldr	r3, [pc, #4]	; (d59b4 <_ZN9TimeClass3dayEl+0xc>)
   d59b0:	68d8      	ldr	r0, [r3, #12]
   d59b2:	bd08      	pop	{r3, pc}
   d59b4:	2003e574 	.word	0x2003e574

000d59b8 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d59b8:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d59ba:	2000      	movs	r0, #0
   d59bc:	f7fe fe98 	bl	d46f0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d59c0:	4604      	mov	r4, r0
   d59c2:	b968      	cbnz	r0, d59e0 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d59c4:	f7fe ffa4 	bl	d4910 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d59c8:	2801      	cmp	r0, #1
   d59ca:	d10b      	bne.n	d59e4 <_ZN9TimeClass7isValidEv+0x2c>
   d59cc:	4620      	mov	r0, r4
   d59ce:	f7fe ffc7 	bl	d4960 <system_thread_get_state>
   d59d2:	b938      	cbnz	r0, d59e4 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d59d4:	f7ff ffc2 	bl	d595c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d59d8:	b930      	cbnz	r0, d59e8 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d59da:	f7fe ffed 	bl	d49b8 <spark_process>
   d59de:	e7f9      	b.n	d59d4 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d59e0:	2001      	movs	r0, #1
   d59e2:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d59e4:	2000      	movs	r0, #0
   d59e6:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d59e8:	f7ff ffb8 	bl	d595c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d59ec:	2000      	movs	r0, #0
   d59ee:	f7fe fe7f 	bl	d46f0 <HAL_RTC_Time_Is_Valid>
   d59f2:	3000      	adds	r0, #0
   d59f4:	bf18      	it	ne
   d59f6:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d59f8:	bd10      	pop	{r4, pc}

000d59fa <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d59fa:	b508      	push	{r3, lr}
    (void)isValid();
   d59fc:	f7ff ffdc 	bl	d59b8 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d5a00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d5a04:	f7fe be54 	b.w	d46b0 <HAL_RTC_Get_UnixTime>

000d5a08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5a08:	4b02      	ldr	r3, [pc, #8]	; (d5a14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5a0a:	681a      	ldr	r2, [r3, #0]
   d5a0c:	4b02      	ldr	r3, [pc, #8]	; (d5a18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5a0e:	601a      	str	r2, [r3, #0]
   d5a10:	4770      	bx	lr
   d5a12:	bf00      	nop
   d5a14:	2003e244 	.word	0x2003e244
   d5a18:	2003e598 	.word	0x2003e598

000d5a1c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5a1c:	4770      	bx	lr

000d5a1e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5a1e:	7441      	strb	r1, [r0, #17]
   d5a20:	4770      	bx	lr

000d5a22 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5a22:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5a24:	7c00      	ldrb	r0, [r0, #16]
   d5a26:	f7fe ff3b 	bl	d48a0 <HAL_USART_Available_Data_For_Write>
}
   d5a2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a2e:	bd08      	pop	{r3, pc}

000d5a30 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5a30:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5a32:	7c00      	ldrb	r0, [r0, #16]
   d5a34:	f7fe ff0c 	bl	d4850 <HAL_USART_Available_Data>
}
   d5a38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a3c:	bd08      	pop	{r3, pc}

000d5a3e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5a3e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5a40:	7c00      	ldrb	r0, [r0, #16]
   d5a42:	f7fe ff15 	bl	d4870 <HAL_USART_Peek_Data>
}
   d5a46:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5a4a:	bf28      	it	cs
   d5a4c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5a50:	bd08      	pop	{r3, pc}

000d5a52 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5a52:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5a54:	7c00      	ldrb	r0, [r0, #16]
   d5a56:	f7fe ff03 	bl	d4860 <HAL_USART_Read_Data>
}
   d5a5a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5a5e:	bf28      	it	cs
   d5a60:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5a64:	bd08      	pop	{r3, pc}

000d5a66 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5a66:	7c00      	ldrb	r0, [r0, #16]
   d5a68:	f7fe bf0a 	b.w	d4880 <HAL_USART_Flush_Data>

000d5a6c <_ZN11USARTSerialD0Ev>:
   d5a6c:	b510      	push	{r4, lr}
   d5a6e:	2114      	movs	r1, #20
   d5a70:	4604      	mov	r4, r0
   d5a72:	f000 fa78 	bl	d5f66 <_ZdlPvj>
   d5a76:	4620      	mov	r0, r4
   d5a78:	bd10      	pop	{r4, pc}

000d5a7a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5a7a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5a7c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5a7e:	4604      	mov	r4, r0
   d5a80:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5a82:	b925      	cbnz	r5, d5a8e <_ZN11USARTSerial5writeEh+0x14>
   d5a84:	7c00      	ldrb	r0, [r0, #16]
   d5a86:	f7fe ff0b 	bl	d48a0 <HAL_USART_Available_Data_For_Write>
   d5a8a:	2800      	cmp	r0, #0
   d5a8c:	dd05      	ble.n	d5a9a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5a8e:	4631      	mov	r1, r6
   d5a90:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5a96:	f7fe bed3 	b.w	d4840 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5a9a:	4628      	mov	r0, r5
   d5a9c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5aa0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5aa0:	b510      	push	{r4, lr}
   d5aa2:	4604      	mov	r4, r0
   d5aa4:	4608      	mov	r0, r1
   d5aa6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5aa8:	2200      	movs	r2, #0
   d5aaa:	6062      	str	r2, [r4, #4]
   d5aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5ab0:	60a2      	str	r2, [r4, #8]
   d5ab2:	4a05      	ldr	r2, [pc, #20]	; (d5ac8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5ab4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5ab6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5ab8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5aba:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5abc:	461a      	mov	r2, r3
   d5abe:	f7fe feb7 	bl	d4830 <HAL_USART_Init>
}
   d5ac2:	4620      	mov	r0, r4
   d5ac4:	bd10      	pop	{r4, pc}
   d5ac6:	bf00      	nop
   d5ac8:	000d9418 	.word	0x000d9418

000d5acc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5acc:	7c00      	ldrb	r0, [r0, #16]
   d5ace:	f7fe bedf 	b.w	d4890 <HAL_USART_Is_Enabled>
	...

000d5ad4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5ad4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5ad6:	4d0c      	ldr	r5, [pc, #48]	; (d5b08 <_Z22__fetch_global_Serial1v+0x34>)
   d5ad8:	6829      	ldr	r1, [r5, #0]
   d5ada:	f011 0401 	ands.w	r4, r1, #1
   d5ade:	d111      	bne.n	d5b04 <_Z22__fetch_global_Serial1v+0x30>
   d5ae0:	4628      	mov	r0, r5
   d5ae2:	f7fe fae0 	bl	d40a6 <__cxa_guard_acquire>
   d5ae6:	b168      	cbz	r0, d5b04 <_Z22__fetch_global_Serial1v+0x30>
   d5ae8:	4a08      	ldr	r2, [pc, #32]	; (d5b0c <_Z22__fetch_global_Serial1v+0x38>)
   d5aea:	4b09      	ldr	r3, [pc, #36]	; (d5b10 <_Z22__fetch_global_Serial1v+0x3c>)
   d5aec:	4809      	ldr	r0, [pc, #36]	; (d5b14 <_Z22__fetch_global_Serial1v+0x40>)
   d5aee:	4621      	mov	r1, r4
   d5af0:	f7ff ffd6 	bl	d5aa0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5af4:	4628      	mov	r0, r5
   d5af6:	f7fe fadb 	bl	d40b0 <__cxa_guard_release>
   d5afa:	4a07      	ldr	r2, [pc, #28]	; (d5b18 <_Z22__fetch_global_Serial1v+0x44>)
   d5afc:	4907      	ldr	r1, [pc, #28]	; (d5b1c <_Z22__fetch_global_Serial1v+0x48>)
   d5afe:	4805      	ldr	r0, [pc, #20]	; (d5b14 <_Z22__fetch_global_Serial1v+0x40>)
   d5b00:	f000 fa2c 	bl	d5f5c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5b04:	4803      	ldr	r0, [pc, #12]	; (d5b14 <_Z22__fetch_global_Serial1v+0x40>)
   d5b06:	bd38      	pop	{r3, r4, r5, pc}
   d5b08:	2003e640 	.word	0x2003e640
   d5b0c:	2003e644 	.word	0x2003e644
   d5b10:	2003e5bc 	.word	0x2003e5bc
   d5b14:	2003e5a8 	.word	0x2003e5a8
   d5b18:	2003e334 	.word	0x2003e334
   d5b1c:	000d5a1d 	.word	0x000d5a1d

000d5b20 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b20:	7441      	strb	r1, [r0, #17]
   d5b22:	4770      	bx	lr

000d5b24 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5b24:	4770      	bx	lr

000d5b26 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5b26:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5b28:	2100      	movs	r1, #0
   d5b2a:	7c00      	ldrb	r0, [r0, #16]
   d5b2c:	f7fe fed8 	bl	d48e0 <HAL_USB_USART_Receive_Data>
}
   d5b30:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5b34:	bf28      	it	cs
   d5b36:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5b3a:	bd08      	pop	{r3, pc}

000d5b3c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5b3c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5b3e:	2101      	movs	r1, #1
   d5b40:	7c00      	ldrb	r0, [r0, #16]
   d5b42:	f7fe fecd 	bl	d48e0 <HAL_USB_USART_Receive_Data>
}
   d5b46:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5b4a:	bf28      	it	cs
   d5b4c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5b50:	bd08      	pop	{r3, pc}

000d5b52 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5b52:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5b54:	7c00      	ldrb	r0, [r0, #16]
   d5b56:	f7fe febb 	bl	d48d0 <HAL_USB_USART_Available_Data_For_Write>
}
   d5b5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b5e:	bd08      	pop	{r3, pc}

000d5b60 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5b60:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5b62:	7c00      	ldrb	r0, [r0, #16]
   d5b64:	f7fe feac 	bl	d48c0 <HAL_USB_USART_Available_Data>
}
   d5b68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b6c:	bd08      	pop	{r3, pc}

000d5b6e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5b6e:	7c00      	ldrb	r0, [r0, #16]
   d5b70:	f7fe bec6 	b.w	d4900 <HAL_USB_USART_Flush_Data>

000d5b74 <_ZN9USBSerialD0Ev>:
   d5b74:	b510      	push	{r4, lr}
   d5b76:	2114      	movs	r1, #20
   d5b78:	4604      	mov	r4, r0
   d5b7a:	f000 f9f4 	bl	d5f66 <_ZdlPvj>
   d5b7e:	4620      	mov	r0, r4
   d5b80:	bd10      	pop	{r4, pc}

000d5b82 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5b82:	b538      	push	{r3, r4, r5, lr}
   d5b84:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5b86:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5b88:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5b8a:	f7fe fea1 	bl	d48d0 <HAL_USB_USART_Available_Data_For_Write>
   d5b8e:	2800      	cmp	r0, #0
   d5b90:	dc01      	bgt.n	d5b96 <_ZN9USBSerial5writeEh+0x14>
   d5b92:	7c60      	ldrb	r0, [r4, #17]
   d5b94:	b128      	cbz	r0, d5ba2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5b96:	4629      	mov	r1, r5
   d5b98:	7c20      	ldrb	r0, [r4, #16]
   d5b9a:	f7fe fea9 	bl	d48f0 <HAL_USB_USART_Send_Data>
   d5b9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5ba2:	bd38      	pop	{r3, r4, r5, pc}

000d5ba4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5ba4:	b510      	push	{r4, lr}
   d5ba6:	4604      	mov	r4, r0
   d5ba8:	2300      	movs	r3, #0
   d5baa:	6063      	str	r3, [r4, #4]
   d5bac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5bb0:	60a3      	str	r3, [r4, #8]
   d5bb2:	4b05      	ldr	r3, [pc, #20]	; (d5bc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5bb4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5bb6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5bb8:	4608      	mov	r0, r1
{
  _serial = serial;
   d5bba:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5bbc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5bbe:	4611      	mov	r1, r2
   d5bc0:	f7fe fe76 	bl	d48b0 <HAL_USB_USART_Init>
}
   d5bc4:	4620      	mov	r0, r4
   d5bc6:	bd10      	pop	{r4, pc}
   d5bc8:	000d9448 	.word	0x000d9448

000d5bcc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5bcc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5bce:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5bd0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5bd2:	2100      	movs	r1, #0
   d5bd4:	f001 f943 	bl	d6e5e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5bd8:	4620      	mov	r0, r4
   d5bda:	bd10      	pop	{r4, pc}

000d5bdc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5bdc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5bde:	4d0e      	ldr	r5, [pc, #56]	; (d5c18 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5be0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5be2:	a801      	add	r0, sp, #4
   d5be4:	f7ff fff2 	bl	d5bcc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5be8:	6829      	ldr	r1, [r5, #0]
   d5bea:	f011 0401 	ands.w	r4, r1, #1
   d5bee:	d110      	bne.n	d5c12 <_Z16_fetch_usbserialv+0x36>
   d5bf0:	4628      	mov	r0, r5
   d5bf2:	f7fe fa58 	bl	d40a6 <__cxa_guard_acquire>
   d5bf6:	b160      	cbz	r0, d5c12 <_Z16_fetch_usbserialv+0x36>
   d5bf8:	aa01      	add	r2, sp, #4
   d5bfa:	4621      	mov	r1, r4
   d5bfc:	4807      	ldr	r0, [pc, #28]	; (d5c1c <_Z16_fetch_usbserialv+0x40>)
   d5bfe:	f7ff ffd1 	bl	d5ba4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5c02:	4628      	mov	r0, r5
   d5c04:	f7fe fa54 	bl	d40b0 <__cxa_guard_release>
   d5c08:	4a05      	ldr	r2, [pc, #20]	; (d5c20 <_Z16_fetch_usbserialv+0x44>)
   d5c0a:	4906      	ldr	r1, [pc, #24]	; (d5c24 <_Z16_fetch_usbserialv+0x48>)
   d5c0c:	4803      	ldr	r0, [pc, #12]	; (d5c1c <_Z16_fetch_usbserialv+0x40>)
   d5c0e:	f000 f9a5 	bl	d5f5c <__aeabi_atexit>
	return _usbserial;
}
   d5c12:	4802      	ldr	r0, [pc, #8]	; (d5c1c <_Z16_fetch_usbserialv+0x40>)
   d5c14:	b007      	add	sp, #28
   d5c16:	bd30      	pop	{r4, r5, pc}
   d5c18:	2003e6c8 	.word	0x2003e6c8
   d5c1c:	2003e6cc 	.word	0x2003e6cc
   d5c20:	2003e334 	.word	0x2003e334
   d5c24:	000d5b25 	.word	0x000d5b25

000d5c28 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5c28:	2200      	movs	r2, #0
   d5c2a:	4611      	mov	r1, r2
   d5c2c:	6840      	ldr	r0, [r0, #4]
   d5c2e:	f7fe bf03 	b.w	d4a38 <network_ready>

000d5c32 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5c32:	2200      	movs	r2, #0
   d5c34:	4611      	mov	r1, r2
   d5c36:	6840      	ldr	r0, [r0, #4]
   d5c38:	f7fe bf1e 	b.w	d4a78 <network_listening>

000d5c3c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5c3c:	2200      	movs	r2, #0
   d5c3e:	4611      	mov	r1, r2
   d5c40:	6840      	ldr	r0, [r0, #4]
   d5c42:	f7fe bf29 	b.w	d4a98 <network_get_listen_timeout>

000d5c46 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5c46:	2200      	movs	r2, #0
   d5c48:	6840      	ldr	r0, [r0, #4]
   d5c4a:	f7fe bf1d 	b.w	d4a88 <network_set_listen_timeout>

000d5c4e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5c4e:	2200      	movs	r2, #0
   d5c50:	f081 0101 	eor.w	r1, r1, #1
   d5c54:	6840      	ldr	r0, [r0, #4]
   d5c56:	f7fe bf07 	b.w	d4a68 <network_listen>

000d5c5a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5c5a:	2300      	movs	r3, #0
   d5c5c:	461a      	mov	r2, r3
   d5c5e:	4619      	mov	r1, r3
   d5c60:	6840      	ldr	r0, [r0, #4]
   d5c62:	f7fe bef9 	b.w	d4a58 <network_off>

000d5c66 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5c66:	2300      	movs	r3, #0
   d5c68:	461a      	mov	r2, r3
   d5c6a:	4619      	mov	r1, r3
   d5c6c:	6840      	ldr	r0, [r0, #4]
   d5c6e:	f7fe beeb 	b.w	d4a48 <network_on>

000d5c72 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5c72:	2200      	movs	r2, #0
   d5c74:	4611      	mov	r1, r2
   d5c76:	6840      	ldr	r0, [r0, #4]
   d5c78:	f7fe bece 	b.w	d4a18 <network_connecting>

000d5c7c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5c7c:	2200      	movs	r2, #0
   d5c7e:	2102      	movs	r1, #2
   d5c80:	6840      	ldr	r0, [r0, #4]
   d5c82:	f7fe bed1 	b.w	d4a28 <network_disconnect>

000d5c86 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5c86:	2300      	movs	r3, #0
   d5c88:	461a      	mov	r2, r3
   d5c8a:	6840      	ldr	r0, [r0, #4]
   d5c8c:	f7fe bebc 	b.w	d4a08 <network_connect>

000d5c90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5c90:	4b02      	ldr	r3, [pc, #8]	; (d5c9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5c92:	2204      	movs	r2, #4
   d5c94:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5c96:	4a02      	ldr	r2, [pc, #8]	; (d5ca0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5c98:	601a      	str	r2, [r3, #0]
   d5c9a:	4770      	bx	lr
   d5c9c:	2003e6e0 	.word	0x2003e6e0
   d5ca0:	000d9478 	.word	0x000d9478

000d5ca4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5ca4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5ca6:	4b0c      	ldr	r3, [pc, #48]	; (d5cd8 <serialEventRun+0x34>)
   d5ca8:	b133      	cbz	r3, d5cb8 <serialEventRun+0x14>
   d5caa:	f7ff ff97 	bl	d5bdc <_Z16_fetch_usbserialv>
   d5cae:	6803      	ldr	r3, [r0, #0]
   d5cb0:	691b      	ldr	r3, [r3, #16]
   d5cb2:	4798      	blx	r3
   d5cb4:	2800      	cmp	r0, #0
   d5cb6:	dc09      	bgt.n	d5ccc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5cb8:	4b08      	ldr	r3, [pc, #32]	; (d5cdc <serialEventRun+0x38>)
   d5cba:	b163      	cbz	r3, d5cd6 <serialEventRun+0x32>
   d5cbc:	f7ff ff0a 	bl	d5ad4 <_Z22__fetch_global_Serial1v>
   d5cc0:	6803      	ldr	r3, [r0, #0]
   d5cc2:	691b      	ldr	r3, [r3, #16]
   d5cc4:	4798      	blx	r3
   d5cc6:	2800      	cmp	r0, #0
   d5cc8:	dc03      	bgt.n	d5cd2 <serialEventRun+0x2e>
   d5cca:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5ccc:	f3af 8000 	nop.w
   d5cd0:	e7f2      	b.n	d5cb8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5cd2:	f3af 8000 	nop.w
   d5cd6:	bd08      	pop	{r3, pc}
	...

000d5ce0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5ce0:	b508      	push	{r3, lr}
	serialEventRun();
   d5ce2:	f7ff ffdf 	bl	d5ca4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5ce6:	f7fe fcdb 	bl	d46a0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5cea:	4b01      	ldr	r3, [pc, #4]	; (d5cf0 <_post_loop+0x10>)
   d5cec:	6018      	str	r0, [r3, #0]
   d5cee:	bd08      	pop	{r3, pc}
   d5cf0:	2003e6f0 	.word	0x2003e6f0

000d5cf4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5cf4:	4802      	ldr	r0, [pc, #8]	; (d5d00 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5cf6:	4a03      	ldr	r2, [pc, #12]	; (d5d04 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5cf8:	4903      	ldr	r1, [pc, #12]	; (d5d08 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5cfa:	1a12      	subs	r2, r2, r0
   d5cfc:	f001 b8a4 	b.w	d6e48 <memcpy>
   d5d00:	2003f400 	.word	0x2003f400
   d5d04:	2003f404 	.word	0x2003f404
   d5d08:	000d9850 	.word	0x000d9850

000d5d0c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5d0c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5d0e:	2300      	movs	r3, #0
   d5d10:	9300      	str	r3, [sp, #0]
   d5d12:	461a      	mov	r2, r3
   d5d14:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5d18:	f7fe fe34 	bl	d4984 <system_ctrl_set_result>
}
   d5d1c:	b003      	add	sp, #12
   d5d1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5d24 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5d24:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5d26:	8843      	ldrh	r3, [r0, #2]
   d5d28:	2b0a      	cmp	r3, #10
   d5d2a:	d008      	beq.n	d5d3e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5d2c:	2b50      	cmp	r3, #80	; 0x50
   d5d2e:	d109      	bne.n	d5d44 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5d30:	4b09      	ldr	r3, [pc, #36]	; (d5d58 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5d32:	681b      	ldr	r3, [r3, #0]
   d5d34:	b13b      	cbz	r3, d5d46 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5d36:	b003      	add	sp, #12
   d5d38:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5d3c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5d3e:	f7ff ffe5 	bl	d5d0c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5d42:	e006      	b.n	d5d52 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5d44:	2300      	movs	r3, #0
   d5d46:	9300      	str	r3, [sp, #0]
   d5d48:	461a      	mov	r2, r3
   d5d4a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5d4e:	f7fe fe19 	bl	d4984 <system_ctrl_set_result>
        break;
    }
}
   d5d52:	b003      	add	sp, #12
   d5d54:	f85d fb04 	ldr.w	pc, [sp], #4
   d5d58:	2003e6e8 	.word	0x2003e6e8

000d5d5c <module_user_init_hook>:

void module_user_init_hook()
{
   d5d5c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5d5e:	4c10      	ldr	r4, [pc, #64]	; (d5da0 <module_user_init_hook+0x44>)
   d5d60:	4d10      	ldr	r5, [pc, #64]	; (d5da4 <module_user_init_hook+0x48>)
   d5d62:	6823      	ldr	r3, [r4, #0]
   d5d64:	42ab      	cmp	r3, r5
   d5d66:	4b10      	ldr	r3, [pc, #64]	; (d5da8 <module_user_init_hook+0x4c>)
   d5d68:	bf0c      	ite	eq
   d5d6a:	2201      	moveq	r2, #1
   d5d6c:	2200      	movne	r2, #0
   d5d6e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5d70:	d002      	beq.n	d5d78 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5d72:	f7ff ffbf 	bl	d5cf4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5d76:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5d78:	f7fe fc82 	bl	d4680 <HAL_RNG_GetRandomNumber>
   d5d7c:	4604      	mov	r4, r0
    srand(seed);
   d5d7e:	f001 f877 	bl	d6e70 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5d82:	4b0a      	ldr	r3, [pc, #40]	; (d5dac <module_user_init_hook+0x50>)
   d5d84:	b113      	cbz	r3, d5d8c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5d86:	4620      	mov	r0, r4
   d5d88:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5d8c:	2100      	movs	r1, #0
   d5d8e:	4807      	ldr	r0, [pc, #28]	; (d5dac <module_user_init_hook+0x50>)
   d5d90:	f7fe fe32 	bl	d49f8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5d94:	2100      	movs	r1, #0
   d5d96:	4806      	ldr	r0, [pc, #24]	; (d5db0 <module_user_init_hook+0x54>)
}
   d5d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5d9c:	f7fe bde8 	b.w	d4970 <system_ctrl_set_app_request_handler>
   d5da0:	2003f400 	.word	0x2003f400
   d5da4:	9a271c1e 	.word	0x9a271c1e
   d5da8:	2003e6ec 	.word	0x2003e6ec
   d5dac:	00000000 	.word	0x00000000
   d5db0:	000d5d25 	.word	0x000d5d25

000d5db4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5db4:	b510      	push	{r4, lr}
   d5db6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5db8:	f000 f8b0 	bl	d5f1c <_ZN8particle7globals11instanceSpiEv>
   d5dbc:	f7ff fcea 	bl	d5794 <_ZN8SPIClass9isEnabledEv>
   d5dc0:	b128      	cbz	r0, d5dce <pinAvailable+0x1a>
   d5dc2:	f1a4 030b 	sub.w	r3, r4, #11
   d5dc6:	2b02      	cmp	r3, #2
   d5dc8:	d801      	bhi.n	d5dce <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d5dca:	2000      	movs	r0, #0
   d5dcc:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5dce:	f000 f87f 	bl	d5ed0 <_Z19__fetch_global_Wirev>
   d5dd2:	f7ff fa61 	bl	d5298 <_ZN7TwoWire9isEnabledEv>
   d5dd6:	b108      	cbz	r0, d5ddc <pinAvailable+0x28>
   d5dd8:	2c01      	cmp	r4, #1
   d5dda:	d9f6      	bls.n	d5dca <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5ddc:	f7ff fe7a 	bl	d5ad4 <_Z22__fetch_global_Serial1v>
   d5de0:	f7ff fe74 	bl	d5acc <_ZN11USARTSerial9isEnabledEv>
   d5de4:	b118      	cbz	r0, d5dee <pinAvailable+0x3a>
   d5de6:	f1a4 0309 	sub.w	r3, r4, #9
   d5dea:	2b01      	cmp	r3, #1
   d5dec:	d9ed      	bls.n	d5dca <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5dee:	2c23      	cmp	r4, #35	; 0x23
   d5df0:	bf8c      	ite	hi
   d5df2:	2000      	movhi	r0, #0
   d5df4:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5df6:	bd10      	pop	{r4, pc}

000d5df8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5df8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5dfa:	b538      	push	{r3, r4, r5, lr}
   d5dfc:	4604      	mov	r4, r0
   d5dfe:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5e00:	d80a      	bhi.n	d5e18 <pinMode+0x20>
   d5e02:	29ff      	cmp	r1, #255	; 0xff
   d5e04:	d008      	beq.n	d5e18 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5e06:	f7ff ffd5 	bl	d5db4 <pinAvailable>
   d5e0a:	b128      	cbz	r0, d5e18 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5e0c:	4629      	mov	r1, r5
   d5e0e:	4620      	mov	r0, r4
}
   d5e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5e14:	f7fe bc7c 	b.w	d4710 <HAL_Pin_Mode>
   d5e18:	bd38      	pop	{r3, r4, r5, pc}

000d5e1a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5e1a:	b538      	push	{r3, r4, r5, lr}
   d5e1c:	4604      	mov	r4, r0
   d5e1e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5e20:	f7fe fc7e 	bl	d4720 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5e24:	28ff      	cmp	r0, #255	; 0xff
   d5e26:	d010      	beq.n	d5e4a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5e28:	2806      	cmp	r0, #6
   d5e2a:	d804      	bhi.n	d5e36 <digitalWrite+0x1c>
   d5e2c:	234d      	movs	r3, #77	; 0x4d
   d5e2e:	fa23 f000 	lsr.w	r0, r3, r0
   d5e32:	07c3      	lsls	r3, r0, #31
   d5e34:	d409      	bmi.n	d5e4a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5e36:	4620      	mov	r0, r4
   d5e38:	f7ff ffbc 	bl	d5db4 <pinAvailable>
   d5e3c:	b128      	cbz	r0, d5e4a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5e3e:	4629      	mov	r1, r5
   d5e40:	4620      	mov	r0, r4
}
   d5e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5e46:	f7fe bc73 	b.w	d4730 <HAL_GPIO_Write>
   d5e4a:	bd38      	pop	{r3, r4, r5, pc}

000d5e4c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d5e4c:	b510      	push	{r4, lr}
   d5e4e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5e50:	f7fe fc66 	bl	d4720 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d5e54:	3804      	subs	r0, #4
   d5e56:	b2c0      	uxtb	r0, r0
   d5e58:	2801      	cmp	r0, #1
   d5e5a:	d908      	bls.n	d5e6e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d5e5c:	4620      	mov	r0, r4
   d5e5e:	f7ff ffa9 	bl	d5db4 <pinAvailable>
   d5e62:	b120      	cbz	r0, d5e6e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5e64:	4620      	mov	r0, r4
}
   d5e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5e6a:	f7fe bc69 	b.w	d4740 <HAL_GPIO_Read>
}
   d5e6e:	2000      	movs	r0, #0
   d5e70:	bd10      	pop	{r4, pc}
	...

000d5e74 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d5e74:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d5e76:	4c07      	ldr	r4, [pc, #28]	; (d5e94 <_Z21__fetch_global_EEPROMv+0x20>)
   d5e78:	6823      	ldr	r3, [r4, #0]
   d5e7a:	07db      	lsls	r3, r3, #31
   d5e7c:	d408      	bmi.n	d5e90 <_Z21__fetch_global_EEPROMv+0x1c>
   d5e7e:	4620      	mov	r0, r4
   d5e80:	f7fe f911 	bl	d40a6 <__cxa_guard_acquire>
   d5e84:	b120      	cbz	r0, d5e90 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d5e86:	f7fe fc1b 	bl	d46c0 <HAL_EEPROM_Init>
   d5e8a:	4620      	mov	r0, r4
   d5e8c:	f7fe f910 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d5e90:	4801      	ldr	r0, [pc, #4]	; (d5e98 <_Z21__fetch_global_EEPROMv+0x24>)
   d5e92:	bd10      	pop	{r4, pc}
   d5e94:	2003e6f4 	.word	0x2003e6f4
   d5e98:	2003e6f8 	.word	0x2003e6f8

000d5e9c <_Z17acquireWireBufferv>:
   d5e9c:	b570      	push	{r4, r5, r6, lr}
   d5e9e:	4604      	mov	r4, r0
   d5ea0:	2514      	movs	r5, #20
   d5ea2:	462a      	mov	r2, r5
   d5ea4:	4e09      	ldr	r6, [pc, #36]	; (d5ecc <_Z17acquireWireBufferv+0x30>)
   d5ea6:	2100      	movs	r1, #0
   d5ea8:	f000 ffd9 	bl	d6e5e <memset>
   d5eac:	8025      	strh	r5, [r4, #0]
   d5eae:	2520      	movs	r5, #32
   d5eb0:	4631      	mov	r1, r6
   d5eb2:	60a5      	str	r5, [r4, #8]
   d5eb4:	6125      	str	r5, [r4, #16]
   d5eb6:	4628      	mov	r0, r5
   d5eb8:	f000 f86f 	bl	d5f9a <_ZnajRKSt9nothrow_t>
   d5ebc:	4631      	mov	r1, r6
   d5ebe:	6060      	str	r0, [r4, #4]
   d5ec0:	4628      	mov	r0, r5
   d5ec2:	f000 f86a 	bl	d5f9a <_ZnajRKSt9nothrow_t>
   d5ec6:	60e0      	str	r0, [r4, #12]
   d5ec8:	4620      	mov	r0, r4
   d5eca:	bd70      	pop	{r4, r5, r6, pc}
   d5ecc:	000d94a4 	.word	0x000d94a4

000d5ed0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5ed0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5ed2:	4d0e      	ldr	r5, [pc, #56]	; (d5f0c <_Z19__fetch_global_Wirev+0x3c>)
   d5ed4:	6829      	ldr	r1, [r5, #0]
   d5ed6:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5eda:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5edc:	d113      	bne.n	d5f06 <_Z19__fetch_global_Wirev+0x36>
   d5ede:	4628      	mov	r0, r5
   d5ee0:	f7fe f8e1 	bl	d40a6 <__cxa_guard_acquire>
   d5ee4:	b178      	cbz	r0, d5f06 <_Z19__fetch_global_Wirev+0x36>
   d5ee6:	a801      	add	r0, sp, #4
   d5ee8:	f7ff ffd8 	bl	d5e9c <_Z17acquireWireBufferv>
   d5eec:	aa01      	add	r2, sp, #4
   d5eee:	4621      	mov	r1, r4
   d5ef0:	4807      	ldr	r0, [pc, #28]	; (d5f10 <_Z19__fetch_global_Wirev+0x40>)
   d5ef2:	f7ff f9bf 	bl	d5274 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5ef6:	4628      	mov	r0, r5
   d5ef8:	f7fe f8da 	bl	d40b0 <__cxa_guard_release>
   d5efc:	4a05      	ldr	r2, [pc, #20]	; (d5f14 <_Z19__fetch_global_Wirev+0x44>)
   d5efe:	4906      	ldr	r1, [pc, #24]	; (d5f18 <_Z19__fetch_global_Wirev+0x48>)
   d5f00:	4803      	ldr	r0, [pc, #12]	; (d5f10 <_Z19__fetch_global_Wirev+0x40>)
   d5f02:	f000 f82b 	bl	d5f5c <__aeabi_atexit>
	return wire;
}
   d5f06:	4802      	ldr	r0, [pc, #8]	; (d5f10 <_Z19__fetch_global_Wirev+0x40>)
   d5f08:	b007      	add	sp, #28
   d5f0a:	bd30      	pop	{r4, r5, pc}
   d5f0c:	2003e6fc 	.word	0x2003e6fc
   d5f10:	2003e700 	.word	0x2003e700
   d5f14:	2003e334 	.word	0x2003e334
   d5f18:	000d521d 	.word	0x000d521d

000d5f1c <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d5f1c:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d5f1e:	4d0b      	ldr	r5, [pc, #44]	; (d5f4c <_ZN8particle7globals11instanceSpiEv+0x30>)
   d5f20:	6829      	ldr	r1, [r5, #0]
   d5f22:	f011 0401 	ands.w	r4, r1, #1
   d5f26:	d10f      	bne.n	d5f48 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d5f28:	4628      	mov	r0, r5
   d5f2a:	f7fe f8bc 	bl	d40a6 <__cxa_guard_acquire>
   d5f2e:	b158      	cbz	r0, d5f48 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d5f30:	4621      	mov	r1, r4
   d5f32:	4807      	ldr	r0, [pc, #28]	; (d5f50 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5f34:	f7ff fc20 	bl	d5778 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5f38:	4628      	mov	r0, r5
   d5f3a:	f7fe f8b9 	bl	d40b0 <__cxa_guard_release>
   d5f3e:	4a05      	ldr	r2, [pc, #20]	; (d5f54 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d5f40:	4905      	ldr	r1, [pc, #20]	; (d5f58 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d5f42:	4803      	ldr	r0, [pc, #12]	; (d5f50 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5f44:	f000 f80a 	bl	d5f5c <__aeabi_atexit>
    return instance;
}
   d5f48:	4801      	ldr	r0, [pc, #4]	; (d5f50 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5f4a:	bd38      	pop	{r3, r4, r5, pc}
   d5f4c:	2003e720 	.word	0x2003e720
   d5f50:	2003e714 	.word	0x2003e714
   d5f54:	2003e334 	.word	0x2003e334
   d5f58:	000d5769 	.word	0x000d5769

000d5f5c <__aeabi_atexit>:
   d5f5c:	460b      	mov	r3, r1
   d5f5e:	4601      	mov	r1, r0
   d5f60:	4618      	mov	r0, r3
   d5f62:	f000 be67 	b.w	d6c34 <__cxa_atexit>

000d5f66 <_ZdlPvj>:
   d5f66:	f7fe b89a 	b.w	d409e <_ZdlPv>
	...

000d5f6c <_ZSt15get_new_handlerv>:
   d5f6c:	4b02      	ldr	r3, [pc, #8]	; (d5f78 <_ZSt15get_new_handlerv+0xc>)
   d5f6e:	6818      	ldr	r0, [r3, #0]
   d5f70:	f3bf 8f5f 	dmb	sy
   d5f74:	4770      	bx	lr
   d5f76:	bf00      	nop
   d5f78:	2003e724 	.word	0x2003e724

000d5f7c <_ZnwjRKSt9nothrow_t>:
   d5f7c:	b510      	push	{r4, lr}
   d5f7e:	2800      	cmp	r0, #0
   d5f80:	bf14      	ite	ne
   d5f82:	4604      	movne	r4, r0
   d5f84:	2401      	moveq	r4, #1
   d5f86:	4620      	mov	r0, r4
   d5f88:	f7fe fd8e 	bl	d4aa8 <malloc>
   d5f8c:	b920      	cbnz	r0, d5f98 <_ZnwjRKSt9nothrow_t+0x1c>
   d5f8e:	f7ff ffed 	bl	d5f6c <_ZSt15get_new_handlerv>
   d5f92:	b108      	cbz	r0, d5f98 <_ZnwjRKSt9nothrow_t+0x1c>
   d5f94:	4780      	blx	r0
   d5f96:	e7f6      	b.n	d5f86 <_ZnwjRKSt9nothrow_t+0xa>
   d5f98:	bd10      	pop	{r4, pc}

000d5f9a <_ZnajRKSt9nothrow_t>:
   d5f9a:	f7ff bfef 	b.w	d5f7c <_ZnwjRKSt9nothrow_t>

000d5f9e <_ZSt25__throw_bad_function_callv>:
   d5f9e:	b508      	push	{r3, lr}
   d5fa0:	f7fe fdaa 	bl	d4af8 <abort>

000d5fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5fa4:	4b24      	ldr	r3, [pc, #144]	; (d6038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5fa6:	681a      	ldr	r2, [r3, #0]
   d5fa8:	07d0      	lsls	r0, r2, #31
   d5faa:	bf5c      	itt	pl
   d5fac:	2201      	movpl	r2, #1
   d5fae:	601a      	strpl	r2, [r3, #0]
   d5fb0:	4b22      	ldr	r3, [pc, #136]	; (d603c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5fb2:	681a      	ldr	r2, [r3, #0]
   d5fb4:	07d1      	lsls	r1, r2, #31
   d5fb6:	bf5c      	itt	pl
   d5fb8:	2201      	movpl	r2, #1
   d5fba:	601a      	strpl	r2, [r3, #0]
   d5fbc:	4b20      	ldr	r3, [pc, #128]	; (d6040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5fbe:	681a      	ldr	r2, [r3, #0]
   d5fc0:	07d2      	lsls	r2, r2, #31
   d5fc2:	bf5c      	itt	pl
   d5fc4:	2201      	movpl	r2, #1
   d5fc6:	601a      	strpl	r2, [r3, #0]
   d5fc8:	4b1e      	ldr	r3, [pc, #120]	; (d6044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5fca:	681a      	ldr	r2, [r3, #0]
   d5fcc:	07d0      	lsls	r0, r2, #31
   d5fce:	bf5c      	itt	pl
   d5fd0:	2201      	movpl	r2, #1
   d5fd2:	601a      	strpl	r2, [r3, #0]
   d5fd4:	4b1c      	ldr	r3, [pc, #112]	; (d6048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5fd6:	681a      	ldr	r2, [r3, #0]
   d5fd8:	07d1      	lsls	r1, r2, #31
   d5fda:	bf5c      	itt	pl
   d5fdc:	2201      	movpl	r2, #1
   d5fde:	601a      	strpl	r2, [r3, #0]
   d5fe0:	4b1a      	ldr	r3, [pc, #104]	; (d604c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5fe2:	681a      	ldr	r2, [r3, #0]
   d5fe4:	07d2      	lsls	r2, r2, #31
   d5fe6:	bf5c      	itt	pl
   d5fe8:	2201      	movpl	r2, #1
   d5fea:	601a      	strpl	r2, [r3, #0]
   d5fec:	4b18      	ldr	r3, [pc, #96]	; (d6050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5fee:	681a      	ldr	r2, [r3, #0]
   d5ff0:	07d0      	lsls	r0, r2, #31
   d5ff2:	bf5c      	itt	pl
   d5ff4:	2201      	movpl	r2, #1
   d5ff6:	601a      	strpl	r2, [r3, #0]
   d5ff8:	4b16      	ldr	r3, [pc, #88]	; (d6054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5ffa:	681a      	ldr	r2, [r3, #0]
   d5ffc:	07d1      	lsls	r1, r2, #31
   d5ffe:	bf5c      	itt	pl
   d6000:	2201      	movpl	r2, #1
   d6002:	601a      	strpl	r2, [r3, #0]
   d6004:	4b14      	ldr	r3, [pc, #80]	; (d6058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6006:	681a      	ldr	r2, [r3, #0]
   d6008:	07d2      	lsls	r2, r2, #31
   d600a:	bf5c      	itt	pl
   d600c:	2201      	movpl	r2, #1
   d600e:	601a      	strpl	r2, [r3, #0]
   d6010:	4b12      	ldr	r3, [pc, #72]	; (d605c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6012:	681a      	ldr	r2, [r3, #0]
   d6014:	07d0      	lsls	r0, r2, #31
   d6016:	bf5c      	itt	pl
   d6018:	2201      	movpl	r2, #1
   d601a:	601a      	strpl	r2, [r3, #0]
   d601c:	4b10      	ldr	r3, [pc, #64]	; (d6060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d601e:	681a      	ldr	r2, [r3, #0]
   d6020:	07d1      	lsls	r1, r2, #31
   d6022:	bf5c      	itt	pl
   d6024:	2201      	movpl	r2, #1
   d6026:	601a      	strpl	r2, [r3, #0]
   d6028:	4b0e      	ldr	r3, [pc, #56]	; (d6064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d602a:	681a      	ldr	r2, [r3, #0]
   d602c:	07d2      	lsls	r2, r2, #31
   d602e:	bf5c      	itt	pl
   d6030:	2201      	movpl	r2, #1
   d6032:	601a      	strpl	r2, [r3, #0]
   d6034:	4770      	bx	lr
   d6036:	bf00      	nop
   d6038:	2003e754 	.word	0x2003e754
   d603c:	2003e750 	.word	0x2003e750
   d6040:	2003e74c 	.word	0x2003e74c
   d6044:	2003e748 	.word	0x2003e748
   d6048:	2003e744 	.word	0x2003e744
   d604c:	2003e740 	.word	0x2003e740
   d6050:	2003e73c 	.word	0x2003e73c
   d6054:	2003e738 	.word	0x2003e738
   d6058:	2003e734 	.word	0x2003e734
   d605c:	2003e730 	.word	0x2003e730
   d6060:	2003e72c 	.word	0x2003e72c
   d6064:	2003e728 	.word	0x2003e728

000d6068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6068:	4b18      	ldr	r3, [pc, #96]	; (d60cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d606a:	681a      	ldr	r2, [r3, #0]
   d606c:	07d1      	lsls	r1, r2, #31
   d606e:	bf5c      	itt	pl
   d6070:	2201      	movpl	r2, #1
   d6072:	601a      	strpl	r2, [r3, #0]
   d6074:	4b16      	ldr	r3, [pc, #88]	; (d60d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6076:	681a      	ldr	r2, [r3, #0]
   d6078:	07d2      	lsls	r2, r2, #31
   d607a:	bf5c      	itt	pl
   d607c:	2201      	movpl	r2, #1
   d607e:	601a      	strpl	r2, [r3, #0]
   d6080:	4b14      	ldr	r3, [pc, #80]	; (d60d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6082:	681a      	ldr	r2, [r3, #0]
   d6084:	07d0      	lsls	r0, r2, #31
   d6086:	bf5c      	itt	pl
   d6088:	2201      	movpl	r2, #1
   d608a:	601a      	strpl	r2, [r3, #0]
   d608c:	4b12      	ldr	r3, [pc, #72]	; (d60d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d608e:	681a      	ldr	r2, [r3, #0]
   d6090:	07d1      	lsls	r1, r2, #31
   d6092:	bf5c      	itt	pl
   d6094:	2201      	movpl	r2, #1
   d6096:	601a      	strpl	r2, [r3, #0]
   d6098:	4b10      	ldr	r3, [pc, #64]	; (d60dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d609a:	681a      	ldr	r2, [r3, #0]
   d609c:	07d2      	lsls	r2, r2, #31
   d609e:	bf5c      	itt	pl
   d60a0:	2201      	movpl	r2, #1
   d60a2:	601a      	strpl	r2, [r3, #0]
   d60a4:	4b0e      	ldr	r3, [pc, #56]	; (d60e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d60a6:	681a      	ldr	r2, [r3, #0]
   d60a8:	07d0      	lsls	r0, r2, #31
   d60aa:	bf5c      	itt	pl
   d60ac:	2201      	movpl	r2, #1
   d60ae:	601a      	strpl	r2, [r3, #0]
   d60b0:	4b0c      	ldr	r3, [pc, #48]	; (d60e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d60b2:	681a      	ldr	r2, [r3, #0]
   d60b4:	07d1      	lsls	r1, r2, #31
   d60b6:	bf5c      	itt	pl
   d60b8:	2201      	movpl	r2, #1
   d60ba:	601a      	strpl	r2, [r3, #0]
   d60bc:	4b0a      	ldr	r3, [pc, #40]	; (d60e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d60be:	681a      	ldr	r2, [r3, #0]
   d60c0:	07d2      	lsls	r2, r2, #31
   d60c2:	bf5c      	itt	pl
   d60c4:	2201      	movpl	r2, #1
   d60c6:	601a      	strpl	r2, [r3, #0]
   d60c8:	4770      	bx	lr
   d60ca:	bf00      	nop
   d60cc:	2003e774 	.word	0x2003e774
   d60d0:	2003e770 	.word	0x2003e770
   d60d4:	2003e76c 	.word	0x2003e76c
   d60d8:	2003e768 	.word	0x2003e768
   d60dc:	2003e764 	.word	0x2003e764
   d60e0:	2003e760 	.word	0x2003e760
   d60e4:	2003e75c 	.word	0x2003e75c
   d60e8:	2003e758 	.word	0x2003e758

000d60ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d60ec:	4b18      	ldr	r3, [pc, #96]	; (d6150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d60ee:	681a      	ldr	r2, [r3, #0]
   d60f0:	07d1      	lsls	r1, r2, #31
   d60f2:	bf5c      	itt	pl
   d60f4:	2201      	movpl	r2, #1
   d60f6:	601a      	strpl	r2, [r3, #0]
   d60f8:	4b16      	ldr	r3, [pc, #88]	; (d6154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d60fa:	681a      	ldr	r2, [r3, #0]
   d60fc:	07d2      	lsls	r2, r2, #31
   d60fe:	bf5c      	itt	pl
   d6100:	2201      	movpl	r2, #1
   d6102:	601a      	strpl	r2, [r3, #0]
   d6104:	4b14      	ldr	r3, [pc, #80]	; (d6158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6106:	681a      	ldr	r2, [r3, #0]
   d6108:	07d0      	lsls	r0, r2, #31
   d610a:	bf5c      	itt	pl
   d610c:	2201      	movpl	r2, #1
   d610e:	601a      	strpl	r2, [r3, #0]
   d6110:	4b12      	ldr	r3, [pc, #72]	; (d615c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6112:	681a      	ldr	r2, [r3, #0]
   d6114:	07d1      	lsls	r1, r2, #31
   d6116:	bf5c      	itt	pl
   d6118:	2201      	movpl	r2, #1
   d611a:	601a      	strpl	r2, [r3, #0]
   d611c:	4b10      	ldr	r3, [pc, #64]	; (d6160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d611e:	681a      	ldr	r2, [r3, #0]
   d6120:	07d2      	lsls	r2, r2, #31
   d6122:	bf5c      	itt	pl
   d6124:	2201      	movpl	r2, #1
   d6126:	601a      	strpl	r2, [r3, #0]
   d6128:	4b0e      	ldr	r3, [pc, #56]	; (d6164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d612a:	681a      	ldr	r2, [r3, #0]
   d612c:	07d0      	lsls	r0, r2, #31
   d612e:	bf5c      	itt	pl
   d6130:	2201      	movpl	r2, #1
   d6132:	601a      	strpl	r2, [r3, #0]
   d6134:	4b0c      	ldr	r3, [pc, #48]	; (d6168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6136:	681a      	ldr	r2, [r3, #0]
   d6138:	07d1      	lsls	r1, r2, #31
   d613a:	bf5c      	itt	pl
   d613c:	2201      	movpl	r2, #1
   d613e:	601a      	strpl	r2, [r3, #0]
   d6140:	4b0a      	ldr	r3, [pc, #40]	; (d616c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6142:	681a      	ldr	r2, [r3, #0]
   d6144:	07d2      	lsls	r2, r2, #31
   d6146:	bf5c      	itt	pl
   d6148:	2201      	movpl	r2, #1
   d614a:	601a      	strpl	r2, [r3, #0]
   d614c:	4770      	bx	lr
   d614e:	bf00      	nop
   d6150:	2003e794 	.word	0x2003e794
   d6154:	2003e790 	.word	0x2003e790
   d6158:	2003e78c 	.word	0x2003e78c
   d615c:	2003e788 	.word	0x2003e788
   d6160:	2003e784 	.word	0x2003e784
   d6164:	2003e780 	.word	0x2003e780
   d6168:	2003e77c 	.word	0x2003e77c
   d616c:	2003e778 	.word	0x2003e778

000d6170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6170:	4b24      	ldr	r3, [pc, #144]	; (d6204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6172:	681a      	ldr	r2, [r3, #0]
   d6174:	07d0      	lsls	r0, r2, #31
   d6176:	bf5c      	itt	pl
   d6178:	2201      	movpl	r2, #1
   d617a:	601a      	strpl	r2, [r3, #0]
   d617c:	4b22      	ldr	r3, [pc, #136]	; (d6208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d617e:	681a      	ldr	r2, [r3, #0]
   d6180:	07d1      	lsls	r1, r2, #31
   d6182:	bf5c      	itt	pl
   d6184:	2201      	movpl	r2, #1
   d6186:	601a      	strpl	r2, [r3, #0]
   d6188:	4b20      	ldr	r3, [pc, #128]	; (d620c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d618a:	681a      	ldr	r2, [r3, #0]
   d618c:	07d2      	lsls	r2, r2, #31
   d618e:	bf5c      	itt	pl
   d6190:	2201      	movpl	r2, #1
   d6192:	601a      	strpl	r2, [r3, #0]
   d6194:	4b1e      	ldr	r3, [pc, #120]	; (d6210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6196:	681a      	ldr	r2, [r3, #0]
   d6198:	07d0      	lsls	r0, r2, #31
   d619a:	bf5c      	itt	pl
   d619c:	2201      	movpl	r2, #1
   d619e:	601a      	strpl	r2, [r3, #0]
   d61a0:	4b1c      	ldr	r3, [pc, #112]	; (d6214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d61a2:	681a      	ldr	r2, [r3, #0]
   d61a4:	07d1      	lsls	r1, r2, #31
   d61a6:	bf5c      	itt	pl
   d61a8:	2201      	movpl	r2, #1
   d61aa:	601a      	strpl	r2, [r3, #0]
   d61ac:	4b1a      	ldr	r3, [pc, #104]	; (d6218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d61ae:	681a      	ldr	r2, [r3, #0]
   d61b0:	07d2      	lsls	r2, r2, #31
   d61b2:	bf5c      	itt	pl
   d61b4:	2201      	movpl	r2, #1
   d61b6:	601a      	strpl	r2, [r3, #0]
   d61b8:	4b18      	ldr	r3, [pc, #96]	; (d621c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d61ba:	681a      	ldr	r2, [r3, #0]
   d61bc:	07d0      	lsls	r0, r2, #31
   d61be:	bf5c      	itt	pl
   d61c0:	2201      	movpl	r2, #1
   d61c2:	601a      	strpl	r2, [r3, #0]
   d61c4:	4b16      	ldr	r3, [pc, #88]	; (d6220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d61c6:	681a      	ldr	r2, [r3, #0]
   d61c8:	07d1      	lsls	r1, r2, #31
   d61ca:	bf5c      	itt	pl
   d61cc:	2201      	movpl	r2, #1
   d61ce:	601a      	strpl	r2, [r3, #0]
   d61d0:	4b14      	ldr	r3, [pc, #80]	; (d6224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d61d2:	681a      	ldr	r2, [r3, #0]
   d61d4:	07d2      	lsls	r2, r2, #31
   d61d6:	bf5c      	itt	pl
   d61d8:	2201      	movpl	r2, #1
   d61da:	601a      	strpl	r2, [r3, #0]
   d61dc:	4b12      	ldr	r3, [pc, #72]	; (d6228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d61de:	681a      	ldr	r2, [r3, #0]
   d61e0:	07d0      	lsls	r0, r2, #31
   d61e2:	bf5c      	itt	pl
   d61e4:	2201      	movpl	r2, #1
   d61e6:	601a      	strpl	r2, [r3, #0]
   d61e8:	4b10      	ldr	r3, [pc, #64]	; (d622c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d61ea:	681a      	ldr	r2, [r3, #0]
   d61ec:	07d1      	lsls	r1, r2, #31
   d61ee:	bf5c      	itt	pl
   d61f0:	2201      	movpl	r2, #1
   d61f2:	601a      	strpl	r2, [r3, #0]
   d61f4:	4b0e      	ldr	r3, [pc, #56]	; (d6230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d61f6:	681a      	ldr	r2, [r3, #0]
   d61f8:	07d2      	lsls	r2, r2, #31
   d61fa:	bf5c      	itt	pl
   d61fc:	2201      	movpl	r2, #1
   d61fe:	601a      	strpl	r2, [r3, #0]
   d6200:	4770      	bx	lr
   d6202:	bf00      	nop
   d6204:	2003e7c4 	.word	0x2003e7c4
   d6208:	2003e7c0 	.word	0x2003e7c0
   d620c:	2003e7bc 	.word	0x2003e7bc
   d6210:	2003e7b8 	.word	0x2003e7b8
   d6214:	2003e7b4 	.word	0x2003e7b4
   d6218:	2003e7b0 	.word	0x2003e7b0
   d621c:	2003e7ac 	.word	0x2003e7ac
   d6220:	2003e7a8 	.word	0x2003e7a8
   d6224:	2003e7a4 	.word	0x2003e7a4
   d6228:	2003e7a0 	.word	0x2003e7a0
   d622c:	2003e79c 	.word	0x2003e79c
   d6230:	2003e798 	.word	0x2003e798

000d6234 <__aeabi_drsub>:
   d6234:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6238:	e002      	b.n	d6240 <__adddf3>
   d623a:	bf00      	nop

000d623c <__aeabi_dsub>:
   d623c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6240 <__adddf3>:
   d6240:	b530      	push	{r4, r5, lr}
   d6242:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6246:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d624a:	ea94 0f05 	teq	r4, r5
   d624e:	bf08      	it	eq
   d6250:	ea90 0f02 	teqeq	r0, r2
   d6254:	bf1f      	itttt	ne
   d6256:	ea54 0c00 	orrsne.w	ip, r4, r0
   d625a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d625e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6266:	f000 80e2 	beq.w	d642e <__adddf3+0x1ee>
   d626a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d626e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6272:	bfb8      	it	lt
   d6274:	426d      	neglt	r5, r5
   d6276:	dd0c      	ble.n	d6292 <__adddf3+0x52>
   d6278:	442c      	add	r4, r5
   d627a:	ea80 0202 	eor.w	r2, r0, r2
   d627e:	ea81 0303 	eor.w	r3, r1, r3
   d6282:	ea82 0000 	eor.w	r0, r2, r0
   d6286:	ea83 0101 	eor.w	r1, r3, r1
   d628a:	ea80 0202 	eor.w	r2, r0, r2
   d628e:	ea81 0303 	eor.w	r3, r1, r3
   d6292:	2d36      	cmp	r5, #54	; 0x36
   d6294:	bf88      	it	hi
   d6296:	bd30      	pophi	{r4, r5, pc}
   d6298:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d629c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d62a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d62a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d62a8:	d002      	beq.n	d62b0 <__adddf3+0x70>
   d62aa:	4240      	negs	r0, r0
   d62ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d62b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d62b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d62b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d62bc:	d002      	beq.n	d62c4 <__adddf3+0x84>
   d62be:	4252      	negs	r2, r2
   d62c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d62c4:	ea94 0f05 	teq	r4, r5
   d62c8:	f000 80a7 	beq.w	d641a <__adddf3+0x1da>
   d62cc:	f1a4 0401 	sub.w	r4, r4, #1
   d62d0:	f1d5 0e20 	rsbs	lr, r5, #32
   d62d4:	db0d      	blt.n	d62f2 <__adddf3+0xb2>
   d62d6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d62da:	fa22 f205 	lsr.w	r2, r2, r5
   d62de:	1880      	adds	r0, r0, r2
   d62e0:	f141 0100 	adc.w	r1, r1, #0
   d62e4:	fa03 f20e 	lsl.w	r2, r3, lr
   d62e8:	1880      	adds	r0, r0, r2
   d62ea:	fa43 f305 	asr.w	r3, r3, r5
   d62ee:	4159      	adcs	r1, r3
   d62f0:	e00e      	b.n	d6310 <__adddf3+0xd0>
   d62f2:	f1a5 0520 	sub.w	r5, r5, #32
   d62f6:	f10e 0e20 	add.w	lr, lr, #32
   d62fa:	2a01      	cmp	r2, #1
   d62fc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6300:	bf28      	it	cs
   d6302:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6306:	fa43 f305 	asr.w	r3, r3, r5
   d630a:	18c0      	adds	r0, r0, r3
   d630c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6310:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6314:	d507      	bpl.n	d6326 <__adddf3+0xe6>
   d6316:	f04f 0e00 	mov.w	lr, #0
   d631a:	f1dc 0c00 	rsbs	ip, ip, #0
   d631e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6322:	eb6e 0101 	sbc.w	r1, lr, r1
   d6326:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d632a:	d31b      	bcc.n	d6364 <__adddf3+0x124>
   d632c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6330:	d30c      	bcc.n	d634c <__adddf3+0x10c>
   d6332:	0849      	lsrs	r1, r1, #1
   d6334:	ea5f 0030 	movs.w	r0, r0, rrx
   d6338:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d633c:	f104 0401 	add.w	r4, r4, #1
   d6340:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6344:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6348:	f080 809a 	bcs.w	d6480 <__adddf3+0x240>
   d634c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6350:	bf08      	it	eq
   d6352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6356:	f150 0000 	adcs.w	r0, r0, #0
   d635a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d635e:	ea41 0105 	orr.w	r1, r1, r5
   d6362:	bd30      	pop	{r4, r5, pc}
   d6364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6368:	4140      	adcs	r0, r0
   d636a:	eb41 0101 	adc.w	r1, r1, r1
   d636e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6372:	f1a4 0401 	sub.w	r4, r4, #1
   d6376:	d1e9      	bne.n	d634c <__adddf3+0x10c>
   d6378:	f091 0f00 	teq	r1, #0
   d637c:	bf04      	itt	eq
   d637e:	4601      	moveq	r1, r0
   d6380:	2000      	moveq	r0, #0
   d6382:	fab1 f381 	clz	r3, r1
   d6386:	bf08      	it	eq
   d6388:	3320      	addeq	r3, #32
   d638a:	f1a3 030b 	sub.w	r3, r3, #11
   d638e:	f1b3 0220 	subs.w	r2, r3, #32
   d6392:	da0c      	bge.n	d63ae <__adddf3+0x16e>
   d6394:	320c      	adds	r2, #12
   d6396:	dd08      	ble.n	d63aa <__adddf3+0x16a>
   d6398:	f102 0c14 	add.w	ip, r2, #20
   d639c:	f1c2 020c 	rsb	r2, r2, #12
   d63a0:	fa01 f00c 	lsl.w	r0, r1, ip
   d63a4:	fa21 f102 	lsr.w	r1, r1, r2
   d63a8:	e00c      	b.n	d63c4 <__adddf3+0x184>
   d63aa:	f102 0214 	add.w	r2, r2, #20
   d63ae:	bfd8      	it	le
   d63b0:	f1c2 0c20 	rsble	ip, r2, #32
   d63b4:	fa01 f102 	lsl.w	r1, r1, r2
   d63b8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d63bc:	bfdc      	itt	le
   d63be:	ea41 010c 	orrle.w	r1, r1, ip
   d63c2:	4090      	lslle	r0, r2
   d63c4:	1ae4      	subs	r4, r4, r3
   d63c6:	bfa2      	ittt	ge
   d63c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d63cc:	4329      	orrge	r1, r5
   d63ce:	bd30      	popge	{r4, r5, pc}
   d63d0:	ea6f 0404 	mvn.w	r4, r4
   d63d4:	3c1f      	subs	r4, #31
   d63d6:	da1c      	bge.n	d6412 <__adddf3+0x1d2>
   d63d8:	340c      	adds	r4, #12
   d63da:	dc0e      	bgt.n	d63fa <__adddf3+0x1ba>
   d63dc:	f104 0414 	add.w	r4, r4, #20
   d63e0:	f1c4 0220 	rsb	r2, r4, #32
   d63e4:	fa20 f004 	lsr.w	r0, r0, r4
   d63e8:	fa01 f302 	lsl.w	r3, r1, r2
   d63ec:	ea40 0003 	orr.w	r0, r0, r3
   d63f0:	fa21 f304 	lsr.w	r3, r1, r4
   d63f4:	ea45 0103 	orr.w	r1, r5, r3
   d63f8:	bd30      	pop	{r4, r5, pc}
   d63fa:	f1c4 040c 	rsb	r4, r4, #12
   d63fe:	f1c4 0220 	rsb	r2, r4, #32
   d6402:	fa20 f002 	lsr.w	r0, r0, r2
   d6406:	fa01 f304 	lsl.w	r3, r1, r4
   d640a:	ea40 0003 	orr.w	r0, r0, r3
   d640e:	4629      	mov	r1, r5
   d6410:	bd30      	pop	{r4, r5, pc}
   d6412:	fa21 f004 	lsr.w	r0, r1, r4
   d6416:	4629      	mov	r1, r5
   d6418:	bd30      	pop	{r4, r5, pc}
   d641a:	f094 0f00 	teq	r4, #0
   d641e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6422:	bf06      	itte	eq
   d6424:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6428:	3401      	addeq	r4, #1
   d642a:	3d01      	subne	r5, #1
   d642c:	e74e      	b.n	d62cc <__adddf3+0x8c>
   d642e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6432:	bf18      	it	ne
   d6434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6438:	d029      	beq.n	d648e <__adddf3+0x24e>
   d643a:	ea94 0f05 	teq	r4, r5
   d643e:	bf08      	it	eq
   d6440:	ea90 0f02 	teqeq	r0, r2
   d6444:	d005      	beq.n	d6452 <__adddf3+0x212>
   d6446:	ea54 0c00 	orrs.w	ip, r4, r0
   d644a:	bf04      	itt	eq
   d644c:	4619      	moveq	r1, r3
   d644e:	4610      	moveq	r0, r2
   d6450:	bd30      	pop	{r4, r5, pc}
   d6452:	ea91 0f03 	teq	r1, r3
   d6456:	bf1e      	ittt	ne
   d6458:	2100      	movne	r1, #0
   d645a:	2000      	movne	r0, #0
   d645c:	bd30      	popne	{r4, r5, pc}
   d645e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6462:	d105      	bne.n	d6470 <__adddf3+0x230>
   d6464:	0040      	lsls	r0, r0, #1
   d6466:	4149      	adcs	r1, r1
   d6468:	bf28      	it	cs
   d646a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d646e:	bd30      	pop	{r4, r5, pc}
   d6470:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6474:	bf3c      	itt	cc
   d6476:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d647a:	bd30      	popcc	{r4, r5, pc}
   d647c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6480:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6484:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6488:	f04f 0000 	mov.w	r0, #0
   d648c:	bd30      	pop	{r4, r5, pc}
   d648e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6492:	bf1a      	itte	ne
   d6494:	4619      	movne	r1, r3
   d6496:	4610      	movne	r0, r2
   d6498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d649c:	bf1c      	itt	ne
   d649e:	460b      	movne	r3, r1
   d64a0:	4602      	movne	r2, r0
   d64a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d64a6:	bf06      	itte	eq
   d64a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d64ac:	ea91 0f03 	teqeq	r1, r3
   d64b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d64b4:	bd30      	pop	{r4, r5, pc}
   d64b6:	bf00      	nop

000d64b8 <__aeabi_ui2d>:
   d64b8:	f090 0f00 	teq	r0, #0
   d64bc:	bf04      	itt	eq
   d64be:	2100      	moveq	r1, #0
   d64c0:	4770      	bxeq	lr
   d64c2:	b530      	push	{r4, r5, lr}
   d64c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d64c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d64cc:	f04f 0500 	mov.w	r5, #0
   d64d0:	f04f 0100 	mov.w	r1, #0
   d64d4:	e750      	b.n	d6378 <__adddf3+0x138>
   d64d6:	bf00      	nop

000d64d8 <__aeabi_i2d>:
   d64d8:	f090 0f00 	teq	r0, #0
   d64dc:	bf04      	itt	eq
   d64de:	2100      	moveq	r1, #0
   d64e0:	4770      	bxeq	lr
   d64e2:	b530      	push	{r4, r5, lr}
   d64e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d64e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d64ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d64f0:	bf48      	it	mi
   d64f2:	4240      	negmi	r0, r0
   d64f4:	f04f 0100 	mov.w	r1, #0
   d64f8:	e73e      	b.n	d6378 <__adddf3+0x138>
   d64fa:	bf00      	nop

000d64fc <__aeabi_f2d>:
   d64fc:	0042      	lsls	r2, r0, #1
   d64fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6502:	ea4f 0131 	mov.w	r1, r1, rrx
   d6506:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d650a:	bf1f      	itttt	ne
   d650c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6510:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6514:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6518:	4770      	bxne	lr
   d651a:	f092 0f00 	teq	r2, #0
   d651e:	bf14      	ite	ne
   d6520:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6524:	4770      	bxeq	lr
   d6526:	b530      	push	{r4, r5, lr}
   d6528:	f44f 7460 	mov.w	r4, #896	; 0x380
   d652c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6530:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6534:	e720      	b.n	d6378 <__adddf3+0x138>
   d6536:	bf00      	nop

000d6538 <__aeabi_ul2d>:
   d6538:	ea50 0201 	orrs.w	r2, r0, r1
   d653c:	bf08      	it	eq
   d653e:	4770      	bxeq	lr
   d6540:	b530      	push	{r4, r5, lr}
   d6542:	f04f 0500 	mov.w	r5, #0
   d6546:	e00a      	b.n	d655e <__aeabi_l2d+0x16>

000d6548 <__aeabi_l2d>:
   d6548:	ea50 0201 	orrs.w	r2, r0, r1
   d654c:	bf08      	it	eq
   d654e:	4770      	bxeq	lr
   d6550:	b530      	push	{r4, r5, lr}
   d6552:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6556:	d502      	bpl.n	d655e <__aeabi_l2d+0x16>
   d6558:	4240      	negs	r0, r0
   d655a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d655e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6562:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6566:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d656a:	f43f aedc 	beq.w	d6326 <__adddf3+0xe6>
   d656e:	f04f 0203 	mov.w	r2, #3
   d6572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6576:	bf18      	it	ne
   d6578:	3203      	addne	r2, #3
   d657a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d657e:	bf18      	it	ne
   d6580:	3203      	addne	r2, #3
   d6582:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6586:	f1c2 0320 	rsb	r3, r2, #32
   d658a:	fa00 fc03 	lsl.w	ip, r0, r3
   d658e:	fa20 f002 	lsr.w	r0, r0, r2
   d6592:	fa01 fe03 	lsl.w	lr, r1, r3
   d6596:	ea40 000e 	orr.w	r0, r0, lr
   d659a:	fa21 f102 	lsr.w	r1, r1, r2
   d659e:	4414      	add	r4, r2
   d65a0:	e6c1      	b.n	d6326 <__adddf3+0xe6>
   d65a2:	bf00      	nop

000d65a4 <__aeabi_dmul>:
   d65a4:	b570      	push	{r4, r5, r6, lr}
   d65a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d65aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d65ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d65b2:	bf1d      	ittte	ne
   d65b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d65b8:	ea94 0f0c 	teqne	r4, ip
   d65bc:	ea95 0f0c 	teqne	r5, ip
   d65c0:	f000 f8de 	bleq	d6780 <__aeabi_dmul+0x1dc>
   d65c4:	442c      	add	r4, r5
   d65c6:	ea81 0603 	eor.w	r6, r1, r3
   d65ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d65ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d65d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d65d6:	bf18      	it	ne
   d65d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d65dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d65e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d65e4:	d038      	beq.n	d6658 <__aeabi_dmul+0xb4>
   d65e6:	fba0 ce02 	umull	ip, lr, r0, r2
   d65ea:	f04f 0500 	mov.w	r5, #0
   d65ee:	fbe1 e502 	umlal	lr, r5, r1, r2
   d65f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d65f6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d65fa:	f04f 0600 	mov.w	r6, #0
   d65fe:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6602:	f09c 0f00 	teq	ip, #0
   d6606:	bf18      	it	ne
   d6608:	f04e 0e01 	orrne.w	lr, lr, #1
   d660c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6610:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6614:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6618:	d204      	bcs.n	d6624 <__aeabi_dmul+0x80>
   d661a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d661e:	416d      	adcs	r5, r5
   d6620:	eb46 0606 	adc.w	r6, r6, r6
   d6624:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6628:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d662c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6630:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6634:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6638:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d663c:	bf88      	it	hi
   d663e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6642:	d81e      	bhi.n	d6682 <__aeabi_dmul+0xde>
   d6644:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6648:	bf08      	it	eq
   d664a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d664e:	f150 0000 	adcs.w	r0, r0, #0
   d6652:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6656:	bd70      	pop	{r4, r5, r6, pc}
   d6658:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d665c:	ea46 0101 	orr.w	r1, r6, r1
   d6660:	ea40 0002 	orr.w	r0, r0, r2
   d6664:	ea81 0103 	eor.w	r1, r1, r3
   d6668:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d666c:	bfc2      	ittt	gt
   d666e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6672:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6676:	bd70      	popgt	{r4, r5, r6, pc}
   d6678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d667c:	f04f 0e00 	mov.w	lr, #0
   d6680:	3c01      	subs	r4, #1
   d6682:	f300 80ab 	bgt.w	d67dc <__aeabi_dmul+0x238>
   d6686:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d668a:	bfde      	ittt	le
   d668c:	2000      	movle	r0, #0
   d668e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6692:	bd70      	pople	{r4, r5, r6, pc}
   d6694:	f1c4 0400 	rsb	r4, r4, #0
   d6698:	3c20      	subs	r4, #32
   d669a:	da35      	bge.n	d6708 <__aeabi_dmul+0x164>
   d669c:	340c      	adds	r4, #12
   d669e:	dc1b      	bgt.n	d66d8 <__aeabi_dmul+0x134>
   d66a0:	f104 0414 	add.w	r4, r4, #20
   d66a4:	f1c4 0520 	rsb	r5, r4, #32
   d66a8:	fa00 f305 	lsl.w	r3, r0, r5
   d66ac:	fa20 f004 	lsr.w	r0, r0, r4
   d66b0:	fa01 f205 	lsl.w	r2, r1, r5
   d66b4:	ea40 0002 	orr.w	r0, r0, r2
   d66b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d66bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d66c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d66c4:	fa21 f604 	lsr.w	r6, r1, r4
   d66c8:	eb42 0106 	adc.w	r1, r2, r6
   d66cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d66d0:	bf08      	it	eq
   d66d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d66d6:	bd70      	pop	{r4, r5, r6, pc}
   d66d8:	f1c4 040c 	rsb	r4, r4, #12
   d66dc:	f1c4 0520 	rsb	r5, r4, #32
   d66e0:	fa00 f304 	lsl.w	r3, r0, r4
   d66e4:	fa20 f005 	lsr.w	r0, r0, r5
   d66e8:	fa01 f204 	lsl.w	r2, r1, r4
   d66ec:	ea40 0002 	orr.w	r0, r0, r2
   d66f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d66f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d66f8:	f141 0100 	adc.w	r1, r1, #0
   d66fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6700:	bf08      	it	eq
   d6702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6706:	bd70      	pop	{r4, r5, r6, pc}
   d6708:	f1c4 0520 	rsb	r5, r4, #32
   d670c:	fa00 f205 	lsl.w	r2, r0, r5
   d6710:	ea4e 0e02 	orr.w	lr, lr, r2
   d6714:	fa20 f304 	lsr.w	r3, r0, r4
   d6718:	fa01 f205 	lsl.w	r2, r1, r5
   d671c:	ea43 0302 	orr.w	r3, r3, r2
   d6720:	fa21 f004 	lsr.w	r0, r1, r4
   d6724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6728:	fa21 f204 	lsr.w	r2, r1, r4
   d672c:	ea20 0002 	bic.w	r0, r0, r2
   d6730:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6738:	bf08      	it	eq
   d673a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d673e:	bd70      	pop	{r4, r5, r6, pc}
   d6740:	f094 0f00 	teq	r4, #0
   d6744:	d10f      	bne.n	d6766 <__aeabi_dmul+0x1c2>
   d6746:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d674a:	0040      	lsls	r0, r0, #1
   d674c:	eb41 0101 	adc.w	r1, r1, r1
   d6750:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6754:	bf08      	it	eq
   d6756:	3c01      	subeq	r4, #1
   d6758:	d0f7      	beq.n	d674a <__aeabi_dmul+0x1a6>
   d675a:	ea41 0106 	orr.w	r1, r1, r6
   d675e:	f095 0f00 	teq	r5, #0
   d6762:	bf18      	it	ne
   d6764:	4770      	bxne	lr
   d6766:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d676a:	0052      	lsls	r2, r2, #1
   d676c:	eb43 0303 	adc.w	r3, r3, r3
   d6770:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6774:	bf08      	it	eq
   d6776:	3d01      	subeq	r5, #1
   d6778:	d0f7      	beq.n	d676a <__aeabi_dmul+0x1c6>
   d677a:	ea43 0306 	orr.w	r3, r3, r6
   d677e:	4770      	bx	lr
   d6780:	ea94 0f0c 	teq	r4, ip
   d6784:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6788:	bf18      	it	ne
   d678a:	ea95 0f0c 	teqne	r5, ip
   d678e:	d00c      	beq.n	d67aa <__aeabi_dmul+0x206>
   d6790:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6794:	bf18      	it	ne
   d6796:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d679a:	d1d1      	bne.n	d6740 <__aeabi_dmul+0x19c>
   d679c:	ea81 0103 	eor.w	r1, r1, r3
   d67a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d67a4:	f04f 0000 	mov.w	r0, #0
   d67a8:	bd70      	pop	{r4, r5, r6, pc}
   d67aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d67ae:	bf06      	itte	eq
   d67b0:	4610      	moveq	r0, r2
   d67b2:	4619      	moveq	r1, r3
   d67b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d67b8:	d019      	beq.n	d67ee <__aeabi_dmul+0x24a>
   d67ba:	ea94 0f0c 	teq	r4, ip
   d67be:	d102      	bne.n	d67c6 <__aeabi_dmul+0x222>
   d67c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d67c4:	d113      	bne.n	d67ee <__aeabi_dmul+0x24a>
   d67c6:	ea95 0f0c 	teq	r5, ip
   d67ca:	d105      	bne.n	d67d8 <__aeabi_dmul+0x234>
   d67cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d67d0:	bf1c      	itt	ne
   d67d2:	4610      	movne	r0, r2
   d67d4:	4619      	movne	r1, r3
   d67d6:	d10a      	bne.n	d67ee <__aeabi_dmul+0x24a>
   d67d8:	ea81 0103 	eor.w	r1, r1, r3
   d67dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d67e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d67e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d67e8:	f04f 0000 	mov.w	r0, #0
   d67ec:	bd70      	pop	{r4, r5, r6, pc}
   d67ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d67f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d67f6:	bd70      	pop	{r4, r5, r6, pc}

000d67f8 <__aeabi_ddiv>:
   d67f8:	b570      	push	{r4, r5, r6, lr}
   d67fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d67fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6802:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6806:	bf1d      	ittte	ne
   d6808:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d680c:	ea94 0f0c 	teqne	r4, ip
   d6810:	ea95 0f0c 	teqne	r5, ip
   d6814:	f000 f8a7 	bleq	d6966 <__aeabi_ddiv+0x16e>
   d6818:	eba4 0405 	sub.w	r4, r4, r5
   d681c:	ea81 0e03 	eor.w	lr, r1, r3
   d6820:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6824:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6828:	f000 8088 	beq.w	d693c <__aeabi_ddiv+0x144>
   d682c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6830:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6834:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6838:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d683c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6840:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6844:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6848:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d684c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6850:	429d      	cmp	r5, r3
   d6852:	bf08      	it	eq
   d6854:	4296      	cmpeq	r6, r2
   d6856:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d685a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d685e:	d202      	bcs.n	d6866 <__aeabi_ddiv+0x6e>
   d6860:	085b      	lsrs	r3, r3, #1
   d6862:	ea4f 0232 	mov.w	r2, r2, rrx
   d6866:	1ab6      	subs	r6, r6, r2
   d6868:	eb65 0503 	sbc.w	r5, r5, r3
   d686c:	085b      	lsrs	r3, r3, #1
   d686e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6872:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6876:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d687a:	ebb6 0e02 	subs.w	lr, r6, r2
   d687e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6882:	bf22      	ittt	cs
   d6884:	1ab6      	subcs	r6, r6, r2
   d6886:	4675      	movcs	r5, lr
   d6888:	ea40 000c 	orrcs.w	r0, r0, ip
   d688c:	085b      	lsrs	r3, r3, #1
   d688e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6892:	ebb6 0e02 	subs.w	lr, r6, r2
   d6896:	eb75 0e03 	sbcs.w	lr, r5, r3
   d689a:	bf22      	ittt	cs
   d689c:	1ab6      	subcs	r6, r6, r2
   d689e:	4675      	movcs	r5, lr
   d68a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d68a4:	085b      	lsrs	r3, r3, #1
   d68a6:	ea4f 0232 	mov.w	r2, r2, rrx
   d68aa:	ebb6 0e02 	subs.w	lr, r6, r2
   d68ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   d68b2:	bf22      	ittt	cs
   d68b4:	1ab6      	subcs	r6, r6, r2
   d68b6:	4675      	movcs	r5, lr
   d68b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d68bc:	085b      	lsrs	r3, r3, #1
   d68be:	ea4f 0232 	mov.w	r2, r2, rrx
   d68c2:	ebb6 0e02 	subs.w	lr, r6, r2
   d68c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d68ca:	bf22      	ittt	cs
   d68cc:	1ab6      	subcs	r6, r6, r2
   d68ce:	4675      	movcs	r5, lr
   d68d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d68d4:	ea55 0e06 	orrs.w	lr, r5, r6
   d68d8:	d018      	beq.n	d690c <__aeabi_ddiv+0x114>
   d68da:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d68de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d68e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d68e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d68ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d68ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d68f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d68f6:	d1c0      	bne.n	d687a <__aeabi_ddiv+0x82>
   d68f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d68fc:	d10b      	bne.n	d6916 <__aeabi_ddiv+0x11e>
   d68fe:	ea41 0100 	orr.w	r1, r1, r0
   d6902:	f04f 0000 	mov.w	r0, #0
   d6906:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d690a:	e7b6      	b.n	d687a <__aeabi_ddiv+0x82>
   d690c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6910:	bf04      	itt	eq
   d6912:	4301      	orreq	r1, r0
   d6914:	2000      	moveq	r0, #0
   d6916:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d691a:	bf88      	it	hi
   d691c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6920:	f63f aeaf 	bhi.w	d6682 <__aeabi_dmul+0xde>
   d6924:	ebb5 0c03 	subs.w	ip, r5, r3
   d6928:	bf04      	itt	eq
   d692a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d692e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6932:	f150 0000 	adcs.w	r0, r0, #0
   d6936:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d693a:	bd70      	pop	{r4, r5, r6, pc}
   d693c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6940:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6944:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6948:	bfc2      	ittt	gt
   d694a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d694e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6952:	bd70      	popgt	{r4, r5, r6, pc}
   d6954:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6958:	f04f 0e00 	mov.w	lr, #0
   d695c:	3c01      	subs	r4, #1
   d695e:	e690      	b.n	d6682 <__aeabi_dmul+0xde>
   d6960:	ea45 0e06 	orr.w	lr, r5, r6
   d6964:	e68d      	b.n	d6682 <__aeabi_dmul+0xde>
   d6966:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d696a:	ea94 0f0c 	teq	r4, ip
   d696e:	bf08      	it	eq
   d6970:	ea95 0f0c 	teqeq	r5, ip
   d6974:	f43f af3b 	beq.w	d67ee <__aeabi_dmul+0x24a>
   d6978:	ea94 0f0c 	teq	r4, ip
   d697c:	d10a      	bne.n	d6994 <__aeabi_ddiv+0x19c>
   d697e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6982:	f47f af34 	bne.w	d67ee <__aeabi_dmul+0x24a>
   d6986:	ea95 0f0c 	teq	r5, ip
   d698a:	f47f af25 	bne.w	d67d8 <__aeabi_dmul+0x234>
   d698e:	4610      	mov	r0, r2
   d6990:	4619      	mov	r1, r3
   d6992:	e72c      	b.n	d67ee <__aeabi_dmul+0x24a>
   d6994:	ea95 0f0c 	teq	r5, ip
   d6998:	d106      	bne.n	d69a8 <__aeabi_ddiv+0x1b0>
   d699a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d699e:	f43f aefd 	beq.w	d679c <__aeabi_dmul+0x1f8>
   d69a2:	4610      	mov	r0, r2
   d69a4:	4619      	mov	r1, r3
   d69a6:	e722      	b.n	d67ee <__aeabi_dmul+0x24a>
   d69a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d69ac:	bf18      	it	ne
   d69ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d69b2:	f47f aec5 	bne.w	d6740 <__aeabi_dmul+0x19c>
   d69b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d69ba:	f47f af0d 	bne.w	d67d8 <__aeabi_dmul+0x234>
   d69be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d69c2:	f47f aeeb 	bne.w	d679c <__aeabi_dmul+0x1f8>
   d69c6:	e712      	b.n	d67ee <__aeabi_dmul+0x24a>

000d69c8 <__gedf2>:
   d69c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d69cc:	e006      	b.n	d69dc <__cmpdf2+0x4>
   d69ce:	bf00      	nop

000d69d0 <__ledf2>:
   d69d0:	f04f 0c01 	mov.w	ip, #1
   d69d4:	e002      	b.n	d69dc <__cmpdf2+0x4>
   d69d6:	bf00      	nop

000d69d8 <__cmpdf2>:
   d69d8:	f04f 0c01 	mov.w	ip, #1
   d69dc:	f84d cd04 	str.w	ip, [sp, #-4]!
   d69e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d69e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d69e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d69ec:	bf18      	it	ne
   d69ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d69f2:	d01b      	beq.n	d6a2c <__cmpdf2+0x54>
   d69f4:	b001      	add	sp, #4
   d69f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d69fa:	bf0c      	ite	eq
   d69fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6a00:	ea91 0f03 	teqne	r1, r3
   d6a04:	bf02      	ittt	eq
   d6a06:	ea90 0f02 	teqeq	r0, r2
   d6a0a:	2000      	moveq	r0, #0
   d6a0c:	4770      	bxeq	lr
   d6a0e:	f110 0f00 	cmn.w	r0, #0
   d6a12:	ea91 0f03 	teq	r1, r3
   d6a16:	bf58      	it	pl
   d6a18:	4299      	cmppl	r1, r3
   d6a1a:	bf08      	it	eq
   d6a1c:	4290      	cmpeq	r0, r2
   d6a1e:	bf2c      	ite	cs
   d6a20:	17d8      	asrcs	r0, r3, #31
   d6a22:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6a26:	f040 0001 	orr.w	r0, r0, #1
   d6a2a:	4770      	bx	lr
   d6a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6a34:	d102      	bne.n	d6a3c <__cmpdf2+0x64>
   d6a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6a3a:	d107      	bne.n	d6a4c <__cmpdf2+0x74>
   d6a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6a44:	d1d6      	bne.n	d69f4 <__cmpdf2+0x1c>
   d6a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6a4a:	d0d3      	beq.n	d69f4 <__cmpdf2+0x1c>
   d6a4c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6a50:	4770      	bx	lr
   d6a52:	bf00      	nop

000d6a54 <__aeabi_cdrcmple>:
   d6a54:	4684      	mov	ip, r0
   d6a56:	4610      	mov	r0, r2
   d6a58:	4662      	mov	r2, ip
   d6a5a:	468c      	mov	ip, r1
   d6a5c:	4619      	mov	r1, r3
   d6a5e:	4663      	mov	r3, ip
   d6a60:	e000      	b.n	d6a64 <__aeabi_cdcmpeq>
   d6a62:	bf00      	nop

000d6a64 <__aeabi_cdcmpeq>:
   d6a64:	b501      	push	{r0, lr}
   d6a66:	f7ff ffb7 	bl	d69d8 <__cmpdf2>
   d6a6a:	2800      	cmp	r0, #0
   d6a6c:	bf48      	it	mi
   d6a6e:	f110 0f00 	cmnmi.w	r0, #0
   d6a72:	bd01      	pop	{r0, pc}

000d6a74 <__aeabi_dcmpeq>:
   d6a74:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a78:	f7ff fff4 	bl	d6a64 <__aeabi_cdcmpeq>
   d6a7c:	bf0c      	ite	eq
   d6a7e:	2001      	moveq	r0, #1
   d6a80:	2000      	movne	r0, #0
   d6a82:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a86:	bf00      	nop

000d6a88 <__aeabi_dcmplt>:
   d6a88:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6a8c:	f7ff ffea 	bl	d6a64 <__aeabi_cdcmpeq>
   d6a90:	bf34      	ite	cc
   d6a92:	2001      	movcc	r0, #1
   d6a94:	2000      	movcs	r0, #0
   d6a96:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a9a:	bf00      	nop

000d6a9c <__aeabi_dcmple>:
   d6a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6aa0:	f7ff ffe0 	bl	d6a64 <__aeabi_cdcmpeq>
   d6aa4:	bf94      	ite	ls
   d6aa6:	2001      	movls	r0, #1
   d6aa8:	2000      	movhi	r0, #0
   d6aaa:	f85d fb08 	ldr.w	pc, [sp], #8
   d6aae:	bf00      	nop

000d6ab0 <__aeabi_dcmpge>:
   d6ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6ab4:	f7ff ffce 	bl	d6a54 <__aeabi_cdrcmple>
   d6ab8:	bf94      	ite	ls
   d6aba:	2001      	movls	r0, #1
   d6abc:	2000      	movhi	r0, #0
   d6abe:	f85d fb08 	ldr.w	pc, [sp], #8
   d6ac2:	bf00      	nop

000d6ac4 <__aeabi_dcmpgt>:
   d6ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6ac8:	f7ff ffc4 	bl	d6a54 <__aeabi_cdrcmple>
   d6acc:	bf34      	ite	cc
   d6ace:	2001      	movcc	r0, #1
   d6ad0:	2000      	movcs	r0, #0
   d6ad2:	f85d fb08 	ldr.w	pc, [sp], #8
   d6ad6:	bf00      	nop

000d6ad8 <__aeabi_dcmpun>:
   d6ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6ae0:	d102      	bne.n	d6ae8 <__aeabi_dcmpun+0x10>
   d6ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6ae6:	d10a      	bne.n	d6afe <__aeabi_dcmpun+0x26>
   d6ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6af0:	d102      	bne.n	d6af8 <__aeabi_dcmpun+0x20>
   d6af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6af6:	d102      	bne.n	d6afe <__aeabi_dcmpun+0x26>
   d6af8:	f04f 0000 	mov.w	r0, #0
   d6afc:	4770      	bx	lr
   d6afe:	f04f 0001 	mov.w	r0, #1
   d6b02:	4770      	bx	lr

000d6b04 <__aeabi_d2iz>:
   d6b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6b0c:	d215      	bcs.n	d6b3a <__aeabi_d2iz+0x36>
   d6b0e:	d511      	bpl.n	d6b34 <__aeabi_d2iz+0x30>
   d6b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6b18:	d912      	bls.n	d6b40 <__aeabi_d2iz+0x3c>
   d6b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6b26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6b2a:	fa23 f002 	lsr.w	r0, r3, r2
   d6b2e:	bf18      	it	ne
   d6b30:	4240      	negne	r0, r0
   d6b32:	4770      	bx	lr
   d6b34:	f04f 0000 	mov.w	r0, #0
   d6b38:	4770      	bx	lr
   d6b3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6b3e:	d105      	bne.n	d6b4c <__aeabi_d2iz+0x48>
   d6b40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6b44:	bf08      	it	eq
   d6b46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6b4a:	4770      	bx	lr
   d6b4c:	f04f 0000 	mov.w	r0, #0
   d6b50:	4770      	bx	lr
   d6b52:	bf00      	nop

000d6b54 <__aeabi_d2uiz>:
   d6b54:	004a      	lsls	r2, r1, #1
   d6b56:	d211      	bcs.n	d6b7c <__aeabi_d2uiz+0x28>
   d6b58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6b5c:	d211      	bcs.n	d6b82 <__aeabi_d2uiz+0x2e>
   d6b5e:	d50d      	bpl.n	d6b7c <__aeabi_d2uiz+0x28>
   d6b60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6b64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6b68:	d40e      	bmi.n	d6b88 <__aeabi_d2uiz+0x34>
   d6b6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6b6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6b72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6b76:	fa23 f002 	lsr.w	r0, r3, r2
   d6b7a:	4770      	bx	lr
   d6b7c:	f04f 0000 	mov.w	r0, #0
   d6b80:	4770      	bx	lr
   d6b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6b86:	d102      	bne.n	d6b8e <__aeabi_d2uiz+0x3a>
   d6b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6b8c:	4770      	bx	lr
   d6b8e:	f04f 0000 	mov.w	r0, #0
   d6b92:	4770      	bx	lr

000d6b94 <__aeabi_d2f>:
   d6b94:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6b98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6b9c:	bf24      	itt	cs
   d6b9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6ba2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6ba6:	d90d      	bls.n	d6bc4 <__aeabi_d2f+0x30>
   d6ba8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6bac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6bb0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6bb4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6bb8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6bbc:	bf08      	it	eq
   d6bbe:	f020 0001 	biceq.w	r0, r0, #1
   d6bc2:	4770      	bx	lr
   d6bc4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6bc8:	d121      	bne.n	d6c0e <__aeabi_d2f+0x7a>
   d6bca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6bce:	bfbc      	itt	lt
   d6bd0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6bd4:	4770      	bxlt	lr
   d6bd6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6bda:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6bde:	f1c2 0218 	rsb	r2, r2, #24
   d6be2:	f1c2 0c20 	rsb	ip, r2, #32
   d6be6:	fa10 f30c 	lsls.w	r3, r0, ip
   d6bea:	fa20 f002 	lsr.w	r0, r0, r2
   d6bee:	bf18      	it	ne
   d6bf0:	f040 0001 	orrne.w	r0, r0, #1
   d6bf4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6bf8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6bfc:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6c00:	ea40 000c 	orr.w	r0, r0, ip
   d6c04:	fa23 f302 	lsr.w	r3, r3, r2
   d6c08:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6c0c:	e7cc      	b.n	d6ba8 <__aeabi_d2f+0x14>
   d6c0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6c12:	d107      	bne.n	d6c24 <__aeabi_d2f+0x90>
   d6c14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6c18:	bf1e      	ittt	ne
   d6c1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6c1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6c22:	4770      	bxne	lr
   d6c24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6c28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6c30:	4770      	bx	lr
   d6c32:	bf00      	nop

000d6c34 <__cxa_atexit>:
   d6c34:	b510      	push	{r4, lr}
   d6c36:	4c05      	ldr	r4, [pc, #20]	; (d6c4c <__cxa_atexit+0x18>)
   d6c38:	4613      	mov	r3, r2
   d6c3a:	b12c      	cbz	r4, d6c48 <__cxa_atexit+0x14>
   d6c3c:	460a      	mov	r2, r1
   d6c3e:	4601      	mov	r1, r0
   d6c40:	2002      	movs	r0, #2
   d6c42:	f3af 8000 	nop.w
   d6c46:	bd10      	pop	{r4, pc}
   d6c48:	4620      	mov	r0, r4
   d6c4a:	bd10      	pop	{r4, pc}
   d6c4c:	00000000 	.word	0x00000000

000d6c50 <localtime>:
   d6c50:	b538      	push	{r3, r4, r5, lr}
   d6c52:	4b07      	ldr	r3, [pc, #28]	; (d6c70 <localtime+0x20>)
   d6c54:	681c      	ldr	r4, [r3, #0]
   d6c56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6c58:	4605      	mov	r5, r0
   d6c5a:	b91b      	cbnz	r3, d6c64 <localtime+0x14>
   d6c5c:	2024      	movs	r0, #36	; 0x24
   d6c5e:	f7fd ff23 	bl	d4aa8 <malloc>
   d6c62:	63e0      	str	r0, [r4, #60]	; 0x3c
   d6c64:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6c66:	4628      	mov	r0, r5
   d6c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6c6c:	f000 b802 	b.w	d6c74 <localtime_r>
   d6c70:	2003e2ac 	.word	0x2003e2ac

000d6c74 <localtime_r>:
   d6c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6c78:	460c      	mov	r4, r1
   d6c7a:	4680      	mov	r8, r0
   d6c7c:	f001 fdc2 	bl	d8804 <__gettzinfo>
   d6c80:	4621      	mov	r1, r4
   d6c82:	4607      	mov	r7, r0
   d6c84:	4640      	mov	r0, r8
   d6c86:	f001 fdc1 	bl	d880c <gmtime_r>
   d6c8a:	6946      	ldr	r6, [r0, #20]
   d6c8c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d6c90:	07b3      	lsls	r3, r6, #30
   d6c92:	4604      	mov	r4, r0
   d6c94:	d105      	bne.n	d6ca2 <localtime_r+0x2e>
   d6c96:	2264      	movs	r2, #100	; 0x64
   d6c98:	fb96 f3f2 	sdiv	r3, r6, r2
   d6c9c:	fb02 6313 	mls	r3, r2, r3, r6
   d6ca0:	b94b      	cbnz	r3, d6cb6 <localtime_r+0x42>
   d6ca2:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d6ca6:	fb96 f3f5 	sdiv	r3, r6, r5
   d6caa:	fb05 6513 	mls	r5, r5, r3, r6
   d6cae:	fab5 f385 	clz	r3, r5
   d6cb2:	095b      	lsrs	r3, r3, #5
   d6cb4:	e000      	b.n	d6cb8 <localtime_r+0x44>
   d6cb6:	2301      	movs	r3, #1
   d6cb8:	4a5f      	ldr	r2, [pc, #380]	; (d6e38 <localtime_r+0x1c4>)
   d6cba:	2530      	movs	r5, #48	; 0x30
   d6cbc:	fb05 2503 	mla	r5, r5, r3, r2
   d6cc0:	f001 f8b6 	bl	d7e30 <__tz_lock>
   d6cc4:	f001 f8b6 	bl	d7e34 <_tzset_unlocked>
   d6cc8:	4b5c      	ldr	r3, [pc, #368]	; (d6e3c <localtime_r+0x1c8>)
   d6cca:	681b      	ldr	r3, [r3, #0]
   d6ccc:	b1f3      	cbz	r3, d6d0c <localtime_r+0x98>
   d6cce:	687b      	ldr	r3, [r7, #4]
   d6cd0:	429e      	cmp	r6, r3
   d6cd2:	d105      	bne.n	d6ce0 <localtime_r+0x6c>
   d6cd4:	6839      	ldr	r1, [r7, #0]
   d6cd6:	f8d8 3000 	ldr.w	r3, [r8]
   d6cda:	69fa      	ldr	r2, [r7, #28]
   d6cdc:	b941      	cbnz	r1, d6cf0 <localtime_r+0x7c>
   d6cde:	e00a      	b.n	d6cf6 <localtime_r+0x82>
   d6ce0:	4630      	mov	r0, r6
   d6ce2:	f000 fffd 	bl	d7ce0 <__tzcalc_limits>
   d6ce6:	2800      	cmp	r0, #0
   d6ce8:	d1f4      	bne.n	d6cd4 <localtime_r+0x60>
   d6cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6cee:	e00d      	b.n	d6d0c <localtime_r+0x98>
   d6cf0:	4293      	cmp	r3, r2
   d6cf2:	db08      	blt.n	d6d06 <localtime_r+0x92>
   d6cf4:	e001      	b.n	d6cfa <localtime_r+0x86>
   d6cf6:	4293      	cmp	r3, r2
   d6cf8:	da07      	bge.n	d6d0a <localtime_r+0x96>
   d6cfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d6cfc:	4293      	cmp	r3, r2
   d6cfe:	bfac      	ite	ge
   d6d00:	2300      	movge	r3, #0
   d6d02:	2301      	movlt	r3, #1
   d6d04:	e002      	b.n	d6d0c <localtime_r+0x98>
   d6d06:	2300      	movs	r3, #0
   d6d08:	e000      	b.n	d6d0c <localtime_r+0x98>
   d6d0a:	2301      	movs	r3, #1
   d6d0c:	6223      	str	r3, [r4, #32]
   d6d0e:	6a23      	ldr	r3, [r4, #32]
   d6d10:	2b01      	cmp	r3, #1
   d6d12:	bf0c      	ite	eq
   d6d14:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d6d16:	6a39      	ldrne	r1, [r7, #32]
   d6d18:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d6d1c:	203c      	movs	r0, #60	; 0x3c
   d6d1e:	fb91 f6f3 	sdiv	r6, r1, r3
   d6d22:	fb03 1316 	mls	r3, r3, r6, r1
   d6d26:	6861      	ldr	r1, [r4, #4]
   d6d28:	fb93 f2f0 	sdiv	r2, r3, r0
   d6d2c:	fb00 3012 	mls	r0, r0, r2, r3
   d6d30:	6823      	ldr	r3, [r4, #0]
   d6d32:	1a89      	subs	r1, r1, r2
   d6d34:	68a2      	ldr	r2, [r4, #8]
   d6d36:	6061      	str	r1, [r4, #4]
   d6d38:	1a1b      	subs	r3, r3, r0
   d6d3a:	1b92      	subs	r2, r2, r6
   d6d3c:	2b3b      	cmp	r3, #59	; 0x3b
   d6d3e:	6023      	str	r3, [r4, #0]
   d6d40:	60a2      	str	r2, [r4, #8]
   d6d42:	dd03      	ble.n	d6d4c <localtime_r+0xd8>
   d6d44:	3101      	adds	r1, #1
   d6d46:	6061      	str	r1, [r4, #4]
   d6d48:	3b3c      	subs	r3, #60	; 0x3c
   d6d4a:	e004      	b.n	d6d56 <localtime_r+0xe2>
   d6d4c:	2b00      	cmp	r3, #0
   d6d4e:	da03      	bge.n	d6d58 <localtime_r+0xe4>
   d6d50:	3901      	subs	r1, #1
   d6d52:	6061      	str	r1, [r4, #4]
   d6d54:	333c      	adds	r3, #60	; 0x3c
   d6d56:	6023      	str	r3, [r4, #0]
   d6d58:	6863      	ldr	r3, [r4, #4]
   d6d5a:	2b3b      	cmp	r3, #59	; 0x3b
   d6d5c:	dd03      	ble.n	d6d66 <localtime_r+0xf2>
   d6d5e:	3201      	adds	r2, #1
   d6d60:	60a2      	str	r2, [r4, #8]
   d6d62:	3b3c      	subs	r3, #60	; 0x3c
   d6d64:	e004      	b.n	d6d70 <localtime_r+0xfc>
   d6d66:	2b00      	cmp	r3, #0
   d6d68:	da03      	bge.n	d6d72 <localtime_r+0xfe>
   d6d6a:	3a01      	subs	r2, #1
   d6d6c:	60a2      	str	r2, [r4, #8]
   d6d6e:	333c      	adds	r3, #60	; 0x3c
   d6d70:	6063      	str	r3, [r4, #4]
   d6d72:	68a3      	ldr	r3, [r4, #8]
   d6d74:	2b17      	cmp	r3, #23
   d6d76:	dd22      	ble.n	d6dbe <localtime_r+0x14a>
   d6d78:	69e2      	ldr	r2, [r4, #28]
   d6d7a:	3201      	adds	r2, #1
   d6d7c:	61e2      	str	r2, [r4, #28]
   d6d7e:	69a2      	ldr	r2, [r4, #24]
   d6d80:	3201      	adds	r2, #1
   d6d82:	2a06      	cmp	r2, #6
   d6d84:	bfc8      	it	gt
   d6d86:	2200      	movgt	r2, #0
   d6d88:	61a2      	str	r2, [r4, #24]
   d6d8a:	68e2      	ldr	r2, [r4, #12]
   d6d8c:	3b18      	subs	r3, #24
   d6d8e:	3201      	adds	r2, #1
   d6d90:	60a3      	str	r3, [r4, #8]
   d6d92:	6923      	ldr	r3, [r4, #16]
   d6d94:	60e2      	str	r2, [r4, #12]
   d6d96:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d6d9a:	428a      	cmp	r2, r1
   d6d9c:	dd46      	ble.n	d6e2c <localtime_r+0x1b8>
   d6d9e:	3301      	adds	r3, #1
   d6da0:	2b0c      	cmp	r3, #12
   d6da2:	bf0c      	ite	eq
   d6da4:	6963      	ldreq	r3, [r4, #20]
   d6da6:	6123      	strne	r3, [r4, #16]
   d6da8:	eba2 0201 	sub.w	r2, r2, r1
   d6dac:	60e2      	str	r2, [r4, #12]
   d6dae:	bf01      	itttt	eq
   d6db0:	3301      	addeq	r3, #1
   d6db2:	2200      	moveq	r2, #0
   d6db4:	6122      	streq	r2, [r4, #16]
   d6db6:	6163      	streq	r3, [r4, #20]
   d6db8:	bf08      	it	eq
   d6dba:	61e2      	streq	r2, [r4, #28]
   d6dbc:	e036      	b.n	d6e2c <localtime_r+0x1b8>
   d6dbe:	2b00      	cmp	r3, #0
   d6dc0:	da34      	bge.n	d6e2c <localtime_r+0x1b8>
   d6dc2:	69e2      	ldr	r2, [r4, #28]
   d6dc4:	3a01      	subs	r2, #1
   d6dc6:	61e2      	str	r2, [r4, #28]
   d6dc8:	69a2      	ldr	r2, [r4, #24]
   d6dca:	3a01      	subs	r2, #1
   d6dcc:	bf48      	it	mi
   d6dce:	2206      	movmi	r2, #6
   d6dd0:	61a2      	str	r2, [r4, #24]
   d6dd2:	68e2      	ldr	r2, [r4, #12]
   d6dd4:	3318      	adds	r3, #24
   d6dd6:	3a01      	subs	r2, #1
   d6dd8:	60e2      	str	r2, [r4, #12]
   d6dda:	60a3      	str	r3, [r4, #8]
   d6ddc:	bb32      	cbnz	r2, d6e2c <localtime_r+0x1b8>
   d6dde:	6923      	ldr	r3, [r4, #16]
   d6de0:	3b01      	subs	r3, #1
   d6de2:	d401      	bmi.n	d6de8 <localtime_r+0x174>
   d6de4:	6123      	str	r3, [r4, #16]
   d6de6:	e01d      	b.n	d6e24 <localtime_r+0x1b0>
   d6de8:	230b      	movs	r3, #11
   d6dea:	6123      	str	r3, [r4, #16]
   d6dec:	6963      	ldr	r3, [r4, #20]
   d6dee:	1e5a      	subs	r2, r3, #1
   d6df0:	f012 0f03 	tst.w	r2, #3
   d6df4:	6162      	str	r2, [r4, #20]
   d6df6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d6dfa:	d105      	bne.n	d6e08 <localtime_r+0x194>
   d6dfc:	2164      	movs	r1, #100	; 0x64
   d6dfe:	fb93 f2f1 	sdiv	r2, r3, r1
   d6e02:	fb01 3212 	mls	r2, r1, r2, r3
   d6e06:	b94a      	cbnz	r2, d6e1c <localtime_r+0x1a8>
   d6e08:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d6e0c:	fb93 f2f1 	sdiv	r2, r3, r1
   d6e10:	fb01 3312 	mls	r3, r1, r2, r3
   d6e14:	fab3 f383 	clz	r3, r3
   d6e18:	095b      	lsrs	r3, r3, #5
   d6e1a:	e000      	b.n	d6e1e <localtime_r+0x1aa>
   d6e1c:	2301      	movs	r3, #1
   d6e1e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d6e22:	61e3      	str	r3, [r4, #28]
   d6e24:	6923      	ldr	r3, [r4, #16]
   d6e26:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d6e2a:	60e3      	str	r3, [r4, #12]
   d6e2c:	f001 f801 	bl	d7e32 <__tz_unlock>
   d6e30:	4620      	mov	r0, r4
   d6e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6e36:	bf00      	nop
   d6e38:	000d9614 	.word	0x000d9614
   d6e3c:	2003e7e4 	.word	0x2003e7e4

000d6e40 <_localeconv_r>:
   d6e40:	4800      	ldr	r0, [pc, #0]	; (d6e44 <_localeconv_r+0x4>)
   d6e42:	4770      	bx	lr
   d6e44:	2003e2b0 	.word	0x2003e2b0

000d6e48 <memcpy>:
   d6e48:	b510      	push	{r4, lr}
   d6e4a:	1e43      	subs	r3, r0, #1
   d6e4c:	440a      	add	r2, r1
   d6e4e:	4291      	cmp	r1, r2
   d6e50:	d004      	beq.n	d6e5c <memcpy+0x14>
   d6e52:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6e56:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6e5a:	e7f8      	b.n	d6e4e <memcpy+0x6>
   d6e5c:	bd10      	pop	{r4, pc}

000d6e5e <memset>:
   d6e5e:	4402      	add	r2, r0
   d6e60:	4603      	mov	r3, r0
   d6e62:	4293      	cmp	r3, r2
   d6e64:	d002      	beq.n	d6e6c <memset+0xe>
   d6e66:	f803 1b01 	strb.w	r1, [r3], #1
   d6e6a:	e7fa      	b.n	d6e62 <memset+0x4>
   d6e6c:	4770      	bx	lr
	...

000d6e70 <srand>:
   d6e70:	b538      	push	{r3, r4, r5, lr}
   d6e72:	4b12      	ldr	r3, [pc, #72]	; (d6ebc <srand+0x4c>)
   d6e74:	681c      	ldr	r4, [r3, #0]
   d6e76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6e78:	4605      	mov	r5, r0
   d6e7a:	b9d3      	cbnz	r3, d6eb2 <srand+0x42>
   d6e7c:	2018      	movs	r0, #24
   d6e7e:	f7fd fe13 	bl	d4aa8 <malloc>
   d6e82:	f243 330e 	movw	r3, #13070	; 0x330e
   d6e86:	63a0      	str	r0, [r4, #56]	; 0x38
   d6e88:	8003      	strh	r3, [r0, #0]
   d6e8a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6e8e:	8043      	strh	r3, [r0, #2]
   d6e90:	f241 2334 	movw	r3, #4660	; 0x1234
   d6e94:	8083      	strh	r3, [r0, #4]
   d6e96:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6e9a:	80c3      	strh	r3, [r0, #6]
   d6e9c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6ea0:	8103      	strh	r3, [r0, #8]
   d6ea2:	2305      	movs	r3, #5
   d6ea4:	8143      	strh	r3, [r0, #10]
   d6ea6:	230b      	movs	r3, #11
   d6ea8:	8183      	strh	r3, [r0, #12]
   d6eaa:	2201      	movs	r2, #1
   d6eac:	2300      	movs	r3, #0
   d6eae:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6eb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6eb4:	2200      	movs	r2, #0
   d6eb6:	611d      	str	r5, [r3, #16]
   d6eb8:	615a      	str	r2, [r3, #20]
   d6eba:	bd38      	pop	{r3, r4, r5, pc}
   d6ebc:	2003e2ac 	.word	0x2003e2ac

000d6ec0 <strcmp>:
   d6ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6ec4:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6ec8:	2a01      	cmp	r2, #1
   d6eca:	bf28      	it	cs
   d6ecc:	429a      	cmpcs	r2, r3
   d6ece:	d0f7      	beq.n	d6ec0 <strcmp>
   d6ed0:	1ad0      	subs	r0, r2, r3
   d6ed2:	4770      	bx	lr

000d6ed4 <strcpy>:
   d6ed4:	4603      	mov	r3, r0
   d6ed6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6eda:	f803 2b01 	strb.w	r2, [r3], #1
   d6ede:	2a00      	cmp	r2, #0
   d6ee0:	d1f9      	bne.n	d6ed6 <strcpy+0x2>
   d6ee2:	4770      	bx	lr

000d6ee4 <strdup>:
   d6ee4:	4b02      	ldr	r3, [pc, #8]	; (d6ef0 <strdup+0xc>)
   d6ee6:	4601      	mov	r1, r0
   d6ee8:	6818      	ldr	r0, [r3, #0]
   d6eea:	f000 b803 	b.w	d6ef4 <_strdup_r>
   d6eee:	bf00      	nop
   d6ef0:	2003e2ac 	.word	0x2003e2ac

000d6ef4 <_strdup_r>:
   d6ef4:	b570      	push	{r4, r5, r6, lr}
   d6ef6:	4606      	mov	r6, r0
   d6ef8:	4608      	mov	r0, r1
   d6efa:	460c      	mov	r4, r1
   d6efc:	f000 f80d 	bl	d6f1a <strlen>
   d6f00:	1c45      	adds	r5, r0, #1
   d6f02:	4629      	mov	r1, r5
   d6f04:	4630      	mov	r0, r6
   d6f06:	f7fd fdff 	bl	d4b08 <_malloc_r>
   d6f0a:	4606      	mov	r6, r0
   d6f0c:	b118      	cbz	r0, d6f16 <_strdup_r+0x22>
   d6f0e:	462a      	mov	r2, r5
   d6f10:	4621      	mov	r1, r4
   d6f12:	f7ff ff99 	bl	d6e48 <memcpy>
   d6f16:	4630      	mov	r0, r6
   d6f18:	bd70      	pop	{r4, r5, r6, pc}

000d6f1a <strlen>:
   d6f1a:	4603      	mov	r3, r0
   d6f1c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6f20:	2a00      	cmp	r2, #0
   d6f22:	d1fb      	bne.n	d6f1c <strlen+0x2>
   d6f24:	1a18      	subs	r0, r3, r0
   d6f26:	3801      	subs	r0, #1
   d6f28:	4770      	bx	lr

000d6f2a <strncmp>:
   d6f2a:	b530      	push	{r4, r5, lr}
   d6f2c:	b182      	cbz	r2, d6f50 <strncmp+0x26>
   d6f2e:	1e45      	subs	r5, r0, #1
   d6f30:	3901      	subs	r1, #1
   d6f32:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d6f36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6f3a:	42a3      	cmp	r3, r4
   d6f3c:	d106      	bne.n	d6f4c <strncmp+0x22>
   d6f3e:	43ec      	mvns	r4, r5
   d6f40:	4414      	add	r4, r2
   d6f42:	42e0      	cmn	r0, r4
   d6f44:	d001      	beq.n	d6f4a <strncmp+0x20>
   d6f46:	2b00      	cmp	r3, #0
   d6f48:	d1f3      	bne.n	d6f32 <strncmp+0x8>
   d6f4a:	461c      	mov	r4, r3
   d6f4c:	1b18      	subs	r0, r3, r4
   d6f4e:	bd30      	pop	{r4, r5, pc}
   d6f50:	4610      	mov	r0, r2
   d6f52:	bd30      	pop	{r4, r5, pc}

000d6f54 <sulp>:
   d6f54:	b570      	push	{r4, r5, r6, lr}
   d6f56:	4604      	mov	r4, r0
   d6f58:	460d      	mov	r5, r1
   d6f5a:	ec45 4b10 	vmov	d0, r4, r5
   d6f5e:	4616      	mov	r6, r2
   d6f60:	f001 ffb2 	bl	d8ec8 <__ulp>
   d6f64:	ec51 0b10 	vmov	r0, r1, d0
   d6f68:	b17e      	cbz	r6, d6f8a <sulp+0x36>
   d6f6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d6f6e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d6f72:	2b00      	cmp	r3, #0
   d6f74:	dd09      	ble.n	d6f8a <sulp+0x36>
   d6f76:	051b      	lsls	r3, r3, #20
   d6f78:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d6f7c:	2400      	movs	r4, #0
   d6f7e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d6f82:	4622      	mov	r2, r4
   d6f84:	462b      	mov	r3, r5
   d6f86:	f7ff fb0d 	bl	d65a4 <__aeabi_dmul>
   d6f8a:	bd70      	pop	{r4, r5, r6, pc}
   d6f8c:	0000      	movs	r0, r0
	...

000d6f90 <_strtod_r>:
   d6f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6f94:	b09d      	sub	sp, #116	; 0x74
   d6f96:	2300      	movs	r3, #0
   d6f98:	9002      	str	r0, [sp, #8]
   d6f9a:	460c      	mov	r4, r1
   d6f9c:	9213      	str	r2, [sp, #76]	; 0x4c
   d6f9e:	9318      	str	r3, [sp, #96]	; 0x60
   d6fa0:	f04f 0a00 	mov.w	sl, #0
   d6fa4:	f04f 0b00 	mov.w	fp, #0
   d6fa8:	9117      	str	r1, [sp, #92]	; 0x5c
   d6faa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d6fac:	781a      	ldrb	r2, [r3, #0]
   d6fae:	2a0d      	cmp	r2, #13
   d6fb0:	d805      	bhi.n	d6fbe <_strtod_r+0x2e>
   d6fb2:	2a09      	cmp	r2, #9
   d6fb4:	d213      	bcs.n	d6fde <_strtod_r+0x4e>
   d6fb6:	2a00      	cmp	r2, #0
   d6fb8:	f000 81ac 	beq.w	d7314 <_strtod_r+0x384>
   d6fbc:	e012      	b.n	d6fe4 <_strtod_r+0x54>
   d6fbe:	2a2b      	cmp	r2, #43	; 0x2b
   d6fc0:	d004      	beq.n	d6fcc <_strtod_r+0x3c>
   d6fc2:	2a2d      	cmp	r2, #45	; 0x2d
   d6fc4:	d004      	beq.n	d6fd0 <_strtod_r+0x40>
   d6fc6:	2a20      	cmp	r2, #32
   d6fc8:	d10c      	bne.n	d6fe4 <_strtod_r+0x54>
   d6fca:	e008      	b.n	d6fde <_strtod_r+0x4e>
   d6fcc:	2200      	movs	r2, #0
   d6fce:	e000      	b.n	d6fd2 <_strtod_r+0x42>
   d6fd0:	2201      	movs	r2, #1
   d6fd2:	920c      	str	r2, [sp, #48]	; 0x30
   d6fd4:	1c5a      	adds	r2, r3, #1
   d6fd6:	9217      	str	r2, [sp, #92]	; 0x5c
   d6fd8:	785b      	ldrb	r3, [r3, #1]
   d6fda:	b92b      	cbnz	r3, d6fe8 <_strtod_r+0x58>
   d6fdc:	e19a      	b.n	d7314 <_strtod_r+0x384>
   d6fde:	3301      	adds	r3, #1
   d6fe0:	9317      	str	r3, [sp, #92]	; 0x5c
   d6fe2:	e7e2      	b.n	d6faa <_strtod_r+0x1a>
   d6fe4:	2300      	movs	r3, #0
   d6fe6:	930c      	str	r3, [sp, #48]	; 0x30
   d6fe8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d6fea:	782b      	ldrb	r3, [r5, #0]
   d6fec:	2b30      	cmp	r3, #48	; 0x30
   d6fee:	d15c      	bne.n	d70aa <_strtod_r+0x11a>
   d6ff0:	786b      	ldrb	r3, [r5, #1]
   d6ff2:	2b58      	cmp	r3, #88	; 0x58
   d6ff4:	d001      	beq.n	d6ffa <_strtod_r+0x6a>
   d6ff6:	2b78      	cmp	r3, #120	; 0x78
   d6ff8:	d14c      	bne.n	d7094 <_strtod_r+0x104>
   d6ffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d6ffc:	9301      	str	r3, [sp, #4]
   d6ffe:	ab18      	add	r3, sp, #96	; 0x60
   d7000:	9300      	str	r3, [sp, #0]
   d7002:	4aa9      	ldr	r2, [pc, #676]	; (d72a8 <_strtod_r+0x318>)
   d7004:	9802      	ldr	r0, [sp, #8]
   d7006:	ab19      	add	r3, sp, #100	; 0x64
   d7008:	a917      	add	r1, sp, #92	; 0x5c
   d700a:	f001 f8e4 	bl	d81d6 <__gethex>
   d700e:	f010 0607 	ands.w	r6, r0, #7
   d7012:	4604      	mov	r4, r0
   d7014:	f000 8587 	beq.w	d7b26 <_strtod_r+0xb96>
   d7018:	2e06      	cmp	r6, #6
   d701a:	d105      	bne.n	d7028 <_strtod_r+0x98>
   d701c:	3501      	adds	r5, #1
   d701e:	2300      	movs	r3, #0
   d7020:	9517      	str	r5, [sp, #92]	; 0x5c
   d7022:	930c      	str	r3, [sp, #48]	; 0x30
   d7024:	f000 bd7f 	b.w	d7b26 <_strtod_r+0xb96>
   d7028:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d702a:	b13a      	cbz	r2, d703c <_strtod_r+0xac>
   d702c:	2135      	movs	r1, #53	; 0x35
   d702e:	a81a      	add	r0, sp, #104	; 0x68
   d7030:	f002 f837 	bl	d90a2 <__copybits>
   d7034:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7036:	9802      	ldr	r0, [sp, #8]
   d7038:	f001 fcb5 	bl	d89a6 <_Bfree>
   d703c:	2e06      	cmp	r6, #6
   d703e:	d822      	bhi.n	d7086 <_strtod_r+0xf6>
   d7040:	e8df f006 	tbb	[pc, r6]
   d7044:	18080d04 	.word	0x18080d04
   d7048:	0d1d      	.short	0x0d1d
   d704a:	04          	.byte	0x04
   d704b:	00          	.byte	0x00
   d704c:	f04f 0b00 	mov.w	fp, #0
   d7050:	46da      	mov	sl, fp
   d7052:	e018      	b.n	d7086 <_strtod_r+0xf6>
   d7054:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d7058:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d705c:	e013      	b.n	d7086 <_strtod_r+0xf6>
   d705e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d7060:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d7062:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d7066:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d706a:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d706e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d7072:	e008      	b.n	d7086 <_strtod_r+0xf6>
   d7074:	f8df b234 	ldr.w	fp, [pc, #564]	; d72ac <_strtod_r+0x31c>
   d7078:	f04f 0a00 	mov.w	sl, #0
   d707c:	e003      	b.n	d7086 <_strtod_r+0xf6>
   d707e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d7082:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d7086:	0721      	lsls	r1, r4, #28
   d7088:	f140 854d 	bpl.w	d7b26 <_strtod_r+0xb96>
   d708c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d7090:	f000 bd49 	b.w	d7b26 <_strtod_r+0xb96>
   d7094:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7096:	1c5a      	adds	r2, r3, #1
   d7098:	9217      	str	r2, [sp, #92]	; 0x5c
   d709a:	785b      	ldrb	r3, [r3, #1]
   d709c:	2b30      	cmp	r3, #48	; 0x30
   d709e:	d0f9      	beq.n	d7094 <_strtod_r+0x104>
   d70a0:	2b00      	cmp	r3, #0
   d70a2:	f000 8540 	beq.w	d7b26 <_strtod_r+0xb96>
   d70a6:	2301      	movs	r3, #1
   d70a8:	e000      	b.n	d70ac <_strtod_r+0x11c>
   d70aa:	2300      	movs	r3, #0
   d70ac:	f04f 0800 	mov.w	r8, #0
   d70b0:	9306      	str	r3, [sp, #24]
   d70b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d70b4:	9307      	str	r3, [sp, #28]
   d70b6:	f8cd 8014 	str.w	r8, [sp, #20]
   d70ba:	f8cd 8010 	str.w	r8, [sp, #16]
   d70be:	220a      	movs	r2, #10
   d70c0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d70c2:	782e      	ldrb	r6, [r5, #0]
   d70c4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d70c8:	b2d9      	uxtb	r1, r3
   d70ca:	2909      	cmp	r1, #9
   d70cc:	d80e      	bhi.n	d70ec <_strtod_r+0x15c>
   d70ce:	9904      	ldr	r1, [sp, #16]
   d70d0:	2908      	cmp	r1, #8
   d70d2:	bfdd      	ittte	le
   d70d4:	9905      	ldrle	r1, [sp, #20]
   d70d6:	fb02 3301 	mlale	r3, r2, r1, r3
   d70da:	9305      	strle	r3, [sp, #20]
   d70dc:	fb02 3808 	mlagt	r8, r2, r8, r3
   d70e0:	9b04      	ldr	r3, [sp, #16]
   d70e2:	3501      	adds	r5, #1
   d70e4:	3301      	adds	r3, #1
   d70e6:	9304      	str	r3, [sp, #16]
   d70e8:	9517      	str	r5, [sp, #92]	; 0x5c
   d70ea:	e7e9      	b.n	d70c0 <_strtod_r+0x130>
   d70ec:	9802      	ldr	r0, [sp, #8]
   d70ee:	f7ff fea7 	bl	d6e40 <_localeconv_r>
   d70f2:	6807      	ldr	r7, [r0, #0]
   d70f4:	9802      	ldr	r0, [sp, #8]
   d70f6:	f7ff fea3 	bl	d6e40 <_localeconv_r>
   d70fa:	6800      	ldr	r0, [r0, #0]
   d70fc:	f7ff ff0d 	bl	d6f1a <strlen>
   d7100:	4639      	mov	r1, r7
   d7102:	4602      	mov	r2, r0
   d7104:	4628      	mov	r0, r5
   d7106:	f7ff ff10 	bl	d6f2a <strncmp>
   d710a:	4607      	mov	r7, r0
   d710c:	b128      	cbz	r0, d711a <_strtod_r+0x18a>
   d710e:	2000      	movs	r0, #0
   d7110:	4633      	mov	r3, r6
   d7112:	9d04      	ldr	r5, [sp, #16]
   d7114:	4602      	mov	r2, r0
   d7116:	4601      	mov	r1, r0
   d7118:	e057      	b.n	d71ca <_strtod_r+0x23a>
   d711a:	9802      	ldr	r0, [sp, #8]
   d711c:	f7ff fe90 	bl	d6e40 <_localeconv_r>
   d7120:	6800      	ldr	r0, [r0, #0]
   d7122:	f7ff fefa 	bl	d6f1a <strlen>
   d7126:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7128:	181a      	adds	r2, r3, r0
   d712a:	9217      	str	r2, [sp, #92]	; 0x5c
   d712c:	9a04      	ldr	r2, [sp, #16]
   d712e:	5c1b      	ldrb	r3, [r3, r0]
   d7130:	2a00      	cmp	r2, #0
   d7132:	d142      	bne.n	d71ba <_strtod_r+0x22a>
   d7134:	4610      	mov	r0, r2
   d7136:	2b30      	cmp	r3, #48	; 0x30
   d7138:	d105      	bne.n	d7146 <_strtod_r+0x1b6>
   d713a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d713c:	1c5a      	adds	r2, r3, #1
   d713e:	9217      	str	r2, [sp, #92]	; 0x5c
   d7140:	3001      	adds	r0, #1
   d7142:	785b      	ldrb	r3, [r3, #1]
   d7144:	e7f7      	b.n	d7136 <_strtod_r+0x1a6>
   d7146:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d714a:	2a08      	cmp	r2, #8
   d714c:	d843      	bhi.n	d71d6 <_strtod_r+0x246>
   d714e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d7150:	9207      	str	r2, [sp, #28]
   d7152:	4602      	mov	r2, r0
   d7154:	2000      	movs	r0, #0
   d7156:	4605      	mov	r5, r0
   d7158:	3b30      	subs	r3, #48	; 0x30
   d715a:	f100 0101 	add.w	r1, r0, #1
   d715e:	d026      	beq.n	d71ae <_strtod_r+0x21e>
   d7160:	440a      	add	r2, r1
   d7162:	eb05 0c00 	add.w	ip, r5, r0
   d7166:	4629      	mov	r1, r5
   d7168:	260a      	movs	r6, #10
   d716a:	4561      	cmp	r1, ip
   d716c:	d00e      	beq.n	d718c <_strtod_r+0x1fc>
   d716e:	3101      	adds	r1, #1
   d7170:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   d7174:	f1be 0f08 	cmp.w	lr, #8
   d7178:	dc03      	bgt.n	d7182 <_strtod_r+0x1f2>
   d717a:	9f05      	ldr	r7, [sp, #20]
   d717c:	4377      	muls	r7, r6
   d717e:	9705      	str	r7, [sp, #20]
   d7180:	e7f3      	b.n	d716a <_strtod_r+0x1da>
   d7182:	2910      	cmp	r1, #16
   d7184:	bfd8      	it	le
   d7186:	fb06 f808 	mulle.w	r8, r6, r8
   d718a:	e7ee      	b.n	d716a <_strtod_r+0x1da>
   d718c:	4428      	add	r0, r5
   d718e:	2808      	cmp	r0, #8
   d7190:	f100 0501 	add.w	r5, r0, #1
   d7194:	dc05      	bgt.n	d71a2 <_strtod_r+0x212>
   d7196:	9805      	ldr	r0, [sp, #20]
   d7198:	210a      	movs	r1, #10
   d719a:	fb01 3300 	mla	r3, r1, r0, r3
   d719e:	9305      	str	r3, [sp, #20]
   d71a0:	e004      	b.n	d71ac <_strtod_r+0x21c>
   d71a2:	2d10      	cmp	r5, #16
   d71a4:	bfdc      	itt	le
   d71a6:	210a      	movle	r1, #10
   d71a8:	fb01 3808 	mlale	r8, r1, r8, r3
   d71ac:	2100      	movs	r1, #0
   d71ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d71b0:	1c58      	adds	r0, r3, #1
   d71b2:	9017      	str	r0, [sp, #92]	; 0x5c
   d71b4:	785b      	ldrb	r3, [r3, #1]
   d71b6:	4608      	mov	r0, r1
   d71b8:	e002      	b.n	d71c0 <_strtod_r+0x230>
   d71ba:	9d04      	ldr	r5, [sp, #16]
   d71bc:	4638      	mov	r0, r7
   d71be:	463a      	mov	r2, r7
   d71c0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d71c4:	2909      	cmp	r1, #9
   d71c6:	d9c7      	bls.n	d7158 <_strtod_r+0x1c8>
   d71c8:	2101      	movs	r1, #1
   d71ca:	2b65      	cmp	r3, #101	; 0x65
   d71cc:	d001      	beq.n	d71d2 <_strtod_r+0x242>
   d71ce:	2b45      	cmp	r3, #69	; 0x45
   d71d0:	d151      	bne.n	d7276 <_strtod_r+0x2e6>
   d71d2:	b96d      	cbnz	r5, d71f0 <_strtod_r+0x260>
   d71d4:	e004      	b.n	d71e0 <_strtod_r+0x250>
   d71d6:	2b65      	cmp	r3, #101	; 0x65
   d71d8:	f040 84b3 	bne.w	d7b42 <_strtod_r+0xbb2>
   d71dc:	2200      	movs	r2, #0
   d71de:	2101      	movs	r1, #1
   d71e0:	b928      	cbnz	r0, d71ee <_strtod_r+0x25e>
   d71e2:	9b06      	ldr	r3, [sp, #24]
   d71e4:	2b00      	cmp	r3, #0
   d71e6:	f000 8095 	beq.w	d7314 <_strtod_r+0x384>
   d71ea:	4605      	mov	r5, r0
   d71ec:	e000      	b.n	d71f0 <_strtod_r+0x260>
   d71ee:	2500      	movs	r5, #0
   d71f0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d71f2:	1c63      	adds	r3, r4, #1
   d71f4:	9317      	str	r3, [sp, #92]	; 0x5c
   d71f6:	7863      	ldrb	r3, [r4, #1]
   d71f8:	2b2b      	cmp	r3, #43	; 0x2b
   d71fa:	d006      	beq.n	d720a <_strtod_r+0x27a>
   d71fc:	2b2d      	cmp	r3, #45	; 0x2d
   d71fe:	d002      	beq.n	d7206 <_strtod_r+0x276>
   d7200:	2600      	movs	r6, #0
   d7202:	9603      	str	r6, [sp, #12]
   d7204:	e006      	b.n	d7214 <_strtod_r+0x284>
   d7206:	2301      	movs	r3, #1
   d7208:	e000      	b.n	d720c <_strtod_r+0x27c>
   d720a:	2300      	movs	r3, #0
   d720c:	9303      	str	r3, [sp, #12]
   d720e:	1ca3      	adds	r3, r4, #2
   d7210:	9317      	str	r3, [sp, #92]	; 0x5c
   d7212:	78a3      	ldrb	r3, [r4, #2]
   d7214:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d7218:	2e09      	cmp	r6, #9
   d721a:	d82b      	bhi.n	d7274 <_strtod_r+0x2e4>
   d721c:	2b30      	cmp	r3, #48	; 0x30
   d721e:	d104      	bne.n	d722a <_strtod_r+0x29a>
   d7220:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7222:	1c5e      	adds	r6, r3, #1
   d7224:	9617      	str	r6, [sp, #92]	; 0x5c
   d7226:	785b      	ldrb	r3, [r3, #1]
   d7228:	e7f8      	b.n	d721c <_strtod_r+0x28c>
   d722a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d722e:	2e08      	cmp	r6, #8
   d7230:	d821      	bhi.n	d7276 <_strtod_r+0x2e6>
   d7232:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d7236:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7238:	f04f 0c0a 	mov.w	ip, #10
   d723c:	461f      	mov	r7, r3
   d723e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7240:	1c5e      	adds	r6, r3, #1
   d7242:	9617      	str	r6, [sp, #92]	; 0x5c
   d7244:	785b      	ldrb	r3, [r3, #1]
   d7246:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d724a:	f1b9 0f09 	cmp.w	r9, #9
   d724e:	d804      	bhi.n	d725a <_strtod_r+0x2ca>
   d7250:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d7254:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d7258:	e7f1      	b.n	d723e <_strtod_r+0x2ae>
   d725a:	1bf6      	subs	r6, r6, r7
   d725c:	2e08      	cmp	r6, #8
   d725e:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d7262:	dc02      	bgt.n	d726a <_strtod_r+0x2da>
   d7264:	45f1      	cmp	r9, lr
   d7266:	bfa8      	it	ge
   d7268:	46f1      	movge	r9, lr
   d726a:	9e03      	ldr	r6, [sp, #12]
   d726c:	b12e      	cbz	r6, d727a <_strtod_r+0x2ea>
   d726e:	f1c9 0900 	rsb	r9, r9, #0
   d7272:	e002      	b.n	d727a <_strtod_r+0x2ea>
   d7274:	9417      	str	r4, [sp, #92]	; 0x5c
   d7276:	f04f 0900 	mov.w	r9, #0
   d727a:	2d00      	cmp	r5, #0
   d727c:	d153      	bne.n	d7326 <_strtod_r+0x396>
   d727e:	2800      	cmp	r0, #0
   d7280:	f040 8451 	bne.w	d7b26 <_strtod_r+0xb96>
   d7284:	9a06      	ldr	r2, [sp, #24]
   d7286:	2a00      	cmp	r2, #0
   d7288:	f040 844d 	bne.w	d7b26 <_strtod_r+0xb96>
   d728c:	2900      	cmp	r1, #0
   d728e:	d141      	bne.n	d7314 <_strtod_r+0x384>
   d7290:	2b4e      	cmp	r3, #78	; 0x4e
   d7292:	d020      	beq.n	d72d6 <_strtod_r+0x346>
   d7294:	dc02      	bgt.n	d729c <_strtod_r+0x30c>
   d7296:	2b49      	cmp	r3, #73	; 0x49
   d7298:	d00a      	beq.n	d72b0 <_strtod_r+0x320>
   d729a:	e03b      	b.n	d7314 <_strtod_r+0x384>
   d729c:	2b69      	cmp	r3, #105	; 0x69
   d729e:	d007      	beq.n	d72b0 <_strtod_r+0x320>
   d72a0:	2b6e      	cmp	r3, #110	; 0x6e
   d72a2:	d018      	beq.n	d72d6 <_strtod_r+0x346>
   d72a4:	e036      	b.n	d7314 <_strtod_r+0x384>
   d72a6:	bf00      	nop
   d72a8:	000d9674 	.word	0x000d9674
   d72ac:	7ff00000 	.word	0x7ff00000
   d72b0:	49a8      	ldr	r1, [pc, #672]	; (d7554 <_strtod_r+0x5c4>)
   d72b2:	a817      	add	r0, sp, #92	; 0x5c
   d72b4:	f001 f9c0 	bl	d8638 <__match>
   d72b8:	b360      	cbz	r0, d7314 <_strtod_r+0x384>
   d72ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d72bc:	49a6      	ldr	r1, [pc, #664]	; (d7558 <_strtod_r+0x5c8>)
   d72be:	3b01      	subs	r3, #1
   d72c0:	a817      	add	r0, sp, #92	; 0x5c
   d72c2:	9317      	str	r3, [sp, #92]	; 0x5c
   d72c4:	f001 f9b8 	bl	d8638 <__match>
   d72c8:	b910      	cbnz	r0, d72d0 <_strtod_r+0x340>
   d72ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d72cc:	3301      	adds	r3, #1
   d72ce:	9317      	str	r3, [sp, #92]	; 0x5c
   d72d0:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d7574 <_strtod_r+0x5e4>
   d72d4:	e01a      	b.n	d730c <_strtod_r+0x37c>
   d72d6:	49a1      	ldr	r1, [pc, #644]	; (d755c <_strtod_r+0x5cc>)
   d72d8:	a817      	add	r0, sp, #92	; 0x5c
   d72da:	f001 f9ad 	bl	d8638 <__match>
   d72de:	b1c8      	cbz	r0, d7314 <_strtod_r+0x384>
   d72e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d72e2:	781b      	ldrb	r3, [r3, #0]
   d72e4:	2b28      	cmp	r3, #40	; 0x28
   d72e6:	d10f      	bne.n	d7308 <_strtod_r+0x378>
   d72e8:	aa1a      	add	r2, sp, #104	; 0x68
   d72ea:	499d      	ldr	r1, [pc, #628]	; (d7560 <_strtod_r+0x5d0>)
   d72ec:	a817      	add	r0, sp, #92	; 0x5c
   d72ee:	f001 f9b6 	bl	d865e <__hexnan>
   d72f2:	2805      	cmp	r0, #5
   d72f4:	d108      	bne.n	d7308 <_strtod_r+0x378>
   d72f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d72f8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d72fc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d7300:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d7304:	f000 bc0f 	b.w	d7b26 <_strtod_r+0xb96>
   d7308:	f8df b26c 	ldr.w	fp, [pc, #620]	; d7578 <_strtod_r+0x5e8>
   d730c:	f04f 0a00 	mov.w	sl, #0
   d7310:	f000 bc09 	b.w	d7b26 <_strtod_r+0xb96>
   d7314:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d7316:	9417      	str	r4, [sp, #92]	; 0x5c
   d7318:	2b00      	cmp	r3, #0
   d731a:	f000 840f 	beq.w	d7b3c <_strtod_r+0xbac>
   d731e:	2300      	movs	r3, #0
   d7320:	930c      	str	r3, [sp, #48]	; 0x30
   d7322:	f000 bc02 	b.w	d7b2a <_strtod_r+0xb9a>
   d7326:	9b04      	ldr	r3, [sp, #16]
   d7328:	9805      	ldr	r0, [sp, #20]
   d732a:	2b00      	cmp	r3, #0
   d732c:	bf08      	it	eq
   d732e:	462b      	moveq	r3, r5
   d7330:	2d10      	cmp	r5, #16
   d7332:	462c      	mov	r4, r5
   d7334:	ebc2 0909 	rsb	r9, r2, r9
   d7338:	bfa8      	it	ge
   d733a:	2410      	movge	r4, #16
   d733c:	9304      	str	r3, [sp, #16]
   d733e:	f7ff f8bb 	bl	d64b8 <__aeabi_ui2d>
   d7342:	2c09      	cmp	r4, #9
   d7344:	4682      	mov	sl, r0
   d7346:	468b      	mov	fp, r1
   d7348:	dd13      	ble.n	d7372 <_strtod_r+0x3e2>
   d734a:	4b86      	ldr	r3, [pc, #536]	; (d7564 <_strtod_r+0x5d4>)
   d734c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d7350:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d7354:	f7ff f926 	bl	d65a4 <__aeabi_dmul>
   d7358:	4606      	mov	r6, r0
   d735a:	4640      	mov	r0, r8
   d735c:	460f      	mov	r7, r1
   d735e:	f7ff f8ab 	bl	d64b8 <__aeabi_ui2d>
   d7362:	4602      	mov	r2, r0
   d7364:	460b      	mov	r3, r1
   d7366:	4630      	mov	r0, r6
   d7368:	4639      	mov	r1, r7
   d736a:	f7fe ff69 	bl	d6240 <__adddf3>
   d736e:	4682      	mov	sl, r0
   d7370:	468b      	mov	fp, r1
   d7372:	2d0f      	cmp	r5, #15
   d7374:	dc36      	bgt.n	d73e4 <_strtod_r+0x454>
   d7376:	f1b9 0f00 	cmp.w	r9, #0
   d737a:	f000 83d4 	beq.w	d7b26 <_strtod_r+0xb96>
   d737e:	dd24      	ble.n	d73ca <_strtod_r+0x43a>
   d7380:	f1b9 0f16 	cmp.w	r9, #22
   d7384:	dc07      	bgt.n	d7396 <_strtod_r+0x406>
   d7386:	4d77      	ldr	r5, [pc, #476]	; (d7564 <_strtod_r+0x5d4>)
   d7388:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d738c:	4652      	mov	r2, sl
   d738e:	465b      	mov	r3, fp
   d7390:	e9d9 0100 	ldrd	r0, r1, [r9]
   d7394:	e014      	b.n	d73c0 <_strtod_r+0x430>
   d7396:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d739a:	4599      	cmp	r9, r3
   d739c:	dc22      	bgt.n	d73e4 <_strtod_r+0x454>
   d739e:	4c71      	ldr	r4, [pc, #452]	; (d7564 <_strtod_r+0x5d4>)
   d73a0:	f1c5 050f 	rsb	r5, r5, #15
   d73a4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d73a8:	ebc5 0509 	rsb	r5, r5, r9
   d73ac:	4652      	mov	r2, sl
   d73ae:	465b      	mov	r3, fp
   d73b0:	e9d1 0100 	ldrd	r0, r1, [r1]
   d73b4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d73b8:	f7ff f8f4 	bl	d65a4 <__aeabi_dmul>
   d73bc:	e9d4 2300 	ldrd	r2, r3, [r4]
   d73c0:	f7ff f8f0 	bl	d65a4 <__aeabi_dmul>
   d73c4:	4682      	mov	sl, r0
   d73c6:	468b      	mov	fp, r1
   d73c8:	e3ad      	b.n	d7b26 <_strtod_r+0xb96>
   d73ca:	f119 0f16 	cmn.w	r9, #22
   d73ce:	db09      	blt.n	d73e4 <_strtod_r+0x454>
   d73d0:	4d64      	ldr	r5, [pc, #400]	; (d7564 <_strtod_r+0x5d4>)
   d73d2:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d73d6:	e9d9 2300 	ldrd	r2, r3, [r9]
   d73da:	4650      	mov	r0, sl
   d73dc:	4659      	mov	r1, fp
   d73de:	f7ff fa0b 	bl	d67f8 <__aeabi_ddiv>
   d73e2:	e7ef      	b.n	d73c4 <_strtod_r+0x434>
   d73e4:	1b2c      	subs	r4, r5, r4
   d73e6:	444c      	add	r4, r9
   d73e8:	2c00      	cmp	r4, #0
   d73ea:	dd57      	ble.n	d749c <_strtod_r+0x50c>
   d73ec:	f014 010f 	ands.w	r1, r4, #15
   d73f0:	d00a      	beq.n	d7408 <_strtod_r+0x478>
   d73f2:	4b5c      	ldr	r3, [pc, #368]	; (d7564 <_strtod_r+0x5d4>)
   d73f4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d73f8:	4652      	mov	r2, sl
   d73fa:	465b      	mov	r3, fp
   d73fc:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7400:	f7ff f8d0 	bl	d65a4 <__aeabi_dmul>
   d7404:	4682      	mov	sl, r0
   d7406:	468b      	mov	fp, r1
   d7408:	f034 040f 	bics.w	r4, r4, #15
   d740c:	f000 80b8 	beq.w	d7580 <_strtod_r+0x5f0>
   d7410:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d7414:	dd0b      	ble.n	d742e <_strtod_r+0x49e>
   d7416:	2400      	movs	r4, #0
   d7418:	4625      	mov	r5, r4
   d741a:	9405      	str	r4, [sp, #20]
   d741c:	9404      	str	r4, [sp, #16]
   d741e:	9a02      	ldr	r2, [sp, #8]
   d7420:	f8df b150 	ldr.w	fp, [pc, #336]	; d7574 <_strtod_r+0x5e4>
   d7424:	2322      	movs	r3, #34	; 0x22
   d7426:	6013      	str	r3, [r2, #0]
   d7428:	f04f 0a00 	mov.w	sl, #0
   d742c:	e187      	b.n	d773e <_strtod_r+0x7ae>
   d742e:	4e4e      	ldr	r6, [pc, #312]	; (d7568 <_strtod_r+0x5d8>)
   d7430:	2300      	movs	r3, #0
   d7432:	1124      	asrs	r4, r4, #4
   d7434:	4650      	mov	r0, sl
   d7436:	4659      	mov	r1, fp
   d7438:	4698      	mov	r8, r3
   d743a:	4637      	mov	r7, r6
   d743c:	2c01      	cmp	r4, #1
   d743e:	dd0b      	ble.n	d7458 <_strtod_r+0x4c8>
   d7440:	07e2      	lsls	r2, r4, #31
   d7442:	d504      	bpl.n	d744e <_strtod_r+0x4be>
   d7444:	e9d6 2300 	ldrd	r2, r3, [r6]
   d7448:	f7ff f8ac 	bl	d65a4 <__aeabi_dmul>
   d744c:	2301      	movs	r3, #1
   d744e:	f108 0801 	add.w	r8, r8, #1
   d7452:	1064      	asrs	r4, r4, #1
   d7454:	3608      	adds	r6, #8
   d7456:	e7f1      	b.n	d743c <_strtod_r+0x4ac>
   d7458:	b10b      	cbz	r3, d745e <_strtod_r+0x4ce>
   d745a:	4682      	mov	sl, r0
   d745c:	468b      	mov	fp, r1
   d745e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d7462:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d7466:	4652      	mov	r2, sl
   d7468:	465b      	mov	r3, fp
   d746a:	e9d7 0100 	ldrd	r0, r1, [r7]
   d746e:	f7ff f899 	bl	d65a4 <__aeabi_dmul>
   d7472:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7476:	468b      	mov	fp, r1
   d7478:	460a      	mov	r2, r1
   d747a:	0d1b      	lsrs	r3, r3, #20
   d747c:	493b      	ldr	r1, [pc, #236]	; (d756c <_strtod_r+0x5dc>)
   d747e:	051b      	lsls	r3, r3, #20
   d7480:	428b      	cmp	r3, r1
   d7482:	4682      	mov	sl, r0
   d7484:	d8c7      	bhi.n	d7416 <_strtod_r+0x486>
   d7486:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d748a:	428b      	cmp	r3, r1
   d748c:	bf86      	itte	hi
   d748e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d757c <_strtod_r+0x5ec>
   d7492:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d7496:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d749a:	e071      	b.n	d7580 <_strtod_r+0x5f0>
   d749c:	d070      	beq.n	d7580 <_strtod_r+0x5f0>
   d749e:	4264      	negs	r4, r4
   d74a0:	f014 020f 	ands.w	r2, r4, #15
   d74a4:	d00a      	beq.n	d74bc <_strtod_r+0x52c>
   d74a6:	4b2f      	ldr	r3, [pc, #188]	; (d7564 <_strtod_r+0x5d4>)
   d74a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d74ac:	4650      	mov	r0, sl
   d74ae:	4659      	mov	r1, fp
   d74b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d74b4:	f7ff f9a0 	bl	d67f8 <__aeabi_ddiv>
   d74b8:	4682      	mov	sl, r0
   d74ba:	468b      	mov	fp, r1
   d74bc:	1124      	asrs	r4, r4, #4
   d74be:	d05f      	beq.n	d7580 <_strtod_r+0x5f0>
   d74c0:	2c1f      	cmp	r4, #31
   d74c2:	dd04      	ble.n	d74ce <_strtod_r+0x53e>
   d74c4:	2400      	movs	r4, #0
   d74c6:	4625      	mov	r5, r4
   d74c8:	9405      	str	r4, [sp, #20]
   d74ca:	9404      	str	r4, [sp, #16]
   d74cc:	e130      	b.n	d7730 <_strtod_r+0x7a0>
   d74ce:	f014 0f10 	tst.w	r4, #16
   d74d2:	bf0c      	ite	eq
   d74d4:	2300      	moveq	r3, #0
   d74d6:	236a      	movne	r3, #106	; 0x6a
   d74d8:	4e25      	ldr	r6, [pc, #148]	; (d7570 <_strtod_r+0x5e0>)
   d74da:	9303      	str	r3, [sp, #12]
   d74dc:	4650      	mov	r0, sl
   d74de:	4659      	mov	r1, fp
   d74e0:	2300      	movs	r3, #0
   d74e2:	2c00      	cmp	r4, #0
   d74e4:	dd09      	ble.n	d74fa <_strtod_r+0x56a>
   d74e6:	07e2      	lsls	r2, r4, #31
   d74e8:	d504      	bpl.n	d74f4 <_strtod_r+0x564>
   d74ea:	e9d6 2300 	ldrd	r2, r3, [r6]
   d74ee:	f7ff f859 	bl	d65a4 <__aeabi_dmul>
   d74f2:	2301      	movs	r3, #1
   d74f4:	1064      	asrs	r4, r4, #1
   d74f6:	3608      	adds	r6, #8
   d74f8:	e7f3      	b.n	d74e2 <_strtod_r+0x552>
   d74fa:	b10b      	cbz	r3, d7500 <_strtod_r+0x570>
   d74fc:	4682      	mov	sl, r0
   d74fe:	468b      	mov	fp, r1
   d7500:	9b03      	ldr	r3, [sp, #12]
   d7502:	b1eb      	cbz	r3, d7540 <_strtod_r+0x5b0>
   d7504:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d7508:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d750c:	2b00      	cmp	r3, #0
   d750e:	4659      	mov	r1, fp
   d7510:	dd16      	ble.n	d7540 <_strtod_r+0x5b0>
   d7512:	2b1f      	cmp	r3, #31
   d7514:	dd0e      	ble.n	d7534 <_strtod_r+0x5a4>
   d7516:	2b34      	cmp	r3, #52	; 0x34
   d7518:	bfde      	ittt	le
   d751a:	3b20      	suble	r3, #32
   d751c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d7520:	fa02 f303 	lslle.w	r3, r2, r3
   d7524:	f04f 0a00 	mov.w	sl, #0
   d7528:	bfcc      	ite	gt
   d752a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d752e:	ea03 0b01 	andle.w	fp, r3, r1
   d7532:	e005      	b.n	d7540 <_strtod_r+0x5b0>
   d7534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7538:	fa02 f303 	lsl.w	r3, r2, r3
   d753c:	ea03 0a0a 	and.w	sl, r3, sl
   d7540:	2200      	movs	r2, #0
   d7542:	2300      	movs	r3, #0
   d7544:	4650      	mov	r0, sl
   d7546:	4659      	mov	r1, fp
   d7548:	f7ff fa94 	bl	d6a74 <__aeabi_dcmpeq>
   d754c:	2800      	cmp	r0, #0
   d754e:	d1b9      	bne.n	d74c4 <_strtod_r+0x534>
   d7550:	e018      	b.n	d7584 <_strtod_r+0x5f4>
   d7552:	bf00      	nop
   d7554:	000d969c 	.word	0x000d969c
   d7558:	000d969f 	.word	0x000d969f
   d755c:	000d96a5 	.word	0x000d96a5
   d7560:	000d9688 	.word	0x000d9688
   d7564:	000d9710 	.word	0x000d9710
   d7568:	000d97d8 	.word	0x000d97d8
   d756c:	7ca00000 	.word	0x7ca00000
   d7570:	000d96a8 	.word	0x000d96a8
   d7574:	7ff00000 	.word	0x7ff00000
   d7578:	fff80000 	.word	0xfff80000
   d757c:	7fefffff 	.word	0x7fefffff
   d7580:	2300      	movs	r3, #0
   d7582:	9303      	str	r3, [sp, #12]
   d7584:	9b05      	ldr	r3, [sp, #20]
   d7586:	9300      	str	r3, [sp, #0]
   d7588:	9a04      	ldr	r2, [sp, #16]
   d758a:	9907      	ldr	r1, [sp, #28]
   d758c:	9802      	ldr	r0, [sp, #8]
   d758e:	462b      	mov	r3, r5
   d7590:	f001 fa5b 	bl	d8a4a <__s2b>
   d7594:	9005      	str	r0, [sp, #20]
   d7596:	2800      	cmp	r0, #0
   d7598:	f43f af3d 	beq.w	d7416 <_strtod_r+0x486>
   d759c:	f1b9 0f00 	cmp.w	r9, #0
   d75a0:	f1c9 0300 	rsb	r3, r9, #0
   d75a4:	bfa8      	it	ge
   d75a6:	2300      	movge	r3, #0
   d75a8:	930d      	str	r3, [sp, #52]	; 0x34
   d75aa:	2400      	movs	r4, #0
   d75ac:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d75b0:	9312      	str	r3, [sp, #72]	; 0x48
   d75b2:	4625      	mov	r5, r4
   d75b4:	9b05      	ldr	r3, [sp, #20]
   d75b6:	9802      	ldr	r0, [sp, #8]
   d75b8:	6859      	ldr	r1, [r3, #4]
   d75ba:	f001 f9bf 	bl	d893c <_Balloc>
   d75be:	9004      	str	r0, [sp, #16]
   d75c0:	2800      	cmp	r0, #0
   d75c2:	f43f af2c 	beq.w	d741e <_strtod_r+0x48e>
   d75c6:	9b05      	ldr	r3, [sp, #20]
   d75c8:	691a      	ldr	r2, [r3, #16]
   d75ca:	3202      	adds	r2, #2
   d75cc:	f103 010c 	add.w	r1, r3, #12
   d75d0:	0092      	lsls	r2, r2, #2
   d75d2:	300c      	adds	r0, #12
   d75d4:	f7ff fc38 	bl	d6e48 <memcpy>
   d75d8:	aa1a      	add	r2, sp, #104	; 0x68
   d75da:	a919      	add	r1, sp, #100	; 0x64
   d75dc:	ec4b ab10 	vmov	d0, sl, fp
   d75e0:	9802      	ldr	r0, [sp, #8]
   d75e2:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d75e6:	f001 fce4 	bl	d8fb2 <__d2b>
   d75ea:	9018      	str	r0, [sp, #96]	; 0x60
   d75ec:	2800      	cmp	r0, #0
   d75ee:	f43f af16 	beq.w	d741e <_strtod_r+0x48e>
   d75f2:	2101      	movs	r1, #1
   d75f4:	9802      	ldr	r0, [sp, #8]
   d75f6:	f001 fab3 	bl	d8b60 <__i2b>
   d75fa:	4605      	mov	r5, r0
   d75fc:	2800      	cmp	r0, #0
   d75fe:	f43f af0e 	beq.w	d741e <_strtod_r+0x48e>
   d7602:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d7604:	9903      	ldr	r1, [sp, #12]
   d7606:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d7608:	2b00      	cmp	r3, #0
   d760a:	bfad      	iteet	ge
   d760c:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d760e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d7610:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d7614:	eb02 0803 	addge.w	r8, r2, r3
   d7618:	bfb8      	it	lt
   d761a:	1ad2      	sublt	r2, r2, r3
   d761c:	eba3 0301 	sub.w	r3, r3, r1
   d7620:	4433      	add	r3, r6
   d7622:	49b5      	ldr	r1, [pc, #724]	; (d78f8 <_strtod_r+0x968>)
   d7624:	bfa8      	it	ge
   d7626:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d7628:	3b01      	subs	r3, #1
   d762a:	428b      	cmp	r3, r1
   d762c:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d7630:	f280 808a 	bge.w	d7748 <_strtod_r+0x7b8>
   d7634:	1ac9      	subs	r1, r1, r3
   d7636:	291f      	cmp	r1, #31
   d7638:	bfc8      	it	gt
   d763a:	4fb0      	ldrgt	r7, [pc, #704]	; (d78fc <_strtod_r+0x96c>)
   d763c:	f04f 0901 	mov.w	r9, #1
   d7640:	bfd4      	ite	le
   d7642:	fa09 f301 	lslle.w	r3, r9, r1
   d7646:	1aff      	subgt	r7, r7, r3
   d7648:	eba6 0601 	sub.w	r6, r6, r1
   d764c:	bfd9      	ittee	le
   d764e:	9306      	strle	r3, [sp, #24]
   d7650:	2700      	movle	r7, #0
   d7652:	fa09 f707 	lslgt.w	r7, r9, r7
   d7656:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d765a:	eb08 0906 	add.w	r9, r8, r6
   d765e:	9b03      	ldr	r3, [sp, #12]
   d7660:	45c8      	cmp	r8, r9
   d7662:	4416      	add	r6, r2
   d7664:	441e      	add	r6, r3
   d7666:	4643      	mov	r3, r8
   d7668:	bfa8      	it	ge
   d766a:	464b      	movge	r3, r9
   d766c:	42b3      	cmp	r3, r6
   d766e:	bfa8      	it	ge
   d7670:	4633      	movge	r3, r6
   d7672:	2b00      	cmp	r3, #0
   d7674:	bfc2      	ittt	gt
   d7676:	ebc3 0909 	rsbgt	r9, r3, r9
   d767a:	1af6      	subgt	r6, r6, r3
   d767c:	ebc3 0808 	rsbgt	r8, r3, r8
   d7680:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d7682:	2b00      	cmp	r3, #0
   d7684:	d164      	bne.n	d7750 <_strtod_r+0x7c0>
   d7686:	f1b9 0f00 	cmp.w	r9, #0
   d768a:	dc7a      	bgt.n	d7782 <_strtod_r+0x7f2>
   d768c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d768e:	2b00      	cmp	r3, #0
   d7690:	f040 8081 	bne.w	d7796 <_strtod_r+0x806>
   d7694:	2e00      	cmp	r6, #0
   d7696:	f300 8088 	bgt.w	d77aa <_strtod_r+0x81a>
   d769a:	f1b8 0f00 	cmp.w	r8, #0
   d769e:	f300 808e 	bgt.w	d77be <_strtod_r+0x82e>
   d76a2:	9a04      	ldr	r2, [sp, #16]
   d76a4:	9918      	ldr	r1, [sp, #96]	; 0x60
   d76a6:	9802      	ldr	r0, [sp, #8]
   d76a8:	f001 fbaf 	bl	d8e0a <__mdiff>
   d76ac:	4604      	mov	r4, r0
   d76ae:	2800      	cmp	r0, #0
   d76b0:	f43f aeb5 	beq.w	d741e <_strtod_r+0x48e>
   d76b4:	68c3      	ldr	r3, [r0, #12]
   d76b6:	9307      	str	r3, [sp, #28]
   d76b8:	2300      	movs	r3, #0
   d76ba:	60c3      	str	r3, [r0, #12]
   d76bc:	4629      	mov	r1, r5
   d76be:	f001 fb88 	bl	d8dd2 <__mcmp>
   d76c2:	2800      	cmp	r0, #0
   d76c4:	f280 8089 	bge.w	d77da <_strtod_r+0x84a>
   d76c8:	9b07      	ldr	r3, [sp, #28]
   d76ca:	2b00      	cmp	r3, #0
   d76cc:	f040 8204 	bne.w	d7ad8 <_strtod_r+0xb48>
   d76d0:	f1ba 0f00 	cmp.w	sl, #0
   d76d4:	f040 8200 	bne.w	d7ad8 <_strtod_r+0xb48>
   d76d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d76dc:	2b00      	cmp	r3, #0
   d76de:	f040 81fb 	bne.w	d7ad8 <_strtod_r+0xb48>
   d76e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d76e6:	0d1b      	lsrs	r3, r3, #20
   d76e8:	051b      	lsls	r3, r3, #20
   d76ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d76ee:	f240 81f3 	bls.w	d7ad8 <_strtod_r+0xb48>
   d76f2:	6963      	ldr	r3, [r4, #20]
   d76f4:	2b00      	cmp	r3, #0
   d76f6:	d06c      	beq.n	d77d2 <_strtod_r+0x842>
   d76f8:	4621      	mov	r1, r4
   d76fa:	2201      	movs	r2, #1
   d76fc:	9802      	ldr	r0, [sp, #8]
   d76fe:	f001 fb17 	bl	d8d30 <__lshift>
   d7702:	4629      	mov	r1, r5
   d7704:	4604      	mov	r4, r0
   d7706:	f001 fb64 	bl	d8dd2 <__mcmp>
   d770a:	2800      	cmp	r0, #0
   d770c:	f340 81e4 	ble.w	d7ad8 <_strtod_r+0xb48>
   d7710:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7714:	9a03      	ldr	r2, [sp, #12]
   d7716:	0d1b      	lsrs	r3, r3, #20
   d7718:	051b      	lsls	r3, r3, #20
   d771a:	2a00      	cmp	r2, #0
   d771c:	f000 808c 	beq.w	d7838 <_strtod_r+0x8a8>
   d7720:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d7724:	f300 8088 	bgt.w	d7838 <_strtod_r+0x8a8>
   d7728:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d772c:	f300 81d6 	bgt.w	d7adc <_strtod_r+0xb4c>
   d7730:	9a02      	ldr	r2, [sp, #8]
   d7732:	2322      	movs	r3, #34	; 0x22
   d7734:	f04f 0a00 	mov.w	sl, #0
   d7738:	f04f 0b00 	mov.w	fp, #0
   d773c:	6013      	str	r3, [r2, #0]
   d773e:	9b05      	ldr	r3, [sp, #20]
   d7740:	2b00      	cmp	r3, #0
   d7742:	f040 81dc 	bne.w	d7afe <_strtod_r+0xb6e>
   d7746:	e1ee      	b.n	d7b26 <_strtod_r+0xb96>
   d7748:	2301      	movs	r3, #1
   d774a:	2700      	movs	r7, #0
   d774c:	9306      	str	r3, [sp, #24]
   d774e:	e784      	b.n	d765a <_strtod_r+0x6ca>
   d7750:	4629      	mov	r1, r5
   d7752:	461a      	mov	r2, r3
   d7754:	9802      	ldr	r0, [sp, #8]
   d7756:	f001 fa9d 	bl	d8c94 <__pow5mult>
   d775a:	4605      	mov	r5, r0
   d775c:	2800      	cmp	r0, #0
   d775e:	f43f ae5e 	beq.w	d741e <_strtod_r+0x48e>
   d7762:	4601      	mov	r1, r0
   d7764:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d7766:	9802      	ldr	r0, [sp, #8]
   d7768:	f001 fa03 	bl	d8b72 <__multiply>
   d776c:	9007      	str	r0, [sp, #28]
   d776e:	2800      	cmp	r0, #0
   d7770:	f43f ae55 	beq.w	d741e <_strtod_r+0x48e>
   d7774:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7776:	9802      	ldr	r0, [sp, #8]
   d7778:	f001 f915 	bl	d89a6 <_Bfree>
   d777c:	9b07      	ldr	r3, [sp, #28]
   d777e:	9318      	str	r3, [sp, #96]	; 0x60
   d7780:	e781      	b.n	d7686 <_strtod_r+0x6f6>
   d7782:	464a      	mov	r2, r9
   d7784:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7786:	9802      	ldr	r0, [sp, #8]
   d7788:	f001 fad2 	bl	d8d30 <__lshift>
   d778c:	9018      	str	r0, [sp, #96]	; 0x60
   d778e:	2800      	cmp	r0, #0
   d7790:	f47f af7c 	bne.w	d768c <_strtod_r+0x6fc>
   d7794:	e643      	b.n	d741e <_strtod_r+0x48e>
   d7796:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d7798:	9904      	ldr	r1, [sp, #16]
   d779a:	9802      	ldr	r0, [sp, #8]
   d779c:	f001 fa7a 	bl	d8c94 <__pow5mult>
   d77a0:	9004      	str	r0, [sp, #16]
   d77a2:	2800      	cmp	r0, #0
   d77a4:	f47f af76 	bne.w	d7694 <_strtod_r+0x704>
   d77a8:	e639      	b.n	d741e <_strtod_r+0x48e>
   d77aa:	4632      	mov	r2, r6
   d77ac:	9904      	ldr	r1, [sp, #16]
   d77ae:	9802      	ldr	r0, [sp, #8]
   d77b0:	f001 fabe 	bl	d8d30 <__lshift>
   d77b4:	9004      	str	r0, [sp, #16]
   d77b6:	2800      	cmp	r0, #0
   d77b8:	f47f af6f 	bne.w	d769a <_strtod_r+0x70a>
   d77bc:	e62f      	b.n	d741e <_strtod_r+0x48e>
   d77be:	4629      	mov	r1, r5
   d77c0:	4642      	mov	r2, r8
   d77c2:	9802      	ldr	r0, [sp, #8]
   d77c4:	f001 fab4 	bl	d8d30 <__lshift>
   d77c8:	4605      	mov	r5, r0
   d77ca:	2800      	cmp	r0, #0
   d77cc:	f47f af69 	bne.w	d76a2 <_strtod_r+0x712>
   d77d0:	e625      	b.n	d741e <_strtod_r+0x48e>
   d77d2:	6923      	ldr	r3, [r4, #16]
   d77d4:	2b01      	cmp	r3, #1
   d77d6:	dc8f      	bgt.n	d76f8 <_strtod_r+0x768>
   d77d8:	e17e      	b.n	d7ad8 <_strtod_r+0xb48>
   d77da:	d161      	bne.n	d78a0 <_strtod_r+0x910>
   d77dc:	9a07      	ldr	r2, [sp, #28]
   d77de:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d77e2:	b322      	cbz	r2, d782e <_strtod_r+0x89e>
   d77e4:	4946      	ldr	r1, [pc, #280]	; (d7900 <_strtod_r+0x970>)
   d77e6:	428b      	cmp	r3, r1
   d77e8:	465a      	mov	r2, fp
   d77ea:	d12e      	bne.n	d784a <_strtod_r+0x8ba>
   d77ec:	9b03      	ldr	r3, [sp, #12]
   d77ee:	4651      	mov	r1, sl
   d77f0:	b163      	cbz	r3, d780c <_strtod_r+0x87c>
   d77f2:	4b44      	ldr	r3, [pc, #272]	; (d7904 <_strtod_r+0x974>)
   d77f4:	4013      	ands	r3, r2
   d77f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d77fa:	d807      	bhi.n	d780c <_strtod_r+0x87c>
   d77fc:	0d1b      	lsrs	r3, r3, #20
   d77fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d7802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7806:	fa00 f303 	lsl.w	r3, r0, r3
   d780a:	e001      	b.n	d7810 <_strtod_r+0x880>
   d780c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d7810:	428b      	cmp	r3, r1
   d7812:	d11a      	bne.n	d784a <_strtod_r+0x8ba>
   d7814:	493c      	ldr	r1, [pc, #240]	; (d7908 <_strtod_r+0x978>)
   d7816:	428a      	cmp	r2, r1
   d7818:	d102      	bne.n	d7820 <_strtod_r+0x890>
   d781a:	3301      	adds	r3, #1
   d781c:	f43f adff 	beq.w	d741e <_strtod_r+0x48e>
   d7820:	4b38      	ldr	r3, [pc, #224]	; (d7904 <_strtod_r+0x974>)
   d7822:	4013      	ands	r3, r2
   d7824:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d7828:	f04f 0a00 	mov.w	sl, #0
   d782c:	e154      	b.n	d7ad8 <_strtod_r+0xb48>
   d782e:	b963      	cbnz	r3, d784a <_strtod_r+0x8ba>
   d7830:	f1ba 0f00 	cmp.w	sl, #0
   d7834:	d109      	bne.n	d784a <_strtod_r+0x8ba>
   d7836:	e76b      	b.n	d7710 <_strtod_r+0x780>
   d7838:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d783c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d7840:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d7844:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d7848:	e146      	b.n	d7ad8 <_strtod_r+0xb48>
   d784a:	b117      	cbz	r7, d7852 <_strtod_r+0x8c2>
   d784c:	ea17 0f0b 	tst.w	r7, fp
   d7850:	e002      	b.n	d7858 <_strtod_r+0x8c8>
   d7852:	9b06      	ldr	r3, [sp, #24]
   d7854:	ea13 0f0a 	tst.w	r3, sl
   d7858:	f000 813e 	beq.w	d7ad8 <_strtod_r+0xb48>
   d785c:	9b07      	ldr	r3, [sp, #28]
   d785e:	9a03      	ldr	r2, [sp, #12]
   d7860:	4650      	mov	r0, sl
   d7862:	4659      	mov	r1, fp
   d7864:	b153      	cbz	r3, d787c <_strtod_r+0x8ec>
   d7866:	f7ff fb75 	bl	d6f54 <sulp>
   d786a:	4602      	mov	r2, r0
   d786c:	460b      	mov	r3, r1
   d786e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d7872:	f7fe fce5 	bl	d6240 <__adddf3>
   d7876:	4682      	mov	sl, r0
   d7878:	468b      	mov	fp, r1
   d787a:	e12d      	b.n	d7ad8 <_strtod_r+0xb48>
   d787c:	f7ff fb6a 	bl	d6f54 <sulp>
   d7880:	4602      	mov	r2, r0
   d7882:	460b      	mov	r3, r1
   d7884:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d7888:	f7fe fcd8 	bl	d623c <__aeabi_dsub>
   d788c:	2200      	movs	r2, #0
   d788e:	2300      	movs	r3, #0
   d7890:	4682      	mov	sl, r0
   d7892:	468b      	mov	fp, r1
   d7894:	f7ff f8ee 	bl	d6a74 <__aeabi_dcmpeq>
   d7898:	2800      	cmp	r0, #0
   d789a:	f47f af49 	bne.w	d7730 <_strtod_r+0x7a0>
   d789e:	e11b      	b.n	d7ad8 <_strtod_r+0xb48>
   d78a0:	4629      	mov	r1, r5
   d78a2:	4620      	mov	r0, r4
   d78a4:	f001 fbd3 	bl	d904e <__ratio>
   d78a8:	ec57 6b10 	vmov	r6, r7, d0
   d78ac:	2200      	movs	r2, #0
   d78ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d78b2:	ee10 0a10 	vmov	r0, s0
   d78b6:	4639      	mov	r1, r7
   d78b8:	f7ff f8f0 	bl	d6a9c <__aeabi_dcmple>
   d78bc:	2800      	cmp	r0, #0
   d78be:	d042      	beq.n	d7946 <_strtod_r+0x9b6>
   d78c0:	9b07      	ldr	r3, [sp, #28]
   d78c2:	b123      	cbz	r3, d78ce <_strtod_r+0x93e>
   d78c4:	f04f 0800 	mov.w	r8, #0
   d78c8:	f8df 9040 	ldr.w	r9, [pc, #64]	; d790c <_strtod_r+0x97c>
   d78cc:	e011      	b.n	d78f2 <_strtod_r+0x962>
   d78ce:	f1ba 0f00 	cmp.w	sl, #0
   d78d2:	d103      	bne.n	d78dc <_strtod_r+0x94c>
   d78d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d78d8:	b93b      	cbnz	r3, d78ea <_strtod_r+0x95a>
   d78da:	e01b      	b.n	d7914 <_strtod_r+0x984>
   d78dc:	f1ba 0f01 	cmp.w	sl, #1
   d78e0:	d103      	bne.n	d78ea <_strtod_r+0x95a>
   d78e2:	f1bb 0f00 	cmp.w	fp, #0
   d78e6:	f43f af23 	beq.w	d7730 <_strtod_r+0x7a0>
   d78ea:	f8df 9024 	ldr.w	r9, [pc, #36]	; d7910 <_strtod_r+0x980>
   d78ee:	f04f 0800 	mov.w	r8, #0
   d78f2:	2600      	movs	r6, #0
   d78f4:	4f05      	ldr	r7, [pc, #20]	; (d790c <_strtod_r+0x97c>)
   d78f6:	e039      	b.n	d796c <_strtod_r+0x9dc>
   d78f8:	fffffc02 	.word	0xfffffc02
   d78fc:	fffffbe2 	.word	0xfffffbe2
   d7900:	000fffff 	.word	0x000fffff
   d7904:	7ff00000 	.word	0x7ff00000
   d7908:	7fefffff 	.word	0x7fefffff
   d790c:	3ff00000 	.word	0x3ff00000
   d7910:	bff00000 	.word	0xbff00000
   d7914:	2200      	movs	r2, #0
   d7916:	4b98      	ldr	r3, [pc, #608]	; (d7b78 <_strtod_r+0xbe8>)
   d7918:	4630      	mov	r0, r6
   d791a:	4639      	mov	r1, r7
   d791c:	f7ff f8b4 	bl	d6a88 <__aeabi_dcmplt>
   d7920:	b940      	cbnz	r0, d7934 <_strtod_r+0x9a4>
   d7922:	4630      	mov	r0, r6
   d7924:	4639      	mov	r1, r7
   d7926:	2200      	movs	r2, #0
   d7928:	4b94      	ldr	r3, [pc, #592]	; (d7b7c <_strtod_r+0xbec>)
   d792a:	f7fe fe3b 	bl	d65a4 <__aeabi_dmul>
   d792e:	4606      	mov	r6, r0
   d7930:	460f      	mov	r7, r1
   d7932:	e001      	b.n	d7938 <_strtod_r+0x9a8>
   d7934:	4f91      	ldr	r7, [pc, #580]	; (d7b7c <_strtod_r+0xbec>)
   d7936:	2600      	movs	r6, #0
   d7938:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d793c:	9614      	str	r6, [sp, #80]	; 0x50
   d793e:	9315      	str	r3, [sp, #84]	; 0x54
   d7940:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d7944:	e012      	b.n	d796c <_strtod_r+0x9dc>
   d7946:	4b8d      	ldr	r3, [pc, #564]	; (d7b7c <_strtod_r+0xbec>)
   d7948:	4630      	mov	r0, r6
   d794a:	4639      	mov	r1, r7
   d794c:	2200      	movs	r2, #0
   d794e:	f7fe fe29 	bl	d65a4 <__aeabi_dmul>
   d7952:	9b07      	ldr	r3, [sp, #28]
   d7954:	4606      	mov	r6, r0
   d7956:	460f      	mov	r7, r1
   d7958:	b923      	cbnz	r3, d7964 <_strtod_r+0x9d4>
   d795a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d795e:	900e      	str	r0, [sp, #56]	; 0x38
   d7960:	930f      	str	r3, [sp, #60]	; 0x3c
   d7962:	e001      	b.n	d7968 <_strtod_r+0x9d8>
   d7964:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d7968:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d796c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7970:	0d1b      	lsrs	r3, r3, #20
   d7972:	051b      	lsls	r3, r3, #20
   d7974:	9306      	str	r3, [sp, #24]
   d7976:	9a06      	ldr	r2, [sp, #24]
   d7978:	4b81      	ldr	r3, [pc, #516]	; (d7b80 <_strtod_r+0xbf0>)
   d797a:	429a      	cmp	r2, r3
   d797c:	d12b      	bne.n	d79d6 <_strtod_r+0xa46>
   d797e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7982:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d7986:	ec4b ab10 	vmov	d0, sl, fp
   d798a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d798e:	f001 fa9b 	bl	d8ec8 <__ulp>
   d7992:	4640      	mov	r0, r8
   d7994:	ec53 2b10 	vmov	r2, r3, d0
   d7998:	4649      	mov	r1, r9
   d799a:	f7fe fe03 	bl	d65a4 <__aeabi_dmul>
   d799e:	4652      	mov	r2, sl
   d79a0:	465b      	mov	r3, fp
   d79a2:	f7fe fc4d 	bl	d6240 <__adddf3>
   d79a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d79aa:	0d1b      	lsrs	r3, r3, #20
   d79ac:	4a75      	ldr	r2, [pc, #468]	; (d7b84 <_strtod_r+0xbf4>)
   d79ae:	051b      	lsls	r3, r3, #20
   d79b0:	4293      	cmp	r3, r2
   d79b2:	4682      	mov	sl, r0
   d79b4:	d90c      	bls.n	d79d0 <_strtod_r+0xa40>
   d79b6:	4b74      	ldr	r3, [pc, #464]	; (d7b88 <_strtod_r+0xbf8>)
   d79b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d79ba:	429a      	cmp	r2, r3
   d79bc:	d103      	bne.n	d79c6 <_strtod_r+0xa36>
   d79be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d79c0:	3301      	adds	r3, #1
   d79c2:	f43f ad2c 	beq.w	d741e <_strtod_r+0x48e>
   d79c6:	f8df b1c0 	ldr.w	fp, [pc, #448]	; d7b88 <_strtod_r+0xbf8>
   d79ca:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d79ce:	e072      	b.n	d7ab6 <_strtod_r+0xb26>
   d79d0:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d79d4:	e038      	b.n	d7a48 <_strtod_r+0xab8>
   d79d6:	9b03      	ldr	r3, [sp, #12]
   d79d8:	b333      	cbz	r3, d7a28 <_strtod_r+0xa98>
   d79da:	9b06      	ldr	r3, [sp, #24]
   d79dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d79e0:	d822      	bhi.n	d7a28 <_strtod_r+0xa98>
   d79e2:	a35d      	add	r3, pc, #372	; (adr r3, d7b58 <_strtod_r+0xbc8>)
   d79e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d79e8:	4630      	mov	r0, r6
   d79ea:	4639      	mov	r1, r7
   d79ec:	f7ff f856 	bl	d6a9c <__aeabi_dcmple>
   d79f0:	b1a8      	cbz	r0, d7a1e <_strtod_r+0xa8e>
   d79f2:	4639      	mov	r1, r7
   d79f4:	4630      	mov	r0, r6
   d79f6:	f7ff f8ad 	bl	d6b54 <__aeabi_d2uiz>
   d79fa:	2800      	cmp	r0, #0
   d79fc:	bf08      	it	eq
   d79fe:	2001      	moveq	r0, #1
   d7a00:	f7fe fd5a 	bl	d64b8 <__aeabi_ui2d>
   d7a04:	9b07      	ldr	r3, [sp, #28]
   d7a06:	4606      	mov	r6, r0
   d7a08:	460f      	mov	r7, r1
   d7a0a:	b923      	cbnz	r3, d7a16 <_strtod_r+0xa86>
   d7a0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7a10:	9010      	str	r0, [sp, #64]	; 0x40
   d7a12:	9311      	str	r3, [sp, #68]	; 0x44
   d7a14:	e001      	b.n	d7a1a <_strtod_r+0xa8a>
   d7a16:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d7a1a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d7a1e:	9a06      	ldr	r2, [sp, #24]
   d7a20:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d7a24:	ebc2 0903 	rsb	r9, r2, r3
   d7a28:	ed9d 0b08 	vldr	d0, [sp, #32]
   d7a2c:	f001 fa4c 	bl	d8ec8 <__ulp>
   d7a30:	4640      	mov	r0, r8
   d7a32:	ec53 2b10 	vmov	r2, r3, d0
   d7a36:	4649      	mov	r1, r9
   d7a38:	f7fe fdb4 	bl	d65a4 <__aeabi_dmul>
   d7a3c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7a40:	f7fe fbfe 	bl	d6240 <__adddf3>
   d7a44:	4682      	mov	sl, r0
   d7a46:	468b      	mov	fp, r1
   d7a48:	9b03      	ldr	r3, [sp, #12]
   d7a4a:	bba3      	cbnz	r3, d7ab6 <_strtod_r+0xb26>
   d7a4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7a50:	0d1b      	lsrs	r3, r3, #20
   d7a52:	9a06      	ldr	r2, [sp, #24]
   d7a54:	051b      	lsls	r3, r3, #20
   d7a56:	429a      	cmp	r2, r3
   d7a58:	46d8      	mov	r8, fp
   d7a5a:	d12c      	bne.n	d7ab6 <_strtod_r+0xb26>
   d7a5c:	4639      	mov	r1, r7
   d7a5e:	4630      	mov	r0, r6
   d7a60:	f7ff f850 	bl	d6b04 <__aeabi_d2iz>
   d7a64:	f7fe fd38 	bl	d64d8 <__aeabi_i2d>
   d7a68:	460b      	mov	r3, r1
   d7a6a:	4602      	mov	r2, r0
   d7a6c:	4639      	mov	r1, r7
   d7a6e:	4630      	mov	r0, r6
   d7a70:	f7fe fbe4 	bl	d623c <__aeabi_dsub>
   d7a74:	9b07      	ldr	r3, [sp, #28]
   d7a76:	4606      	mov	r6, r0
   d7a78:	460f      	mov	r7, r1
   d7a7a:	b92b      	cbnz	r3, d7a88 <_strtod_r+0xaf8>
   d7a7c:	f1ba 0f00 	cmp.w	sl, #0
   d7a80:	d102      	bne.n	d7a88 <_strtod_r+0xaf8>
   d7a82:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7a86:	b183      	cbz	r3, d7aaa <_strtod_r+0xb1a>
   d7a88:	a335      	add	r3, pc, #212	; (adr r3, d7b60 <_strtod_r+0xbd0>)
   d7a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7a8e:	4630      	mov	r0, r6
   d7a90:	4639      	mov	r1, r7
   d7a92:	f7fe fff9 	bl	d6a88 <__aeabi_dcmplt>
   d7a96:	2800      	cmp	r0, #0
   d7a98:	d131      	bne.n	d7afe <_strtod_r+0xb6e>
   d7a9a:	a333      	add	r3, pc, #204	; (adr r3, d7b68 <_strtod_r+0xbd8>)
   d7a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7aa0:	4630      	mov	r0, r6
   d7aa2:	4639      	mov	r1, r7
   d7aa4:	f7ff f80e 	bl	d6ac4 <__aeabi_dcmpgt>
   d7aa8:	e004      	b.n	d7ab4 <_strtod_r+0xb24>
   d7aaa:	a331      	add	r3, pc, #196	; (adr r3, d7b70 <_strtod_r+0xbe0>)
   d7aac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ab0:	f7fe ffea 	bl	d6a88 <__aeabi_dcmplt>
   d7ab4:	bb18      	cbnz	r0, d7afe <_strtod_r+0xb6e>
   d7ab6:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7ab8:	9802      	ldr	r0, [sp, #8]
   d7aba:	f000 ff74 	bl	d89a6 <_Bfree>
   d7abe:	9904      	ldr	r1, [sp, #16]
   d7ac0:	9802      	ldr	r0, [sp, #8]
   d7ac2:	f000 ff70 	bl	d89a6 <_Bfree>
   d7ac6:	4629      	mov	r1, r5
   d7ac8:	9802      	ldr	r0, [sp, #8]
   d7aca:	f000 ff6c 	bl	d89a6 <_Bfree>
   d7ace:	4621      	mov	r1, r4
   d7ad0:	9802      	ldr	r0, [sp, #8]
   d7ad2:	f000 ff68 	bl	d89a6 <_Bfree>
   d7ad6:	e56d      	b.n	d75b4 <_strtod_r+0x624>
   d7ad8:	9b03      	ldr	r3, [sp, #12]
   d7ada:	b183      	cbz	r3, d7afe <_strtod_r+0xb6e>
   d7adc:	4b2b      	ldr	r3, [pc, #172]	; (d7b8c <_strtod_r+0xbfc>)
   d7ade:	930b      	str	r3, [sp, #44]	; 0x2c
   d7ae0:	2300      	movs	r3, #0
   d7ae2:	930a      	str	r3, [sp, #40]	; 0x28
   d7ae4:	4650      	mov	r0, sl
   d7ae6:	4659      	mov	r1, fp
   d7ae8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d7aec:	f7fe fd5a 	bl	d65a4 <__aeabi_dmul>
   d7af0:	4682      	mov	sl, r0
   d7af2:	468b      	mov	fp, r1
   d7af4:	b919      	cbnz	r1, d7afe <_strtod_r+0xb6e>
   d7af6:	b910      	cbnz	r0, d7afe <_strtod_r+0xb6e>
   d7af8:	9a02      	ldr	r2, [sp, #8]
   d7afa:	2322      	movs	r3, #34	; 0x22
   d7afc:	6013      	str	r3, [r2, #0]
   d7afe:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7b00:	9802      	ldr	r0, [sp, #8]
   d7b02:	f000 ff50 	bl	d89a6 <_Bfree>
   d7b06:	9904      	ldr	r1, [sp, #16]
   d7b08:	9802      	ldr	r0, [sp, #8]
   d7b0a:	f000 ff4c 	bl	d89a6 <_Bfree>
   d7b0e:	4629      	mov	r1, r5
   d7b10:	9802      	ldr	r0, [sp, #8]
   d7b12:	f000 ff48 	bl	d89a6 <_Bfree>
   d7b16:	9905      	ldr	r1, [sp, #20]
   d7b18:	9802      	ldr	r0, [sp, #8]
   d7b1a:	f000 ff44 	bl	d89a6 <_Bfree>
   d7b1e:	4621      	mov	r1, r4
   d7b20:	9802      	ldr	r0, [sp, #8]
   d7b22:	f000 ff40 	bl	d89a6 <_Bfree>
   d7b26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d7b28:	b113      	cbz	r3, d7b30 <_strtod_r+0xba0>
   d7b2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d7b2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7b2e:	6013      	str	r3, [r2, #0]
   d7b30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d7b32:	b11b      	cbz	r3, d7b3c <_strtod_r+0xbac>
   d7b34:	4652      	mov	r2, sl
   d7b36:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d7b3a:	e007      	b.n	d7b4c <_strtod_r+0xbbc>
   d7b3c:	4652      	mov	r2, sl
   d7b3e:	465b      	mov	r3, fp
   d7b40:	e004      	b.n	d7b4c <_strtod_r+0xbbc>
   d7b42:	2500      	movs	r5, #0
   d7b44:	462a      	mov	r2, r5
   d7b46:	2101      	movs	r1, #1
   d7b48:	f7ff bb41 	b.w	d71ce <_strtod_r+0x23e>
   d7b4c:	ec43 2b10 	vmov	d0, r2, r3
   d7b50:	b01d      	add	sp, #116	; 0x74
   d7b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7b56:	bf00      	nop
   d7b58:	ffc00000 	.word	0xffc00000
   d7b5c:	41dfffff 	.word	0x41dfffff
   d7b60:	94a03595 	.word	0x94a03595
   d7b64:	3fdfffff 	.word	0x3fdfffff
   d7b68:	35afe535 	.word	0x35afe535
   d7b6c:	3fe00000 	.word	0x3fe00000
   d7b70:	94a03595 	.word	0x94a03595
   d7b74:	3fcfffff 	.word	0x3fcfffff
   d7b78:	3ff00000 	.word	0x3ff00000
   d7b7c:	3fe00000 	.word	0x3fe00000
   d7b80:	7fe00000 	.word	0x7fe00000
   d7b84:	7c9fffff 	.word	0x7c9fffff
   d7b88:	7fefffff 	.word	0x7fefffff
   d7b8c:	39500000 	.word	0x39500000

000d7b90 <strtof>:
   d7b90:	b538      	push	{r3, r4, r5, lr}
   d7b92:	4b0e      	ldr	r3, [pc, #56]	; (d7bcc <strtof+0x3c>)
   d7b94:	460a      	mov	r2, r1
   d7b96:	4601      	mov	r1, r0
   d7b98:	6818      	ldr	r0, [r3, #0]
   d7b9a:	f7ff f9f9 	bl	d6f90 <_strtod_r>
   d7b9e:	ec55 4b10 	vmov	r4, r5, d0
   d7ba2:	ee10 2a10 	vmov	r2, s0
   d7ba6:	462b      	mov	r3, r5
   d7ba8:	ee10 0a10 	vmov	r0, s0
   d7bac:	4629      	mov	r1, r5
   d7bae:	f7fe ff93 	bl	d6ad8 <__aeabi_dcmpun>
   d7bb2:	b120      	cbz	r0, d7bbe <strtof+0x2e>
   d7bb4:	2000      	movs	r0, #0
   d7bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7bba:	f001 babd 	b.w	d9138 <nanf>
   d7bbe:	4620      	mov	r0, r4
   d7bc0:	4629      	mov	r1, r5
   d7bc2:	f7fe ffe7 	bl	d6b94 <__aeabi_d2f>
   d7bc6:	ee00 0a10 	vmov	s0, r0
   d7bca:	bd38      	pop	{r3, r4, r5, pc}
   d7bcc:	2003e2ac 	.word	0x2003e2ac

000d7bd0 <_strtoul_r>:
   d7bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7bd4:	4680      	mov	r8, r0
   d7bd6:	483c      	ldr	r0, [pc, #240]	; (d7cc8 <_strtoul_r+0xf8>)
   d7bd8:	f8d0 9000 	ldr.w	r9, [r0]
   d7bdc:	460e      	mov	r6, r1
   d7bde:	4635      	mov	r5, r6
   d7be0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7be4:	eb09 0004 	add.w	r0, r9, r4
   d7be8:	7840      	ldrb	r0, [r0, #1]
   d7bea:	f000 0008 	and.w	r0, r0, #8
   d7bee:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d7bf2:	b108      	cbz	r0, d7bf8 <_strtoul_r+0x28>
   d7bf4:	462e      	mov	r6, r5
   d7bf6:	e7f2      	b.n	d7bde <_strtoul_r+0xe>
   d7bf8:	2c2d      	cmp	r4, #45	; 0x2d
   d7bfa:	d103      	bne.n	d7c04 <_strtoul_r+0x34>
   d7bfc:	1cb5      	adds	r5, r6, #2
   d7bfe:	7874      	ldrb	r4, [r6, #1]
   d7c00:	2701      	movs	r7, #1
   d7c02:	e003      	b.n	d7c0c <_strtoul_r+0x3c>
   d7c04:	2c2b      	cmp	r4, #43	; 0x2b
   d7c06:	bf04      	itt	eq
   d7c08:	7874      	ldrbeq	r4, [r6, #1]
   d7c0a:	1cb5      	addeq	r5, r6, #2
   d7c0c:	b113      	cbz	r3, d7c14 <_strtoul_r+0x44>
   d7c0e:	2b10      	cmp	r3, #16
   d7c10:	d10a      	bne.n	d7c28 <_strtoul_r+0x58>
   d7c12:	e053      	b.n	d7cbc <_strtoul_r+0xec>
   d7c14:	2c30      	cmp	r4, #48	; 0x30
   d7c16:	d14f      	bne.n	d7cb8 <_strtoul_r+0xe8>
   d7c18:	7828      	ldrb	r0, [r5, #0]
   d7c1a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7c1e:	2858      	cmp	r0, #88	; 0x58
   d7c20:	d145      	bne.n	d7cae <_strtoul_r+0xde>
   d7c22:	786c      	ldrb	r4, [r5, #1]
   d7c24:	2310      	movs	r3, #16
   d7c26:	3502      	adds	r5, #2
   d7c28:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7c2c:	2600      	movs	r6, #0
   d7c2e:	fbbc fcf3 	udiv	ip, ip, r3
   d7c32:	fb03 fa0c 	mul.w	sl, r3, ip
   d7c36:	ea6f 0a0a 	mvn.w	sl, sl
   d7c3a:	4630      	mov	r0, r6
   d7c3c:	eb09 0e04 	add.w	lr, r9, r4
   d7c40:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7c44:	f01e 0f04 	tst.w	lr, #4
   d7c48:	d001      	beq.n	d7c4e <_strtoul_r+0x7e>
   d7c4a:	3c30      	subs	r4, #48	; 0x30
   d7c4c:	e00b      	b.n	d7c66 <_strtoul_r+0x96>
   d7c4e:	f01e 0e03 	ands.w	lr, lr, #3
   d7c52:	d01a      	beq.n	d7c8a <_strtoul_r+0xba>
   d7c54:	f1be 0f01 	cmp.w	lr, #1
   d7c58:	bf0c      	ite	eq
   d7c5a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7c5e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7c62:	ebce 0404 	rsb	r4, lr, r4
   d7c66:	42a3      	cmp	r3, r4
   d7c68:	dd0f      	ble.n	d7c8a <_strtoul_r+0xba>
   d7c6a:	2e00      	cmp	r6, #0
   d7c6c:	db08      	blt.n	d7c80 <_strtoul_r+0xb0>
   d7c6e:	4560      	cmp	r0, ip
   d7c70:	d806      	bhi.n	d7c80 <_strtoul_r+0xb0>
   d7c72:	d101      	bne.n	d7c78 <_strtoul_r+0xa8>
   d7c74:	4554      	cmp	r4, sl
   d7c76:	dc03      	bgt.n	d7c80 <_strtoul_r+0xb0>
   d7c78:	fb03 4000 	mla	r0, r3, r0, r4
   d7c7c:	2601      	movs	r6, #1
   d7c7e:	e001      	b.n	d7c84 <_strtoul_r+0xb4>
   d7c80:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d7c84:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7c88:	e7d8      	b.n	d7c3c <_strtoul_r+0x6c>
   d7c8a:	2e00      	cmp	r6, #0
   d7c8c:	da07      	bge.n	d7c9e <_strtoul_r+0xce>
   d7c8e:	2322      	movs	r3, #34	; 0x22
   d7c90:	f8c8 3000 	str.w	r3, [r8]
   d7c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7c98:	b92a      	cbnz	r2, d7ca6 <_strtoul_r+0xd6>
   d7c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7c9e:	b107      	cbz	r7, d7ca2 <_strtoul_r+0xd2>
   d7ca0:	4240      	negs	r0, r0
   d7ca2:	b172      	cbz	r2, d7cc2 <_strtoul_r+0xf2>
   d7ca4:	b106      	cbz	r6, d7ca8 <_strtoul_r+0xd8>
   d7ca6:	1e69      	subs	r1, r5, #1
   d7ca8:	6011      	str	r1, [r2, #0]
   d7caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7cae:	2430      	movs	r4, #48	; 0x30
   d7cb0:	2b00      	cmp	r3, #0
   d7cb2:	d1b9      	bne.n	d7c28 <_strtoul_r+0x58>
   d7cb4:	2308      	movs	r3, #8
   d7cb6:	e7b7      	b.n	d7c28 <_strtoul_r+0x58>
   d7cb8:	230a      	movs	r3, #10
   d7cba:	e7b5      	b.n	d7c28 <_strtoul_r+0x58>
   d7cbc:	2c30      	cmp	r4, #48	; 0x30
   d7cbe:	d0ab      	beq.n	d7c18 <_strtoul_r+0x48>
   d7cc0:	e7b2      	b.n	d7c28 <_strtoul_r+0x58>
   d7cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7cc6:	bf00      	nop
   d7cc8:	2003e248 	.word	0x2003e248

000d7ccc <strtoul>:
   d7ccc:	4613      	mov	r3, r2
   d7cce:	460a      	mov	r2, r1
   d7cd0:	4601      	mov	r1, r0
   d7cd2:	4802      	ldr	r0, [pc, #8]	; (d7cdc <strtoul+0x10>)
   d7cd4:	6800      	ldr	r0, [r0, #0]
   d7cd6:	f7ff bf7b 	b.w	d7bd0 <_strtoul_r>
   d7cda:	bf00      	nop
   d7cdc:	2003e2ac 	.word	0x2003e2ac

000d7ce0 <__tzcalc_limits>:
   d7ce0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7ce4:	4604      	mov	r4, r0
   d7ce6:	f000 fd8d 	bl	d8804 <__gettzinfo>
   d7cea:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d7cee:	429c      	cmp	r4, r3
   d7cf0:	f340 8096 	ble.w	d7e20 <__tzcalc_limits+0x140>
   d7cf4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d7cf8:	18e3      	adds	r3, r4, r3
   d7cfa:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d7cfe:	109b      	asrs	r3, r3, #2
   d7d00:	f240 156d 	movw	r5, #365	; 0x16d
   d7d04:	fb05 3502 	mla	r5, r5, r2, r3
   d7d08:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d7d0c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d7d10:	fb92 f3f3 	sdiv	r3, r2, r3
   d7d14:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d7d18:	442b      	add	r3, r5
   d7d1a:	18a5      	adds	r5, r4, r2
   d7d1c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7d20:	fb95 f5f2 	sdiv	r5, r5, r2
   d7d24:	441d      	add	r5, r3
   d7d26:	2364      	movs	r3, #100	; 0x64
   d7d28:	fb94 f7f2 	sdiv	r7, r4, r2
   d7d2c:	fb94 f6f3 	sdiv	r6, r4, r3
   d7d30:	fb02 4717 	mls	r7, r2, r7, r4
   d7d34:	fb03 4616 	mls	r6, r3, r6, r4
   d7d38:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d7d3c:	fab7 fe87 	clz	lr, r7
   d7d40:	9301      	str	r3, [sp, #4]
   d7d42:	f004 0303 	and.w	r3, r4, #3
   d7d46:	6044      	str	r4, [r0, #4]
   d7d48:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d7d4c:	4601      	mov	r1, r0
   d7d4e:	9300      	str	r3, [sp, #0]
   d7d50:	f04f 0c07 	mov.w	ip, #7
   d7d54:	7a0b      	ldrb	r3, [r1, #8]
   d7d56:	2b4a      	cmp	r3, #74	; 0x4a
   d7d58:	d10e      	bne.n	d7d78 <__tzcalc_limits+0x98>
   d7d5a:	694b      	ldr	r3, [r1, #20]
   d7d5c:	9a00      	ldr	r2, [sp, #0]
   d7d5e:	18ec      	adds	r4, r5, r3
   d7d60:	b902      	cbnz	r2, d7d64 <__tzcalc_limits+0x84>
   d7d62:	b906      	cbnz	r6, d7d66 <__tzcalc_limits+0x86>
   d7d64:	b927      	cbnz	r7, d7d70 <__tzcalc_limits+0x90>
   d7d66:	2b3b      	cmp	r3, #59	; 0x3b
   d7d68:	bfd4      	ite	le
   d7d6a:	2300      	movle	r3, #0
   d7d6c:	2301      	movgt	r3, #1
   d7d6e:	e000      	b.n	d7d72 <__tzcalc_limits+0x92>
   d7d70:	2300      	movs	r3, #0
   d7d72:	4423      	add	r3, r4
   d7d74:	3b01      	subs	r3, #1
   d7d76:	e03f      	b.n	d7df8 <__tzcalc_limits+0x118>
   d7d78:	2b44      	cmp	r3, #68	; 0x44
   d7d7a:	d102      	bne.n	d7d82 <__tzcalc_limits+0xa2>
   d7d7c:	694b      	ldr	r3, [r1, #20]
   d7d7e:	442b      	add	r3, r5
   d7d80:	e03a      	b.n	d7df8 <__tzcalc_limits+0x118>
   d7d82:	9b00      	ldr	r3, [sp, #0]
   d7d84:	b92b      	cbnz	r3, d7d92 <__tzcalc_limits+0xb2>
   d7d86:	2e00      	cmp	r6, #0
   d7d88:	bf0c      	ite	eq
   d7d8a:	46f0      	moveq	r8, lr
   d7d8c:	f04f 0801 	movne.w	r8, #1
   d7d90:	e000      	b.n	d7d94 <__tzcalc_limits+0xb4>
   d7d92:	46f0      	mov	r8, lr
   d7d94:	4b24      	ldr	r3, [pc, #144]	; (d7e28 <__tzcalc_limits+0x148>)
   d7d96:	68cc      	ldr	r4, [r1, #12]
   d7d98:	2230      	movs	r2, #48	; 0x30
   d7d9a:	fb02 3808 	mla	r8, r2, r8, r3
   d7d9e:	f1a8 0a04 	sub.w	sl, r8, #4
   d7da2:	46a9      	mov	r9, r5
   d7da4:	2301      	movs	r3, #1
   d7da6:	42a3      	cmp	r3, r4
   d7da8:	da04      	bge.n	d7db4 <__tzcalc_limits+0xd4>
   d7daa:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d7dae:	3301      	adds	r3, #1
   d7db0:	44d9      	add	r9, fp
   d7db2:	e7f8      	b.n	d7da6 <__tzcalc_limits+0xc6>
   d7db4:	f109 0304 	add.w	r3, r9, #4
   d7db8:	fb93 fbfc 	sdiv	fp, r3, ip
   d7dbc:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d7dc0:	2c01      	cmp	r4, #1
   d7dc2:	ebca 0a03 	rsb	sl, sl, r3
   d7dc6:	694b      	ldr	r3, [r1, #20]
   d7dc8:	bfb8      	it	lt
   d7dca:	2401      	movlt	r4, #1
   d7dcc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d7dd0:	ebb3 0a0a 	subs.w	sl, r3, sl
   d7dd4:	690b      	ldr	r3, [r1, #16]
   d7dd6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d7dda:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d7dde:	bf48      	it	mi
   d7de0:	f10a 0a07 	addmi.w	sl, sl, #7
   d7de4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7de8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d7dec:	4453      	add	r3, sl
   d7dee:	42a3      	cmp	r3, r4
   d7df0:	db01      	blt.n	d7df6 <__tzcalc_limits+0x116>
   d7df2:	3b07      	subs	r3, #7
   d7df4:	e7fb      	b.n	d7dee <__tzcalc_limits+0x10e>
   d7df6:	444b      	add	r3, r9
   d7df8:	698c      	ldr	r4, [r1, #24]
   d7dfa:	4a0c      	ldr	r2, [pc, #48]	; (d7e2c <__tzcalc_limits+0x14c>)
   d7dfc:	fb02 4303 	mla	r3, r2, r3, r4
   d7e00:	6a0c      	ldr	r4, [r1, #32]
   d7e02:	4423      	add	r3, r4
   d7e04:	f841 3f1c 	str.w	r3, [r1, #28]!
   d7e08:	9b01      	ldr	r3, [sp, #4]
   d7e0a:	4299      	cmp	r1, r3
   d7e0c:	d1a2      	bne.n	d7d54 <__tzcalc_limits+0x74>
   d7e0e:	69c3      	ldr	r3, [r0, #28]
   d7e10:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d7e12:	4293      	cmp	r3, r2
   d7e14:	bfac      	ite	ge
   d7e16:	2300      	movge	r3, #0
   d7e18:	2301      	movlt	r3, #1
   d7e1a:	6003      	str	r3, [r0, #0]
   d7e1c:	2001      	movs	r0, #1
   d7e1e:	e000      	b.n	d7e22 <__tzcalc_limits+0x142>
   d7e20:	2000      	movs	r0, #0
   d7e22:	b003      	add	sp, #12
   d7e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7e28:	000d9614 	.word	0x000d9614
   d7e2c:	00015180 	.word	0x00015180

000d7e30 <__tz_lock>:
   d7e30:	4770      	bx	lr

000d7e32 <__tz_unlock>:
   d7e32:	4770      	bx	lr

000d7e34 <_tzset_unlocked>:
   d7e34:	4b01      	ldr	r3, [pc, #4]	; (d7e3c <_tzset_unlocked+0x8>)
   d7e36:	6818      	ldr	r0, [r3, #0]
   d7e38:	f000 b802 	b.w	d7e40 <_tzset_unlocked_r>
   d7e3c:	2003e2ac 	.word	0x2003e2ac

000d7e40 <_tzset_unlocked_r>:
   d7e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7e44:	b08d      	sub	sp, #52	; 0x34
   d7e46:	4607      	mov	r7, r0
   d7e48:	f000 fcdc 	bl	d8804 <__gettzinfo>
   d7e4c:	49b0      	ldr	r1, [pc, #704]	; (d8110 <_tzset_unlocked_r+0x2d0>)
   d7e4e:	4eb1      	ldr	r6, [pc, #708]	; (d8114 <_tzset_unlocked_r+0x2d4>)
   d7e50:	4604      	mov	r4, r0
   d7e52:	4638      	mov	r0, r7
   d7e54:	f000 fcce 	bl	d87f4 <_getenv_r>
   d7e58:	4605      	mov	r5, r0
   d7e5a:	b960      	cbnz	r0, d7e76 <_tzset_unlocked_r+0x36>
   d7e5c:	4bae      	ldr	r3, [pc, #696]	; (d8118 <_tzset_unlocked_r+0x2d8>)
   d7e5e:	4aaf      	ldr	r2, [pc, #700]	; (d811c <_tzset_unlocked_r+0x2dc>)
   d7e60:	6018      	str	r0, [r3, #0]
   d7e62:	4baf      	ldr	r3, [pc, #700]	; (d8120 <_tzset_unlocked_r+0x2e0>)
   d7e64:	6018      	str	r0, [r3, #0]
   d7e66:	4baf      	ldr	r3, [pc, #700]	; (d8124 <_tzset_unlocked_r+0x2e4>)
   d7e68:	6830      	ldr	r0, [r6, #0]
   d7e6a:	601a      	str	r2, [r3, #0]
   d7e6c:	605a      	str	r2, [r3, #4]
   d7e6e:	f7fc fe23 	bl	d4ab8 <free>
   d7e72:	6035      	str	r5, [r6, #0]
   d7e74:	e148      	b.n	d8108 <_tzset_unlocked_r+0x2c8>
   d7e76:	6831      	ldr	r1, [r6, #0]
   d7e78:	b979      	cbnz	r1, d7e9a <_tzset_unlocked_r+0x5a>
   d7e7a:	6830      	ldr	r0, [r6, #0]
   d7e7c:	f7fc fe1c 	bl	d4ab8 <free>
   d7e80:	4628      	mov	r0, r5
   d7e82:	f7ff f84a 	bl	d6f1a <strlen>
   d7e86:	1c41      	adds	r1, r0, #1
   d7e88:	4638      	mov	r0, r7
   d7e8a:	f7fc fe3d 	bl	d4b08 <_malloc_r>
   d7e8e:	6030      	str	r0, [r6, #0]
   d7e90:	b148      	cbz	r0, d7ea6 <_tzset_unlocked_r+0x66>
   d7e92:	4629      	mov	r1, r5
   d7e94:	f7ff f81e 	bl	d6ed4 <strcpy>
   d7e98:	e005      	b.n	d7ea6 <_tzset_unlocked_r+0x66>
   d7e9a:	f7ff f811 	bl	d6ec0 <strcmp>
   d7e9e:	2800      	cmp	r0, #0
   d7ea0:	f000 8132 	beq.w	d8108 <_tzset_unlocked_r+0x2c8>
   d7ea4:	e7e9      	b.n	d7e7a <_tzset_unlocked_r+0x3a>
   d7ea6:	782b      	ldrb	r3, [r5, #0]
   d7ea8:	4a9f      	ldr	r2, [pc, #636]	; (d8128 <_tzset_unlocked_r+0x2e8>)
   d7eaa:	49a0      	ldr	r1, [pc, #640]	; (d812c <_tzset_unlocked_r+0x2ec>)
   d7eac:	2b3a      	cmp	r3, #58	; 0x3a
   d7eae:	bf08      	it	eq
   d7eb0:	3501      	addeq	r5, #1
   d7eb2:	ae0a      	add	r6, sp, #40	; 0x28
   d7eb4:	4633      	mov	r3, r6
   d7eb6:	4628      	mov	r0, r5
   d7eb8:	f7fc fe0e 	bl	d4ad8 <siscanf>
   d7ebc:	2800      	cmp	r0, #0
   d7ebe:	f340 8123 	ble.w	d8108 <_tzset_unlocked_r+0x2c8>
   d7ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7ec4:	18ef      	adds	r7, r5, r3
   d7ec6:	5ceb      	ldrb	r3, [r5, r3]
   d7ec8:	2b2d      	cmp	r3, #45	; 0x2d
   d7eca:	d103      	bne.n	d7ed4 <_tzset_unlocked_r+0x94>
   d7ecc:	3701      	adds	r7, #1
   d7ece:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d7ed2:	e003      	b.n	d7edc <_tzset_unlocked_r+0x9c>
   d7ed4:	2b2b      	cmp	r3, #43	; 0x2b
   d7ed6:	bf08      	it	eq
   d7ed8:	3701      	addeq	r7, #1
   d7eda:	2501      	movs	r5, #1
   d7edc:	f10d 0a20 	add.w	sl, sp, #32
   d7ee0:	f10d 0b1e 	add.w	fp, sp, #30
   d7ee4:	f04f 0800 	mov.w	r8, #0
   d7ee8:	9603      	str	r6, [sp, #12]
   d7eea:	f8cd a008 	str.w	sl, [sp, #8]
   d7eee:	9601      	str	r6, [sp, #4]
   d7ef0:	f8cd b000 	str.w	fp, [sp]
   d7ef4:	4633      	mov	r3, r6
   d7ef6:	aa07      	add	r2, sp, #28
   d7ef8:	498d      	ldr	r1, [pc, #564]	; (d8130 <_tzset_unlocked_r+0x2f0>)
   d7efa:	f8ad 801e 	strh.w	r8, [sp, #30]
   d7efe:	4638      	mov	r0, r7
   d7f00:	f8ad 8020 	strh.w	r8, [sp, #32]
   d7f04:	f7fc fde8 	bl	d4ad8 <siscanf>
   d7f08:	4540      	cmp	r0, r8
   d7f0a:	f340 80fd 	ble.w	d8108 <_tzset_unlocked_r+0x2c8>
   d7f0e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7f12:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7f16:	f8df 9224 	ldr.w	r9, [pc, #548]	; d813c <_tzset_unlocked_r+0x2fc>
   d7f1a:	213c      	movs	r1, #60	; 0x3c
   d7f1c:	fb01 3302 	mla	r3, r1, r2, r3
   d7f20:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7f24:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7f28:	fb01 3302 	mla	r3, r1, r2, r3
   d7f2c:	435d      	muls	r5, r3
   d7f2e:	6225      	str	r5, [r4, #32]
   d7f30:	4d7c      	ldr	r5, [pc, #496]	; (d8124 <_tzset_unlocked_r+0x2e4>)
   d7f32:	4b7d      	ldr	r3, [pc, #500]	; (d8128 <_tzset_unlocked_r+0x2e8>)
   d7f34:	602b      	str	r3, [r5, #0]
   d7f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7f38:	497c      	ldr	r1, [pc, #496]	; (d812c <_tzset_unlocked_r+0x2ec>)
   d7f3a:	441f      	add	r7, r3
   d7f3c:	464a      	mov	r2, r9
   d7f3e:	4633      	mov	r3, r6
   d7f40:	4638      	mov	r0, r7
   d7f42:	f7fc fdc9 	bl	d4ad8 <siscanf>
   d7f46:	4540      	cmp	r0, r8
   d7f48:	dc08      	bgt.n	d7f5c <_tzset_unlocked_r+0x11c>
   d7f4a:	682b      	ldr	r3, [r5, #0]
   d7f4c:	606b      	str	r3, [r5, #4]
   d7f4e:	4b72      	ldr	r3, [pc, #456]	; (d8118 <_tzset_unlocked_r+0x2d8>)
   d7f50:	6a22      	ldr	r2, [r4, #32]
   d7f52:	601a      	str	r2, [r3, #0]
   d7f54:	4b72      	ldr	r3, [pc, #456]	; (d8120 <_tzset_unlocked_r+0x2e0>)
   d7f56:	f8c3 8000 	str.w	r8, [r3]
   d7f5a:	e0d5      	b.n	d8108 <_tzset_unlocked_r+0x2c8>
   d7f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7f5e:	f8c5 9004 	str.w	r9, [r5, #4]
   d7f62:	18fd      	adds	r5, r7, r3
   d7f64:	5cfb      	ldrb	r3, [r7, r3]
   d7f66:	2b2d      	cmp	r3, #45	; 0x2d
   d7f68:	d103      	bne.n	d7f72 <_tzset_unlocked_r+0x132>
   d7f6a:	3501      	adds	r5, #1
   d7f6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d7f70:	e003      	b.n	d7f7a <_tzset_unlocked_r+0x13a>
   d7f72:	2b2b      	cmp	r3, #43	; 0x2b
   d7f74:	bf08      	it	eq
   d7f76:	3501      	addeq	r5, #1
   d7f78:	2701      	movs	r7, #1
   d7f7a:	2300      	movs	r3, #0
   d7f7c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7f80:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7f84:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7f88:	930a      	str	r3, [sp, #40]	; 0x28
   d7f8a:	9603      	str	r6, [sp, #12]
   d7f8c:	f8cd a008 	str.w	sl, [sp, #8]
   d7f90:	9601      	str	r6, [sp, #4]
   d7f92:	f8cd b000 	str.w	fp, [sp]
   d7f96:	4633      	mov	r3, r6
   d7f98:	aa07      	add	r2, sp, #28
   d7f9a:	4965      	ldr	r1, [pc, #404]	; (d8130 <_tzset_unlocked_r+0x2f0>)
   d7f9c:	4628      	mov	r0, r5
   d7f9e:	f7fc fd9b 	bl	d4ad8 <siscanf>
   d7fa2:	2800      	cmp	r0, #0
   d7fa4:	dc04      	bgt.n	d7fb0 <_tzset_unlocked_r+0x170>
   d7fa6:	6a23      	ldr	r3, [r4, #32]
   d7fa8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d7fac:	63e3      	str	r3, [r4, #60]	; 0x3c
   d7fae:	e00e      	b.n	d7fce <_tzset_unlocked_r+0x18e>
   d7fb0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7fb4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7fb8:	213c      	movs	r1, #60	; 0x3c
   d7fba:	fb01 3302 	mla	r3, r1, r2, r3
   d7fbe:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7fc2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7fc6:	fb01 3302 	mla	r3, r1, r2, r3
   d7fca:	435f      	muls	r7, r3
   d7fcc:	63e7      	str	r7, [r4, #60]	; 0x3c
   d7fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7fd0:	4627      	mov	r7, r4
   d7fd2:	441d      	add	r5, r3
   d7fd4:	f04f 0900 	mov.w	r9, #0
   d7fd8:	782b      	ldrb	r3, [r5, #0]
   d7fda:	2b2c      	cmp	r3, #44	; 0x2c
   d7fdc:	bf08      	it	eq
   d7fde:	3501      	addeq	r5, #1
   d7fe0:	f895 8000 	ldrb.w	r8, [r5]
   d7fe4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d7fe8:	d126      	bne.n	d8038 <_tzset_unlocked_r+0x1f8>
   d7fea:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d7fee:	9302      	str	r3, [sp, #8]
   d7ff0:	ab09      	add	r3, sp, #36	; 0x24
   d7ff2:	9300      	str	r3, [sp, #0]
   d7ff4:	9603      	str	r6, [sp, #12]
   d7ff6:	9601      	str	r6, [sp, #4]
   d7ff8:	4633      	mov	r3, r6
   d7ffa:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d7ffe:	494d      	ldr	r1, [pc, #308]	; (d8134 <_tzset_unlocked_r+0x2f4>)
   d8000:	4628      	mov	r0, r5
   d8002:	f7fc fd69 	bl	d4ad8 <siscanf>
   d8006:	2803      	cmp	r0, #3
   d8008:	d17e      	bne.n	d8108 <_tzset_unlocked_r+0x2c8>
   d800a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d800e:	1e4b      	subs	r3, r1, #1
   d8010:	2b0b      	cmp	r3, #11
   d8012:	d879      	bhi.n	d8108 <_tzset_unlocked_r+0x2c8>
   d8014:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d8018:	1e53      	subs	r3, r2, #1
   d801a:	2b04      	cmp	r3, #4
   d801c:	d874      	bhi.n	d8108 <_tzset_unlocked_r+0x2c8>
   d801e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d8022:	2b06      	cmp	r3, #6
   d8024:	d870      	bhi.n	d8108 <_tzset_unlocked_r+0x2c8>
   d8026:	f887 8008 	strb.w	r8, [r7, #8]
   d802a:	60f9      	str	r1, [r7, #12]
   d802c:	613a      	str	r2, [r7, #16]
   d802e:	617b      	str	r3, [r7, #20]
   d8030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8032:	eb05 0803 	add.w	r8, r5, r3
   d8036:	e02a      	b.n	d808e <_tzset_unlocked_r+0x24e>
   d8038:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d803c:	bf06      	itte	eq
   d803e:	3501      	addeq	r5, #1
   d8040:	4643      	moveq	r3, r8
   d8042:	2344      	movne	r3, #68	; 0x44
   d8044:	220a      	movs	r2, #10
   d8046:	a90b      	add	r1, sp, #44	; 0x2c
   d8048:	4628      	mov	r0, r5
   d804a:	9305      	str	r3, [sp, #20]
   d804c:	f7ff fe3e 	bl	d7ccc <strtoul>
   d8050:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d8054:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d8058:	4545      	cmp	r5, r8
   d805a:	9b05      	ldr	r3, [sp, #20]
   d805c:	d114      	bne.n	d8088 <_tzset_unlocked_r+0x248>
   d805e:	234d      	movs	r3, #77	; 0x4d
   d8060:	f1b9 0f00 	cmp.w	r9, #0
   d8064:	d107      	bne.n	d8076 <_tzset_unlocked_r+0x236>
   d8066:	7223      	strb	r3, [r4, #8]
   d8068:	2303      	movs	r3, #3
   d806a:	60e3      	str	r3, [r4, #12]
   d806c:	2302      	movs	r3, #2
   d806e:	6123      	str	r3, [r4, #16]
   d8070:	f8c4 9014 	str.w	r9, [r4, #20]
   d8074:	e00b      	b.n	d808e <_tzset_unlocked_r+0x24e>
   d8076:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d807a:	230b      	movs	r3, #11
   d807c:	62a3      	str	r3, [r4, #40]	; 0x28
   d807e:	2301      	movs	r3, #1
   d8080:	62e3      	str	r3, [r4, #44]	; 0x2c
   d8082:	2300      	movs	r3, #0
   d8084:	6323      	str	r3, [r4, #48]	; 0x30
   d8086:	e002      	b.n	d808e <_tzset_unlocked_r+0x24e>
   d8088:	b280      	uxth	r0, r0
   d808a:	723b      	strb	r3, [r7, #8]
   d808c:	6178      	str	r0, [r7, #20]
   d808e:	2302      	movs	r3, #2
   d8090:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8094:	2300      	movs	r3, #0
   d8096:	f8ad 301e 	strh.w	r3, [sp, #30]
   d809a:	f8ad 3020 	strh.w	r3, [sp, #32]
   d809e:	930a      	str	r3, [sp, #40]	; 0x28
   d80a0:	f898 3000 	ldrb.w	r3, [r8]
   d80a4:	2b2f      	cmp	r3, #47	; 0x2f
   d80a6:	d10b      	bne.n	d80c0 <_tzset_unlocked_r+0x280>
   d80a8:	9603      	str	r6, [sp, #12]
   d80aa:	f8cd a008 	str.w	sl, [sp, #8]
   d80ae:	9601      	str	r6, [sp, #4]
   d80b0:	f8cd b000 	str.w	fp, [sp]
   d80b4:	4633      	mov	r3, r6
   d80b6:	aa07      	add	r2, sp, #28
   d80b8:	491f      	ldr	r1, [pc, #124]	; (d8138 <_tzset_unlocked_r+0x2f8>)
   d80ba:	4640      	mov	r0, r8
   d80bc:	f7fc fd0c 	bl	d4ad8 <siscanf>
   d80c0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d80c4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d80c8:	213c      	movs	r1, #60	; 0x3c
   d80ca:	fb01 3302 	mla	r3, r1, r2, r3
   d80ce:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d80d2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d80d6:	fb01 3302 	mla	r3, r1, r2, r3
   d80da:	61bb      	str	r3, [r7, #24]
   d80dc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d80de:	f109 0901 	add.w	r9, r9, #1
   d80e2:	f1b9 0f02 	cmp.w	r9, #2
   d80e6:	4445      	add	r5, r8
   d80e8:	f107 071c 	add.w	r7, r7, #28
   d80ec:	f47f af74 	bne.w	d7fd8 <_tzset_unlocked_r+0x198>
   d80f0:	6860      	ldr	r0, [r4, #4]
   d80f2:	f7ff fdf5 	bl	d7ce0 <__tzcalc_limits>
   d80f6:	4b08      	ldr	r3, [pc, #32]	; (d8118 <_tzset_unlocked_r+0x2d8>)
   d80f8:	6a22      	ldr	r2, [r4, #32]
   d80fa:	601a      	str	r2, [r3, #0]
   d80fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d80fe:	1a9b      	subs	r3, r3, r2
   d8100:	4a07      	ldr	r2, [pc, #28]	; (d8120 <_tzset_unlocked_r+0x2e0>)
   d8102:	bf18      	it	ne
   d8104:	2301      	movne	r3, #1
   d8106:	6013      	str	r3, [r2, #0]
   d8108:	b00d      	add	sp, #52	; 0x34
   d810a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d810e:	bf00      	nop
   d8110:	000d96d0 	.word	0x000d96d0
   d8114:	2003e7e0 	.word	0x2003e7e0
   d8118:	2003e7e8 	.word	0x2003e7e8
   d811c:	000d96d3 	.word	0x000d96d3
   d8120:	2003e7e4 	.word	0x2003e7e4
   d8124:	2003e2e8 	.word	0x2003e2e8
   d8128:	2003e7d3 	.word	0x2003e7d3
   d812c:	000d96d7 	.word	0x000d96d7
   d8130:	000d96fa 	.word	0x000d96fa
   d8134:	000d96e6 	.word	0x000d96e6
   d8138:	000d96f9 	.word	0x000d96f9
   d813c:	2003e7c8 	.word	0x2003e7c8

000d8140 <rshift>:
   d8140:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8142:	6906      	ldr	r6, [r0, #16]
   d8144:	114b      	asrs	r3, r1, #5
   d8146:	42b3      	cmp	r3, r6
   d8148:	f100 0514 	add.w	r5, r0, #20
   d814c:	da27      	bge.n	d819e <rshift+0x5e>
   d814e:	f011 011f 	ands.w	r1, r1, #31
   d8152:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   d8156:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   d815a:	d101      	bne.n	d8160 <rshift+0x20>
   d815c:	4629      	mov	r1, r5
   d815e:	e016      	b.n	d818e <rshift+0x4e>
   d8160:	1d14      	adds	r4, r2, #4
   d8162:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   d8166:	f1c1 0e20 	rsb	lr, r1, #32
   d816a:	40ca      	lsrs	r2, r1
   d816c:	462b      	mov	r3, r5
   d816e:	42b4      	cmp	r4, r6
   d8170:	d209      	bcs.n	d8186 <rshift+0x46>
   d8172:	6827      	ldr	r7, [r4, #0]
   d8174:	fa07 f70e 	lsl.w	r7, r7, lr
   d8178:	433a      	orrs	r2, r7
   d817a:	f843 2b04 	str.w	r2, [r3], #4
   d817e:	f854 2b04 	ldr.w	r2, [r4], #4
   d8182:	40ca      	lsrs	r2, r1
   d8184:	e7f3      	b.n	d816e <rshift+0x2e>
   d8186:	601a      	str	r2, [r3, #0]
   d8188:	b152      	cbz	r2, d81a0 <rshift+0x60>
   d818a:	3304      	adds	r3, #4
   d818c:	e008      	b.n	d81a0 <rshift+0x60>
   d818e:	42b2      	cmp	r2, r6
   d8190:	460b      	mov	r3, r1
   d8192:	d205      	bcs.n	d81a0 <rshift+0x60>
   d8194:	f852 3b04 	ldr.w	r3, [r2], #4
   d8198:	f841 3b04 	str.w	r3, [r1], #4
   d819c:	e7f7      	b.n	d818e <rshift+0x4e>
   d819e:	462b      	mov	r3, r5
   d81a0:	1b5b      	subs	r3, r3, r5
   d81a2:	109b      	asrs	r3, r3, #2
   d81a4:	6103      	str	r3, [r0, #16]
   d81a6:	b903      	cbnz	r3, d81aa <rshift+0x6a>
   d81a8:	6143      	str	r3, [r0, #20]
   d81aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d81ac <__hexdig_fun>:
   d81ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d81b0:	2b09      	cmp	r3, #9
   d81b2:	d801      	bhi.n	d81b8 <__hexdig_fun+0xc>
   d81b4:	3820      	subs	r0, #32
   d81b6:	e00a      	b.n	d81ce <__hexdig_fun+0x22>
   d81b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d81bc:	2b05      	cmp	r3, #5
   d81be:	d801      	bhi.n	d81c4 <__hexdig_fun+0x18>
   d81c0:	3847      	subs	r0, #71	; 0x47
   d81c2:	e004      	b.n	d81ce <__hexdig_fun+0x22>
   d81c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d81c8:	2b05      	cmp	r3, #5
   d81ca:	d802      	bhi.n	d81d2 <__hexdig_fun+0x26>
   d81cc:	3827      	subs	r0, #39	; 0x27
   d81ce:	b2c0      	uxtb	r0, r0
   d81d0:	4770      	bx	lr
   d81d2:	2000      	movs	r0, #0
   d81d4:	4770      	bx	lr

000d81d6 <__gethex>:
   d81d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d81da:	b08b      	sub	sp, #44	; 0x2c
   d81dc:	468a      	mov	sl, r1
   d81de:	4690      	mov	r8, r2
   d81e0:	9306      	str	r3, [sp, #24]
   d81e2:	9002      	str	r0, [sp, #8]
   d81e4:	f7fe fe2c 	bl	d6e40 <_localeconv_r>
   d81e8:	6803      	ldr	r3, [r0, #0]
   d81ea:	9303      	str	r3, [sp, #12]
   d81ec:	4618      	mov	r0, r3
   d81ee:	f7fe fe94 	bl	d6f1a <strlen>
   d81f2:	9b03      	ldr	r3, [sp, #12]
   d81f4:	9001      	str	r0, [sp, #4]
   d81f6:	4403      	add	r3, r0
   d81f8:	f04f 0b00 	mov.w	fp, #0
   d81fc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d8200:	9307      	str	r3, [sp, #28]
   d8202:	f8da 3000 	ldr.w	r3, [sl]
   d8206:	3302      	adds	r3, #2
   d8208:	461f      	mov	r7, r3
   d820a:	f813 0b01 	ldrb.w	r0, [r3], #1
   d820e:	2830      	cmp	r0, #48	; 0x30
   d8210:	d102      	bne.n	d8218 <__gethex+0x42>
   d8212:	f10b 0b01 	add.w	fp, fp, #1
   d8216:	e7f7      	b.n	d8208 <__gethex+0x32>
   d8218:	f7ff ffc8 	bl	d81ac <__hexdig_fun>
   d821c:	4604      	mov	r4, r0
   d821e:	b9e0      	cbnz	r0, d825a <__gethex+0x84>
   d8220:	9a01      	ldr	r2, [sp, #4]
   d8222:	9903      	ldr	r1, [sp, #12]
   d8224:	4638      	mov	r0, r7
   d8226:	f7fe fe80 	bl	d6f2a <strncmp>
   d822a:	2800      	cmp	r0, #0
   d822c:	d134      	bne.n	d8298 <__gethex+0xc2>
   d822e:	9b01      	ldr	r3, [sp, #4]
   d8230:	5cf8      	ldrb	r0, [r7, r3]
   d8232:	18fe      	adds	r6, r7, r3
   d8234:	f7ff ffba 	bl	d81ac <__hexdig_fun>
   d8238:	b380      	cbz	r0, d829c <__gethex+0xc6>
   d823a:	4633      	mov	r3, r6
   d823c:	7818      	ldrb	r0, [r3, #0]
   d823e:	2830      	cmp	r0, #48	; 0x30
   d8240:	461f      	mov	r7, r3
   d8242:	f103 0301 	add.w	r3, r3, #1
   d8246:	d0f9      	beq.n	d823c <__gethex+0x66>
   d8248:	f7ff ffb0 	bl	d81ac <__hexdig_fun>
   d824c:	fab0 f580 	clz	r5, r0
   d8250:	096d      	lsrs	r5, r5, #5
   d8252:	4634      	mov	r4, r6
   d8254:	f04f 0b01 	mov.w	fp, #1
   d8258:	e001      	b.n	d825e <__gethex+0x88>
   d825a:	2500      	movs	r5, #0
   d825c:	462c      	mov	r4, r5
   d825e:	463a      	mov	r2, r7
   d8260:	4616      	mov	r6, r2
   d8262:	3201      	adds	r2, #1
   d8264:	7830      	ldrb	r0, [r6, #0]
   d8266:	f7ff ffa1 	bl	d81ac <__hexdig_fun>
   d826a:	2800      	cmp	r0, #0
   d826c:	d1f8      	bne.n	d8260 <__gethex+0x8a>
   d826e:	9a01      	ldr	r2, [sp, #4]
   d8270:	9903      	ldr	r1, [sp, #12]
   d8272:	4630      	mov	r0, r6
   d8274:	f7fe fe59 	bl	d6f2a <strncmp>
   d8278:	b950      	cbnz	r0, d8290 <__gethex+0xba>
   d827a:	b954      	cbnz	r4, d8292 <__gethex+0xbc>
   d827c:	9b01      	ldr	r3, [sp, #4]
   d827e:	18f4      	adds	r4, r6, r3
   d8280:	4622      	mov	r2, r4
   d8282:	4616      	mov	r6, r2
   d8284:	3201      	adds	r2, #1
   d8286:	7830      	ldrb	r0, [r6, #0]
   d8288:	f7ff ff90 	bl	d81ac <__hexdig_fun>
   d828c:	2800      	cmp	r0, #0
   d828e:	d1f8      	bne.n	d8282 <__gethex+0xac>
   d8290:	b134      	cbz	r4, d82a0 <__gethex+0xca>
   d8292:	1ba4      	subs	r4, r4, r6
   d8294:	00a4      	lsls	r4, r4, #2
   d8296:	e003      	b.n	d82a0 <__gethex+0xca>
   d8298:	463e      	mov	r6, r7
   d829a:	e000      	b.n	d829e <__gethex+0xc8>
   d829c:	4604      	mov	r4, r0
   d829e:	2501      	movs	r5, #1
   d82a0:	7833      	ldrb	r3, [r6, #0]
   d82a2:	2b50      	cmp	r3, #80	; 0x50
   d82a4:	d001      	beq.n	d82aa <__gethex+0xd4>
   d82a6:	2b70      	cmp	r3, #112	; 0x70
   d82a8:	d12a      	bne.n	d8300 <__gethex+0x12a>
   d82aa:	7873      	ldrb	r3, [r6, #1]
   d82ac:	2b2b      	cmp	r3, #43	; 0x2b
   d82ae:	d008      	beq.n	d82c2 <__gethex+0xec>
   d82b0:	2b2d      	cmp	r3, #45	; 0x2d
   d82b2:	d003      	beq.n	d82bc <__gethex+0xe6>
   d82b4:	1c71      	adds	r1, r6, #1
   d82b6:	f04f 0900 	mov.w	r9, #0
   d82ba:	e005      	b.n	d82c8 <__gethex+0xf2>
   d82bc:	f04f 0901 	mov.w	r9, #1
   d82c0:	e001      	b.n	d82c6 <__gethex+0xf0>
   d82c2:	f04f 0900 	mov.w	r9, #0
   d82c6:	1cb1      	adds	r1, r6, #2
   d82c8:	7808      	ldrb	r0, [r1, #0]
   d82ca:	f7ff ff6f 	bl	d81ac <__hexdig_fun>
   d82ce:	1e43      	subs	r3, r0, #1
   d82d0:	b2db      	uxtb	r3, r3
   d82d2:	2b18      	cmp	r3, #24
   d82d4:	d814      	bhi.n	d8300 <__gethex+0x12a>
   d82d6:	f1a0 0210 	sub.w	r2, r0, #16
   d82da:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d82de:	f7ff ff65 	bl	d81ac <__hexdig_fun>
   d82e2:	1e43      	subs	r3, r0, #1
   d82e4:	b2db      	uxtb	r3, r3
   d82e6:	2b18      	cmp	r3, #24
   d82e8:	d804      	bhi.n	d82f4 <__gethex+0x11e>
   d82ea:	230a      	movs	r3, #10
   d82ec:	fb03 0202 	mla	r2, r3, r2, r0
   d82f0:	3a10      	subs	r2, #16
   d82f2:	e7f2      	b.n	d82da <__gethex+0x104>
   d82f4:	f1b9 0f00 	cmp.w	r9, #0
   d82f8:	d000      	beq.n	d82fc <__gethex+0x126>
   d82fa:	4252      	negs	r2, r2
   d82fc:	4414      	add	r4, r2
   d82fe:	e000      	b.n	d8302 <__gethex+0x12c>
   d8300:	4631      	mov	r1, r6
   d8302:	f8ca 1000 	str.w	r1, [sl]
   d8306:	b12d      	cbz	r5, d8314 <__gethex+0x13e>
   d8308:	f1bb 0f00 	cmp.w	fp, #0
   d830c:	bf14      	ite	ne
   d830e:	2000      	movne	r0, #0
   d8310:	2006      	moveq	r0, #6
   d8312:	e17c      	b.n	d860e <__gethex+0x438>
   d8314:	1bf3      	subs	r3, r6, r7
   d8316:	3b01      	subs	r3, #1
   d8318:	4629      	mov	r1, r5
   d831a:	2b07      	cmp	r3, #7
   d831c:	dd02      	ble.n	d8324 <__gethex+0x14e>
   d831e:	3101      	adds	r1, #1
   d8320:	105b      	asrs	r3, r3, #1
   d8322:	e7fa      	b.n	d831a <__gethex+0x144>
   d8324:	9802      	ldr	r0, [sp, #8]
   d8326:	f000 fb09 	bl	d893c <_Balloc>
   d832a:	9b01      	ldr	r3, [sp, #4]
   d832c:	f100 0a14 	add.w	sl, r0, #20
   d8330:	f04f 0900 	mov.w	r9, #0
   d8334:	f1c3 0301 	rsb	r3, r3, #1
   d8338:	4605      	mov	r5, r0
   d833a:	f8cd a010 	str.w	sl, [sp, #16]
   d833e:	46cb      	mov	fp, r9
   d8340:	9308      	str	r3, [sp, #32]
   d8342:	42b7      	cmp	r7, r6
   d8344:	d22f      	bcs.n	d83a6 <__gethex+0x1d0>
   d8346:	1e73      	subs	r3, r6, #1
   d8348:	9305      	str	r3, [sp, #20]
   d834a:	9a07      	ldr	r2, [sp, #28]
   d834c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d8350:	4293      	cmp	r3, r2
   d8352:	d00b      	beq.n	d836c <__gethex+0x196>
   d8354:	f1bb 0f20 	cmp.w	fp, #32
   d8358:	d116      	bne.n	d8388 <__gethex+0x1b2>
   d835a:	9b04      	ldr	r3, [sp, #16]
   d835c:	f8c3 9000 	str.w	r9, [r3]
   d8360:	3304      	adds	r3, #4
   d8362:	f04f 0900 	mov.w	r9, #0
   d8366:	9304      	str	r3, [sp, #16]
   d8368:	46cb      	mov	fp, r9
   d836a:	e00d      	b.n	d8388 <__gethex+0x1b2>
   d836c:	9b05      	ldr	r3, [sp, #20]
   d836e:	9a08      	ldr	r2, [sp, #32]
   d8370:	4413      	add	r3, r2
   d8372:	429f      	cmp	r7, r3
   d8374:	d8ee      	bhi.n	d8354 <__gethex+0x17e>
   d8376:	4618      	mov	r0, r3
   d8378:	9a01      	ldr	r2, [sp, #4]
   d837a:	9903      	ldr	r1, [sp, #12]
   d837c:	9309      	str	r3, [sp, #36]	; 0x24
   d837e:	f7fe fdd4 	bl	d6f2a <strncmp>
   d8382:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8384:	b168      	cbz	r0, d83a2 <__gethex+0x1cc>
   d8386:	e7e5      	b.n	d8354 <__gethex+0x17e>
   d8388:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d838c:	f7ff ff0e 	bl	d81ac <__hexdig_fun>
   d8390:	f000 000f 	and.w	r0, r0, #15
   d8394:	fa00 f00b 	lsl.w	r0, r0, fp
   d8398:	9b05      	ldr	r3, [sp, #20]
   d839a:	ea49 0900 	orr.w	r9, r9, r0
   d839e:	f10b 0b04 	add.w	fp, fp, #4
   d83a2:	461e      	mov	r6, r3
   d83a4:	e7cd      	b.n	d8342 <__gethex+0x16c>
   d83a6:	9804      	ldr	r0, [sp, #16]
   d83a8:	f840 9b04 	str.w	r9, [r0], #4
   d83ac:	ebca 0000 	rsb	r0, sl, r0
   d83b0:	1080      	asrs	r0, r0, #2
   d83b2:	6128      	str	r0, [r5, #16]
   d83b4:	0147      	lsls	r7, r0, #5
   d83b6:	4648      	mov	r0, r9
   d83b8:	f000 fb85 	bl	d8ac6 <__hi0bits>
   d83bc:	f8d8 6000 	ldr.w	r6, [r8]
   d83c0:	1a38      	subs	r0, r7, r0
   d83c2:	42b0      	cmp	r0, r6
   d83c4:	dd26      	ble.n	d8414 <__gethex+0x23e>
   d83c6:	1b87      	subs	r7, r0, r6
   d83c8:	4639      	mov	r1, r7
   d83ca:	4628      	mov	r0, r5
   d83cc:	f000 fe83 	bl	d90d6 <__any_on>
   d83d0:	b1c8      	cbz	r0, d8406 <__gethex+0x230>
   d83d2:	1e7b      	subs	r3, r7, #1
   d83d4:	1159      	asrs	r1, r3, #5
   d83d6:	f003 021f 	and.w	r2, r3, #31
   d83da:	f04f 0901 	mov.w	r9, #1
   d83de:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   d83e2:	fa09 f202 	lsl.w	r2, r9, r2
   d83e6:	420a      	tst	r2, r1
   d83e8:	d00e      	beq.n	d8408 <__gethex+0x232>
   d83ea:	454b      	cmp	r3, r9
   d83ec:	dc02      	bgt.n	d83f4 <__gethex+0x21e>
   d83ee:	f04f 0902 	mov.w	r9, #2
   d83f2:	e009      	b.n	d8408 <__gethex+0x232>
   d83f4:	1eb9      	subs	r1, r7, #2
   d83f6:	4628      	mov	r0, r5
   d83f8:	f000 fe6d 	bl	d90d6 <__any_on>
   d83fc:	2800      	cmp	r0, #0
   d83fe:	d0f6      	beq.n	d83ee <__gethex+0x218>
   d8400:	f04f 0903 	mov.w	r9, #3
   d8404:	e000      	b.n	d8408 <__gethex+0x232>
   d8406:	4681      	mov	r9, r0
   d8408:	4639      	mov	r1, r7
   d840a:	4628      	mov	r0, r5
   d840c:	f7ff fe98 	bl	d8140 <rshift>
   d8410:	443c      	add	r4, r7
   d8412:	e00c      	b.n	d842e <__gethex+0x258>
   d8414:	da09      	bge.n	d842a <__gethex+0x254>
   d8416:	1a37      	subs	r7, r6, r0
   d8418:	4629      	mov	r1, r5
   d841a:	463a      	mov	r2, r7
   d841c:	9802      	ldr	r0, [sp, #8]
   d841e:	f000 fc87 	bl	d8d30 <__lshift>
   d8422:	1be4      	subs	r4, r4, r7
   d8424:	4605      	mov	r5, r0
   d8426:	f100 0a14 	add.w	sl, r0, #20
   d842a:	f04f 0900 	mov.w	r9, #0
   d842e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d8432:	429c      	cmp	r4, r3
   d8434:	dd08      	ble.n	d8448 <__gethex+0x272>
   d8436:	9802      	ldr	r0, [sp, #8]
   d8438:	4629      	mov	r1, r5
   d843a:	f000 fab4 	bl	d89a6 <_Bfree>
   d843e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d8440:	2300      	movs	r3, #0
   d8442:	6013      	str	r3, [r2, #0]
   d8444:	20a3      	movs	r0, #163	; 0xa3
   d8446:	e0e2      	b.n	d860e <__gethex+0x438>
   d8448:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d844c:	4284      	cmp	r4, r0
   d844e:	da53      	bge.n	d84f8 <__gethex+0x322>
   d8450:	1b04      	subs	r4, r0, r4
   d8452:	42a6      	cmp	r6, r4
   d8454:	dc2e      	bgt.n	d84b4 <__gethex+0x2de>
   d8456:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d845a:	2b02      	cmp	r3, #2
   d845c:	d01a      	beq.n	d8494 <__gethex+0x2be>
   d845e:	2b03      	cmp	r3, #3
   d8460:	d01c      	beq.n	d849c <__gethex+0x2c6>
   d8462:	2b01      	cmp	r3, #1
   d8464:	d11d      	bne.n	d84a2 <__gethex+0x2cc>
   d8466:	42a6      	cmp	r6, r4
   d8468:	d11b      	bne.n	d84a2 <__gethex+0x2cc>
   d846a:	2e01      	cmp	r6, #1
   d846c:	dc0b      	bgt.n	d8486 <__gethex+0x2b0>
   d846e:	9a06      	ldr	r2, [sp, #24]
   d8470:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d8474:	6013      	str	r3, [r2, #0]
   d8476:	2301      	movs	r3, #1
   d8478:	612b      	str	r3, [r5, #16]
   d847a:	f8ca 3000 	str.w	r3, [sl]
   d847e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d8480:	2062      	movs	r0, #98	; 0x62
   d8482:	601d      	str	r5, [r3, #0]
   d8484:	e0c3      	b.n	d860e <__gethex+0x438>
   d8486:	1e71      	subs	r1, r6, #1
   d8488:	4628      	mov	r0, r5
   d848a:	f000 fe24 	bl	d90d6 <__any_on>
   d848e:	2800      	cmp	r0, #0
   d8490:	d1ed      	bne.n	d846e <__gethex+0x298>
   d8492:	e006      	b.n	d84a2 <__gethex+0x2cc>
   d8494:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8496:	2b00      	cmp	r3, #0
   d8498:	d0e9      	beq.n	d846e <__gethex+0x298>
   d849a:	e002      	b.n	d84a2 <__gethex+0x2cc>
   d849c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d849e:	2b00      	cmp	r3, #0
   d84a0:	d1e5      	bne.n	d846e <__gethex+0x298>
   d84a2:	9802      	ldr	r0, [sp, #8]
   d84a4:	4629      	mov	r1, r5
   d84a6:	f000 fa7e 	bl	d89a6 <_Bfree>
   d84aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d84ac:	2300      	movs	r3, #0
   d84ae:	6013      	str	r3, [r2, #0]
   d84b0:	2050      	movs	r0, #80	; 0x50
   d84b2:	e0ac      	b.n	d860e <__gethex+0x438>
   d84b4:	1e67      	subs	r7, r4, #1
   d84b6:	f1b9 0f00 	cmp.w	r9, #0
   d84ba:	d106      	bne.n	d84ca <__gethex+0x2f4>
   d84bc:	b13f      	cbz	r7, d84ce <__gethex+0x2f8>
   d84be:	4639      	mov	r1, r7
   d84c0:	4628      	mov	r0, r5
   d84c2:	f000 fe08 	bl	d90d6 <__any_on>
   d84c6:	4681      	mov	r9, r0
   d84c8:	e001      	b.n	d84ce <__gethex+0x2f8>
   d84ca:	f04f 0901 	mov.w	r9, #1
   d84ce:	117a      	asrs	r2, r7, #5
   d84d0:	2301      	movs	r3, #1
   d84d2:	f007 071f 	and.w	r7, r7, #31
   d84d6:	fa03 f707 	lsl.w	r7, r3, r7
   d84da:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   d84de:	4621      	mov	r1, r4
   d84e0:	421f      	tst	r7, r3
   d84e2:	4628      	mov	r0, r5
   d84e4:	bf18      	it	ne
   d84e6:	f049 0902 	orrne.w	r9, r9, #2
   d84ea:	1b36      	subs	r6, r6, r4
   d84ec:	f7ff fe28 	bl	d8140 <rshift>
   d84f0:	2702      	movs	r7, #2
   d84f2:	f8d8 4004 	ldr.w	r4, [r8, #4]
   d84f6:	e000      	b.n	d84fa <__gethex+0x324>
   d84f8:	2701      	movs	r7, #1
   d84fa:	f1b9 0f00 	cmp.w	r9, #0
   d84fe:	f000 8081 	beq.w	d8604 <__gethex+0x42e>
   d8502:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d8506:	2b02      	cmp	r3, #2
   d8508:	d00e      	beq.n	d8528 <__gethex+0x352>
   d850a:	2b03      	cmp	r3, #3
   d850c:	d010      	beq.n	d8530 <__gethex+0x35a>
   d850e:	2b01      	cmp	r3, #1
   d8510:	d176      	bne.n	d8600 <__gethex+0x42a>
   d8512:	f019 0f02 	tst.w	r9, #2
   d8516:	d073      	beq.n	d8600 <__gethex+0x42a>
   d8518:	f8da 0000 	ldr.w	r0, [sl]
   d851c:	ea49 0900 	orr.w	r9, r9, r0
   d8520:	f019 0f01 	tst.w	r9, #1
   d8524:	d107      	bne.n	d8536 <__gethex+0x360>
   d8526:	e06b      	b.n	d8600 <__gethex+0x42a>
   d8528:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d852a:	f1c3 0301 	rsb	r3, r3, #1
   d852e:	9315      	str	r3, [sp, #84]	; 0x54
   d8530:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8532:	2b00      	cmp	r3, #0
   d8534:	d064      	beq.n	d8600 <__gethex+0x42a>
   d8536:	f8d5 a010 	ldr.w	sl, [r5, #16]
   d853a:	f105 0314 	add.w	r3, r5, #20
   d853e:	ea4f 098a 	mov.w	r9, sl, lsl #2
   d8542:	eb03 0109 	add.w	r1, r3, r9
   d8546:	2000      	movs	r0, #0
   d8548:	681a      	ldr	r2, [r3, #0]
   d854a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   d854e:	d002      	beq.n	d8556 <__gethex+0x380>
   d8550:	3201      	adds	r2, #1
   d8552:	601a      	str	r2, [r3, #0]
   d8554:	e020      	b.n	d8598 <__gethex+0x3c2>
   d8556:	f843 0b04 	str.w	r0, [r3], #4
   d855a:	4299      	cmp	r1, r3
   d855c:	d8f4      	bhi.n	d8548 <__gethex+0x372>
   d855e:	68ab      	ldr	r3, [r5, #8]
   d8560:	459a      	cmp	sl, r3
   d8562:	db12      	blt.n	d858a <__gethex+0x3b4>
   d8564:	6869      	ldr	r1, [r5, #4]
   d8566:	9802      	ldr	r0, [sp, #8]
   d8568:	3101      	adds	r1, #1
   d856a:	f000 f9e7 	bl	d893c <_Balloc>
   d856e:	692a      	ldr	r2, [r5, #16]
   d8570:	3202      	adds	r2, #2
   d8572:	f105 010c 	add.w	r1, r5, #12
   d8576:	4683      	mov	fp, r0
   d8578:	0092      	lsls	r2, r2, #2
   d857a:	300c      	adds	r0, #12
   d857c:	f7fe fc64 	bl	d6e48 <memcpy>
   d8580:	4629      	mov	r1, r5
   d8582:	9802      	ldr	r0, [sp, #8]
   d8584:	f000 fa0f 	bl	d89a6 <_Bfree>
   d8588:	465d      	mov	r5, fp
   d858a:	692b      	ldr	r3, [r5, #16]
   d858c:	1c5a      	adds	r2, r3, #1
   d858e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   d8592:	612a      	str	r2, [r5, #16]
   d8594:	2201      	movs	r2, #1
   d8596:	615a      	str	r2, [r3, #20]
   d8598:	2f02      	cmp	r7, #2
   d859a:	f105 0214 	add.w	r2, r5, #20
   d859e:	d111      	bne.n	d85c4 <__gethex+0x3ee>
   d85a0:	f8d8 3000 	ldr.w	r3, [r8]
   d85a4:	3b01      	subs	r3, #1
   d85a6:	429e      	cmp	r6, r3
   d85a8:	d127      	bne.n	d85fa <__gethex+0x424>
   d85aa:	1171      	asrs	r1, r6, #5
   d85ac:	2301      	movs	r3, #1
   d85ae:	f006 061f 	and.w	r6, r6, #31
   d85b2:	fa03 f606 	lsl.w	r6, r3, r6
   d85b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   d85ba:	421e      	tst	r6, r3
   d85bc:	bf0c      	ite	eq
   d85be:	2702      	moveq	r7, #2
   d85c0:	2701      	movne	r7, #1
   d85c2:	e01a      	b.n	d85fa <__gethex+0x424>
   d85c4:	692b      	ldr	r3, [r5, #16]
   d85c6:	459a      	cmp	sl, r3
   d85c8:	da0a      	bge.n	d85e0 <__gethex+0x40a>
   d85ca:	2101      	movs	r1, #1
   d85cc:	4628      	mov	r0, r5
   d85ce:	f7ff fdb7 	bl	d8140 <rshift>
   d85d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d85d6:	3401      	adds	r4, #1
   d85d8:	429c      	cmp	r4, r3
   d85da:	f73f af2c 	bgt.w	d8436 <__gethex+0x260>
   d85de:	e00b      	b.n	d85f8 <__gethex+0x422>
   d85e0:	f016 061f 	ands.w	r6, r6, #31
   d85e4:	d008      	beq.n	d85f8 <__gethex+0x422>
   d85e6:	4491      	add	r9, r2
   d85e8:	f1c6 0620 	rsb	r6, r6, #32
   d85ec:	f859 0c04 	ldr.w	r0, [r9, #-4]
   d85f0:	f000 fa69 	bl	d8ac6 <__hi0bits>
   d85f4:	42b0      	cmp	r0, r6
   d85f6:	dbe8      	blt.n	d85ca <__gethex+0x3f4>
   d85f8:	2701      	movs	r7, #1
   d85fa:	f047 0720 	orr.w	r7, r7, #32
   d85fe:	e001      	b.n	d8604 <__gethex+0x42e>
   d8600:	f047 0710 	orr.w	r7, r7, #16
   d8604:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d8606:	601d      	str	r5, [r3, #0]
   d8608:	9b06      	ldr	r3, [sp, #24]
   d860a:	4638      	mov	r0, r7
   d860c:	601c      	str	r4, [r3, #0]
   d860e:	b00b      	add	sp, #44	; 0x2c
   d8610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8614 <L_shift>:
   d8614:	f1c2 0208 	rsb	r2, r2, #8
   d8618:	0092      	lsls	r2, r2, #2
   d861a:	b570      	push	{r4, r5, r6, lr}
   d861c:	f1c2 0620 	rsb	r6, r2, #32
   d8620:	6843      	ldr	r3, [r0, #4]
   d8622:	6805      	ldr	r5, [r0, #0]
   d8624:	fa03 f406 	lsl.w	r4, r3, r6
   d8628:	432c      	orrs	r4, r5
   d862a:	40d3      	lsrs	r3, r2
   d862c:	6004      	str	r4, [r0, #0]
   d862e:	f840 3f04 	str.w	r3, [r0, #4]!
   d8632:	4288      	cmp	r0, r1
   d8634:	d3f4      	bcc.n	d8620 <L_shift+0xc>
   d8636:	bd70      	pop	{r4, r5, r6, pc}

000d8638 <__match>:
   d8638:	b530      	push	{r4, r5, lr}
   d863a:	6803      	ldr	r3, [r0, #0]
   d863c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8640:	3301      	adds	r3, #1
   d8642:	b14c      	cbz	r4, d8658 <__match+0x20>
   d8644:	781a      	ldrb	r2, [r3, #0]
   d8646:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d864a:	2d19      	cmp	r5, #25
   d864c:	bf98      	it	ls
   d864e:	3220      	addls	r2, #32
   d8650:	42a2      	cmp	r2, r4
   d8652:	d0f3      	beq.n	d863c <__match+0x4>
   d8654:	2000      	movs	r0, #0
   d8656:	bd30      	pop	{r4, r5, pc}
   d8658:	6003      	str	r3, [r0, #0]
   d865a:	2001      	movs	r0, #1
   d865c:	bd30      	pop	{r4, r5, pc}

000d865e <__hexnan>:
   d865e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8662:	680b      	ldr	r3, [r1, #0]
   d8664:	f8d0 b000 	ldr.w	fp, [r0]
   d8668:	115e      	asrs	r6, r3, #5
   d866a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d866e:	f013 031f 	ands.w	r3, r3, #31
   d8672:	b085      	sub	sp, #20
   d8674:	bf18      	it	ne
   d8676:	3604      	addne	r6, #4
   d8678:	1f35      	subs	r5, r6, #4
   d867a:	4617      	mov	r7, r2
   d867c:	2200      	movs	r2, #0
   d867e:	4682      	mov	sl, r0
   d8680:	9301      	str	r3, [sp, #4]
   d8682:	f846 2c04 	str.w	r2, [r6, #-4]
   d8686:	46a8      	mov	r8, r5
   d8688:	462c      	mov	r4, r5
   d868a:	9200      	str	r2, [sp, #0]
   d868c:	4691      	mov	r9, r2
   d868e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   d8692:	2900      	cmp	r1, #0
   d8694:	d03c      	beq.n	d8710 <__hexnan+0xb2>
   d8696:	4608      	mov	r0, r1
   d8698:	9203      	str	r2, [sp, #12]
   d869a:	9102      	str	r1, [sp, #8]
   d869c:	f7ff fd86 	bl	d81ac <__hexdig_fun>
   d86a0:	9a03      	ldr	r2, [sp, #12]
   d86a2:	bb00      	cbnz	r0, d86e6 <__hexnan+0x88>
   d86a4:	9902      	ldr	r1, [sp, #8]
   d86a6:	2920      	cmp	r1, #32
   d86a8:	d816      	bhi.n	d86d8 <__hexnan+0x7a>
   d86aa:	9b00      	ldr	r3, [sp, #0]
   d86ac:	4599      	cmp	r9, r3
   d86ae:	ddee      	ble.n	d868e <__hexnan+0x30>
   d86b0:	4544      	cmp	r4, r8
   d86b2:	d205      	bcs.n	d86c0 <__hexnan+0x62>
   d86b4:	2a07      	cmp	r2, #7
   d86b6:	dc03      	bgt.n	d86c0 <__hexnan+0x62>
   d86b8:	4641      	mov	r1, r8
   d86ba:	4620      	mov	r0, r4
   d86bc:	f7ff ffaa 	bl	d8614 <L_shift>
   d86c0:	42bc      	cmp	r4, r7
   d86c2:	d923      	bls.n	d870c <__hexnan+0xae>
   d86c4:	2300      	movs	r3, #0
   d86c6:	f1a4 0804 	sub.w	r8, r4, #4
   d86ca:	f844 3c04 	str.w	r3, [r4, #-4]
   d86ce:	f8cd 9000 	str.w	r9, [sp]
   d86d2:	4644      	mov	r4, r8
   d86d4:	461a      	mov	r2, r3
   d86d6:	e7da      	b.n	d868e <__hexnan+0x30>
   d86d8:	2929      	cmp	r1, #41	; 0x29
   d86da:	d148      	bne.n	d876e <__hexnan+0x110>
   d86dc:	f10b 0301 	add.w	r3, fp, #1
   d86e0:	f8ca 3000 	str.w	r3, [sl]
   d86e4:	e014      	b.n	d8710 <__hexnan+0xb2>
   d86e6:	3201      	adds	r2, #1
   d86e8:	2a08      	cmp	r2, #8
   d86ea:	f109 0901 	add.w	r9, r9, #1
   d86ee:	dd06      	ble.n	d86fe <__hexnan+0xa0>
   d86f0:	42bc      	cmp	r4, r7
   d86f2:	d9cc      	bls.n	d868e <__hexnan+0x30>
   d86f4:	2300      	movs	r3, #0
   d86f6:	f844 3c04 	str.w	r3, [r4, #-4]
   d86fa:	2201      	movs	r2, #1
   d86fc:	3c04      	subs	r4, #4
   d86fe:	6821      	ldr	r1, [r4, #0]
   d8700:	f000 000f 	and.w	r0, r0, #15
   d8704:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   d8708:	6020      	str	r0, [r4, #0]
   d870a:	e7c0      	b.n	d868e <__hexnan+0x30>
   d870c:	2208      	movs	r2, #8
   d870e:	e7be      	b.n	d868e <__hexnan+0x30>
   d8710:	f1b9 0f00 	cmp.w	r9, #0
   d8714:	d02b      	beq.n	d876e <__hexnan+0x110>
   d8716:	4544      	cmp	r4, r8
   d8718:	d205      	bcs.n	d8726 <__hexnan+0xc8>
   d871a:	2a07      	cmp	r2, #7
   d871c:	dc03      	bgt.n	d8726 <__hexnan+0xc8>
   d871e:	4641      	mov	r1, r8
   d8720:	4620      	mov	r0, r4
   d8722:	f7ff ff77 	bl	d8614 <L_shift>
   d8726:	42bc      	cmp	r4, r7
   d8728:	d90c      	bls.n	d8744 <__hexnan+0xe6>
   d872a:	463b      	mov	r3, r7
   d872c:	f854 2b04 	ldr.w	r2, [r4], #4
   d8730:	f843 2b04 	str.w	r2, [r3], #4
   d8734:	42a5      	cmp	r5, r4
   d8736:	d2f9      	bcs.n	d872c <__hexnan+0xce>
   d8738:	2200      	movs	r2, #0
   d873a:	f843 2b04 	str.w	r2, [r3], #4
   d873e:	429d      	cmp	r5, r3
   d8740:	d2fb      	bcs.n	d873a <__hexnan+0xdc>
   d8742:	e00b      	b.n	d875c <__hexnan+0xfe>
   d8744:	9b01      	ldr	r3, [sp, #4]
   d8746:	b14b      	cbz	r3, d875c <__hexnan+0xfe>
   d8748:	f1c3 0220 	rsb	r2, r3, #32
   d874c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8750:	40d3      	lsrs	r3, r2
   d8752:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d8756:	4013      	ands	r3, r2
   d8758:	f846 3c04 	str.w	r3, [r6, #-4]
   d875c:	682b      	ldr	r3, [r5, #0]
   d875e:	b943      	cbnz	r3, d8772 <__hexnan+0x114>
   d8760:	42bd      	cmp	r5, r7
   d8762:	d102      	bne.n	d876a <__hexnan+0x10c>
   d8764:	2301      	movs	r3, #1
   d8766:	602b      	str	r3, [r5, #0]
   d8768:	e003      	b.n	d8772 <__hexnan+0x114>
   d876a:	3d04      	subs	r5, #4
   d876c:	e7f6      	b.n	d875c <__hexnan+0xfe>
   d876e:	2004      	movs	r0, #4
   d8770:	e000      	b.n	d8774 <__hexnan+0x116>
   d8772:	2005      	movs	r0, #5
   d8774:	b005      	add	sp, #20
   d8776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d877c <_findenv_r>:
   d877c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8780:	4607      	mov	r7, r0
   d8782:	468b      	mov	fp, r1
   d8784:	4690      	mov	r8, r2
   d8786:	f000 fcdd 	bl	d9144 <__env_lock>
   d878a:	4b19      	ldr	r3, [pc, #100]	; (d87f0 <_findenv_r+0x74>)
   d878c:	681d      	ldr	r5, [r3, #0]
   d878e:	469a      	mov	sl, r3
   d8790:	b13d      	cbz	r5, d87a2 <_findenv_r+0x26>
   d8792:	465c      	mov	r4, fp
   d8794:	4623      	mov	r3, r4
   d8796:	f813 2b01 	ldrb.w	r2, [r3], #1
   d879a:	b142      	cbz	r2, d87ae <_findenv_r+0x32>
   d879c:	2a3d      	cmp	r2, #61	; 0x3d
   d879e:	461c      	mov	r4, r3
   d87a0:	d1f8      	bne.n	d8794 <_findenv_r+0x18>
   d87a2:	4638      	mov	r0, r7
   d87a4:	f000 fccf 	bl	d9146 <__env_unlock>
   d87a8:	2000      	movs	r0, #0
   d87aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d87ae:	ebcb 0404 	rsb	r4, fp, r4
   d87b2:	46a9      	mov	r9, r5
   d87b4:	f859 0b04 	ldr.w	r0, [r9], #4
   d87b8:	2800      	cmp	r0, #0
   d87ba:	d0f2      	beq.n	d87a2 <_findenv_r+0x26>
   d87bc:	4622      	mov	r2, r4
   d87be:	4659      	mov	r1, fp
   d87c0:	f7fe fbb3 	bl	d6f2a <strncmp>
   d87c4:	b988      	cbnz	r0, d87ea <_findenv_r+0x6e>
   d87c6:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d87ca:	191e      	adds	r6, r3, r4
   d87cc:	5d1b      	ldrb	r3, [r3, r4]
   d87ce:	2b3d      	cmp	r3, #61	; 0x3d
   d87d0:	d10b      	bne.n	d87ea <_findenv_r+0x6e>
   d87d2:	f8da 3000 	ldr.w	r3, [sl]
   d87d6:	1aed      	subs	r5, r5, r3
   d87d8:	10ad      	asrs	r5, r5, #2
   d87da:	4638      	mov	r0, r7
   d87dc:	f8c8 5000 	str.w	r5, [r8]
   d87e0:	f000 fcb1 	bl	d9146 <__env_unlock>
   d87e4:	1c70      	adds	r0, r6, #1
   d87e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d87ea:	464d      	mov	r5, r9
   d87ec:	e7e1      	b.n	d87b2 <_findenv_r+0x36>
   d87ee:	bf00      	nop
   d87f0:	2003e330 	.word	0x2003e330

000d87f4 <_getenv_r>:
   d87f4:	b507      	push	{r0, r1, r2, lr}
   d87f6:	aa01      	add	r2, sp, #4
   d87f8:	f7ff ffc0 	bl	d877c <_findenv_r>
   d87fc:	b003      	add	sp, #12
   d87fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8804 <__gettzinfo>:
   d8804:	4800      	ldr	r0, [pc, #0]	; (d8808 <__gettzinfo+0x4>)
   d8806:	4770      	bx	lr
   d8808:	2003e2f0 	.word	0x2003e2f0

000d880c <gmtime_r>:
   d880c:	6802      	ldr	r2, [r0, #0]
   d880e:	4b47      	ldr	r3, [pc, #284]	; (d892c <gmtime_r+0x120>)
   d8810:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8812:	fb92 f4f3 	sdiv	r4, r2, r3
   d8816:	fb03 2214 	mls	r2, r3, r4, r2
   d881a:	2a00      	cmp	r2, #0
   d881c:	bfbc      	itt	lt
   d881e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d8822:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d8826:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d882a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d882e:	fb92 f3f0 	sdiv	r3, r2, r0
   d8832:	fb00 2213 	mls	r2, r0, r3, r2
   d8836:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d883a:	bfac      	ite	ge
   d883c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d8840:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d8844:	608b      	str	r3, [r1, #8]
   d8846:	fb92 f3f0 	sdiv	r3, r2, r0
   d884a:	fb00 2213 	mls	r2, r0, r3, r2
   d884e:	604b      	str	r3, [r1, #4]
   d8850:	600a      	str	r2, [r1, #0]
   d8852:	2307      	movs	r3, #7
   d8854:	1ce2      	adds	r2, r4, #3
   d8856:	fb92 f3f3 	sdiv	r3, r2, r3
   d885a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d885e:	1ad3      	subs	r3, r2, r3
   d8860:	618b      	str	r3, [r1, #24]
   d8862:	4b33      	ldr	r3, [pc, #204]	; (d8930 <gmtime_r+0x124>)
   d8864:	4d33      	ldr	r5, [pc, #204]	; (d8934 <gmtime_r+0x128>)
   d8866:	fb94 f5f5 	sdiv	r5, r4, r5
   d886a:	fb03 4405 	mla	r4, r3, r5, r4
   d886e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d8872:	fbb4 f2f2 	udiv	r2, r4, r2
   d8876:	4422      	add	r2, r4
   d8878:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d887c:	fbb4 f3f7 	udiv	r3, r4, r7
   d8880:	1ad2      	subs	r2, r2, r3
   d8882:	482d      	ldr	r0, [pc, #180]	; (d8938 <gmtime_r+0x12c>)
   d8884:	fbb4 f0f0 	udiv	r0, r4, r0
   d8888:	f648 6694 	movw	r6, #36500	; 0x8e94
   d888c:	1a13      	subs	r3, r2, r0
   d888e:	fbb3 f6f6 	udiv	r6, r3, r6
   d8892:	4434      	add	r4, r6
   d8894:	f240 126d 	movw	r2, #365	; 0x16d
   d8898:	fbb3 f0f2 	udiv	r0, r3, r2
   d889c:	fbb3 f3f7 	udiv	r3, r3, r7
   d88a0:	1ae3      	subs	r3, r4, r3
   d88a2:	fb02 3310 	mls	r3, r2, r0, r3
   d88a6:	2499      	movs	r4, #153	; 0x99
   d88a8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d88ac:	3202      	adds	r2, #2
   d88ae:	fbb2 f2f4 	udiv	r2, r2, r4
   d88b2:	2a0a      	cmp	r2, #10
   d88b4:	fb04 f402 	mul.w	r4, r4, r2
   d88b8:	f104 0602 	add.w	r6, r4, #2
   d88bc:	f04f 0405 	mov.w	r4, #5
   d88c0:	fbb6 f4f4 	udiv	r4, r6, r4
   d88c4:	bf34      	ite	cc
   d88c6:	2602      	movcc	r6, #2
   d88c8:	f06f 0609 	mvncs.w	r6, #9
   d88cc:	4416      	add	r6, r2
   d88ce:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d88d2:	fb02 0505 	mla	r5, r2, r5, r0
   d88d6:	1c5f      	adds	r7, r3, #1
   d88d8:	2e01      	cmp	r6, #1
   d88da:	bf98      	it	ls
   d88dc:	3501      	addls	r5, #1
   d88de:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d88e2:	eba7 0704 	sub.w	r7, r7, r4
   d88e6:	d302      	bcc.n	d88ee <gmtime_r+0xe2>
   d88e8:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d88ec:	e014      	b.n	d8918 <gmtime_r+0x10c>
   d88ee:	0782      	lsls	r2, r0, #30
   d88f0:	d105      	bne.n	d88fe <gmtime_r+0xf2>
   d88f2:	2464      	movs	r4, #100	; 0x64
   d88f4:	fbb0 f2f4 	udiv	r2, r0, r4
   d88f8:	fb04 0212 	mls	r2, r4, r2, r0
   d88fc:	b94a      	cbnz	r2, d8912 <gmtime_r+0x106>
   d88fe:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8902:	fbb0 f4f2 	udiv	r4, r0, r2
   d8906:	fb02 0014 	mls	r0, r2, r4, r0
   d890a:	fab0 f280 	clz	r2, r0
   d890e:	0952      	lsrs	r2, r2, #5
   d8910:	e000      	b.n	d8914 <gmtime_r+0x108>
   d8912:	2201      	movs	r2, #1
   d8914:	333b      	adds	r3, #59	; 0x3b
   d8916:	441a      	add	r2, r3
   d8918:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d891c:	2300      	movs	r3, #0
   d891e:	61ca      	str	r2, [r1, #28]
   d8920:	614d      	str	r5, [r1, #20]
   d8922:	610e      	str	r6, [r1, #16]
   d8924:	60cf      	str	r7, [r1, #12]
   d8926:	620b      	str	r3, [r1, #32]
   d8928:	4608      	mov	r0, r1
   d892a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d892c:	00015180 	.word	0x00015180
   d8930:	fffdc54f 	.word	0xfffdc54f
   d8934:	00023ab1 	.word	0x00023ab1
   d8938:	00023ab0 	.word	0x00023ab0

000d893c <_Balloc>:
   d893c:	b570      	push	{r4, r5, r6, lr}
   d893e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   d8940:	4604      	mov	r4, r0
   d8942:	460e      	mov	r6, r1
   d8944:	b93d      	cbnz	r5, d8956 <_Balloc+0x1a>
   d8946:	2010      	movs	r0, #16
   d8948:	f7fc f8ae 	bl	d4aa8 <malloc>
   d894c:	6260      	str	r0, [r4, #36]	; 0x24
   d894e:	6045      	str	r5, [r0, #4]
   d8950:	6085      	str	r5, [r0, #8]
   d8952:	6005      	str	r5, [r0, #0]
   d8954:	60c5      	str	r5, [r0, #12]
   d8956:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d8958:	68eb      	ldr	r3, [r5, #12]
   d895a:	b143      	cbz	r3, d896e <_Balloc+0x32>
   d895c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d895e:	68db      	ldr	r3, [r3, #12]
   d8960:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   d8964:	b178      	cbz	r0, d8986 <_Balloc+0x4a>
   d8966:	6802      	ldr	r2, [r0, #0]
   d8968:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   d896c:	e017      	b.n	d899e <_Balloc+0x62>
   d896e:	2221      	movs	r2, #33	; 0x21
   d8970:	2104      	movs	r1, #4
   d8972:	4620      	mov	r0, r4
   d8974:	f000 fbd1 	bl	d911a <_calloc_r>
   d8978:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d897a:	60e8      	str	r0, [r5, #12]
   d897c:	68db      	ldr	r3, [r3, #12]
   d897e:	2b00      	cmp	r3, #0
   d8980:	d1ec      	bne.n	d895c <_Balloc+0x20>
   d8982:	2000      	movs	r0, #0
   d8984:	bd70      	pop	{r4, r5, r6, pc}
   d8986:	2101      	movs	r1, #1
   d8988:	fa01 f506 	lsl.w	r5, r1, r6
   d898c:	1d6a      	adds	r2, r5, #5
   d898e:	0092      	lsls	r2, r2, #2
   d8990:	4620      	mov	r0, r4
   d8992:	f000 fbc2 	bl	d911a <_calloc_r>
   d8996:	2800      	cmp	r0, #0
   d8998:	d0f3      	beq.n	d8982 <_Balloc+0x46>
   d899a:	6046      	str	r6, [r0, #4]
   d899c:	6085      	str	r5, [r0, #8]
   d899e:	2300      	movs	r3, #0
   d89a0:	6103      	str	r3, [r0, #16]
   d89a2:	60c3      	str	r3, [r0, #12]
   d89a4:	bd70      	pop	{r4, r5, r6, pc}

000d89a6 <_Bfree>:
   d89a6:	b570      	push	{r4, r5, r6, lr}
   d89a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
   d89aa:	4606      	mov	r6, r0
   d89ac:	460d      	mov	r5, r1
   d89ae:	b93c      	cbnz	r4, d89c0 <_Bfree+0x1a>
   d89b0:	2010      	movs	r0, #16
   d89b2:	f7fc f879 	bl	d4aa8 <malloc>
   d89b6:	6270      	str	r0, [r6, #36]	; 0x24
   d89b8:	6044      	str	r4, [r0, #4]
   d89ba:	6084      	str	r4, [r0, #8]
   d89bc:	6004      	str	r4, [r0, #0]
   d89be:	60c4      	str	r4, [r0, #12]
   d89c0:	b13d      	cbz	r5, d89d2 <_Bfree+0x2c>
   d89c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
   d89c4:	686a      	ldr	r2, [r5, #4]
   d89c6:	68db      	ldr	r3, [r3, #12]
   d89c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d89cc:	6029      	str	r1, [r5, #0]
   d89ce:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   d89d2:	bd70      	pop	{r4, r5, r6, pc}

000d89d4 <__multadd>:
   d89d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d89d8:	690d      	ldr	r5, [r1, #16]
   d89da:	461f      	mov	r7, r3
   d89dc:	4606      	mov	r6, r0
   d89de:	460c      	mov	r4, r1
   d89e0:	f101 0e14 	add.w	lr, r1, #20
   d89e4:	2300      	movs	r3, #0
   d89e6:	f8de 0000 	ldr.w	r0, [lr]
   d89ea:	b281      	uxth	r1, r0
   d89ec:	fb02 7101 	mla	r1, r2, r1, r7
   d89f0:	0c0f      	lsrs	r7, r1, #16
   d89f2:	0c00      	lsrs	r0, r0, #16
   d89f4:	fb02 7000 	mla	r0, r2, r0, r7
   d89f8:	b289      	uxth	r1, r1
   d89fa:	3301      	adds	r3, #1
   d89fc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   d8a00:	429d      	cmp	r5, r3
   d8a02:	ea4f 4710 	mov.w	r7, r0, lsr #16
   d8a06:	f84e 1b04 	str.w	r1, [lr], #4
   d8a0a:	dcec      	bgt.n	d89e6 <__multadd+0x12>
   d8a0c:	b1d7      	cbz	r7, d8a44 <__multadd+0x70>
   d8a0e:	68a3      	ldr	r3, [r4, #8]
   d8a10:	429d      	cmp	r5, r3
   d8a12:	db12      	blt.n	d8a3a <__multadd+0x66>
   d8a14:	6861      	ldr	r1, [r4, #4]
   d8a16:	4630      	mov	r0, r6
   d8a18:	3101      	adds	r1, #1
   d8a1a:	f7ff ff8f 	bl	d893c <_Balloc>
   d8a1e:	6922      	ldr	r2, [r4, #16]
   d8a20:	3202      	adds	r2, #2
   d8a22:	f104 010c 	add.w	r1, r4, #12
   d8a26:	4680      	mov	r8, r0
   d8a28:	0092      	lsls	r2, r2, #2
   d8a2a:	300c      	adds	r0, #12
   d8a2c:	f7fe fa0c 	bl	d6e48 <memcpy>
   d8a30:	4621      	mov	r1, r4
   d8a32:	4630      	mov	r0, r6
   d8a34:	f7ff ffb7 	bl	d89a6 <_Bfree>
   d8a38:	4644      	mov	r4, r8
   d8a3a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   d8a3e:	3501      	adds	r5, #1
   d8a40:	615f      	str	r7, [r3, #20]
   d8a42:	6125      	str	r5, [r4, #16]
   d8a44:	4620      	mov	r0, r4
   d8a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8a4a <__s2b>:
   d8a4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8a4e:	460c      	mov	r4, r1
   d8a50:	4615      	mov	r5, r2
   d8a52:	461f      	mov	r7, r3
   d8a54:	2209      	movs	r2, #9
   d8a56:	3308      	adds	r3, #8
   d8a58:	4606      	mov	r6, r0
   d8a5a:	fb93 f3f2 	sdiv	r3, r3, r2
   d8a5e:	2100      	movs	r1, #0
   d8a60:	2201      	movs	r2, #1
   d8a62:	429a      	cmp	r2, r3
   d8a64:	da02      	bge.n	d8a6c <__s2b+0x22>
   d8a66:	0052      	lsls	r2, r2, #1
   d8a68:	3101      	adds	r1, #1
   d8a6a:	e7fa      	b.n	d8a62 <__s2b+0x18>
   d8a6c:	4630      	mov	r0, r6
   d8a6e:	f7ff ff65 	bl	d893c <_Balloc>
   d8a72:	9b08      	ldr	r3, [sp, #32]
   d8a74:	6143      	str	r3, [r0, #20]
   d8a76:	2d09      	cmp	r5, #9
   d8a78:	f04f 0301 	mov.w	r3, #1
   d8a7c:	6103      	str	r3, [r0, #16]
   d8a7e:	dd11      	ble.n	d8aa4 <__s2b+0x5a>
   d8a80:	f104 0809 	add.w	r8, r4, #9
   d8a84:	46c1      	mov	r9, r8
   d8a86:	442c      	add	r4, r5
   d8a88:	f819 3b01 	ldrb.w	r3, [r9], #1
   d8a8c:	4601      	mov	r1, r0
   d8a8e:	3b30      	subs	r3, #48	; 0x30
   d8a90:	220a      	movs	r2, #10
   d8a92:	4630      	mov	r0, r6
   d8a94:	f7ff ff9e 	bl	d89d4 <__multadd>
   d8a98:	45a1      	cmp	r9, r4
   d8a9a:	d1f5      	bne.n	d8a88 <__s2b+0x3e>
   d8a9c:	eb08 0405 	add.w	r4, r8, r5
   d8aa0:	3c08      	subs	r4, #8
   d8aa2:	e001      	b.n	d8aa8 <__s2b+0x5e>
   d8aa4:	340a      	adds	r4, #10
   d8aa6:	2509      	movs	r5, #9
   d8aa8:	1b2d      	subs	r5, r5, r4
   d8aaa:	1963      	adds	r3, r4, r5
   d8aac:	429f      	cmp	r7, r3
   d8aae:	dd08      	ble.n	d8ac2 <__s2b+0x78>
   d8ab0:	f814 3b01 	ldrb.w	r3, [r4], #1
   d8ab4:	4601      	mov	r1, r0
   d8ab6:	3b30      	subs	r3, #48	; 0x30
   d8ab8:	220a      	movs	r2, #10
   d8aba:	4630      	mov	r0, r6
   d8abc:	f7ff ff8a 	bl	d89d4 <__multadd>
   d8ac0:	e7f3      	b.n	d8aaa <__s2b+0x60>
   d8ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d8ac6 <__hi0bits>:
   d8ac6:	0c03      	lsrs	r3, r0, #16
   d8ac8:	041b      	lsls	r3, r3, #16
   d8aca:	b913      	cbnz	r3, d8ad2 <__hi0bits+0xc>
   d8acc:	0400      	lsls	r0, r0, #16
   d8ace:	2310      	movs	r3, #16
   d8ad0:	e000      	b.n	d8ad4 <__hi0bits+0xe>
   d8ad2:	2300      	movs	r3, #0
   d8ad4:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d8ad8:	bf04      	itt	eq
   d8ada:	0200      	lsleq	r0, r0, #8
   d8adc:	3308      	addeq	r3, #8
   d8ade:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d8ae2:	bf04      	itt	eq
   d8ae4:	0100      	lsleq	r0, r0, #4
   d8ae6:	3304      	addeq	r3, #4
   d8ae8:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d8aec:	bf04      	itt	eq
   d8aee:	0080      	lsleq	r0, r0, #2
   d8af0:	3302      	addeq	r3, #2
   d8af2:	2800      	cmp	r0, #0
   d8af4:	db03      	blt.n	d8afe <__hi0bits+0x38>
   d8af6:	0042      	lsls	r2, r0, #1
   d8af8:	d503      	bpl.n	d8b02 <__hi0bits+0x3c>
   d8afa:	1c58      	adds	r0, r3, #1
   d8afc:	4770      	bx	lr
   d8afe:	4618      	mov	r0, r3
   d8b00:	4770      	bx	lr
   d8b02:	2020      	movs	r0, #32
   d8b04:	4770      	bx	lr

000d8b06 <__lo0bits>:
   d8b06:	6803      	ldr	r3, [r0, #0]
   d8b08:	f013 0207 	ands.w	r2, r3, #7
   d8b0c:	d00b      	beq.n	d8b26 <__lo0bits+0x20>
   d8b0e:	07d9      	lsls	r1, r3, #31
   d8b10:	d422      	bmi.n	d8b58 <__lo0bits+0x52>
   d8b12:	079a      	lsls	r2, r3, #30
   d8b14:	bf4b      	itete	mi
   d8b16:	085b      	lsrmi	r3, r3, #1
   d8b18:	089b      	lsrpl	r3, r3, #2
   d8b1a:	6003      	strmi	r3, [r0, #0]
   d8b1c:	6003      	strpl	r3, [r0, #0]
   d8b1e:	bf4c      	ite	mi
   d8b20:	2001      	movmi	r0, #1
   d8b22:	2002      	movpl	r0, #2
   d8b24:	4770      	bx	lr
   d8b26:	b299      	uxth	r1, r3
   d8b28:	b909      	cbnz	r1, d8b2e <__lo0bits+0x28>
   d8b2a:	0c1b      	lsrs	r3, r3, #16
   d8b2c:	2210      	movs	r2, #16
   d8b2e:	f013 0fff 	tst.w	r3, #255	; 0xff
   d8b32:	bf04      	itt	eq
   d8b34:	0a1b      	lsreq	r3, r3, #8
   d8b36:	3208      	addeq	r2, #8
   d8b38:	0719      	lsls	r1, r3, #28
   d8b3a:	bf04      	itt	eq
   d8b3c:	091b      	lsreq	r3, r3, #4
   d8b3e:	3204      	addeq	r2, #4
   d8b40:	0799      	lsls	r1, r3, #30
   d8b42:	bf04      	itt	eq
   d8b44:	089b      	lsreq	r3, r3, #2
   d8b46:	3202      	addeq	r2, #2
   d8b48:	07d9      	lsls	r1, r3, #31
   d8b4a:	d402      	bmi.n	d8b52 <__lo0bits+0x4c>
   d8b4c:	085b      	lsrs	r3, r3, #1
   d8b4e:	d005      	beq.n	d8b5c <__lo0bits+0x56>
   d8b50:	3201      	adds	r2, #1
   d8b52:	6003      	str	r3, [r0, #0]
   d8b54:	4610      	mov	r0, r2
   d8b56:	4770      	bx	lr
   d8b58:	2000      	movs	r0, #0
   d8b5a:	4770      	bx	lr
   d8b5c:	2020      	movs	r0, #32
   d8b5e:	4770      	bx	lr

000d8b60 <__i2b>:
   d8b60:	b510      	push	{r4, lr}
   d8b62:	460c      	mov	r4, r1
   d8b64:	2101      	movs	r1, #1
   d8b66:	f7ff fee9 	bl	d893c <_Balloc>
   d8b6a:	2201      	movs	r2, #1
   d8b6c:	6144      	str	r4, [r0, #20]
   d8b6e:	6102      	str	r2, [r0, #16]
   d8b70:	bd10      	pop	{r4, pc}

000d8b72 <__multiply>:
   d8b72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8b76:	4614      	mov	r4, r2
   d8b78:	690a      	ldr	r2, [r1, #16]
   d8b7a:	6923      	ldr	r3, [r4, #16]
   d8b7c:	429a      	cmp	r2, r3
   d8b7e:	bfb8      	it	lt
   d8b80:	460b      	movlt	r3, r1
   d8b82:	4688      	mov	r8, r1
   d8b84:	bfbc      	itt	lt
   d8b86:	46a0      	movlt	r8, r4
   d8b88:	461c      	movlt	r4, r3
   d8b8a:	f8d8 7010 	ldr.w	r7, [r8, #16]
   d8b8e:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d8b92:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d8b96:	f8d8 1004 	ldr.w	r1, [r8, #4]
   d8b9a:	eb07 0609 	add.w	r6, r7, r9
   d8b9e:	429e      	cmp	r6, r3
   d8ba0:	bfc8      	it	gt
   d8ba2:	3101      	addgt	r1, #1
   d8ba4:	f7ff feca 	bl	d893c <_Balloc>
   d8ba8:	f100 0514 	add.w	r5, r0, #20
   d8bac:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   d8bb0:	462b      	mov	r3, r5
   d8bb2:	2200      	movs	r2, #0
   d8bb4:	4563      	cmp	r3, ip
   d8bb6:	d202      	bcs.n	d8bbe <__multiply+0x4c>
   d8bb8:	f843 2b04 	str.w	r2, [r3], #4
   d8bbc:	e7fa      	b.n	d8bb4 <__multiply+0x42>
   d8bbe:	f104 0214 	add.w	r2, r4, #20
   d8bc2:	f108 0114 	add.w	r1, r8, #20
   d8bc6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d8bca:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   d8bce:	9300      	str	r3, [sp, #0]
   d8bd0:	9b00      	ldr	r3, [sp, #0]
   d8bd2:	9201      	str	r2, [sp, #4]
   d8bd4:	4293      	cmp	r3, r2
   d8bd6:	d957      	bls.n	d8c88 <__multiply+0x116>
   d8bd8:	f8b2 b000 	ldrh.w	fp, [r2]
   d8bdc:	f1bb 0f00 	cmp.w	fp, #0
   d8be0:	d023      	beq.n	d8c2a <__multiply+0xb8>
   d8be2:	4689      	mov	r9, r1
   d8be4:	46ae      	mov	lr, r5
   d8be6:	f04f 0800 	mov.w	r8, #0
   d8bea:	f859 4b04 	ldr.w	r4, [r9], #4
   d8bee:	f8be a000 	ldrh.w	sl, [lr]
   d8bf2:	b2a3      	uxth	r3, r4
   d8bf4:	fb0b a303 	mla	r3, fp, r3, sl
   d8bf8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   d8bfc:	f8de 4000 	ldr.w	r4, [lr]
   d8c00:	4443      	add	r3, r8
   d8c02:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d8c06:	fb0b 840a 	mla	r4, fp, sl, r8
   d8c0a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   d8c0e:	46f2      	mov	sl, lr
   d8c10:	b29b      	uxth	r3, r3
   d8c12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   d8c16:	454f      	cmp	r7, r9
   d8c18:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d8c1c:	f84a 3b04 	str.w	r3, [sl], #4
   d8c20:	d901      	bls.n	d8c26 <__multiply+0xb4>
   d8c22:	46d6      	mov	lr, sl
   d8c24:	e7e1      	b.n	d8bea <__multiply+0x78>
   d8c26:	f8ce 8004 	str.w	r8, [lr, #4]
   d8c2a:	9b01      	ldr	r3, [sp, #4]
   d8c2c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   d8c30:	3204      	adds	r2, #4
   d8c32:	f1ba 0f00 	cmp.w	sl, #0
   d8c36:	d021      	beq.n	d8c7c <__multiply+0x10a>
   d8c38:	682b      	ldr	r3, [r5, #0]
   d8c3a:	462c      	mov	r4, r5
   d8c3c:	4689      	mov	r9, r1
   d8c3e:	f04f 0800 	mov.w	r8, #0
   d8c42:	f8b9 e000 	ldrh.w	lr, [r9]
   d8c46:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   d8c4a:	fb0a be0e 	mla	lr, sl, lr, fp
   d8c4e:	44f0      	add	r8, lr
   d8c50:	46a3      	mov	fp, r4
   d8c52:	b29b      	uxth	r3, r3
   d8c54:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   d8c58:	f84b 3b04 	str.w	r3, [fp], #4
   d8c5c:	f859 3b04 	ldr.w	r3, [r9], #4
   d8c60:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   d8c64:	0c1b      	lsrs	r3, r3, #16
   d8c66:	fb0a e303 	mla	r3, sl, r3, lr
   d8c6a:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   d8c6e:	454f      	cmp	r7, r9
   d8c70:	ea4f 4813 	mov.w	r8, r3, lsr #16
   d8c74:	d901      	bls.n	d8c7a <__multiply+0x108>
   d8c76:	465c      	mov	r4, fp
   d8c78:	e7e3      	b.n	d8c42 <__multiply+0xd0>
   d8c7a:	6063      	str	r3, [r4, #4]
   d8c7c:	3504      	adds	r5, #4
   d8c7e:	e7a7      	b.n	d8bd0 <__multiply+0x5e>
   d8c80:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   d8c84:	b913      	cbnz	r3, d8c8c <__multiply+0x11a>
   d8c86:	3e01      	subs	r6, #1
   d8c88:	2e00      	cmp	r6, #0
   d8c8a:	dcf9      	bgt.n	d8c80 <__multiply+0x10e>
   d8c8c:	6106      	str	r6, [r0, #16]
   d8c8e:	b003      	add	sp, #12
   d8c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8c94 <__pow5mult>:
   d8c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8c98:	4615      	mov	r5, r2
   d8c9a:	f012 0203 	ands.w	r2, r2, #3
   d8c9e:	4606      	mov	r6, r0
   d8ca0:	460f      	mov	r7, r1
   d8ca2:	d007      	beq.n	d8cb4 <__pow5mult+0x20>
   d8ca4:	3a01      	subs	r2, #1
   d8ca6:	4c21      	ldr	r4, [pc, #132]	; (d8d2c <__pow5mult+0x98>)
   d8ca8:	2300      	movs	r3, #0
   d8caa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d8cae:	f7ff fe91 	bl	d89d4 <__multadd>
   d8cb2:	4607      	mov	r7, r0
   d8cb4:	10ad      	asrs	r5, r5, #2
   d8cb6:	d036      	beq.n	d8d26 <__pow5mult+0x92>
   d8cb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d8cba:	b93c      	cbnz	r4, d8ccc <__pow5mult+0x38>
   d8cbc:	2010      	movs	r0, #16
   d8cbe:	f7fb fef3 	bl	d4aa8 <malloc>
   d8cc2:	6270      	str	r0, [r6, #36]	; 0x24
   d8cc4:	6044      	str	r4, [r0, #4]
   d8cc6:	6084      	str	r4, [r0, #8]
   d8cc8:	6004      	str	r4, [r0, #0]
   d8cca:	60c4      	str	r4, [r0, #12]
   d8ccc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d8cd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d8cd4:	b94c      	cbnz	r4, d8cea <__pow5mult+0x56>
   d8cd6:	f240 2171 	movw	r1, #625	; 0x271
   d8cda:	4630      	mov	r0, r6
   d8cdc:	f7ff ff40 	bl	d8b60 <__i2b>
   d8ce0:	2300      	movs	r3, #0
   d8ce2:	f8c8 0008 	str.w	r0, [r8, #8]
   d8ce6:	4604      	mov	r4, r0
   d8ce8:	6003      	str	r3, [r0, #0]
   d8cea:	f04f 0800 	mov.w	r8, #0
   d8cee:	07eb      	lsls	r3, r5, #31
   d8cf0:	d50a      	bpl.n	d8d08 <__pow5mult+0x74>
   d8cf2:	4639      	mov	r1, r7
   d8cf4:	4622      	mov	r2, r4
   d8cf6:	4630      	mov	r0, r6
   d8cf8:	f7ff ff3b 	bl	d8b72 <__multiply>
   d8cfc:	4639      	mov	r1, r7
   d8cfe:	4681      	mov	r9, r0
   d8d00:	4630      	mov	r0, r6
   d8d02:	f7ff fe50 	bl	d89a6 <_Bfree>
   d8d06:	464f      	mov	r7, r9
   d8d08:	106d      	asrs	r5, r5, #1
   d8d0a:	d00c      	beq.n	d8d26 <__pow5mult+0x92>
   d8d0c:	6820      	ldr	r0, [r4, #0]
   d8d0e:	b108      	cbz	r0, d8d14 <__pow5mult+0x80>
   d8d10:	4604      	mov	r4, r0
   d8d12:	e7ec      	b.n	d8cee <__pow5mult+0x5a>
   d8d14:	4622      	mov	r2, r4
   d8d16:	4621      	mov	r1, r4
   d8d18:	4630      	mov	r0, r6
   d8d1a:	f7ff ff2a 	bl	d8b72 <__multiply>
   d8d1e:	6020      	str	r0, [r4, #0]
   d8d20:	f8c0 8000 	str.w	r8, [r0]
   d8d24:	e7f4      	b.n	d8d10 <__pow5mult+0x7c>
   d8d26:	4638      	mov	r0, r7
   d8d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8d2c:	000d9800 	.word	0x000d9800

000d8d30 <__lshift>:
   d8d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8d34:	460c      	mov	r4, r1
   d8d36:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d8d3a:	6926      	ldr	r6, [r4, #16]
   d8d3c:	6849      	ldr	r1, [r1, #4]
   d8d3e:	68a3      	ldr	r3, [r4, #8]
   d8d40:	4456      	add	r6, sl
   d8d42:	4607      	mov	r7, r0
   d8d44:	4691      	mov	r9, r2
   d8d46:	1c75      	adds	r5, r6, #1
   d8d48:	42ab      	cmp	r3, r5
   d8d4a:	da02      	bge.n	d8d52 <__lshift+0x22>
   d8d4c:	3101      	adds	r1, #1
   d8d4e:	005b      	lsls	r3, r3, #1
   d8d50:	e7fa      	b.n	d8d48 <__lshift+0x18>
   d8d52:	4638      	mov	r0, r7
   d8d54:	f7ff fdf2 	bl	d893c <_Balloc>
   d8d58:	2300      	movs	r3, #0
   d8d5a:	4680      	mov	r8, r0
   d8d5c:	f100 0114 	add.w	r1, r0, #20
   d8d60:	461a      	mov	r2, r3
   d8d62:	4553      	cmp	r3, sl
   d8d64:	da03      	bge.n	d8d6e <__lshift+0x3e>
   d8d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   d8d6a:	3301      	adds	r3, #1
   d8d6c:	e7f9      	b.n	d8d62 <__lshift+0x32>
   d8d6e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   d8d72:	6920      	ldr	r0, [r4, #16]
   d8d74:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   d8d78:	f019 091f 	ands.w	r9, r9, #31
   d8d7c:	f104 0114 	add.w	r1, r4, #20
   d8d80:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   d8d84:	d014      	beq.n	d8db0 <__lshift+0x80>
   d8d86:	f1c9 0c20 	rsb	ip, r9, #32
   d8d8a:	2200      	movs	r2, #0
   d8d8c:	6808      	ldr	r0, [r1, #0]
   d8d8e:	fa00 f009 	lsl.w	r0, r0, r9
   d8d92:	4302      	orrs	r2, r0
   d8d94:	469a      	mov	sl, r3
   d8d96:	f843 2b04 	str.w	r2, [r3], #4
   d8d9a:	f851 2b04 	ldr.w	r2, [r1], #4
   d8d9e:	458e      	cmp	lr, r1
   d8da0:	fa22 f20c 	lsr.w	r2, r2, ip
   d8da4:	d8f2      	bhi.n	d8d8c <__lshift+0x5c>
   d8da6:	f8ca 2004 	str.w	r2, [sl, #4]
   d8daa:	b142      	cbz	r2, d8dbe <__lshift+0x8e>
   d8dac:	1cb5      	adds	r5, r6, #2
   d8dae:	e006      	b.n	d8dbe <__lshift+0x8e>
   d8db0:	3b04      	subs	r3, #4
   d8db2:	f851 2b04 	ldr.w	r2, [r1], #4
   d8db6:	f843 2f04 	str.w	r2, [r3, #4]!
   d8dba:	458e      	cmp	lr, r1
   d8dbc:	d8f9      	bhi.n	d8db2 <__lshift+0x82>
   d8dbe:	3d01      	subs	r5, #1
   d8dc0:	4638      	mov	r0, r7
   d8dc2:	f8c8 5010 	str.w	r5, [r8, #16]
   d8dc6:	4621      	mov	r1, r4
   d8dc8:	f7ff fded 	bl	d89a6 <_Bfree>
   d8dcc:	4640      	mov	r0, r8
   d8dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d8dd2 <__mcmp>:
   d8dd2:	6903      	ldr	r3, [r0, #16]
   d8dd4:	690a      	ldr	r2, [r1, #16]
   d8dd6:	1a9b      	subs	r3, r3, r2
   d8dd8:	b510      	push	{r4, lr}
   d8dda:	d111      	bne.n	d8e00 <__mcmp+0x2e>
   d8ddc:	0092      	lsls	r2, r2, #2
   d8dde:	3014      	adds	r0, #20
   d8de0:	3114      	adds	r1, #20
   d8de2:	1883      	adds	r3, r0, r2
   d8de4:	440a      	add	r2, r1
   d8de6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   d8dea:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   d8dee:	428c      	cmp	r4, r1
   d8df0:	d002      	beq.n	d8df8 <__mcmp+0x26>
   d8df2:	d307      	bcc.n	d8e04 <__mcmp+0x32>
   d8df4:	2001      	movs	r0, #1
   d8df6:	bd10      	pop	{r4, pc}
   d8df8:	4298      	cmp	r0, r3
   d8dfa:	d3f4      	bcc.n	d8de6 <__mcmp+0x14>
   d8dfc:	2000      	movs	r0, #0
   d8dfe:	bd10      	pop	{r4, pc}
   d8e00:	4618      	mov	r0, r3
   d8e02:	bd10      	pop	{r4, pc}
   d8e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8e08:	bd10      	pop	{r4, pc}

000d8e0a <__mdiff>:
   d8e0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8e0e:	460c      	mov	r4, r1
   d8e10:	4607      	mov	r7, r0
   d8e12:	4611      	mov	r1, r2
   d8e14:	4620      	mov	r0, r4
   d8e16:	4615      	mov	r5, r2
   d8e18:	f7ff ffdb 	bl	d8dd2 <__mcmp>
   d8e1c:	1e06      	subs	r6, r0, #0
   d8e1e:	d108      	bne.n	d8e32 <__mdiff+0x28>
   d8e20:	4631      	mov	r1, r6
   d8e22:	4638      	mov	r0, r7
   d8e24:	f7ff fd8a 	bl	d893c <_Balloc>
   d8e28:	2301      	movs	r3, #1
   d8e2a:	6103      	str	r3, [r0, #16]
   d8e2c:	6146      	str	r6, [r0, #20]
   d8e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8e32:	bfbc      	itt	lt
   d8e34:	4623      	movlt	r3, r4
   d8e36:	462c      	movlt	r4, r5
   d8e38:	4638      	mov	r0, r7
   d8e3a:	6861      	ldr	r1, [r4, #4]
   d8e3c:	bfba      	itte	lt
   d8e3e:	461d      	movlt	r5, r3
   d8e40:	2601      	movlt	r6, #1
   d8e42:	2600      	movge	r6, #0
   d8e44:	f7ff fd7a 	bl	d893c <_Balloc>
   d8e48:	692b      	ldr	r3, [r5, #16]
   d8e4a:	60c6      	str	r6, [r0, #12]
   d8e4c:	6926      	ldr	r6, [r4, #16]
   d8e4e:	f105 0914 	add.w	r9, r5, #20
   d8e52:	3414      	adds	r4, #20
   d8e54:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   d8e58:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   d8e5c:	f100 0514 	add.w	r5, r0, #20
   d8e60:	f04f 0c00 	mov.w	ip, #0
   d8e64:	f854 3b04 	ldr.w	r3, [r4], #4
   d8e68:	f859 2b04 	ldr.w	r2, [r9], #4
   d8e6c:	fa1c f183 	uxtah	r1, ip, r3
   d8e70:	fa1f fe82 	uxth.w	lr, r2
   d8e74:	0c12      	lsrs	r2, r2, #16
   d8e76:	ebce 0101 	rsb	r1, lr, r1
   d8e7a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   d8e7e:	eb03 4321 	add.w	r3, r3, r1, asr #16
   d8e82:	b289      	uxth	r1, r1
   d8e84:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d8e88:	45c8      	cmp	r8, r9
   d8e8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   d8e8e:	46a6      	mov	lr, r4
   d8e90:	f845 3b04 	str.w	r3, [r5], #4
   d8e94:	d8e6      	bhi.n	d8e64 <__mdiff+0x5a>
   d8e96:	45be      	cmp	lr, r7
   d8e98:	d20e      	bcs.n	d8eb8 <__mdiff+0xae>
   d8e9a:	f85e 1b04 	ldr.w	r1, [lr], #4
   d8e9e:	fa1c f281 	uxtah	r2, ip, r1
   d8ea2:	1413      	asrs	r3, r2, #16
   d8ea4:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   d8ea8:	b292      	uxth	r2, r2
   d8eaa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   d8eae:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d8eb2:	f845 2b04 	str.w	r2, [r5], #4
   d8eb6:	e7ee      	b.n	d8e96 <__mdiff+0x8c>
   d8eb8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   d8ebc:	b90b      	cbnz	r3, d8ec2 <__mdiff+0xb8>
   d8ebe:	3e01      	subs	r6, #1
   d8ec0:	e7fa      	b.n	d8eb8 <__mdiff+0xae>
   d8ec2:	6106      	str	r6, [r0, #16]
   d8ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d8ec8 <__ulp>:
   d8ec8:	4b12      	ldr	r3, [pc, #72]	; (d8f14 <__ulp+0x4c>)
   d8eca:	ee10 2a90 	vmov	r2, s1
   d8ece:	401a      	ands	r2, r3
   d8ed0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   d8ed4:	2b00      	cmp	r3, #0
   d8ed6:	dd02      	ble.n	d8ede <__ulp+0x16>
   d8ed8:	2000      	movs	r0, #0
   d8eda:	4619      	mov	r1, r3
   d8edc:	e017      	b.n	d8f0e <__ulp+0x46>
   d8ede:	425b      	negs	r3, r3
   d8ee0:	151b      	asrs	r3, r3, #20
   d8ee2:	2b13      	cmp	r3, #19
   d8ee4:	f04f 0000 	mov.w	r0, #0
   d8ee8:	f04f 0100 	mov.w	r1, #0
   d8eec:	dc04      	bgt.n	d8ef8 <__ulp+0x30>
   d8eee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   d8ef2:	fa42 f103 	asr.w	r1, r2, r3
   d8ef6:	e00a      	b.n	d8f0e <__ulp+0x46>
   d8ef8:	3b14      	subs	r3, #20
   d8efa:	2b1e      	cmp	r3, #30
   d8efc:	f04f 0201 	mov.w	r2, #1
   d8f00:	bfda      	itte	le
   d8f02:	f1c3 031f 	rsble	r3, r3, #31
   d8f06:	fa02 f303 	lslle.w	r3, r2, r3
   d8f0a:	4613      	movgt	r3, r2
   d8f0c:	4618      	mov	r0, r3
   d8f0e:	ec41 0b10 	vmov	d0, r0, r1
   d8f12:	4770      	bx	lr
   d8f14:	7ff00000 	.word	0x7ff00000

000d8f18 <__b2d>:
   d8f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8f1a:	6905      	ldr	r5, [r0, #16]
   d8f1c:	f100 0614 	add.w	r6, r0, #20
   d8f20:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   d8f24:	1f2f      	subs	r7, r5, #4
   d8f26:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d8f2a:	4620      	mov	r0, r4
   d8f2c:	f7ff fdcb 	bl	d8ac6 <__hi0bits>
   d8f30:	f1c0 0320 	rsb	r3, r0, #32
   d8f34:	280a      	cmp	r0, #10
   d8f36:	600b      	str	r3, [r1, #0]
   d8f38:	dc14      	bgt.n	d8f64 <__b2d+0x4c>
   d8f3a:	f1c0 0e0b 	rsb	lr, r0, #11
   d8f3e:	fa24 f10e 	lsr.w	r1, r4, lr
   d8f42:	42be      	cmp	r6, r7
   d8f44:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   d8f48:	bf34      	ite	cc
   d8f4a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d8f4e:	2100      	movcs	r1, #0
   d8f50:	3015      	adds	r0, #21
   d8f52:	fa04 f000 	lsl.w	r0, r4, r0
   d8f56:	fa21 f10e 	lsr.w	r1, r1, lr
   d8f5a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d8f5e:	ea40 0201 	orr.w	r2, r0, r1
   d8f62:	e023      	b.n	d8fac <__b2d+0x94>
   d8f64:	42be      	cmp	r6, r7
   d8f66:	bf3a      	itte	cc
   d8f68:	f1a5 0708 	subcc.w	r7, r5, #8
   d8f6c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d8f70:	2100      	movcs	r1, #0
   d8f72:	380b      	subs	r0, #11
   d8f74:	d015      	beq.n	d8fa2 <__b2d+0x8a>
   d8f76:	4084      	lsls	r4, r0
   d8f78:	f1c0 0520 	rsb	r5, r0, #32
   d8f7c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   d8f80:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   d8f84:	42b7      	cmp	r7, r6
   d8f86:	fa21 fe05 	lsr.w	lr, r1, r5
   d8f8a:	ea44 030e 	orr.w	r3, r4, lr
   d8f8e:	bf8c      	ite	hi
   d8f90:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   d8f94:	2400      	movls	r4, #0
   d8f96:	fa01 f000 	lsl.w	r0, r1, r0
   d8f9a:	40ec      	lsrs	r4, r5
   d8f9c:	ea40 0204 	orr.w	r2, r0, r4
   d8fa0:	e004      	b.n	d8fac <__b2d+0x94>
   d8fa2:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   d8fa6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d8faa:	460a      	mov	r2, r1
   d8fac:	ec43 2b10 	vmov	d0, r2, r3
   d8fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8fb2 <__d2b>:
   d8fb2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d8fb6:	460e      	mov	r6, r1
   d8fb8:	2101      	movs	r1, #1
   d8fba:	ec59 8b10 	vmov	r8, r9, d0
   d8fbe:	4615      	mov	r5, r2
   d8fc0:	f7ff fcbc 	bl	d893c <_Balloc>
   d8fc4:	f3c9 540a 	ubfx	r4, r9, #20, #11
   d8fc8:	4607      	mov	r7, r0
   d8fca:	f3c9 0313 	ubfx	r3, r9, #0, #20
   d8fce:	b10c      	cbz	r4, d8fd4 <__d2b+0x22>
   d8fd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8fd4:	9301      	str	r3, [sp, #4]
   d8fd6:	f1b8 0f00 	cmp.w	r8, #0
   d8fda:	d019      	beq.n	d9010 <__d2b+0x5e>
   d8fdc:	a802      	add	r0, sp, #8
   d8fde:	f840 8d08 	str.w	r8, [r0, #-8]!
   d8fe2:	f7ff fd90 	bl	d8b06 <__lo0bits>
   d8fe6:	9b00      	ldr	r3, [sp, #0]
   d8fe8:	b148      	cbz	r0, d8ffe <__d2b+0x4c>
   d8fea:	9a01      	ldr	r2, [sp, #4]
   d8fec:	f1c0 0120 	rsb	r1, r0, #32
   d8ff0:	fa02 f101 	lsl.w	r1, r2, r1
   d8ff4:	430b      	orrs	r3, r1
   d8ff6:	40c2      	lsrs	r2, r0
   d8ff8:	617b      	str	r3, [r7, #20]
   d8ffa:	9201      	str	r2, [sp, #4]
   d8ffc:	e000      	b.n	d9000 <__d2b+0x4e>
   d8ffe:	617b      	str	r3, [r7, #20]
   d9000:	9b01      	ldr	r3, [sp, #4]
   d9002:	61bb      	str	r3, [r7, #24]
   d9004:	2b00      	cmp	r3, #0
   d9006:	bf14      	ite	ne
   d9008:	2102      	movne	r1, #2
   d900a:	2101      	moveq	r1, #1
   d900c:	6139      	str	r1, [r7, #16]
   d900e:	e007      	b.n	d9020 <__d2b+0x6e>
   d9010:	a801      	add	r0, sp, #4
   d9012:	f7ff fd78 	bl	d8b06 <__lo0bits>
   d9016:	9b01      	ldr	r3, [sp, #4]
   d9018:	617b      	str	r3, [r7, #20]
   d901a:	2101      	movs	r1, #1
   d901c:	6139      	str	r1, [r7, #16]
   d901e:	3020      	adds	r0, #32
   d9020:	b134      	cbz	r4, d9030 <__d2b+0x7e>
   d9022:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   d9026:	4404      	add	r4, r0
   d9028:	6034      	str	r4, [r6, #0]
   d902a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   d902e:	e009      	b.n	d9044 <__d2b+0x92>
   d9030:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   d9034:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   d9038:	6030      	str	r0, [r6, #0]
   d903a:	6918      	ldr	r0, [r3, #16]
   d903c:	f7ff fd43 	bl	d8ac6 <__hi0bits>
   d9040:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   d9044:	6028      	str	r0, [r5, #0]
   d9046:	4638      	mov	r0, r7
   d9048:	b003      	add	sp, #12
   d904a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d904e <__ratio>:
   d904e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d9052:	4688      	mov	r8, r1
   d9054:	4669      	mov	r1, sp
   d9056:	4681      	mov	r9, r0
   d9058:	f7ff ff5e 	bl	d8f18 <__b2d>
   d905c:	a901      	add	r1, sp, #4
   d905e:	4640      	mov	r0, r8
   d9060:	ec55 4b10 	vmov	r4, r5, d0
   d9064:	f7ff ff58 	bl	d8f18 <__b2d>
   d9068:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d906c:	f8d8 2010 	ldr.w	r2, [r8, #16]
   d9070:	1a9a      	subs	r2, r3, r2
   d9072:	e89d 000a 	ldmia.w	sp, {r1, r3}
   d9076:	1ac9      	subs	r1, r1, r3
   d9078:	ec57 6b10 	vmov	r6, r7, d0
   d907c:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   d9080:	2b00      	cmp	r3, #0
   d9082:	bfcc      	ite	gt
   d9084:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   d9088:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   d908c:	4632      	mov	r2, r6
   d908e:	463b      	mov	r3, r7
   d9090:	4620      	mov	r0, r4
   d9092:	4629      	mov	r1, r5
   d9094:	f7fd fbb0 	bl	d67f8 <__aeabi_ddiv>
   d9098:	ec41 0b10 	vmov	d0, r0, r1
   d909c:	b003      	add	sp, #12
   d909e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d90a2 <__copybits>:
   d90a2:	3901      	subs	r1, #1
   d90a4:	b510      	push	{r4, lr}
   d90a6:	1149      	asrs	r1, r1, #5
   d90a8:	6914      	ldr	r4, [r2, #16]
   d90aa:	3101      	adds	r1, #1
   d90ac:	f102 0314 	add.w	r3, r2, #20
   d90b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d90b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d90b8:	42a3      	cmp	r3, r4
   d90ba:	4602      	mov	r2, r0
   d90bc:	d204      	bcs.n	d90c8 <__copybits+0x26>
   d90be:	f853 2b04 	ldr.w	r2, [r3], #4
   d90c2:	f840 2b04 	str.w	r2, [r0], #4
   d90c6:	e7f7      	b.n	d90b8 <__copybits+0x16>
   d90c8:	2300      	movs	r3, #0
   d90ca:	428a      	cmp	r2, r1
   d90cc:	d202      	bcs.n	d90d4 <__copybits+0x32>
   d90ce:	f842 3b04 	str.w	r3, [r2], #4
   d90d2:	e7fa      	b.n	d90ca <__copybits+0x28>
   d90d4:	bd10      	pop	{r4, pc}

000d90d6 <__any_on>:
   d90d6:	f100 0214 	add.w	r2, r0, #20
   d90da:	6900      	ldr	r0, [r0, #16]
   d90dc:	114b      	asrs	r3, r1, #5
   d90de:	4298      	cmp	r0, r3
   d90e0:	b510      	push	{r4, lr}
   d90e2:	db0c      	blt.n	d90fe <__any_on+0x28>
   d90e4:	dd0c      	ble.n	d9100 <__any_on+0x2a>
   d90e6:	f011 011f 	ands.w	r1, r1, #31
   d90ea:	d009      	beq.n	d9100 <__any_on+0x2a>
   d90ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   d90f0:	fa24 f001 	lsr.w	r0, r4, r1
   d90f4:	fa00 f101 	lsl.w	r1, r0, r1
   d90f8:	428c      	cmp	r4, r1
   d90fa:	d10c      	bne.n	d9116 <__any_on+0x40>
   d90fc:	e000      	b.n	d9100 <__any_on+0x2a>
   d90fe:	4603      	mov	r3, r0
   d9100:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d9104:	4293      	cmp	r3, r2
   d9106:	d904      	bls.n	d9112 <__any_on+0x3c>
   d9108:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   d910c:	2900      	cmp	r1, #0
   d910e:	d0f9      	beq.n	d9104 <__any_on+0x2e>
   d9110:	e001      	b.n	d9116 <__any_on+0x40>
   d9112:	2000      	movs	r0, #0
   d9114:	bd10      	pop	{r4, pc}
   d9116:	2001      	movs	r0, #1
   d9118:	bd10      	pop	{r4, pc}

000d911a <_calloc_r>:
   d911a:	b538      	push	{r3, r4, r5, lr}
   d911c:	fb02 f401 	mul.w	r4, r2, r1
   d9120:	4621      	mov	r1, r4
   d9122:	f7fb fcf1 	bl	d4b08 <_malloc_r>
   d9126:	4605      	mov	r5, r0
   d9128:	b118      	cbz	r0, d9132 <_calloc_r+0x18>
   d912a:	4622      	mov	r2, r4
   d912c:	2100      	movs	r1, #0
   d912e:	f7fd fe96 	bl	d6e5e <memset>
   d9132:	4628      	mov	r0, r5
   d9134:	bd38      	pop	{r3, r4, r5, pc}
	...

000d9138 <nanf>:
   d9138:	ed9f 0a01 	vldr	s0, [pc, #4]	; d9140 <nanf+0x8>
   d913c:	4770      	bx	lr
   d913e:	bf00      	nop
   d9140:	7fc00000 	.word	0x7fc00000

000d9144 <__env_lock>:
   d9144:	4770      	bx	lr

000d9146 <__env_unlock>:
   d9146:	4770      	bx	lr

000d9148 <dynalib_user>:
   d9148:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d9158:	0000 0000 3425 312e 2066 416d 0068 3325     ....%4.1f mAh.%3
   d9168:	312e 2066 2525 5300 7465 432d 7061 6361     .1f %%.Set-Capac
   d9178:	7469 0079 6553 2d74 6843 7261 6567 5200     ity.Set-Charge.R
   d9188:	7365 7465 542d 7365 0074 544c 3443 3531     eset-Test.LTC415
   d9198:	2030 6f43 6c75 6d6f 2062 6f43 6e75 6574     0 Coulomb Counte
   d91a8:	0072 7453 7261 7574 0070 7453 7461 7375     r.Startup.Status
   d91b8:	203a 3425 302e 2066 416d 2c68 2520 2e33     : %4.0f mAh, %3.
   d91c8:	6631 2525 6320 6168 6772 2c65 2520 2e34     1f%% charge, %4.
   d91d8:	6633 6d20 2041 7461 7420 6d69 2065 6925     3f mA at time %i
   d91e8:	253a 3a69 6925 253a 2069 6573 6f63 646e     :%i:%i:%i second
   d91f8:	0073 7453 7461 7375 0000 0000               s.Status....

000d9204 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d920c:	4b8d 000d 4b93 000d 4be9 000d 4ba1 000d     .K...K...K...K..
   d921c:	4b8f 000d                                   .K..

000d9220 <_ZTVN5spark13EthernetClassE>:
	...
   d9228:	51ff 000d 51f5 000d 51eb 000d 51e1 000d     .Q...Q...Q...Q..
   d9238:	51d5 000d 51c9 000d 51bd 000d 51b5 000d     .Q...Q...Q...Q..
   d9248:	51ab 000d 51a1 000d 55cd 000d               .Q...Q...U..

000d9254 <_ZTV7TwoWire>:
	...
   d925c:	521d 000d 5267 000d 523f 000d 521f 000d     .R..gR..?R...R..
   d926c:	5247 000d 524f 000d 5257 000d 525f 000d     GR..OR..WR.._R..

000d927c <_ZTV9IPAddress>:
	...
   d9284:	5305 000d 52f5 000d 52f7 000d 6162 6475     .S...R...R..baud
   d9294:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d92a4:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d92b4:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d92c4:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d92d4:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d92e4:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d92f4:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d9304:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d9314:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d9324:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d9334:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
   d9344:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
   d9354:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d9364:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000d9370 <_ZTVN5spark9MeshClassE>:
	...
   d9378:	5447 000d 543d 000d 5433 000d 5429 000d     GT..=T..3T..)T..
   d9388:	541d 000d 5411 000d 5405 000d 53fd 000d     .T...T...T...S..
   d9398:	53f3 000d 53e9 000d 55cd 000d               .S...S...U..

000d93a4 <_ZTVN5spark12NetworkClassE>:
	...
   d93ac:	5565 000d 556f 000d 5579 000d 5583 000d     eU..oU..yU...U..
   d93bc:	558d 000d 5599 000d 55a5 000d 55b1 000d     .U...U...U...U..
   d93cc:	55b9 000d 55c3 000d 55cd 000d               .U...U...U..

000d93d8 <_ZTV8SPIClass>:
	...
   d93e0:	5769 000d 576b 000d 2b25 3330 3a64 3025     iW..kW..%+03d:%0
   d93f0:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d9400:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d9410 <_ZTV11USARTSerial>:
	...
   d9418:	5a1d 000d 5a6d 000d 5a7b 000d 56ad 000d     .Z..mZ..{Z...V..
   d9428:	5a31 000d 5a53 000d 5a3f 000d 5a67 000d     1Z..SZ..?Z..gZ..
   d9438:	5a1f 000d 5a23 000d                         .Z..#Z..

000d9440 <_ZTV9USBSerial>:
	...
   d9448:	5b25 000d 5b75 000d 5b83 000d 56ad 000d     %[..u[...[...V..
   d9458:	5b61 000d 5b27 000d 5b3d 000d 5b6f 000d     a[..'[..=[..o[..
   d9468:	5b53 000d 5b21 000d                         S[..![..

000d9470 <_ZTVN5spark9WiFiClassE>:
	...
   d9478:	5c87 000d 5c7d 000d 5c73 000d 5c29 000d     .\..}\..s\..)\..
   d9488:	5c67 000d 5c5b 000d 5c4f 000d 5c47 000d     g\..[\..O\..G\..
   d9498:	5c3d 000d 5c33 000d 55cd 000d               =\..3\...U..

000d94a4 <_ZSt7nothrow>:
	...

000d94a5 <_ctype_>:
   d94a5:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d94b5:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d94c5:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d94d5:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d94e5:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d94f5:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d9505:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d9515:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d9525:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d95a8 <__sf_fake_stdin>:
	...

000d95c8 <__sf_fake_stdout>:
	...

000d95e8 <__sf_fake_stderr>:
	...
   d9608:	0043 4f50 4953 0058 002e 0000               C.POSIX.....

000d9614 <__month_lengths>:
   d9614:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d9624:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d9634:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d9644:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d9654:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d9664:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000d9674 <fpi.5344>:
   d9674:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   d9684:	0000 0000                                   ....

000d9688 <fpinan.5380>:
   d9688:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   d9698:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

000d96a8 <tinytens>:
   d96a8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   d96b8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   d96c8:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   d96d8:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   d96e8:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   d96f8:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   d9708:	2575 006e 0000 0000                         u%n.....

000d9710 <__mprec_tens>:
   d9710:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   d9720:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   d9730:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   d9740:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   d9750:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   d9760:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   d9770:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   d9780:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   d9790:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   d97a0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   d97b0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   d97c0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   d97d0:	9db4 79d9 7843 44ea                         ...yCx.D

000d97d8 <__mprec_bigtens>:
   d97d8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   d97e8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   d97f8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000d9800 <p05.5387>:
   d9800:	0005 0000 0019 0000 007d 0000               ........}...

000d980c <link_const_variable_data_end>:
   d980c:	000d4621 	.word	0x000d4621
   d9810:	000d4b65 	.word	0x000d4b65
   d9814:	000d5209 	.word	0x000d5209
   d9818:	000d53d9 	.word	0x000d53d9
   d981c:	000d5515 	.word	0x000d5515
   d9820:	000d5699 	.word	0x000d5699
   d9824:	000d574d 	.word	0x000d574d
   d9828:	000d58c5 	.word	0x000d58c5
   d982c:	000d5a09 	.word	0x000d5a09
   d9830:	000d5c91 	.word	0x000d5c91
   d9834:	000d5fa5 	.word	0x000d5fa5
   d9838:	000d6069 	.word	0x000d6069
   d983c:	000d60ed 	.word	0x000d60ed
   d9840:	000d6171 	.word	0x000d6171

000d9844 <link_constructors_end>:
	...
