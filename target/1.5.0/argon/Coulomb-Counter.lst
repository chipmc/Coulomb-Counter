
/Users/chipmc/Documents/Maker/Particle/Projects/Coulomb-Counter/target/1.5.0/argon/Coulomb-Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005bb0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9bd0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000134  2003e1d0  000d9bd4  0001e1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004ec  2003e304  2003e304  0002e304  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9d08  000d9d08  00029d08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9d30  000d9d30  00029d30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ece06  00000000  00000000  00029d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000125ec  00000000  00000000  00116b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001fa91  00000000  00000000  00129126  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000026a0  00000000  00000000  00148bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004978  00000000  00000000  0014b257  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000357ef  00000000  00000000  0014fbcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002ab53  00000000  00000000  001853be  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105f32  00000000  00000000  001aff11  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000db64  00000000  00000000  002b5e44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 f85b 	bl	d70ec <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 f860 	bl	d7102 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1d0 	.word	0x2003e1d0
   d404c:	000d9bd4 	.word	0x000d9bd4
   d4050:	2003e304 	.word	0x2003e304
   d4054:	2003e304 	.word	0x2003e304
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 ffcf 	bl	d6000 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d9bc4 	.word	0x000d9bc4
   d4084:	000d9b8c 	.word	0x000d9b8c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bb42 	b.w	d4710 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fac5 	bl	d461c <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 bf75 	b.w	d5f84 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 be57 	b.w	d4d4c <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 be5d 	b.w	d4d5c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 be5b 	b.w	d4d5c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z10coulombISRv>:

  Particle.publish("Status",data,PRIVATE);
}

void coulombISR() {                                                       // Run automatically for falling edge on D2
  coulombFlag = true;                                                     // Set isrflag so main loop knows an interrupt occurred
   d40b8:	4b01      	ldr	r3, [pc, #4]	; (d40c0 <_Z10coulombISRv+0x8>)
   d40ba:	2201      	movs	r2, #1
   d40bc:	701a      	strb	r2, [r3, #0]
   d40be:	4770      	bx	lr
   d40c0:	2003e35d 	.word	0x2003e35d

000d40c4 <_Z12sleepWakeISRv>:
}

void sleepWakeISR() {                                                     // Runs when the device under test changes sleep / wake state
  sleepFlag = true;
   d40c4:	4b01      	ldr	r3, [pc, #4]	; (d40cc <_Z12sleepWakeISRv+0x8>)
   d40c6:	2201      	movs	r2, #1
   d40c8:	701a      	strb	r2, [r3, #0]
   d40ca:	4770      	bx	lr
   d40cc:	2003e364 	.word	0x2003e364

000d40d0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.35.constprop.41>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40d2:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d40d6:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40d8:	f88d 3000 	strb.w	r3, [sp]
   d40dc:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40de:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40e0:	f001 f82e 	bl	d5140 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d40e4:	4628      	mov	r0, r5
   d40e6:	b003      	add	sp, #12
   d40e8:	bd30      	pop	{r4, r5, pc}
   d40ea:	0000      	movs	r0, r0
   d40ec:	0000      	movs	r0, r0
	...

000d40f0 <_Z16makeCalculationsb>:
}

void makeCalculations(bool resetValues) {
   d40f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d40f2:	4d6d      	ldr	r5, [pc, #436]	; (d42a8 <_Z16makeCalculationsb+0x1b8>)
  static int index = 0;
  float runningTotal = 0;
  static bool bufferFull = false;
  int sampleOver = 0;

  if (resetValues) {
   d40f4:	2800      	cmp	r0, #0
   d40f6:	d02a      	beq.n	d414e <_Z16makeCalculationsb+0x5e>
    currentState.startTime = Time.now();                                  // When did we start the test
   d40f8:	f001 fdd1 	bl	d5c9e <_ZN9TimeClass3nowEv>
   d40fc:	4c6b      	ldr	r4, [pc, #428]	; (d42ac <_Z16makeCalculationsb+0x1bc>)
    currentState.currentCapacity_mAh = currentState.startingCapacity_mAh;
    currentState.currentCharge_percent = currentState.startingCharge_percent;
   d40fe:	68e3      	ldr	r3, [r4, #12]
  float runningTotal = 0;
  static bool bufferFull = false;
  int sampleOver = 0;

  if (resetValues) {
    currentState.startTime = Time.now();                                  // When did we start the test
   d4100:	6020      	str	r0, [r4, #0]
    currentState.currentCapacity_mAh = currentState.startingCapacity_mAh;
   d4102:	6860      	ldr	r0, [r4, #4]
    currentState.currentCharge_percent = currentState.startingCharge_percent;
   d4104:	6123      	str	r3, [r4, #16]
  static bool bufferFull = false;
  int sampleOver = 0;

  if (resetValues) {
    currentState.startTime = Time.now();                                  // When did we start the test
    currentState.currentCapacity_mAh = currentState.startingCapacity_mAh;
   d4106:	60a0      	str	r0, [r4, #8]
    currentState.currentCharge_percent = currentState.startingCharge_percent;
    snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",currentState.currentCapacity_mAh);
   d4108:	f002 fb4a 	bl	d67a0 <__aeabi_f2d>
   d410c:	4a68      	ldr	r2, [pc, #416]	; (d42b0 <_Z16makeCalculationsb+0x1c0>)
   d410e:	e9cd 0100 	strd	r0, r1, [sp]
   d4112:	2110      	movs	r1, #16
   d4114:	4867      	ldr	r0, [pc, #412]	; (d42b4 <_Z16makeCalculationsb+0x1c4>)
   d4116:	f000 fe39 	bl	d4d8c <snprintf>
    snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",currentState.currentCharge_percent);
   d411a:	6920      	ldr	r0, [r4, #16]
   d411c:	f002 fb40 	bl	d67a0 <__aeabi_f2d>
   d4120:	4a65      	ldr	r2, [pc, #404]	; (d42b8 <_Z16makeCalculationsb+0x1c8>)
   d4122:	e9cd 0100 	strd	r0, r1, [sp]
   d4126:	2110      	movs	r1, #16
   d4128:	4864      	ldr	r0, [pc, #400]	; (d42bc <_Z16makeCalculationsb+0x1cc>)
   d412a:	f000 fe2f 	bl	d4d8c <snprintf>
    strcpy(currentStr,"NA");
   d412e:	4964      	ldr	r1, [pc, #400]	; (d42c0 <_Z16makeCalculationsb+0x1d0>)
   d4130:	4864      	ldr	r0, [pc, #400]	; (d42c4 <_Z16makeCalculationsb+0x1d4>)
   d4132:	f003 f821 	bl	d7178 <strcpy>
    strcpy(averageCurrentStr,"NA");
   d4136:	4962      	ldr	r1, [pc, #392]	; (d42c0 <_Z16makeCalculationsb+0x1d0>)
   d4138:	4863      	ldr	r0, [pc, #396]	; (d42c8 <_Z16makeCalculationsb+0x1d8>)
   d413a:	f003 f81d 	bl	d7178 <strcpy>
    lasttime = 0;
    index = 0;
   d413e:	4a63      	ldr	r2, [pc, #396]	; (d42cc <_Z16makeCalculationsb+0x1dc>)
    currentState.currentCharge_percent = currentState.startingCharge_percent;
    snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",currentState.currentCapacity_mAh);
    snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",currentState.currentCharge_percent);
    strcpy(currentStr,"NA");
    strcpy(averageCurrentStr,"NA");
    lasttime = 0;
   d4140:	2300      	movs	r3, #0
    index = 0;
   d4142:	6013      	str	r3, [r2, #0]
    currentState.currentCharge_percent = currentState.startingCharge_percent;
    snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",currentState.currentCapacity_mAh);
    snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",currentState.currentCharge_percent);
    strcpy(currentStr,"NA");
    strcpy(averageCurrentStr,"NA");
    lasttime = 0;
   d4144:	602b      	str	r3, [r5, #0]
    index = 0;
    currentStateWriteNeeded = true;
   d4146:	4b62      	ldr	r3, [pc, #392]	; (d42d0 <_Z16makeCalculationsb+0x1e0>)
   d4148:	2201      	movs	r2, #1
   d414a:	701a      	strb	r2, [r3, #0]
    return; 
   d414c:	e0a4      	b.n	d4298 <_Z16makeCalculationsb+0x1a8>
  }

  if (lasttime == 0) {                                                    // First time through we are getting a bad reading - bail on this one.
   d414e:	682b      	ldr	r3, [r5, #0]
   d4150:	4e60      	ldr	r6, [pc, #384]	; (d42d4 <_Z16makeCalculationsb+0x1e4>)
   d4152:	b92b      	cbnz	r3, d4160 <_Z16makeCalculationsb+0x70>
    lasttime = runTime;
   d4154:	6833      	ldr	r3, [r6, #0]
   d4156:	602b      	str	r3, [r5, #0]
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4158:	f000 fbec 	bl	d4934 <HAL_Timer_Get_Micro_Seconds>
    runTime = micros();
   d415c:	6030      	str	r0, [r6, #0]
    return;
   d415e:	e09b      	b.n	d4298 <_Z16makeCalculationsb+0x1a8>
  }

  lasttime = runTime;                                                     // Note that first interrupt will be incorrect (no previous time!)
   d4160:	6833      	ldr	r3, [r6, #0]
   d4162:	602b      	str	r3, [r5, #0]
   d4164:	f000 fbe6 	bl	d4934 <HAL_Timer_Get_Micro_Seconds>
  runTime = micros();
   d4168:	6030      	str	r0, [r6, #0]

  boolean polarity = digitalRead(polPin);                                         // Get polarity value 
   d416a:	2003      	movs	r0, #3
   d416c:	f001 ffc0 	bl	d60f0 <digitalRead>
   d4170:	4c4e      	ldr	r4, [pc, #312]	; (d42ac <_Z16makeCalculationsb+0x1bc>)
   d4172:	eddf 6a59 	vldr	s13, [pc, #356]	; d42d8 <_Z16makeCalculationsb+0x1e8>
   d4176:	4b59      	ldr	r3, [pc, #356]	; (d42dc <_Z16makeCalculationsb+0x1ec>)
  if (polarity) {                                                         // high = charging
   d4178:	4607      	mov	r7, r0
   d417a:	b160      	cbz	r0, d4196 <_Z16makeCalculationsb+0xa6>
    currentState.currentCapacity_mAh += ah_quanta;
   d417c:	ed94 7a02 	vldr	s14, [r4, #8]
   d4180:	ee77 7a26 	vadd.f32	s15, s14, s13
    currentState.currentCharge_percent += percent_quanta;
   d4184:	ed93 7a00 	vldr	s14, [r3]
  lasttime = runTime;                                                     // Note that first interrupt will be incorrect (no previous time!)
  runTime = micros();

  boolean polarity = digitalRead(polPin);                                         // Get polarity value 
  if (polarity) {                                                         // high = charging
    currentState.currentCapacity_mAh += ah_quanta;
   d4188:	edc4 7a02 	vstr	s15, [r4, #8]
    currentState.currentCharge_percent += percent_quanta;
   d418c:	edd4 7a04 	vldr	s15, [r4, #16]
   d4190:	ee77 7a87 	vadd.f32	s15, s15, s14
   d4194:	e00b      	b.n	d41ae <_Z16makeCalculationsb+0xbe>
  }
  else {                                                                  // low = discharging
    currentState.currentCapacity_mAh -= ah_quanta;
   d4196:	edd4 7a02 	vldr	s15, [r4, #8]
    currentState.currentCharge_percent -= percent_quanta;
   d419a:	ed93 7a00 	vldr	s14, [r3]
  if (polarity) {                                                         // high = charging
    currentState.currentCapacity_mAh += ah_quanta;
    currentState.currentCharge_percent += percent_quanta;
  }
  else {                                                                  // low = discharging
    currentState.currentCapacity_mAh -= ah_quanta;
   d419e:	ee77 7ae6 	vsub.f32	s15, s15, s13
   d41a2:	edc4 7a02 	vstr	s15, [r4, #8]
    currentState.currentCharge_percent -= percent_quanta;
   d41a6:	edd4 7a04 	vldr	s15, [r4, #16]
   d41aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
  }

  currentState.currentCurrent = 614.4/((runTime-lasttime)/1000000);       // Calculate mA from time delay (optional)
   d41ae:	6828      	ldr	r0, [r5, #0]
   d41b0:	6833      	ldr	r3, [r6, #0]
    currentState.currentCapacity_mAh += ah_quanta;
    currentState.currentCharge_percent += percent_quanta;
  }
  else {                                                                  // low = discharging
    currentState.currentCapacity_mAh -= ah_quanta;
    currentState.currentCharge_percent -= percent_quanta;
   d41b2:	edc4 7a04 	vstr	s15, [r4, #16]
  }

  currentState.currentCurrent = 614.4/((runTime-lasttime)/1000000);       // Calculate mA from time delay (optional)
   d41b6:	1a1b      	subs	r3, r3, r0
   d41b8:	4849      	ldr	r0, [pc, #292]	; (d42e0 <_Z16makeCalculationsb+0x1f0>)
   d41ba:	fbb3 f0f0 	udiv	r0, r3, r0
   d41be:	f002 facd 	bl	d675c <__aeabi_ui2d>
   d41c2:	4602      	mov	r2, r0
   d41c4:	460b      	mov	r3, r1
   d41c6:	a136      	add	r1, pc, #216	; (adr r1, d42a0 <_Z16makeCalculationsb+0x1b0>)
   d41c8:	e9d1 0100 	ldrd	r0, r1, [r1]
   d41cc:	f002 fc66 	bl	d6a9c <__aeabi_ddiv>
   d41d0:	f002 fe32 	bl	d6e38 <__aeabi_d2f>
   d41d4:	ee07 0a90 	vmov	s15, r0
  if (polarity) currentState.currentCurrent = -1.0 * currentState.currentCurrent;// If charging, we'll set mA negative (optional)
   d41d8:	b10f      	cbz	r7, d41de <_Z16makeCalculationsb+0xee>
   d41da:	eef1 7a67 	vneg.f32	s15, s15

  if (batteryTestMode == false && sleepState) {
   d41de:	4b41      	ldr	r3, [pc, #260]	; (d42e4 <_Z16makeCalculationsb+0x1f4>)
    currentState.currentCapacity_mAh -= ah_quanta;
    currentState.currentCharge_percent -= percent_quanta;
  }

  currentState.currentCurrent = 614.4/((runTime-lasttime)/1000000);       // Calculate mA from time delay (optional)
  if (polarity) currentState.currentCurrent = -1.0 * currentState.currentCurrent;// If charging, we'll set mA negative (optional)
   d41e0:	edc4 7a05 	vstr	s15, [r4, #20]

  if (batteryTestMode == false && sleepState) {
   d41e4:	781b      	ldrb	r3, [r3, #0]
   d41e6:	bb7b      	cbnz	r3, d4248 <_Z16makeCalculationsb+0x158>
   d41e8:	4b3f      	ldr	r3, [pc, #252]	; (d42e8 <_Z16makeCalculationsb+0x1f8>)
   d41ea:	781b      	ldrb	r3, [r3, #0]
   d41ec:	b363      	cbz	r3, d4248 <_Z16makeCalculationsb+0x158>
    if (index == numReadings || bufferFull) {
   d41ee:	4b37      	ldr	r3, [pc, #220]	; (d42cc <_Z16makeCalculationsb+0x1dc>)
   d41f0:	6819      	ldr	r1, [r3, #0]
   d41f2:	290a      	cmp	r1, #10
   d41f4:	4618      	mov	r0, r3
   d41f6:	f101 0601 	add.w	r6, r1, #1
   d41fa:	4b3c      	ldr	r3, [pc, #240]	; (d42ec <_Z16makeCalculationsb+0x1fc>)
   d41fc:	d001      	beq.n	d4202 <_Z16makeCalculationsb+0x112>
   d41fe:	781a      	ldrb	r2, [r3, #0]
   d4200:	b11a      	cbz	r2, d420a <_Z16makeCalculationsb+0x11a>
      bufferFull = true;
   d4202:	2201      	movs	r2, #1
   d4204:	701a      	strb	r2, [r3, #0]
      sampleOver = numReadings;
   d4206:	230a      	movs	r3, #10
   d4208:	e000      	b.n	d420c <_Z16makeCalculationsb+0x11c>
    }
    else {
      sampleOver = index +1;
   d420a:	4633      	mov	r3, r6
    }
    currentBuffer[index] = currentState.currentCurrent;
   d420c:	4a38      	ldr	r2, [pc, #224]	; (d42f0 <_Z16makeCalculationsb+0x200>)
   d420e:	6965      	ldr	r5, [r4, #20]
  static unsigned long runTime = 0; 
  static unsigned long lasttime = 0;                                      // These are based on micros()
  const int numReadings = 10;               // How Many numbers to average for calibration
  static float currentBuffer[numReadings];       // the readings from the pressure sensor for calibration
  static int index = 0;
  float runningTotal = 0;
   d4210:	ed9f 7a38 	vldr	s14, [pc, #224]	; d42f4 <_Z16makeCalculationsb+0x204>
      sampleOver = numReadings;
    }
    else {
      sampleOver = index +1;
    }
    currentBuffer[index] = currentState.currentCurrent;
   d4214:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   d4218:	600d      	str	r5, [r1, #0]
    index = (index + 1) % numReadings;
   d421a:	210a      	movs	r1, #10
   d421c:	fb96 f5f1 	sdiv	r5, r6, r1
   d4220:	fb01 6115 	mls	r1, r1, r5, r6
   d4224:	6001      	str	r1, [r0, #0]
    for (int i=0; i < sampleOver; i++) runningTotal += currentBuffer[i];
   d4226:	2100      	movs	r1, #0
   d4228:	428b      	cmp	r3, r1
   d422a:	dd05      	ble.n	d4238 <_Z16makeCalculationsb+0x148>
   d422c:	ecf2 7a01 	vldmia	r2!, {s15}
   d4230:	3101      	adds	r1, #1
   d4232:	ee37 7a27 	vadd.f32	s14, s14, s15
   d4236:	e7f7      	b.n	d4228 <_Z16makeCalculationsb+0x138>
    currentState.averageCurrent = runningTotal/sampleOver;               // average of readings
   d4238:	ee07 3a90 	vmov	s15, r3
   d423c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4240:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d4244:	edc4 6a06 	vstr	s13, [r4, #24]
  }

  snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",currentState.currentCapacity_mAh);
   d4248:	68a0      	ldr	r0, [r4, #8]
   d424a:	f002 faa9 	bl	d67a0 <__aeabi_f2d>
   d424e:	4a18      	ldr	r2, [pc, #96]	; (d42b0 <_Z16makeCalculationsb+0x1c0>)
   d4250:	e9cd 0100 	strd	r0, r1, [sp]
   d4254:	2110      	movs	r1, #16
   d4256:	4817      	ldr	r0, [pc, #92]	; (d42b4 <_Z16makeCalculationsb+0x1c4>)
   d4258:	f000 fd98 	bl	d4d8c <snprintf>
  snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",currentState.currentCharge_percent);
   d425c:	6920      	ldr	r0, [r4, #16]
   d425e:	f002 fa9f 	bl	d67a0 <__aeabi_f2d>
   d4262:	4a15      	ldr	r2, [pc, #84]	; (d42b8 <_Z16makeCalculationsb+0x1c8>)
   d4264:	e9cd 0100 	strd	r0, r1, [sp]
   d4268:	2110      	movs	r1, #16
   d426a:	4814      	ldr	r0, [pc, #80]	; (d42bc <_Z16makeCalculationsb+0x1cc>)
   d426c:	f000 fd8e 	bl	d4d8c <snprintf>
  snprintf(currentStr, sizeof(currentStr),"%4.2f mA",currentState.currentCurrent);
   d4270:	6960      	ldr	r0, [r4, #20]
   d4272:	f002 fa95 	bl	d67a0 <__aeabi_f2d>
   d4276:	4a20      	ldr	r2, [pc, #128]	; (d42f8 <_Z16makeCalculationsb+0x208>)
   d4278:	e9cd 0100 	strd	r0, r1, [sp]
   d427c:	2110      	movs	r1, #16
   d427e:	4811      	ldr	r0, [pc, #68]	; (d42c4 <_Z16makeCalculationsb+0x1d4>)
   d4280:	f000 fd84 	bl	d4d8c <snprintf>
  snprintf(averageCurrentStr, sizeof(averageCurrentStr), "%4.2f mA", currentState.averageCurrent);
   d4284:	69a0      	ldr	r0, [r4, #24]
   d4286:	f002 fa8b 	bl	d67a0 <__aeabi_f2d>
   d428a:	4a1b      	ldr	r2, [pc, #108]	; (d42f8 <_Z16makeCalculationsb+0x208>)
   d428c:	e9cd 0100 	strd	r0, r1, [sp]
   d4290:	2110      	movs	r1, #16
   d4292:	480d      	ldr	r0, [pc, #52]	; (d42c8 <_Z16makeCalculationsb+0x1d8>)
   d4294:	f000 fd7a 	bl	d4d8c <snprintf>
}
   d4298:	b003      	add	sp, #12
   d429a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d429c:	f3af 8000 	nop.w
   d42a0:	33333333 	.word	0x33333333
   d42a4:	40833333 	.word	0x40833333
   d42a8:	2003e330 	.word	0x2003e330
   d42ac:	2003e33c 	.word	0x2003e33c
   d42b0:	000d93fc 	.word	0x000d93fc
   d42b4:	2003e200 	.word	0x2003e200
   d42b8:	000d9406 	.word	0x000d9406
   d42bc:	2003e1f0 	.word	0x2003e1f0
   d42c0:	000d940f 	.word	0x000d940f
   d42c4:	2003e1d0 	.word	0x2003e1d0
   d42c8:	2003e1e0 	.word	0x2003e1e0
   d42cc:	2003e360 	.word	0x2003e360
   d42d0:	2003e35f 	.word	0x2003e35f
   d42d4:	2003e358 	.word	0x2003e358
   d42d8:	3e2ec61b 	.word	0x3e2ec61b
   d42dc:	2003e368 	.word	0x2003e368
   d42e0:	000f4240 	.word	0x000f4240
   d42e4:	2003e210 	.word	0x2003e210
   d42e8:	2003e35c 	.word	0x2003e35c
   d42ec:	2003e338 	.word	0x2003e338
   d42f0:	2003e308 	.word	0x2003e308
   d42f4:	00000000 	.word	0x00000000
   d42f8:	000d9412 	.word	0x000d9412

000d42fc <_Z9resetTest6String>:
  }
  return 1;
}

int resetTest(String command)                                           // Resets the current hourly and daily counts
{
   d42fc:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d42fe:	4904      	ldr	r1, [pc, #16]	; (d4310 <_Z9resetTest6String+0x14>)
   d4300:	f001 fc11 	bl	d5b26 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4304:	b118      	cbz	r0, d430e <_Z9resetTest6String+0x12>
  {
    makeCalculations(true);                                             // This resets all the values
   d4306:	2001      	movs	r0, #1
   d4308:	f7ff fef2 	bl	d40f0 <_Z16makeCalculationsb>
    return 1;
   d430c:	2001      	movs	r0, #1
  }
  else return 0;
}
   d430e:	bd08      	pop	{r3, pc}
   d4310:	000d9622 	.word	0x000d9622

000d4314 <_Z20meterParticlePublishv>:
  }
  else return 0;
}

bool meterParticlePublish(void)
{
   d4314:	b510      	push	{r4, lr}
  static unsigned long lastPublish=0;                                   // Initialize and store value here
  if(millis() - lastPublish >= 1000) {                                  // Particle rate limits at 1 publish per second
   d4316:	4c07      	ldr	r4, [pc, #28]	; (d4334 <_Z20meterParticlePublishv+0x20>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4318:	f000 fb14 	bl	d4944 <HAL_Timer_Get_Milli_Seconds>
   d431c:	6823      	ldr	r3, [r4, #0]
   d431e:	1ac0      	subs	r0, r0, r3
   d4320:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4324:	d304      	bcc.n	d4330 <_Z20meterParticlePublishv+0x1c>
   d4326:	f000 fb0d 	bl	d4944 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d432a:	6020      	str	r0, [r4, #0]
   d432c:	2001      	movs	r0, #1
   d432e:	bd10      	pop	{r4, pc}
    return 1;
  }
  else return 0;
   d4330:	2000      	movs	r0, #0
   d4332:	bd10      	pop	{r4, pc}
   d4334:	2003e334 	.word	0x2003e334

000d4338 <_ZN11SystemClass13waitConditionIZ11setCapacity6StringEUlvE_EEbT_.isra.21>:
            spark_process();
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
   d4338:	b508      	push	{r3, lr}
  else if (command == "Sleep") {
    batteryTestMode = false;
    if (digitalRead(sleepIndicator)) sleepState = false;
    else sleepState = true;
    makeCalculations(true);                                       // Resets all the values to start new mode
    waitUntil(meterParticlePublish);
   d433a:	f7ff ffeb 	bl	d4314 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d433e:	b118      	cbz	r0, d4348 <_ZN11SystemClass13waitConditionIZ11setCapacity6StringEUlvE_EEbT_.isra.21+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
   d4340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4344:	f7ff bfe6 	b.w	d4314 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
   d4348:	f000 fc88 	bl	d4c5c <spark_process>
   d434c:	e7f5      	b.n	d433a <_ZN11SystemClass13waitConditionIZ11setCapacity6StringEUlvE_EEbT_.isra.21+0x2>

000d434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d434e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4350:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4352:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4354:	b17c      	cbz	r4, d4376 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4356:	6863      	ldr	r3, [r4, #4]
   d4358:	3b01      	subs	r3, #1
   d435a:	6063      	str	r3, [r4, #4]
   d435c:	b95b      	cbnz	r3, d4376 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d435e:	6823      	ldr	r3, [r4, #0]
   d4360:	4620      	mov	r0, r4
   d4362:	689b      	ldr	r3, [r3, #8]
   d4364:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4366:	68a3      	ldr	r3, [r4, #8]
   d4368:	3b01      	subs	r3, #1
   d436a:	60a3      	str	r3, [r4, #8]
   d436c:	b91b      	cbnz	r3, d4376 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d436e:	6823      	ldr	r3, [r4, #0]
   d4370:	4620      	mov	r0, r4
   d4372:	68db      	ldr	r3, [r3, #12]
   d4374:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4376:	4628      	mov	r0, r5
   d4378:	bd38      	pop	{r3, r4, r5, pc}
	...

000d437c <_Z13publishResultv>:
    currentStateWriteNeeded = false;
    EEPROM.put(0,currentState);   
  }
}

void publishResult() {
   d437c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char data[96];
  if (batteryTestMode) {
   d4380:	4b34      	ldr	r3, [pc, #208]	; (d4454 <_Z13publishResultv+0xd8>)
   d4382:	781b      	ldrb	r3, [r3, #0]
    currentStateWriteNeeded = false;
    EEPROM.put(0,currentState);   
  }
}

void publishResult() {
   d4384:	b0a7      	sub	sp, #156	; 0x9c
  char data[96];
  if (batteryTestMode) {
   d4386:	2b00      	cmp	r3, #0
   d4388:	d03c      	beq.n	d4404 <_Z13publishResultv+0x88>
    int elapsedSec = Time.now() - currentState.startTime;
   d438a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; d4460 <_Z13publishResultv+0xe4>
   d438e:	f001 fc86 	bl	d5c9e <_ZN9TimeClass3nowEv>
   d4392:	f8d8 3000 	ldr.w	r3, [r8]
   d4396:	ebc3 0a00 	rsb	sl, r3, r0
    snprintf(data, sizeof(data), "Status: %4.0f mAh, %3.1f%% charge, %4.3f mA elapsed time:%i:%i:%i:%i", currentState.currentCapacity_mAh, currentState.currentCharge_percent, currentState.currentCurrent, Time.day(elapsedSec)-1, Time.hour(elapsedSec), Time.minute(elapsedSec), Time.second(elapsedSec));
   d439a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   d439e:	f002 f9ff 	bl	d67a0 <__aeabi_f2d>
   d43a2:	4604      	mov	r4, r0
   d43a4:	f8d8 0010 	ldr.w	r0, [r8, #16]
   d43a8:	460d      	mov	r5, r1
   d43aa:	f002 f9f9 	bl	d67a0 <__aeabi_f2d>
   d43ae:	4606      	mov	r6, r0
   d43b0:	f8d8 0014 	ldr.w	r0, [r8, #20]
   d43b4:	460f      	mov	r7, r1
   d43b6:	f002 f9f3 	bl	d67a0 <__aeabi_f2d>
   d43ba:	4680      	mov	r8, r0
   d43bc:	4650      	mov	r0, sl
   d43be:	4689      	mov	r9, r1
   d43c0:	f001 fc44 	bl	d5c4c <_ZN9TimeClass3dayEl>
   d43c4:	4683      	mov	fp, r0
   d43c6:	4650      	mov	r0, sl
   d43c8:	f001 fc28 	bl	d5c1c <_ZN9TimeClass4hourEl>
   d43cc:	900b      	str	r0, [sp, #44]	; 0x2c
   d43ce:	4650      	mov	r0, sl
   d43d0:	f001 fc2c 	bl	d5c2c <_ZN9TimeClass6minuteEl>
   d43d4:	900a      	str	r0, [sp, #40]	; 0x28
   d43d6:	4650      	mov	r0, sl
   d43d8:	f001 fc30 	bl	d5c3c <_ZN9TimeClass6secondEl>
   d43dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d43de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d43e0:	9307      	str	r3, [sp, #28]
   d43e2:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   d43e6:	9009      	str	r0, [sp, #36]	; 0x24
   d43e8:	9208      	str	r2, [sp, #32]
   d43ea:	9306      	str	r3, [sp, #24]
   d43ec:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d43f0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d43f4:	e9cd 4500 	strd	r4, r5, [sp]
   d43f8:	4a17      	ldr	r2, [pc, #92]	; (d4458 <_Z13publishResultv+0xdc>)
   d43fa:	2160      	movs	r1, #96	; 0x60
   d43fc:	a80e      	add	r0, sp, #56	; 0x38
   d43fe:	f000 fcc5 	bl	d4d8c <snprintf>
   d4402:	e017      	b.n	d4434 <_Z13publishResultv+0xb8>
  }
  else if(sleepState) {
   d4404:	4b15      	ldr	r3, [pc, #84]	; (d445c <_Z13publishResultv+0xe0>)
   d4406:	781b      	ldrb	r3, [r3, #0]
   d4408:	b183      	cbz	r3, d442c <_Z13publishResultv+0xb0>
    snprintf(data, sizeof(data), "Sleeping: current: %4.3f mA, average: %4.3f mA", currentState.currentCurrent, currentState.averageCurrent);
   d440a:	4c15      	ldr	r4, [pc, #84]	; (d4460 <_Z13publishResultv+0xe4>)
   d440c:	69a0      	ldr	r0, [r4, #24]
   d440e:	f002 f9c7 	bl	d67a0 <__aeabi_f2d>
   d4412:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4416:	6960      	ldr	r0, [r4, #20]
   d4418:	f002 f9c2 	bl	d67a0 <__aeabi_f2d>
   d441c:	4a11      	ldr	r2, [pc, #68]	; (d4464 <_Z13publishResultv+0xe8>)
   d441e:	e9cd 0100 	strd	r0, r1, [sp]
   d4422:	2160      	movs	r1, #96	; 0x60
   d4424:	a80e      	add	r0, sp, #56	; 0x38
   d4426:	f000 fcb1 	bl	d4d8c <snprintf>
   d442a:	e003      	b.n	d4434 <_Z13publishResultv+0xb8>
  }
  else snprintf(data,sizeof(data),"Waiting for device to sleep");
   d442c:	490e      	ldr	r1, [pc, #56]	; (d4468 <_Z13publishResultv+0xec>)
   d442e:	a80e      	add	r0, sp, #56	; 0x38
   d4430:	f002 fea2 	bl	d7178 <strcpy>
   d4434:	4b0d      	ldr	r3, [pc, #52]	; (d446c <_Z13publishResultv+0xf0>)

  Particle.publish("Status",data,PRIVATE);
   d4436:	490e      	ldr	r1, [pc, #56]	; (d4470 <_Z13publishResultv+0xf4>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   d4438:	781b      	ldrb	r3, [r3, #0]
   d443a:	2200      	movs	r2, #0
   d443c:	f88d 2000 	strb.w	r2, [sp]
   d4440:	a80c      	add	r0, sp, #48	; 0x30
   d4442:	aa0e      	add	r2, sp, #56	; 0x38
   d4444:	f7ff fe44 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.35.constprop.41>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4448:	a80d      	add	r0, sp, #52	; 0x34
   d444a:	f7ff ff80 	bl	d434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d444e:	b027      	add	sp, #156	; 0x9c
   d4450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4454:	2003e210 	.word	0x2003e210
   d4458:	000d941b 	.word	0x000d941b
   d445c:	2003e35c 	.word	0x2003e35c
   d4460:	2003e33c 	.word	0x2003e33c
   d4464:	000d9460 	.word	0x000d9460
   d4468:	000d948f 	.word	0x000d948f
   d446c:	2003e35e 	.word	0x2003e35e
   d4470:	000d94ab 	.word	0x000d94ab

000d4474 <_Z11setCapacity6String>:
  snprintf(currentStr, sizeof(currentStr),"%4.2f mA",currentState.currentCurrent);
  snprintf(averageCurrentStr, sizeof(averageCurrentStr), "%4.2f mA", currentState.averageCurrent);
}

int setCapacity(String command)
{
   d4474:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  char * pEND;
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
   d4476:	a903      	add	r1, sp, #12
   d4478:	6800      	ldr	r0, [r0, #0]
   d447a:	f003 fcd9 	bl	d7e30 <strtof>
  if ((inputValue < 0.0) || (inputValue > 6000.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d447e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d4482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4486:	d427      	bmi.n	d44d8 <_Z11setCapacity6String+0x64>
   d4488:	eddf 7a16 	vldr	s15, [pc, #88]	; d44e4 <_Z11setCapacity6String+0x70>
   d448c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4494:	dc20      	bgt.n	d44d8 <_Z11setCapacity6String+0x64>
  currentState.startingCapacity_mAh = inputValue;                                              // Assign the input to the battery capacity variable
   d4496:	4b14      	ldr	r3, [pc, #80]	; (d44e8 <_Z11setCapacity6String+0x74>)
  snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",currentState.startingCapacity_mAh);
   d4498:	ee10 0a10 	vmov	r0, s0
int setCapacity(String command)
{
  char * pEND;
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
  if ((inputValue < 0.0) || (inputValue > 6000.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
  currentState.startingCapacity_mAh = inputValue;                                              // Assign the input to the battery capacity variable
   d449c:	ed83 0a01 	vstr	s0, [r3, #4]
  snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",currentState.startingCapacity_mAh);
   d44a0:	f002 f97e 	bl	d67a0 <__aeabi_f2d>
   d44a4:	4a11      	ldr	r2, [pc, #68]	; (d44ec <_Z11setCapacity6String+0x78>)
   d44a6:	e9cd 0100 	strd	r0, r1, [sp]
   d44aa:	2110      	movs	r1, #16
   d44ac:	4810      	ldr	r0, [pc, #64]	; (d44f0 <_Z11setCapacity6String+0x7c>)
   d44ae:	f000 fc6d 	bl	d4d8c <snprintf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d44b2:	f000 fbdb 	bl	d4c6c <spark_cloud_flag_connected>
  if (Particle.connected()) {                                            // Publish result if feeling verbose
   d44b6:	b188      	cbz	r0, d44dc <_Z11setCapacity6String+0x68>
    waitUntil(meterParticlePublish);
   d44b8:	f7ff ff3e 	bl	d4338 <_ZN11SystemClass13waitConditionIZ11setCapacity6StringEUlvE_EEbT_.isra.21>
   d44bc:	4b0d      	ldr	r3, [pc, #52]	; (d44f4 <_Z11setCapacity6String+0x80>)
    Particle.publish("Capacity",capacityStr, PRIVATE);
   d44be:	490e      	ldr	r1, [pc, #56]	; (d44f8 <_Z11setCapacity6String+0x84>)
   d44c0:	781b      	ldrb	r3, [r3, #0]
   d44c2:	2200      	movs	r2, #0
   d44c4:	f88d 2000 	strb.w	r2, [sp]
   d44c8:	a804      	add	r0, sp, #16
   d44ca:	4a09      	ldr	r2, [pc, #36]	; (d44f0 <_Z11setCapacity6String+0x7c>)
   d44cc:	f7ff fe00 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.35.constprop.41>
   d44d0:	a805      	add	r0, sp, #20
   d44d2:	f7ff ff3c 	bl	d434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d44d6:	e001      	b.n	d44dc <_Z11setCapacity6String+0x68>

int setCapacity(String command)
{
  char * pEND;
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
  if ((inputValue < 0.0) || (inputValue > 6000.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d44d8:	2000      	movs	r0, #0
   d44da:	e000      	b.n	d44de <_Z11setCapacity6String+0x6a>
  snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",currentState.startingCapacity_mAh);
  if (Particle.connected()) {                                            // Publish result if feeling verbose
    waitUntil(meterParticlePublish);
    Particle.publish("Capacity",capacityStr, PRIVATE);
  }
  return 1;
   d44dc:	2001      	movs	r0, #1
}
   d44de:	b007      	add	sp, #28
   d44e0:	f85d fb04 	ldr.w	pc, [sp], #4
   d44e4:	45bb8000 	.word	0x45bb8000
   d44e8:	2003e33c 	.word	0x2003e33c
   d44ec:	000d93fc 	.word	0x000d93fc
   d44f0:	2003e200 	.word	0x2003e200
   d44f4:	2003e35e 	.word	0x2003e35e
   d44f8:	000d952e 	.word	0x000d952e

000d44fc <_Z9setCharge6String>:

int setCharge(String command)
{
   d44fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  char * pEND;
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
   d44fe:	a903      	add	r1, sp, #12
   d4500:	6800      	ldr	r0, [r0, #0]
   d4502:	f003 fc95 	bl	d7e30 <strtof>
  if ((inputValue < 0.0) || (inputValue > 100.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4506:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d450a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d450e:	d427      	bmi.n	d4560 <_Z9setCharge6String+0x64>
   d4510:	eddf 7a16 	vldr	s15, [pc, #88]	; d456c <_Z9setCharge6String+0x70>
   d4514:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d451c:	dc20      	bgt.n	d4560 <_Z9setCharge6String+0x64>
  currentState.startingCharge_percent = inputValue;                                              // Assign the input to the battery capacity variable
   d451e:	4b14      	ldr	r3, [pc, #80]	; (d4570 <_Z9setCharge6String+0x74>)
  snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",currentState.startingCharge_percent);
   d4520:	ee10 0a10 	vmov	r0, s0
int setCharge(String command)
{
  char * pEND;
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
  if ((inputValue < 0.0) || (inputValue > 100.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
  currentState.startingCharge_percent = inputValue;                                              // Assign the input to the battery capacity variable
   d4524:	ed83 0a03 	vstr	s0, [r3, #12]
  snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",currentState.startingCharge_percent);
   d4528:	f002 f93a 	bl	d67a0 <__aeabi_f2d>
   d452c:	4a11      	ldr	r2, [pc, #68]	; (d4574 <_Z9setCharge6String+0x78>)
   d452e:	e9cd 0100 	strd	r0, r1, [sp]
   d4532:	2110      	movs	r1, #16
   d4534:	4810      	ldr	r0, [pc, #64]	; (d4578 <_Z9setCharge6String+0x7c>)
   d4536:	f000 fc29 	bl	d4d8c <snprintf>
   d453a:	f000 fb97 	bl	d4c6c <spark_cloud_flag_connected>
  if (Particle.connected()) {                                            // Publish result if feeling verbose
   d453e:	b188      	cbz	r0, d4564 <_Z9setCharge6String+0x68>
    waitUntil(meterParticlePublish);
   d4540:	f7ff fefa 	bl	d4338 <_ZN11SystemClass13waitConditionIZ11setCapacity6StringEUlvE_EEbT_.isra.21>
   d4544:	4b0d      	ldr	r3, [pc, #52]	; (d457c <_Z9setCharge6String+0x80>)
    Particle.publish("Charge",chargeStr, PRIVATE);
   d4546:	490e      	ldr	r1, [pc, #56]	; (d4580 <_Z9setCharge6String+0x84>)
   d4548:	781b      	ldrb	r3, [r3, #0]
   d454a:	2200      	movs	r2, #0
   d454c:	f88d 2000 	strb.w	r2, [sp]
   d4550:	a804      	add	r0, sp, #16
   d4552:	4a09      	ldr	r2, [pc, #36]	; (d4578 <_Z9setCharge6String+0x7c>)
   d4554:	f7ff fdbc 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.35.constprop.41>
   d4558:	a805      	add	r0, sp, #20
   d455a:	f7ff fef8 	bl	d434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d455e:	e001      	b.n	d4564 <_Z9setCharge6String+0x68>

int setCharge(String command)
{
  char * pEND;
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
  if ((inputValue < 0.0) || (inputValue > 100.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
   d4560:	2000      	movs	r0, #0
   d4562:	e000      	b.n	d4566 <_Z9setCharge6String+0x6a>
  snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",currentState.startingCharge_percent);
  if (Particle.connected()) {                                            // Publish result if feeling verbose
    waitUntil(meterParticlePublish);
    Particle.publish("Charge",chargeStr, PRIVATE);
  }
  return 1;
   d4564:	2001      	movs	r0, #1
}
   d4566:	b007      	add	sp, #28
   d4568:	f85d fb04 	ldr.w	pc, [sp], #4
   d456c:	42c80000 	.word	0x42c80000
   d4570:	2003e33c 	.word	0x2003e33c
   d4574:	000d9406 	.word	0x000d9406
   d4578:	2003e1f0 	.word	0x2003e1f0
   d457c:	2003e35e 	.word	0x2003e35e
   d4580:	000d953b 	.word	0x000d953b

000d4584 <_Z7setMode6String>:
  }
  else return 0;
}

int setMode(String command)                                       // Resets the current hourly and daily counts
{
   d4584:	b530      	push	{r4, r5, lr}
   d4586:	491d      	ldr	r1, [pc, #116]	; (d45fc <_Z7setMode6String+0x78>)
   d4588:	b085      	sub	sp, #20
   d458a:	4605      	mov	r5, r0
   d458c:	f001 facb 	bl	d5b26 <_ZNK6String6equalsEPKc>
  if (command == "Battery") {
   d4590:	4604      	mov	r4, r0
   d4592:	b170      	cbz	r0, d45b2 <_Z7setMode6String+0x2e>
    batteryTestMode = true;
   d4594:	4b1a      	ldr	r3, [pc, #104]	; (d4600 <_Z7setMode6String+0x7c>)
   d4596:	2401      	movs	r4, #1
    makeCalculations(true);                                       // Resets all the values to start new mode
   d4598:	4620      	mov	r0, r4
}

int setMode(String command)                                       // Resets the current hourly and daily counts
{
  if (command == "Battery") {
    batteryTestMode = true;
   d459a:	701c      	strb	r4, [r3, #0]
    makeCalculations(true);                                       // Resets all the values to start new mode
   d459c:	f7ff fda8 	bl	d40f0 <_Z16makeCalculationsb>
    waitUntil(meterParticlePublish);
   d45a0:	f7ff feca 	bl	d4338 <_ZN11SystemClass13waitConditionIZ11setCapacity6StringEUlvE_EEbT_.isra.21>
   d45a4:	4b17      	ldr	r3, [pc, #92]	; (d4604 <_Z7setMode6String+0x80>)
    Particle.publish("Mode","Battery Capacity Test Mode",PRIVATE);
   d45a6:	2200      	movs	r2, #0
   d45a8:	781b      	ldrb	r3, [r3, #0]
   d45aa:	f88d 2000 	strb.w	r2, [sp]
   d45ae:	4a16      	ldr	r2, [pc, #88]	; (d4608 <_Z7setMode6String+0x84>)
   d45b0:	e01a      	b.n	d45e8 <_Z7setMode6String+0x64>
   d45b2:	4916      	ldr	r1, [pc, #88]	; (d460c <_Z7setMode6String+0x88>)
   d45b4:	4628      	mov	r0, r5
   d45b6:	f001 fab6 	bl	d5b26 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "Sleep") {
   d45ba:	b1e8      	cbz	r0, d45f8 <_Z7setMode6String+0x74>
    batteryTestMode = false;
   d45bc:	4b10      	ldr	r3, [pc, #64]	; (d4600 <_Z7setMode6String+0x7c>)
    if (digitalRead(sleepIndicator)) sleepState = false;
   d45be:	2004      	movs	r0, #4
    waitUntil(meterParticlePublish);
    Particle.publish("Mode","Battery Capacity Test Mode",PRIVATE);
    return 1;
  }
  else if (command == "Sleep") {
    batteryTestMode = false;
   d45c0:	701c      	strb	r4, [r3, #0]
    if (digitalRead(sleepIndicator)) sleepState = false;
   d45c2:	f001 fd95 	bl	d60f0 <digitalRead>
   d45c6:	4b12      	ldr	r3, [pc, #72]	; (d4610 <_Z7setMode6String+0x8c>)
   d45c8:	b108      	cbz	r0, d45ce <_Z7setMode6String+0x4a>
   d45ca:	701c      	strb	r4, [r3, #0]
   d45cc:	e001      	b.n	d45d2 <_Z7setMode6String+0x4e>
    else sleepState = true;
   d45ce:	2201      	movs	r2, #1
   d45d0:	701a      	strb	r2, [r3, #0]
    makeCalculations(true);                                       // Resets all the values to start new mode
   d45d2:	2001      	movs	r0, #1
   d45d4:	f7ff fd8c 	bl	d40f0 <_Z16makeCalculationsb>
    waitUntil(meterParticlePublish);
   d45d8:	f7ff feae 	bl	d4338 <_ZN11SystemClass13waitConditionIZ11setCapacity6StringEUlvE_EEbT_.isra.21>
   d45dc:	4b09      	ldr	r3, [pc, #36]	; (d4604 <_Z7setMode6String+0x80>)
    Particle.publish("Mode","Sleep Test Mode",PRIVATE);
   d45de:	2200      	movs	r2, #0
   d45e0:	781b      	ldrb	r3, [r3, #0]
   d45e2:	f88d 2000 	strb.w	r2, [sp]
   d45e6:	4a0b      	ldr	r2, [pc, #44]	; (d4614 <_Z7setMode6String+0x90>)
   d45e8:	490b      	ldr	r1, [pc, #44]	; (d4618 <_Z7setMode6String+0x94>)
   d45ea:	a802      	add	r0, sp, #8
   d45ec:	f7ff fd70 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.35.constprop.41>
   d45f0:	a803      	add	r0, sp, #12
   d45f2:	f7ff feac 	bl	d434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d45f6:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
   d45f8:	b005      	add	sp, #20
   d45fa:	bd30      	pop	{r4, r5, pc}
   d45fc:	000d94b2 	.word	0x000d94b2
   d4600:	2003e210 	.word	0x2003e210
   d4604:	2003e35e 	.word	0x2003e35e
   d4608:	000d94ba 	.word	0x000d94ba
   d460c:	000d94d5 	.word	0x000d94d5
   d4610:	2003e35c 	.word	0x2003e35c
   d4614:	000d94db 	.word	0x000d94db
   d4618:	000d94e6 	.word	0x000d94e6

000d461c <loop>:

  Particle.publish("Startup","LTC4150 Coulomb Counter",PRIVATE);
}

void loop()
{
   d461c:	b570      	push	{r4, r5, r6, lr}
  if (coulombFlag) {
   d461e:	4b2e      	ldr	r3, [pc, #184]	; (d46d8 <loop+0xbc>)
   d4620:	781a      	ldrb	r2, [r3, #0]

  Particle.publish("Startup","LTC4150 Coulomb Counter",PRIVATE);
}

void loop()
{
   d4622:	b086      	sub	sp, #24
  if (coulombFlag) {
   d4624:	b18a      	cbz	r2, d464a <loop+0x2e>
    coulombFlag = false;                                                    // Reset the flag to false so we only do this once per INT
   d4626:	2400      	movs	r4, #0
    makeCalculations(false);                                                // Update the calculations
   d4628:	4620      	mov	r0, r4
}

void loop()
{
  if (coulombFlag) {
    coulombFlag = false;                                                    // Reset the flag to false so we only do this once per INT
   d462a:	701c      	strb	r4, [r3, #0]
    makeCalculations(false);                                                // Update the calculations
   d462c:	f7ff fd60 	bl	d40f0 <_Z16makeCalculationsb>
    digitalWrite(blueLED,HIGH);                                             // Blink the LED
   d4630:	2101      	movs	r1, #1
   d4632:	2007      	movs	r0, #7
   d4634:	f001 fd43 	bl	d60be <digitalWrite>
    delay(100);
   d4638:	2064      	movs	r0, #100	; 0x64
   d463a:	f000 fbbf 	bl	d4dbc <delay>
    digitalWrite(blueLED,LOW);
   d463e:	4621      	mov	r1, r4
   d4640:	2007      	movs	r0, #7
   d4642:	f001 fd3c 	bl	d60be <digitalWrite>
    publishResult();                                                        // Print out current status (variables set by myISR())
   d4646:	f7ff fe99 	bl	d437c <_Z13publishResultv>
  }
  if (sleepFlag) {
   d464a:	4b24      	ldr	r3, [pc, #144]	; (d46dc <loop+0xc0>)
   d464c:	781a      	ldrb	r2, [r3, #0]
   d464e:	2a00      	cmp	r2, #0
   d4650:	d033      	beq.n	d46ba <loop+0x9e>
    sleepFlag = false;
   d4652:	2400      	movs	r4, #0
    if (digitalRead(sleepIndicator)) {
   d4654:	2004      	movs	r0, #4
    delay(100);
    digitalWrite(blueLED,LOW);
    publishResult();                                                        // Print out current status (variables set by myISR())
  }
  if (sleepFlag) {
    sleepFlag = false;
   d4656:	701c      	strb	r4, [r3, #0]
    if (digitalRead(sleepIndicator)) {
   d4658:	f001 fd4a 	bl	d60f0 <digitalRead>
   d465c:	4e20      	ldr	r6, [pc, #128]	; (d46e0 <loop+0xc4>)
   d465e:	4b21      	ldr	r3, [pc, #132]	; (d46e4 <loop+0xc8>)
   d4660:	4605      	mov	r5, r0
   d4662:	b1d8      	cbz	r0, d469c <loop+0x80>
      sleepState = false;
   d4664:	701c      	strb	r4, [r3, #0]
      waitUntil(meterParticlePublish);
   d4666:	f7ff fe67 	bl	d4338 <_ZN11SystemClass13waitConditionIZ11setCapacity6StringEUlvE_EEbT_.isra.21>
   d466a:	7833      	ldrb	r3, [r6, #0]
      Particle.publish("State","Device Awake - Resetting",PRIVATE);
   d466c:	4a1e      	ldr	r2, [pc, #120]	; (d46e8 <loop+0xcc>)
   d466e:	491f      	ldr	r1, [pc, #124]	; (d46ec <loop+0xd0>)
   d4670:	f88d 4000 	strb.w	r4, [sp]
   d4674:	a802      	add	r0, sp, #8
   d4676:	f7ff fd2b 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.35.constprop.41>
   d467a:	a803      	add	r0, sp, #12
   d467c:	f7ff fe67 	bl	d434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      makeCalculations(true);                                           // This resets all the values and gets us ready for the next sleep cycle
   d4680:	2001      	movs	r0, #1
   d4682:	f7ff fd35 	bl	d40f0 <_Z16makeCalculationsb>
      setMode("Sleep");
   d4686:	491a      	ldr	r1, [pc, #104]	; (d46f0 <loop+0xd4>)
   d4688:	a802      	add	r0, sp, #8
   d468a:	f001 fa1f 	bl	d5acc <_ZN6StringC1EPK19__FlashStringHelper>
   d468e:	a802      	add	r0, sp, #8
   d4690:	f7ff ff78 	bl	d4584 <_Z7setMode6String>
   d4694:	a802      	add	r0, sp, #8
   d4696:	f001 f9d2 	bl	d5a3e <_ZN6StringD1Ev>
   d469a:	e00e      	b.n	d46ba <loop+0x9e>
    }
    else {
      sleepState = true;                                                 // In the next sleep cycle - start tracking
   d469c:	2201      	movs	r2, #1
   d469e:	701a      	strb	r2, [r3, #0]
      waitUntil(meterParticlePublish);
   d46a0:	f7ff fe4a 	bl	d4338 <_ZN11SystemClass13waitConditionIZ11setCapacity6StringEUlvE_EEbT_.isra.21>
      Particle.publish("Status","Device Sleeping - starting test",PRIVATE);
   d46a4:	a802      	add	r0, sp, #8
   d46a6:	7833      	ldrb	r3, [r6, #0]
   d46a8:	f88d 5000 	strb.w	r5, [sp]
   d46ac:	4a11      	ldr	r2, [pc, #68]	; (d46f4 <loop+0xd8>)
   d46ae:	4912      	ldr	r1, [pc, #72]	; (d46f8 <loop+0xdc>)
   d46b0:	f7ff fd0e 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.35.constprop.41>
   d46b4:	a803      	add	r0, sp, #12
   d46b6:	f7ff fe4a 	bl	d434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
  }
  if (currentStateWriteNeeded) {
   d46ba:	4b10      	ldr	r3, [pc, #64]	; (d46fc <loop+0xe0>)
   d46bc:	781a      	ldrb	r2, [r3, #0]
   d46be:	b142      	cbz	r2, d46d2 <loop+0xb6>
    currentStateWriteNeeded = false;
   d46c0:	2400      	movs	r4, #0
   d46c2:	701c      	strb	r4, [r3, #0]
    EEPROM.put(0,currentState);   
   d46c4:	f001 fd28 	bl	d6118 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d46c8:	221c      	movs	r2, #28
   d46ca:	490d      	ldr	r1, [pc, #52]	; (d4700 <loop+0xe4>)
   d46cc:	4620      	mov	r0, r4
   d46ce:	f000 f959 	bl	d4984 <HAL_EEPROM_Put>
  }
}
   d46d2:	b006      	add	sp, #24
   d46d4:	bd70      	pop	{r4, r5, r6, pc}
   d46d6:	bf00      	nop
   d46d8:	2003e35d 	.word	0x2003e35d
   d46dc:	2003e364 	.word	0x2003e364
   d46e0:	2003e35e 	.word	0x2003e35e
   d46e4:	2003e35c 	.word	0x2003e35c
   d46e8:	000d94eb 	.word	0x000d94eb
   d46ec:	000d9504 	.word	0x000d9504
   d46f0:	000d94d5 	.word	0x000d94d5
   d46f4:	000d950a 	.word	0x000d950a
   d46f8:	000d94ab 	.word	0x000d94ab
   d46fc:	2003e35f 	.word	0x2003e35f
   d4700:	2003e33c 	.word	0x2003e33c

000d4704 <_ZN10CloudClass8functionIA22_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4704:	4602      	mov	r2, r0
   d4706:	4801      	ldr	r0, [pc, #4]	; (d470c <_ZN10CloudClass8functionIA22_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d4708:	f000 bbf9 	b.w	d4efe <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d470c:	000d4ed3 	.word	0x000d4ed3

000d4710 <setup>:
};

currentState_Structure currentState;

void setup()
{
   d4710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Set up I/O pins:
  pinMode(intPin,INPUT);                            // Interrupt input pin (must be D2 or D3)
   d4712:	2100      	movs	r1, #0
   d4714:	2002      	movs	r0, #2
   d4716:	f001 fcc1 	bl	d609c <pinMode>
  pinMode(polPin,INPUT);                            // Polarity input pin
   d471a:	2100      	movs	r1, #0
   d471c:	2003      	movs	r0, #3
   d471e:	f001 fcbd 	bl	d609c <pinMode>
  pinMode(sleepIndicator,INPUT);                    // Important - must be an input
   d4722:	2100      	movs	r1, #0
   d4724:	2004      	movs	r0, #4
   d4726:	f001 fcb9 	bl	d609c <pinMode>
  pinMode(blueLED,OUTPUT);                          // Standard Particle status LED
   d472a:	2101      	movs	r1, #1
   d472c:	2007      	movs	r0, #7
   d472e:	f001 fcb5 	bl	d609c <pinMode>
  digitalWrite(blueLED,LOW);  
   d4732:	2100      	movs	r1, #0
   d4734:	2007      	movs	r0, #7
   d4736:	f001 fcc2 	bl	d60be <digitalWrite>

  Particle.function("Set-Capacity", setCapacity);   // Set the capacity
   d473a:	4949      	ldr	r1, [pc, #292]	; (d4860 <setup+0x150>)
   d473c:	4849      	ldr	r0, [pc, #292]	; (d4864 <setup+0x154>)
   d473e:	f7ff ffe1 	bl	d4704 <_ZN10CloudClass8functionIA22_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Charge", setCharge);       // Set the charge level
   d4742:	4949      	ldr	r1, [pc, #292]	; (d4868 <setup+0x158>)
   d4744:	4849      	ldr	r0, [pc, #292]	; (d486c <setup+0x15c>)
   d4746:	f7ff ffdd 	bl	d4704 <_ZN10CloudClass8functionIA22_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Reset-Test",resetTest);        // Set all the values back to start
   d474a:	4949      	ldr	r1, [pc, #292]	; (d4870 <setup+0x160>)
   d474c:	4849      	ldr	r0, [pc, #292]	; (d4874 <setup+0x164>)
   d474e:	f7ff ffd9 	bl	d4704 <_ZN10CloudClass8functionIA22_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Battery-or-Sleep-Mode",setMode);
   d4752:	4949      	ldr	r1, [pc, #292]	; (d4878 <setup+0x168>)
   d4754:	4849      	ldr	r0, [pc, #292]	; (d487c <setup+0x16c>)
   d4756:	f7ff ffd5 	bl	d4704 <_ZN10CloudClass8functionIA22_cIPFi6StringEEEEbRKT_DpT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d475a:	2300      	movs	r3, #0
   d475c:	2204      	movs	r2, #4
   d475e:	4948      	ldr	r1, [pc, #288]	; (d4880 <setup+0x170>)
   d4760:	4848      	ldr	r0, [pc, #288]	; (d4884 <setup+0x174>)
   d4762:	f000 fa6b 	bl	d4c3c <spark_variable>
   d4766:	2300      	movs	r3, #0
   d4768:	2204      	movs	r2, #4
   d476a:	4947      	ldr	r1, [pc, #284]	; (d4888 <setup+0x178>)
   d476c:	4847      	ldr	r0, [pc, #284]	; (d488c <setup+0x17c>)
   d476e:	f000 fa65 	bl	d4c3c <spark_variable>

  Particle.variable("Capacity", capacityStr);
  Particle.variable("Charge", chargeStr);           // charge value

  attachInterrupt(intPin,coulombISR,FALLING);
   d4772:	2400      	movs	r4, #0
   d4774:	2202      	movs	r2, #2
   d4776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d477a:	4945      	ldr	r1, [pc, #276]	; (d4890 <setup+0x180>)
   d477c:	9400      	str	r4, [sp, #0]
   d477e:	4610      	mov	r0, r2
   d4780:	f000 fee2 	bl	d5548 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(sleepIndicator, sleepWakeISR,CHANGE);
   d4784:	9400      	str	r4, [sp, #0]
   d4786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d478a:	4622      	mov	r2, r4
   d478c:	4941      	ldr	r1, [pc, #260]	; (d4894 <setup+0x184>)
   d478e:	2004      	movs	r0, #4
   d4790:	f000 feda 	bl	d5548 <_Z15attachInterrupttPFvvE13InterruptModeah>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4794:	f000 fa6a 	bl	d4c6c <spark_cloud_flag_connected>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4798:	2800      	cmp	r0, #0
   d479a:	d057      	beq.n	d484c <setup+0x13c>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d479c:	4c3e      	ldr	r4, [pc, #248]	; (d4898 <setup+0x188>)
   d479e:	f000 fa65 	bl	d4c6c <spark_cloud_flag_connected>

  waitUntil(Particle.connected);                  // Get connected first - helps to ensure we have the right time

  EEPROM.get(0,currentState);
   d47a2:	f001 fcb9 	bl	d6118 <_Z21__fetch_global_EEPROMv>
   d47a6:	221c      	movs	r2, #28
   d47a8:	4621      	mov	r1, r4
   d47aa:	2000      	movs	r0, #0
   d47ac:	f000 f8e2 	bl	d4974 <HAL_EEPROM_Get>

  if (Time.now() - currentState.startTime > 300) {    // Too much time went by, must be a new test
   d47b0:	f001 fa75 	bl	d5c9e <_ZN9TimeClass3nowEv>
   d47b4:	6823      	ldr	r3, [r4, #0]
   d47b6:	1ac0      	subs	r0, r0, r3
   d47b8:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
   d47bc:	d909      	bls.n	d47d2 <setup+0xc2>
    currentState.startTime = Time.now();            // When did we start the test
   d47be:	f001 fa6e 	bl	d5c9e <_ZN9TimeClass3nowEv>
    currentState.currentCapacity_mAh = currentState.startingCapacity_mAh;
   d47c2:	6863      	ldr	r3, [r4, #4]
   d47c4:	60a3      	str	r3, [r4, #8]
    currentState.currentCharge_percent = currentState.startingCharge_percent;
   d47c6:	68e3      	ldr	r3, [r4, #12]
   d47c8:	6123      	str	r3, [r4, #16]
    currentStateWriteNeeded = true;
   d47ca:	4b34      	ldr	r3, [pc, #208]	; (d489c <setup+0x18c>)
  waitUntil(Particle.connected);                  // Get connected first - helps to ensure we have the right time

  EEPROM.get(0,currentState);

  if (Time.now() - currentState.startTime > 300) {    // Too much time went by, must be a new test
    currentState.startTime = Time.now();            // When did we start the test
   d47cc:	6020      	str	r0, [r4, #0]
    currentState.currentCapacity_mAh = currentState.startingCapacity_mAh;
    currentState.currentCharge_percent = currentState.startingCharge_percent;
    currentStateWriteNeeded = true;
   d47ce:	2201      	movs	r2, #1
   d47d0:	701a      	strb	r2, [r3, #0]
  }

  percent_quanta = 1.0/(currentState.startingCapacity_mAh/1000.0*5859.0/100.0);   // % battery for each INT
   d47d2:	6860      	ldr	r0, [r4, #4]
   d47d4:	f001 ffe4 	bl	d67a0 <__aeabi_f2d>
   d47d8:	2200      	movs	r2, #0
   d47da:	4b31      	ldr	r3, [pc, #196]	; (d48a0 <setup+0x190>)
   d47dc:	f002 f95e 	bl	d6a9c <__aeabi_ddiv>
   d47e0:	a31d      	add	r3, pc, #116	; (adr r3, d4858 <setup+0x148>)
   d47e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47e6:	f002 f82f 	bl	d6848 <__aeabi_dmul>
   d47ea:	2200      	movs	r2, #0
   d47ec:	4b2d      	ldr	r3, [pc, #180]	; (d48a4 <setup+0x194>)
   d47ee:	f002 f955 	bl	d6a9c <__aeabi_ddiv>
   d47f2:	4602      	mov	r2, r0
   d47f4:	460b      	mov	r3, r1
   d47f6:	2000      	movs	r0, #0
   d47f8:	492b      	ldr	r1, [pc, #172]	; (d48a8 <setup+0x198>)
   d47fa:	f002 f94f 	bl	d6a9c <__aeabi_ddiv>
   d47fe:	f002 fb1b 	bl	d6e38 <__aeabi_d2f>
   d4802:	4b2a      	ldr	r3, [pc, #168]	; (d48ac <setup+0x19c>)
   d4804:	6018      	str	r0, [r3, #0]
  
  snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",currentState.currentCapacity_mAh);
   d4806:	68a0      	ldr	r0, [r4, #8]
   d4808:	f001 ffca 	bl	d67a0 <__aeabi_f2d>
   d480c:	4a28      	ldr	r2, [pc, #160]	; (d48b0 <setup+0x1a0>)
   d480e:	e9cd 0100 	strd	r0, r1, [sp]
   d4812:	2110      	movs	r1, #16
   d4814:	481a      	ldr	r0, [pc, #104]	; (d4880 <setup+0x170>)
   d4816:	f000 fab9 	bl	d4d8c <snprintf>
  snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",currentState.currentCharge_percent);
   d481a:	6920      	ldr	r0, [r4, #16]
   d481c:	f001 ffc0 	bl	d67a0 <__aeabi_f2d>
   d4820:	4a24      	ldr	r2, [pc, #144]	; (d48b4 <setup+0x1a4>)
   d4822:	e9cd 0100 	strd	r0, r1, [sp]
   d4826:	2110      	movs	r1, #16
   d4828:	4817      	ldr	r0, [pc, #92]	; (d4888 <setup+0x178>)
   d482a:	f000 faaf 	bl	d4d8c <snprintf>
   d482e:	4b22      	ldr	r3, [pc, #136]	; (d48b8 <setup+0x1a8>)

  Particle.publish("Startup","LTC4150 Coulomb Counter",PRIVATE);
   d4830:	4922      	ldr	r1, [pc, #136]	; (d48bc <setup+0x1ac>)
   d4832:	781b      	ldrb	r3, [r3, #0]
   d4834:	2200      	movs	r2, #0
   d4836:	f88d 2000 	strb.w	r2, [sp]
   d483a:	a802      	add	r0, sp, #8
   d483c:	4a20      	ldr	r2, [pc, #128]	; (d48c0 <setup+0x1b0>)
   d483e:	f7ff fc47 	bl	d40d0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.35.constprop.41>
   d4842:	a803      	add	r0, sp, #12
   d4844:	f7ff fd83 	bl	d434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4848:	b004      	add	sp, #16
   d484a:	bd10      	pop	{r4, pc}
            spark_process();
   d484c:	f000 fa06 	bl	d4c5c <spark_process>
   d4850:	e7a0      	b.n	d4794 <setup+0x84>
   d4852:	bf00      	nop
   d4854:	f3af 8000 	nop.w
   d4858:	00000000 	.word	0x00000000
   d485c:	40b6e300 	.word	0x40b6e300
   d4860:	000d4475 	.word	0x000d4475
   d4864:	000d952a 	.word	0x000d952a
   d4868:	000d44fd 	.word	0x000d44fd
   d486c:	000d9537 	.word	0x000d9537
   d4870:	000d42fd 	.word	0x000d42fd
   d4874:	000d9542 	.word	0x000d9542
   d4878:	000d4585 	.word	0x000d4585
   d487c:	000d954d 	.word	0x000d954d
   d4880:	2003e200 	.word	0x2003e200
   d4884:	000d952e 	.word	0x000d952e
   d4888:	2003e1f0 	.word	0x2003e1f0
   d488c:	000d953b 	.word	0x000d953b
   d4890:	000d40b9 	.word	0x000d40b9
   d4894:	000d40c5 	.word	0x000d40c5
   d4898:	2003e33c 	.word	0x2003e33c
   d489c:	2003e35f 	.word	0x2003e35f
   d48a0:	408f4000 	.word	0x408f4000
   d48a4:	40590000 	.word	0x40590000
   d48a8:	3ff00000 	.word	0x3ff00000
   d48ac:	2003e368 	.word	0x2003e368
   d48b0:	000d93fc 	.word	0x000d93fc
   d48b4:	000d9406 	.word	0x000d9406
   d48b8:	2003e35e 	.word	0x2003e35e
   d48bc:	000d957b 	.word	0x000d957b
   d48c0:	000d9563 	.word	0x000d9563

000d48c4 <_GLOBAL__sub_I_capacityStr>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d48c4:	4b02      	ldr	r3, [pc, #8]	; (d48d0 <_GLOBAL__sub_I_capacityStr+0xc>)
   d48c6:	2201      	movs	r2, #1
   d48c8:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d48ca:	f000 b86b 	b.w	d49a4 <HAL_Pin_Map>
   d48ce:	bf00      	nop
   d48d0:	2003e35e 	.word	0x2003e35e

000d48d4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d48d4:	b508      	push	{r3, lr}
   d48d6:	4b02      	ldr	r3, [pc, #8]	; (d48e0 <os_thread_is_current+0xc>)
   d48d8:	681b      	ldr	r3, [r3, #0]
   d48da:	689b      	ldr	r3, [r3, #8]
   d48dc:	9301      	str	r3, [sp, #4]
   d48de:	bd08      	pop	{r3, pc}
   d48e0:	00030248 	.word	0x00030248

000d48e4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d48e4:	b508      	push	{r3, lr}
   d48e6:	4b02      	ldr	r3, [pc, #8]	; (d48f0 <os_thread_join+0xc>)
   d48e8:	681b      	ldr	r3, [r3, #0]
   d48ea:	691b      	ldr	r3, [r3, #16]
   d48ec:	9301      	str	r3, [sp, #4]
   d48ee:	bd08      	pop	{r3, pc}
   d48f0:	00030248 	.word	0x00030248

000d48f4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b02      	ldr	r3, [pc, #8]	; (d4900 <os_thread_cleanup+0xc>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	695b      	ldr	r3, [r3, #20]
   d48fc:	9301      	str	r3, [sp, #4]
   d48fe:	bd08      	pop	{r3, pc}
   d4900:	00030248 	.word	0x00030248

000d4904 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <os_mutex_recursive_create+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	00030248 	.word	0x00030248

000d4914 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <os_mutex_recursive_destroy+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	00030248 	.word	0x00030248

000d4924 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <HAL_RNG_GetRandomNumber+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	685b      	ldr	r3, [r3, #4]
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	00030218 	.word	0x00030218

000d4934 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	691b      	ldr	r3, [r3, #16]
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	00030218 	.word	0x00030218

000d4944 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	695b      	ldr	r3, [r3, #20]
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	00030218 	.word	0x00030218

000d4954 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <HAL_RTC_Get_UnixTime+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	69db      	ldr	r3, [r3, #28]
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	00030218 	.word	0x00030218

000d4964 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <HAL_EEPROM_Init+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	00030218 	.word	0x00030218

000d4974 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <HAL_EEPROM_Get+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	00030218 	.word	0x00030218

000d4984 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <HAL_EEPROM_Put+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	00030218 	.word	0x00030218

000d4994 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <HAL_RTC_Time_Is_Valid+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030218 	.word	0x00030218

000d49a4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <HAL_Pin_Map+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	681b      	ldr	r3, [r3, #0]
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	0003022c 	.word	0x0003022c

000d49b4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <HAL_Pin_Mode+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	689b      	ldr	r3, [r3, #8]
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	0003022c 	.word	0x0003022c

000d49c4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <HAL_Get_Pin_Mode+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	68db      	ldr	r3, [r3, #12]
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	0003022c 	.word	0x0003022c

000d49d4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <HAL_GPIO_Write+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	691b      	ldr	r3, [r3, #16]
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	0003022c 	.word	0x0003022c

000d49e4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <HAL_GPIO_Read+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	695b      	ldr	r3, [r3, #20]
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	0003022c 	.word	0x0003022c

000d49f4 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <HAL_Interrupts_Attach+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	699b      	ldr	r3, [r3, #24]
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	0003022c 	.word	0x0003022c

000d4a04 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <HAL_Interrupts_Detach+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	69db      	ldr	r3, [r3, #28]
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	0003022c 	.word	0x0003022c

000d4a14 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <HAL_I2C_Write_Data+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	6a1b      	ldr	r3, [r3, #32]
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	00030228 	.word	0x00030228

000d4a24 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <HAL_I2C_Available_Data+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	00030228 	.word	0x00030228

000d4a34 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <HAL_I2C_Read_Data+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	00030228 	.word	0x00030228

000d4a44 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <HAL_I2C_Peek_Data+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	00030228 	.word	0x00030228

000d4a54 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <HAL_I2C_Flush_Data+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	00030228 	.word	0x00030228

000d4a64 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <HAL_I2C_Is_Enabled+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	00030228 	.word	0x00030228

000d4a74 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <HAL_I2C_Init+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	00030228 	.word	0x00030228

000d4a84 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <inet_inet_ntop+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	695b      	ldr	r3, [r3, #20]
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	00030264 	.word	0x00030264

000d4a94 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <netdb_freeaddrinfo+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	689b      	ldr	r3, [r3, #8]
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	00030268 	.word	0x00030268

000d4aa4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <netdb_getaddrinfo+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	68db      	ldr	r3, [r3, #12]
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	00030268 	.word	0x00030268

000d4ab4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <HAL_SPI_Init+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	69db      	ldr	r3, [r3, #28]
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	00030230 	.word	0x00030230

000d4ac4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <HAL_SPI_Is_Enabled+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	6a1b      	ldr	r3, [r3, #32]
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	00030230 	.word	0x00030230

000d4ad4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <HAL_USART_Init+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	681b      	ldr	r3, [r3, #0]
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	0003023c 	.word	0x0003023c

000d4ae4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <HAL_USART_Write_Data+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	68db      	ldr	r3, [r3, #12]
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	0003023c 	.word	0x0003023c

000d4af4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <HAL_USART_Available_Data+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	691b      	ldr	r3, [r3, #16]
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	0003023c 	.word	0x0003023c

000d4b04 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <HAL_USART_Read_Data+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	695b      	ldr	r3, [r3, #20]
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	0003023c 	.word	0x0003023c

000d4b14 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b02      	ldr	r3, [pc, #8]	; (d4b20 <HAL_USART_Peek_Data+0xc>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	699b      	ldr	r3, [r3, #24]
   d4b1c:	9301      	str	r3, [sp, #4]
   d4b1e:	bd08      	pop	{r3, pc}
   d4b20:	0003023c 	.word	0x0003023c

000d4b24 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4b24:	b508      	push	{r3, lr}
   d4b26:	4b02      	ldr	r3, [pc, #8]	; (d4b30 <HAL_USART_Flush_Data+0xc>)
   d4b28:	681b      	ldr	r3, [r3, #0]
   d4b2a:	69db      	ldr	r3, [r3, #28]
   d4b2c:	9301      	str	r3, [sp, #4]
   d4b2e:	bd08      	pop	{r3, pc}
   d4b30:	0003023c 	.word	0x0003023c

000d4b34 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <HAL_USART_Is_Enabled+0xc>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	6a1b      	ldr	r3, [r3, #32]
   d4b3c:	9301      	str	r3, [sp, #4]
   d4b3e:	bd08      	pop	{r3, pc}
   d4b40:	0003023c 	.word	0x0003023c

000d4b44 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <HAL_USART_Available_Data_For_Write+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	0003023c 	.word	0x0003023c

000d4b54 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <HAL_USB_USART_Init+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	681b      	ldr	r3, [r3, #0]
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	0003024c 	.word	0x0003024c

000d4b64 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <HAL_USB_USART_Available_Data+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	691b      	ldr	r3, [r3, #16]
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	0003024c 	.word	0x0003024c

000d4b74 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	695b      	ldr	r3, [r3, #20]
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	0003024c 	.word	0x0003024c

000d4b84 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <HAL_USB_USART_Receive_Data+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	699b      	ldr	r3, [r3, #24]
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	0003024c 	.word	0x0003024c

000d4b94 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <HAL_USB_USART_Send_Data+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	69db      	ldr	r3, [r3, #28]
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	0003024c 	.word	0x0003024c

000d4ba4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <HAL_USB_USART_Flush_Data+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	6a1b      	ldr	r3, [r3, #32]
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	0003024c 	.word	0x0003024c

000d4bb4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <system_mode+0xc>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	681b      	ldr	r3, [r3, #0]
   d4bbc:	9301      	str	r3, [sp, #4]
   d4bbe:	bd08      	pop	{r3, pc}
   d4bc0:	00030220 	.word	0x00030220

000d4bc4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b02      	ldr	r3, [pc, #8]	; (d4bd0 <set_system_mode+0xc>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	685b      	ldr	r3, [r3, #4]
   d4bcc:	9301      	str	r3, [sp, #4]
   d4bce:	bd08      	pop	{r3, pc}
   d4bd0:	00030220 	.word	0x00030220

000d4bd4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b02      	ldr	r3, [pc, #8]	; (d4be0 <system_delay_ms+0xc>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	695b      	ldr	r3, [r3, #20]
   d4bdc:	9301      	str	r3, [sp, #4]
   d4bde:	bd08      	pop	{r3, pc}
   d4be0:	00030220 	.word	0x00030220

000d4be4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4be4:	b508      	push	{r3, lr}
   d4be6:	4b02      	ldr	r3, [pc, #8]	; (d4bf0 <application_thread_current+0xc>)
   d4be8:	681b      	ldr	r3, [r3, #0]
   d4bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4bec:	9301      	str	r3, [sp, #4]
   d4bee:	bd08      	pop	{r3, pc}
   d4bf0:	00030220 	.word	0x00030220

000d4bf4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b02      	ldr	r3, [pc, #8]	; (d4c00 <application_thread_invoke+0xc>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4bfc:	9301      	str	r3, [sp, #4]
   d4bfe:	bd08      	pop	{r3, pc}
   d4c00:	00030220 	.word	0x00030220

000d4c04 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4c04:	b508      	push	{r3, lr}
   d4c06:	4b02      	ldr	r3, [pc, #8]	; (d4c10 <system_thread_get_state+0xc>)
   d4c08:	681b      	ldr	r3, [r3, #0]
   d4c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4c0c:	9301      	str	r3, [sp, #4]
   d4c0e:	bd08      	pop	{r3, pc}
   d4c10:	00030220 	.word	0x00030220

000d4c14 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4c14:	b508      	push	{r3, lr}
   d4c16:	4b03      	ldr	r3, [pc, #12]	; (d4c24 <system_ctrl_set_app_request_handler+0x10>)
   d4c18:	681b      	ldr	r3, [r3, #0]
   d4c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4c1e:	9301      	str	r3, [sp, #4]
   d4c20:	bd08      	pop	{r3, pc}
   d4c22:	0000      	.short	0x0000
   d4c24:	00030220 	.word	0x00030220

000d4c28 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b03      	ldr	r3, [pc, #12]	; (d4c38 <system_ctrl_set_result+0x10>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4c32:	9301      	str	r3, [sp, #4]
   d4c34:	bd08      	pop	{r3, pc}
   d4c36:	0000      	.short	0x0000
   d4c38:	00030220 	.word	0x00030220

000d4c3c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <spark_variable+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	681b      	ldr	r3, [r3, #0]
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	00030244 	.word	0x00030244

000d4c4c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <spark_function+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	685b      	ldr	r3, [r3, #4]
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	00030244 	.word	0x00030244

000d4c5c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <spark_process+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	689b      	ldr	r3, [r3, #8]
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	00030244 	.word	0x00030244

000d4c6c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <spark_cloud_flag_connected+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	695b      	ldr	r3, [r3, #20]
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	00030244 	.word	0x00030244

000d4c7c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <spark_send_event+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	6a1b      	ldr	r3, [r3, #32]
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	00030244 	.word	0x00030244

000d4c8c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <spark_sync_time_pending+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	00030244 	.word	0x00030244

000d4c9c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	00030244 	.word	0x00030244

000d4cac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <network_connect+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	685b      	ldr	r3, [r3, #4]
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	00030240 	.word	0x00030240

000d4cbc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b02      	ldr	r3, [pc, #8]	; (d4cc8 <network_connecting+0xc>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	689b      	ldr	r3, [r3, #8]
   d4cc4:	9301      	str	r3, [sp, #4]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	00030240 	.word	0x00030240

000d4ccc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <network_disconnect+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	68db      	ldr	r3, [r3, #12]
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	00030240 	.word	0x00030240

000d4cdc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <network_ready+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	691b      	ldr	r3, [r3, #16]
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	00030240 	.word	0x00030240

000d4cec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <network_on+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	695b      	ldr	r3, [r3, #20]
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	00030240 	.word	0x00030240

000d4cfc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <network_off+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	699b      	ldr	r3, [r3, #24]
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	00030240 	.word	0x00030240

000d4d0c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <network_listen+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	69db      	ldr	r3, [r3, #28]
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	00030240 	.word	0x00030240

000d4d1c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <network_listening+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	6a1b      	ldr	r3, [r3, #32]
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	00030240 	.word	0x00030240

000d4d2c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <network_set_listen_timeout+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	00030240 	.word	0x00030240

000d4d3c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <network_get_listen_timeout+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	00030240 	.word	0x00030240

000d4d4c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <malloc+0xc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	681b      	ldr	r3, [r3, #0]
   d4d54:	9301      	str	r3, [sp, #4]
   d4d56:	bd08      	pop	{r3, pc}
   d4d58:	0003021c 	.word	0x0003021c

000d4d5c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4d5c:	b508      	push	{r3, lr}
   d4d5e:	4b02      	ldr	r3, [pc, #8]	; (d4d68 <free+0xc>)
   d4d60:	681b      	ldr	r3, [r3, #0]
   d4d62:	685b      	ldr	r3, [r3, #4]
   d4d64:	9301      	str	r3, [sp, #4]
   d4d66:	bd08      	pop	{r3, pc}
   d4d68:	0003021c 	.word	0x0003021c

000d4d6c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4d6c:	b508      	push	{r3, lr}
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <realloc+0xc>)
   d4d70:	681b      	ldr	r3, [r3, #0]
   d4d72:	689b      	ldr	r3, [r3, #8]
   d4d74:	9301      	str	r3, [sp, #4]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	0003021c 	.word	0x0003021c

000d4d7c <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <siscanf+0xc>)
   d4d80:	681b      	ldr	r3, [r3, #0]
   d4d82:	699b      	ldr	r3, [r3, #24]
   d4d84:	9301      	str	r3, [sp, #4]
   d4d86:	bd08      	pop	{r3, pc}
   d4d88:	0003021c 	.word	0x0003021c

000d4d8c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d4d8c:	b508      	push	{r3, lr}
   d4d8e:	4b02      	ldr	r3, [pc, #8]	; (d4d98 <snprintf+0xc>)
   d4d90:	681b      	ldr	r3, [r3, #0]
   d4d92:	69db      	ldr	r3, [r3, #28]
   d4d94:	9301      	str	r3, [sp, #4]
   d4d96:	bd08      	pop	{r3, pc}
   d4d98:	0003021c 	.word	0x0003021c

000d4d9c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4d9c:	b508      	push	{r3, lr}
   d4d9e:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <abort+0xc>)
   d4da0:	681b      	ldr	r3, [r3, #0]
   d4da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4da4:	9301      	str	r3, [sp, #4]
   d4da6:	bd08      	pop	{r3, pc}
   d4da8:	0003021c 	.word	0x0003021c

000d4dac <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4dac:	b508      	push	{r3, lr}
   d4dae:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <_malloc_r+0xc>)
   d4db0:	681b      	ldr	r3, [r3, #0]
   d4db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4db4:	9301      	str	r3, [sp, #4]
   d4db6:	bd08      	pop	{r3, pc}
   d4db8:	0003021c 	.word	0x0003021c

000d4dbc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4dbc:	2100      	movs	r1, #0
   d4dbe:	f7ff bf09 	b.w	d4bd4 <system_delay_ms>

000d4dc2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4dc2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4dc4:	6883      	ldr	r3, [r0, #8]
   d4dc6:	4604      	mov	r4, r0
   d4dc8:	b90b      	cbnz	r3, d4dce <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4dca:	f001 fa3a 	bl	d6242 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4dce:	68c3      	ldr	r3, [r0, #12]
   d4dd0:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4dd2:	68a3      	ldr	r3, [r4, #8]
   d4dd4:	b11b      	cbz	r3, d4dde <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4dd6:	2203      	movs	r2, #3
   d4dd8:	4621      	mov	r1, r4
   d4dda:	4620      	mov	r0, r4
   d4ddc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4dde:	4620      	mov	r0, r4
   d4de0:	2110      	movs	r1, #16
}
   d4de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4de6:	f001 ba10 	b.w	d620a <_ZdlPvj>

000d4dea <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4dea:	b510      	push	{r4, lr}
   d4dec:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4dee:	6800      	ldr	r0, [r0, #0]
   d4df0:	b108      	cbz	r0, d4df6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4df2:	f7ff fd8f 	bl	d4914 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4df6:	4620      	mov	r0, r4
   d4df8:	bd10      	pop	{r4, pc}

000d4dfa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4dfa:	680b      	ldr	r3, [r1, #0]
   d4dfc:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4dfe:	b113      	cbz	r3, d4e06 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4e00:	685a      	ldr	r2, [r3, #4]
   d4e02:	3201      	adds	r2, #1
   d4e04:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4e06:	4770      	bx	lr

000d4e08 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4e08:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4e0a:	4c06      	ldr	r4, [pc, #24]	; (d4e24 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4e0c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4e0e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4e10:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4e12:	f7ff fd77 	bl	d4904 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4e16:	4620      	mov	r0, r4
   d4e18:	4a03      	ldr	r2, [pc, #12]	; (d4e28 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4e1a:	4904      	ldr	r1, [pc, #16]	; (d4e2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4e20:	f001 b9ee 	b.w	d6200 <__aeabi_atexit>
   d4e24:	2003e36c 	.word	0x2003e36c
   d4e28:	2003e304 	.word	0x2003e304
   d4e2c:	000d4deb 	.word	0x000d4deb

000d4e30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4e30:	4770      	bx	lr

000d4e32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4e32:	2000      	movs	r0, #0
   d4e34:	4770      	bx	lr

000d4e36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4e36:	b510      	push	{r4, lr}
   d4e38:	2110      	movs	r1, #16
   d4e3a:	4604      	mov	r4, r0
   d4e3c:	f001 f9e5 	bl	d620a <_ZdlPvj>
   d4e40:	4620      	mov	r0, r4
   d4e42:	bd10      	pop	{r4, pc}

000d4e44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4e44:	b508      	push	{r3, lr}
      { delete this; }
   d4e46:	b108      	cbz	r0, d4e4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4e48:	f7ff fff5 	bl	d4e36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4e4c:	bd08      	pop	{r3, pc}

000d4e4e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4e4e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4e50:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4e52:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4e54:	b113      	cbz	r3, d4e5c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e56:	2203      	movs	r2, #3
   d4e58:	4601      	mov	r1, r0
   d4e5a:	4798      	blx	r3
    }
   d4e5c:	4620      	mov	r0, r4
   d4e5e:	bd10      	pop	{r4, pc}

000d4e60 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4e60:	2200      	movs	r2, #0
   d4e62:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4e64:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4e66:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4e6a:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4e6c:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4e70:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e72:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e74:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4e76:	680c      	ldr	r4, [r1, #0]
   d4e78:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e7a:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4e7c:	bd10      	pop	{r4, pc}

000d4e7e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4e7e:	b510      	push	{r4, lr}
   d4e80:	4604      	mov	r4, r0
    free((void*)msg_);
   d4e82:	6800      	ldr	r0, [r0, #0]
   d4e84:	f7ff ff6a 	bl	d4d5c <free>
}
   d4e88:	4620      	mov	r0, r4
   d4e8a:	bd10      	pop	{r4, pc}

000d4e8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4e8c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4e8e:	68c4      	ldr	r4, [r0, #12]
   d4e90:	b1f4      	cbz	r4, d4ed0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4e92:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4e94:	2b02      	cmp	r3, #2
   d4e96:	d103      	bne.n	d4ea0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4e98:	f104 000c 	add.w	r0, r4, #12
   d4e9c:	f7ff ffef 	bl	d4e7e <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4ea0:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4ea2:	b135      	cbz	r5, d4eb2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ea4:	4628      	mov	r0, r5
   d4ea6:	f7ff ffd2 	bl	d4e4e <_ZNSt14_Function_baseD1Ev>
   d4eaa:	2110      	movs	r1, #16
   d4eac:	4628      	mov	r0, r5
   d4eae:	f001 f9ac 	bl	d620a <_ZdlPvj>
   d4eb2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4eb4:	b135      	cbz	r5, d4ec4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4eb6:	4628      	mov	r0, r5
   d4eb8:	f7ff ffc9 	bl	d4e4e <_ZNSt14_Function_baseD1Ev>
   d4ebc:	2110      	movs	r1, #16
   d4ebe:	4628      	mov	r0, r5
   d4ec0:	f001 f9a3 	bl	d620a <_ZdlPvj>
   d4ec4:	4620      	mov	r0, r4
   d4ec6:	2114      	movs	r1, #20
   d4ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4ecc:	f001 b99d 	b.w	d620a <_ZdlPvj>
   d4ed0:	bd38      	pop	{r3, r4, r5, pc}

000d4ed2 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d4ed2:	b510      	push	{r4, lr}
   d4ed4:	b088      	sub	sp, #32
   d4ed6:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4ed8:	4668      	mov	r0, sp
   d4eda:	f000 fdf7 	bl	d5acc <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d4ede:	4669      	mov	r1, sp
   d4ee0:	a804      	add	r0, sp, #16
   d4ee2:	f000 fe15 	bl	d5b10 <_ZN6StringC1ERKS_>
   d4ee6:	a804      	add	r0, sp, #16
   d4ee8:	47a0      	blx	r4
   d4eea:	4604      	mov	r4, r0
   d4eec:	a804      	add	r0, sp, #16
   d4eee:	f000 fda6 	bl	d5a3e <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4ef2:	4668      	mov	r0, sp
   d4ef4:	f000 fda3 	bl	d5a3e <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d4ef8:	4620      	mov	r0, r4
   d4efa:	b008      	add	sp, #32
   d4efc:	bd10      	pop	{r4, pc}

000d4efe <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4efe:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d4f00:	2410      	movs	r4, #16
   d4f02:	b085      	sub	sp, #20
   d4f04:	4607      	mov	r7, r0
   d4f06:	460e      	mov	r6, r1
   d4f08:	4615      	mov	r5, r2
   d4f0a:	2100      	movs	r1, #0
   d4f0c:	4622      	mov	r2, r4
   d4f0e:	4668      	mov	r0, sp
   d4f10:	f002 f8f7 	bl	d7102 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4f14:	2200      	movs	r2, #0
   d4f16:	4669      	mov	r1, sp
   d4f18:	4610      	mov	r0, r2
         size = sizeof(*this);
   d4f1a:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d4f1e:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d4f20:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d4f22:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4f24:	f7ff fe92 	bl	d4c4c <spark_function>
}
   d4f28:	b005      	add	sp, #20
   d4f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4f2c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4f2c:	b513      	push	{r0, r1, r4, lr}
   d4f2e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4f30:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4f34:	2300      	movs	r3, #0
   d4f36:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4f38:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4f3a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4f3c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f3e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4f40:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4f42:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f44:	f7ff fa03 	bl	d434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f48:	4620      	mov	r0, r4
   d4f4a:	b002      	add	sp, #8
   d4f4c:	bd10      	pop	{r4, pc}

000d4f4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4f4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f50:	460c      	mov	r4, r1
   d4f52:	ad02      	add	r5, sp, #8
   d4f54:	f854 3b04 	ldr.w	r3, [r4], #4
   d4f58:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4f5c:	4606      	mov	r6, r0
   d4f5e:	460f      	mov	r7, r1
   d4f60:	a801      	add	r0, sp, #4
   d4f62:	4621      	mov	r1, r4
   d4f64:	f7ff ff49 	bl	d4dfa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4f68:	4629      	mov	r1, r5
   d4f6a:	4630      	mov	r0, r6
   d4f6c:	f7ff ffde 	bl	d4f2c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f70:	a801      	add	r0, sp, #4
   d4f72:	f7ff f9ec 	bl	d434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f76:	4620      	mov	r0, r4
   d4f78:	f7ff f9e9 	bl	d434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4f7c:	4638      	mov	r0, r7
   d4f7e:	2108      	movs	r1, #8
   d4f80:	f001 f943 	bl	d620a <_ZdlPvj>
        return p;
    }
   d4f84:	4630      	mov	r0, r6
   d4f86:	b003      	add	sp, #12
   d4f88:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4f8a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4f8a:	b513      	push	{r0, r1, r4, lr}
   d4f8c:	460b      	mov	r3, r1
   d4f8e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f90:	c803      	ldmia	r0, {r0, r1}
   d4f92:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4f96:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4f9a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4f9e:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4fa2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4fa6:	b002      	add	sp, #8
   d4fa8:	bd10      	pop	{r4, pc}
	...

000d4fac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4fac:	b538      	push	{r3, r4, r5, lr}
   d4fae:	2300      	movs	r3, #0
   d4fb0:	4604      	mov	r4, r0
   d4fb2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4fb4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4fb6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4fb8:	f7ff f86f 	bl	d409a <_Znwj>
   d4fbc:	b128      	cbz	r0, d4fca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4fbe:	2301      	movs	r3, #1
   d4fc0:	6043      	str	r3, [r0, #4]
   d4fc2:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4fc4:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4fc6:	6003      	str	r3, [r0, #0]
   d4fc8:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4fca:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4fcc:	4620      	mov	r0, r4
   d4fce:	bd38      	pop	{r3, r4, r5, pc}
   d4fd0:	000d958c 	.word	0x000d958c

000d4fd4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4fd4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4fd6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4fd8:	b90a      	cbnz	r2, d4fde <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4fda:	f001 f932 	bl	d6242 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4fde:	68c3      	ldr	r3, [r0, #12]
    }
   d4fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4fe4:	4718      	bx	r3

000d4fe6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4fe6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4fe8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4fea:	f100 0110 	add.w	r1, r0, #16
   d4fee:	f7ff fff1 	bl	d4fd4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4ff2:	bd08      	pop	{r3, pc}

000d4ff4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ff4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4ff6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ff8:	b90a      	cbnz	r2, d4ffe <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4ffa:	f001 f922 	bl	d6242 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4ffe:	68c3      	ldr	r3, [r0, #12]
    }
   d5000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5004:	4718      	bx	r3

000d5006 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5006:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5008:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d500a:	f100 0110 	add.w	r1, r0, #16
   d500e:	f7ff fff1 	bl	d4ff4 <_ZNKSt8functionIFvRKbEEclES1_>
   d5012:	bd08      	pop	{r3, pc}

000d5014 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5014:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5016:	2300      	movs	r3, #0
   d5018:	6083      	str	r3, [r0, #8]
   d501a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d501c:	4604      	mov	r4, r0
   d501e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5020:	b12b      	cbz	r3, d502e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5022:	2202      	movs	r2, #2
   d5024:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5026:	68eb      	ldr	r3, [r5, #12]
   d5028:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d502a:	68ab      	ldr	r3, [r5, #8]
   d502c:	60a3      	str	r3, [r4, #8]
	}
    }
   d502e:	4620      	mov	r0, r4
   d5030:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5034 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5034:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5036:	b089      	sub	sp, #36	; 0x24
   d5038:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d503a:	4668      	mov	r0, sp
   d503c:	f7ff ff10 	bl	d4e60 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5040:	2300      	movs	r3, #0
   d5042:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5046:	f04f 0202 	mov.w	r2, #2
   d504a:	e8d4 3f4f 	ldrexb	r3, [r4]
   d504e:	2b00      	cmp	r3, #0
   d5050:	d103      	bne.n	d505a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d5052:	e8c4 2f41 	strexb	r1, r2, [r4]
   d5056:	2900      	cmp	r1, #0
   d5058:	d1f7      	bne.n	d504a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d505a:	d002      	beq.n	d5062 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d505c:	f88d 3008 	strb.w	r3, [sp, #8]
   d5060:	e063      	b.n	d512a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5062:	f114 050c 	adds.w	r5, r4, #12
   d5066:	d003      	beq.n	d5070 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5068:	4669      	mov	r1, sp
   d506a:	4628      	mov	r0, r5
   d506c:	f7ff fef8 	bl	d4e60 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5070:	f3bf 8f5f 	dmb	sy
   d5074:	2301      	movs	r3, #1
   d5076:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5078:	2000      	movs	r0, #0
   d507a:	f104 0308 	add.w	r3, r4, #8
   d507e:	f3bf 8f5f 	dmb	sy
   d5082:	e853 6f00 	ldrex	r6, [r3]
   d5086:	e843 0200 	strex	r2, r0, [r3]
   d508a:	2a00      	cmp	r2, #0
   d508c:	d1f9      	bne.n	d5082 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d508e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5092:	2e00      	cmp	r6, #0
   d5094:	d049      	beq.n	d512a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5096:	f7ff fda5 	bl	d4be4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d509a:	b120      	cbz	r0, d50a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d509c:	4629      	mov	r1, r5
   d509e:	4630      	mov	r0, r6
   d50a0:	f7ff ff98 	bl	d4fd4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d50a4:	e03a      	b.n	d511c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d50a6:	4631      	mov	r1, r6
   d50a8:	a802      	add	r0, sp, #8
   d50aa:	f7ff ffb3 	bl	d5014 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d50ae:	68e0      	ldr	r0, [r4, #12]
   d50b0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d50b4:	b108      	cbz	r0, d50ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d50b6:	f002 f867 	bl	d7188 <strdup>
   d50ba:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d50bc:	2010      	movs	r0, #16
   d50be:	f8ad 501c 	strh.w	r5, [sp, #28]
   d50c2:	f7fe ffea 	bl	d409a <_Znwj>
   d50c6:	4605      	mov	r5, r0
   d50c8:	b1e8      	cbz	r0, d5106 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d50ca:	2700      	movs	r7, #0
   d50cc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d50ce:	2018      	movs	r0, #24
   d50d0:	f7fe ffe3 	bl	d409a <_Znwj>
   d50d4:	4604      	mov	r4, r0
   d50d6:	b188      	cbz	r0, d50fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d50d8:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d50da:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d50dc:	a802      	add	r0, sp, #8
   d50de:	f7ff ff54 	bl	d4f8a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50e2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d50e4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d50e6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50e8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d50ea:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d50ec:	a906      	add	r1, sp, #24
   d50ee:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d50f0:	60e3      	str	r3, [r4, #12]
   d50f2:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d50f6:	9205      	str	r2, [sp, #20]
   d50f8:	f7ff feb2 	bl	d4e60 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d50fc:	4b0d      	ldr	r3, [pc, #52]	; (d5134 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d50fe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5100:	4b0d      	ldr	r3, [pc, #52]	; (d5138 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5102:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5104:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5106:	a806      	add	r0, sp, #24
   d5108:	f7ff feb9 	bl	d4e7e <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d510c:	a802      	add	r0, sp, #8
   d510e:	f7ff fe9e 	bl	d4e4e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5112:	2200      	movs	r2, #0
   d5114:	4629      	mov	r1, r5
   d5116:	4809      	ldr	r0, [pc, #36]	; (d513c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5118:	f7ff fd6c 	bl	d4bf4 <application_thread_invoke>
   d511c:	4630      	mov	r0, r6
   d511e:	f7ff fe96 	bl	d4e4e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5122:	2110      	movs	r1, #16
   d5124:	4630      	mov	r0, r6
   d5126:	f001 f870 	bl	d620a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d512a:	4668      	mov	r0, sp
   d512c:	f7ff fea7 	bl	d4e7e <_ZN8particle5ErrorD1Ev>
    }
   d5130:	b009      	add	sp, #36	; 0x24
   d5132:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5134:	000d4fe7 	.word	0x000d4fe7
   d5138:	000d525d 	.word	0x000d525d
   d513c:	000d4dc3 	.word	0x000d4dc3

000d5140 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5144:	b08b      	sub	sp, #44	; 0x2c
   d5146:	4606      	mov	r6, r0
   d5148:	460f      	mov	r7, r1
   d514a:	4690      	mov	r8, r2
   d514c:	4699      	mov	r9, r3
   d514e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5152:	f7ff fd8b 	bl	d4c6c <spark_cloud_flag_connected>
   d5156:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d5158:	4683      	mov	fp, r0
   d515a:	bb30      	cbnz	r0, d51aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d515c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5160:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5162:	a905      	add	r1, sp, #20
   d5164:	4628      	mov	r0, r5
   d5166:	f8ad 3018 	strh.w	r3, [sp, #24]
   d516a:	f7ff fe79 	bl	d4e60 <_ZN8particle5ErrorC1EOS0_>
   d516e:	2014      	movs	r0, #20
   d5170:	f7fe ff93 	bl	d409a <_Znwj>
   d5174:	4604      	mov	r4, r0
   d5176:	b158      	cbz	r0, d5190 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5178:	2302      	movs	r3, #2
   d517a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d517c:	2301      	movs	r3, #1
   d517e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5180:	f8c0 b004 	str.w	fp, [r0, #4]
   d5184:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5188:	4629      	mov	r1, r5
   d518a:	300c      	adds	r0, #12
   d518c:	f7ff fe68 	bl	d4e60 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5190:	4630      	mov	r0, r6
   d5192:	4621      	mov	r1, r4
   d5194:	f840 4b04 	str.w	r4, [r0], #4
   d5198:	f7ff ff08 	bl	d4fac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d519c:	4628      	mov	r0, r5
   d519e:	f7ff fe6e 	bl	d4e7e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d51a2:	a805      	add	r0, sp, #20
   d51a4:	f7ff fe6b 	bl	d4e7e <_ZN8particle5ErrorD1Ev>
   d51a8:	e052      	b.n	d5250 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d51aa:	2400      	movs	r4, #0
   d51ac:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d51ae:	2014      	movs	r0, #20
   d51b0:	606c      	str	r4, [r5, #4]
   d51b2:	60ac      	str	r4, [r5, #8]
   d51b4:	9307      	str	r3, [sp, #28]
   d51b6:	f7fe ff70 	bl	d409a <_Znwj>
   d51ba:	4601      	mov	r1, r0
   d51bc:	b118      	cbz	r0, d51c6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d51be:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d51c0:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d51c2:	6044      	str	r4, [r0, #4]
   d51c4:	6084      	str	r4, [r0, #8]
   d51c6:	a804      	add	r0, sp, #16
   d51c8:	9103      	str	r1, [sp, #12]
   d51ca:	f7ff feef 	bl	d4fac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d51ce:	4b22      	ldr	r3, [pc, #136]	; (d5258 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d51d0:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d51d2:	2008      	movs	r0, #8
   d51d4:	f7fe ff61 	bl	d409a <_Znwj>
   d51d8:	4604      	mov	r4, r0
   d51da:	b128      	cbz	r0, d51e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d51dc:	9b03      	ldr	r3, [sp, #12]
   d51de:	f840 3b04 	str.w	r3, [r0], #4
   d51e2:	a904      	add	r1, sp, #16
   d51e4:	f7ff fe09 	bl	d4dfa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d51e8:	9500      	str	r5, [sp, #0]
   d51ea:	fa5f f38a 	uxtb.w	r3, sl
   d51ee:	464a      	mov	r2, r9
   d51f0:	4641      	mov	r1, r8
   d51f2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d51f4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d51f6:	f7ff fd41 	bl	d4c7c <spark_send_event>
   d51fa:	b920      	cbnz	r0, d5206 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d51fc:	9b03      	ldr	r3, [sp, #12]
   d51fe:	785b      	ldrb	r3, [r3, #1]
   d5200:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5204:	b183      	cbz	r3, d5228 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5206:	9b03      	ldr	r3, [sp, #12]
   d5208:	9305      	str	r3, [sp, #20]
   d520a:	a904      	add	r1, sp, #16
   d520c:	a806      	add	r0, sp, #24
   d520e:	f7ff fdf4 	bl	d4dfa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5212:	a905      	add	r1, sp, #20
   d5214:	4630      	mov	r0, r6
   d5216:	f7ff fe89 	bl	d4f2c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d521a:	a806      	add	r0, sp, #24
   d521c:	f7ff f897 	bl	d434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5220:	a804      	add	r0, sp, #16
   d5222:	f7ff f894 	bl	d434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5226:	e013      	b.n	d5250 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5228:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d522c:	a905      	add	r1, sp, #20
   d522e:	a803      	add	r0, sp, #12
   d5230:	9205      	str	r2, [sp, #20]
   d5232:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5236:	f7ff fefd 	bl	d5034 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d523a:	a805      	add	r0, sp, #20
   d523c:	f7ff fe1f 	bl	d4e7e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5240:	a805      	add	r0, sp, #20
   d5242:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5244:	f7ff fe83 	bl	d4f4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5248:	a806      	add	r0, sp, #24
   d524a:	f7ff f880 	bl	d434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d524e:	e7da      	b.n	d5206 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d5250:	4630      	mov	r0, r6
   d5252:	b00b      	add	sp, #44	; 0x2c
   d5254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5258:	000d53cd 	.word	0x000d53cd

000d525c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d525c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d525e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5260:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5262:	d006      	beq.n	d5272 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5264:	2a03      	cmp	r2, #3
   d5266:	d017      	beq.n	d5298 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5268:	2a01      	cmp	r2, #1
   d526a:	d122      	bne.n	d52b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d526c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d526e:	6003      	str	r3, [r0, #0]
	      break;
   d5270:	e01f      	b.n	d52b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5272:	2018      	movs	r0, #24
   d5274:	680e      	ldr	r6, [r1, #0]
   d5276:	f7fe ff10 	bl	d409a <_Znwj>
   d527a:	4605      	mov	r5, r0
   d527c:	b150      	cbz	r0, d5294 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d527e:	4631      	mov	r1, r6
   d5280:	f7ff fec8 	bl	d5014 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5284:	6930      	ldr	r0, [r6, #16]
   d5286:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d528a:	b108      	cbz	r0, d5290 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d528c:	f001 ff7c 	bl	d7188 <strdup>
   d5290:	6128      	str	r0, [r5, #16]
   d5292:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5294:	6025      	str	r5, [r4, #0]
   d5296:	e00c      	b.n	d52b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5298:	6804      	ldr	r4, [r0, #0]
   d529a:	b154      	cbz	r4, d52b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d529c:	f104 0010 	add.w	r0, r4, #16
   d52a0:	f7ff fded 	bl	d4e7e <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d52a4:	4620      	mov	r0, r4
   d52a6:	f7ff fdd2 	bl	d4e4e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d52aa:	2118      	movs	r1, #24
   d52ac:	4620      	mov	r0, r4
   d52ae:	f000 ffac 	bl	d620a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d52b2:	2000      	movs	r0, #0
   d52b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d52b6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d52b6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d52b8:	2300      	movs	r3, #0
   d52ba:	6083      	str	r3, [r0, #8]
   d52bc:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d52be:	4604      	mov	r4, r0
   d52c0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d52c2:	b12b      	cbz	r3, d52d0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d52c4:	2202      	movs	r2, #2
   d52c6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d52c8:	68eb      	ldr	r3, [r5, #12]
   d52ca:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d52cc:	68ab      	ldr	r3, [r5, #8]
   d52ce:	60a3      	str	r3, [r4, #8]
	}
    }
   d52d0:	4620      	mov	r0, r4
   d52d2:	bd38      	pop	{r3, r4, r5, pc}

000d52d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d52d4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d52d6:	b570      	push	{r4, r5, r6, lr}
   d52d8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d52da:	d006      	beq.n	d52ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d52dc:	2a03      	cmp	r2, #3
   d52de:	d011      	beq.n	d5304 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d52e0:	2a01      	cmp	r2, #1
   d52e2:	d118      	bne.n	d5316 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d52e4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d52e6:	6003      	str	r3, [r0, #0]
	      break;
   d52e8:	e015      	b.n	d5316 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d52ea:	2014      	movs	r0, #20
   d52ec:	680e      	ldr	r6, [r1, #0]
   d52ee:	f7fe fed4 	bl	d409a <_Znwj>
   d52f2:	4605      	mov	r5, r0
   d52f4:	b120      	cbz	r0, d5300 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d52f6:	4631      	mov	r1, r6
   d52f8:	f7ff ffdd 	bl	d52b6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d52fc:	7c33      	ldrb	r3, [r6, #16]
   d52fe:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5300:	6025      	str	r5, [r4, #0]
   d5302:	e008      	b.n	d5316 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5304:	6804      	ldr	r4, [r0, #0]
   d5306:	b134      	cbz	r4, d5316 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5308:	4620      	mov	r0, r4
   d530a:	f7ff fda0 	bl	d4e4e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d530e:	2114      	movs	r1, #20
   d5310:	4620      	mov	r0, r4
   d5312:	f000 ff7a 	bl	d620a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5316:	2000      	movs	r0, #0
   d5318:	bd70      	pop	{r4, r5, r6, pc}
	...

000d531c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d531c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d531e:	2300      	movs	r3, #0
   d5320:	b087      	sub	sp, #28
   d5322:	460c      	mov	r4, r1
   d5324:	f3bf 8f5f 	dmb	sy
   d5328:	e850 6f00 	ldrex	r6, [r0]
   d532c:	e840 3200 	strex	r2, r3, [r0]
   d5330:	2a00      	cmp	r2, #0
   d5332:	d1f9      	bne.n	d5328 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5334:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5338:	2e00      	cmp	r6, #0
   d533a:	d03f      	beq.n	d53bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d533c:	4618      	mov	r0, r3
   d533e:	f7ff fc51 	bl	d4be4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5342:	4607      	mov	r7, r0
   d5344:	b120      	cbz	r0, d5350 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5346:	4621      	mov	r1, r4
   d5348:	4630      	mov	r0, r6
   d534a:	f7ff fe53 	bl	d4ff4 <_ZNKSt8functionIFvRKbEEclES1_>
   d534e:	e02e      	b.n	d53ae <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5350:	4631      	mov	r1, r6
   d5352:	a801      	add	r0, sp, #4
   d5354:	f7ff ffaf 	bl	d52b6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5358:	7823      	ldrb	r3, [r4, #0]
   d535a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d535e:	2010      	movs	r0, #16
   d5360:	f7fe fe9b 	bl	d409a <_Znwj>
   d5364:	4605      	mov	r5, r0
   d5366:	b1d0      	cbz	r0, d539e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5368:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d536a:	2014      	movs	r0, #20
   d536c:	f7fe fe95 	bl	d409a <_Znwj>
   d5370:	4604      	mov	r4, r0
   d5372:	b178      	cbz	r0, d5394 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5374:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5376:	4601      	mov	r1, r0
   d5378:	a801      	add	r0, sp, #4
   d537a:	f7ff fe06 	bl	d4f8a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d537e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5380:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5382:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5384:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5386:	9203      	str	r2, [sp, #12]
   d5388:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d538a:	60e3      	str	r3, [r4, #12]
   d538c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5390:	9204      	str	r2, [sp, #16]
   d5392:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5394:	4b0a      	ldr	r3, [pc, #40]	; (d53c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5396:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5398:	4b0a      	ldr	r3, [pc, #40]	; (d53c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d539a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d539c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d539e:	a801      	add	r0, sp, #4
   d53a0:	f7ff fd55 	bl	d4e4e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d53a4:	2200      	movs	r2, #0
   d53a6:	4629      	mov	r1, r5
   d53a8:	4807      	ldr	r0, [pc, #28]	; (d53c8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d53aa:	f7ff fc23 	bl	d4bf4 <application_thread_invoke>
   d53ae:	4630      	mov	r0, r6
   d53b0:	f7ff fd4d 	bl	d4e4e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d53b4:	2110      	movs	r1, #16
   d53b6:	4630      	mov	r0, r6
   d53b8:	f000 ff27 	bl	d620a <_ZdlPvj>
        }
    }
   d53bc:	b007      	add	sp, #28
   d53be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d53c0:	000d5007 	.word	0x000d5007
   d53c4:	000d52d5 	.word	0x000d52d5
   d53c8:	000d4dc3 	.word	0x000d4dc3

000d53cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d53cc:	b530      	push	{r4, r5, lr}
   d53ce:	b085      	sub	sp, #20
   d53d0:	4604      	mov	r4, r0
   d53d2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d53d4:	4668      	mov	r0, sp
   d53d6:	4611      	mov	r1, r2
   d53d8:	f7ff fdb9 	bl	d4f4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d53dc:	b17c      	cbz	r4, d53fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d53de:	b224      	sxth	r4, r4
   d53e0:	4628      	mov	r0, r5
   d53e2:	b10d      	cbz	r5, d53e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d53e4:	f001 fed0 	bl	d7188 <strdup>
   d53e8:	9002      	str	r0, [sp, #8]
   d53ea:	a902      	add	r1, sp, #8
   d53ec:	4668      	mov	r0, sp
   d53ee:	f8ad 400c 	strh.w	r4, [sp, #12]
   d53f2:	f7ff fe1f 	bl	d5034 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d53f6:	a802      	add	r0, sp, #8
   d53f8:	f7ff fd41 	bl	d4e7e <_ZN8particle5ErrorD1Ev>
   d53fc:	e01d      	b.n	d543a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d53fe:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5400:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5404:	f04f 0201 	mov.w	r2, #1
   d5408:	e8d0 3f4f 	ldrexb	r3, [r0]
   d540c:	42a3      	cmp	r3, r4
   d540e:	d103      	bne.n	d5418 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5410:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5414:	2900      	cmp	r1, #0
   d5416:	d1f7      	bne.n	d5408 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5418:	d002      	beq.n	d5420 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d541a:	f88d 3008 	strb.w	r3, [sp, #8]
   d541e:	e00c      	b.n	d543a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5420:	f110 010c 	adds.w	r1, r0, #12
   d5424:	f04f 0301 	mov.w	r3, #1
   d5428:	bf18      	it	ne
   d542a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d542c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5430:	3004      	adds	r0, #4
   d5432:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5436:	f7ff ff71 	bl	d531c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d543a:	a801      	add	r0, sp, #4
   d543c:	f7fe ff87 	bl	d434e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5440:	b005      	add	sp, #20
   d5442:	bd30      	pop	{r4, r5, pc}

000d5444 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5444:	2200      	movs	r2, #0
   d5446:	4611      	mov	r1, r2
   d5448:	6840      	ldr	r0, [r0, #4]
   d544a:	f7ff bc67 	b.w	d4d1c <network_listening>

000d544e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d544e:	2200      	movs	r2, #0
   d5450:	4611      	mov	r1, r2
   d5452:	6840      	ldr	r0, [r0, #4]
   d5454:	f7ff bc72 	b.w	d4d3c <network_get_listen_timeout>

000d5458 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5458:	2200      	movs	r2, #0
   d545a:	6840      	ldr	r0, [r0, #4]
   d545c:	f7ff bc66 	b.w	d4d2c <network_set_listen_timeout>

000d5460 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5460:	2200      	movs	r2, #0
   d5462:	f081 0101 	eor.w	r1, r1, #1
   d5466:	6840      	ldr	r0, [r0, #4]
   d5468:	f7ff bc50 	b.w	d4d0c <network_listen>

000d546c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d546c:	2300      	movs	r3, #0
   d546e:	461a      	mov	r2, r3
   d5470:	4619      	mov	r1, r3
   d5472:	6840      	ldr	r0, [r0, #4]
   d5474:	f7ff bc42 	b.w	d4cfc <network_off>

000d5478 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5478:	2300      	movs	r3, #0
   d547a:	461a      	mov	r2, r3
   d547c:	4619      	mov	r1, r3
   d547e:	6840      	ldr	r0, [r0, #4]
   d5480:	f7ff bc34 	b.w	d4cec <network_on>

000d5484 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5484:	2200      	movs	r2, #0
   d5486:	4611      	mov	r1, r2
   d5488:	6840      	ldr	r0, [r0, #4]
   d548a:	f7ff bc27 	b.w	d4cdc <network_ready>

000d548e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d548e:	2200      	movs	r2, #0
   d5490:	4611      	mov	r1, r2
   d5492:	6840      	ldr	r0, [r0, #4]
   d5494:	f7ff bc12 	b.w	d4cbc <network_connecting>

000d5498 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5498:	2200      	movs	r2, #0
   d549a:	2102      	movs	r1, #2
   d549c:	6840      	ldr	r0, [r0, #4]
   d549e:	f7ff bc15 	b.w	d4ccc <network_disconnect>

000d54a2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d54a2:	2300      	movs	r3, #0
   d54a4:	461a      	mov	r2, r3
   d54a6:	6840      	ldr	r0, [r0, #4]
   d54a8:	f7ff bc00 	b.w	d4cac <network_connect>

000d54ac <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d54ac:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d54ae:	2203      	movs	r2, #3
   d54b0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d54b2:	4a02      	ldr	r2, [pc, #8]	; (d54bc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d54b4:	601a      	str	r2, [r3, #0]
   d54b6:	4770      	bx	lr
   d54b8:	2003e370 	.word	0x2003e370
   d54bc:	000d95a8 	.word	0x000d95a8

000d54c0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d54c0:	4770      	bx	lr

000d54c2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d54c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d54c4:	4606      	mov	r6, r0
   d54c6:	4615      	mov	r5, r2
   d54c8:	460c      	mov	r4, r1
   d54ca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d54cc:	42bc      	cmp	r4, r7
   d54ce:	d006      	beq.n	d54de <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d54d0:	6833      	ldr	r3, [r6, #0]
   d54d2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d54d6:	689b      	ldr	r3, [r3, #8]
   d54d8:	4630      	mov	r0, r6
   d54da:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d54dc:	e7f6      	b.n	d54cc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d54de:	4628      	mov	r0, r5
   d54e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d54e2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d54e2:	2200      	movs	r2, #0
   d54e4:	7c00      	ldrb	r0, [r0, #16]
   d54e6:	f7ff ba95 	b.w	d4a14 <HAL_I2C_Write_Data>

000d54ea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d54ea:	2100      	movs	r1, #0
   d54ec:	7c00      	ldrb	r0, [r0, #16]
   d54ee:	f7ff ba99 	b.w	d4a24 <HAL_I2C_Available_Data>

000d54f2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d54f2:	2100      	movs	r1, #0
   d54f4:	7c00      	ldrb	r0, [r0, #16]
   d54f6:	f7ff ba9d 	b.w	d4a34 <HAL_I2C_Read_Data>

000d54fa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d54fa:	2100      	movs	r1, #0
   d54fc:	7c00      	ldrb	r0, [r0, #16]
   d54fe:	f7ff baa1 	b.w	d4a44 <HAL_I2C_Peek_Data>

000d5502 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5502:	2100      	movs	r1, #0
   d5504:	7c00      	ldrb	r0, [r0, #16]
   d5506:	f7ff baa5 	b.w	d4a54 <HAL_I2C_Flush_Data>

000d550a <_ZN7TwoWireD0Ev>:
   d550a:	b510      	push	{r4, lr}
   d550c:	2114      	movs	r1, #20
   d550e:	4604      	mov	r4, r0
   d5510:	f000 fe7b 	bl	d620a <_ZdlPvj>
   d5514:	4620      	mov	r0, r4
   d5516:	bd10      	pop	{r4, pc}

000d5518 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5518:	b510      	push	{r4, lr}
   d551a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d551c:	2300      	movs	r3, #0
   d551e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5524:	60a3      	str	r3, [r4, #8]
   d5526:	4b04      	ldr	r3, [pc, #16]	; (d5538 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5528:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d552a:	4608      	mov	r0, r1
   d552c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d552e:	4611      	mov	r1, r2
   d5530:	f7ff faa0 	bl	d4a74 <HAL_I2C_Init>
}
   d5534:	4620      	mov	r0, r4
   d5536:	bd10      	pop	{r4, pc}
   d5538:	000d95dc 	.word	0x000d95dc

000d553c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d553c:	2100      	movs	r1, #0
   d553e:	7c00      	ldrb	r0, [r0, #16]
   d5540:	f7ff ba90 	b.w	d4a64 <HAL_I2C_Is_Enabled>

000d5544 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d5544:	4700      	bx	r0
	...

000d5548 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d5548:	b5f0      	push	{r4, r5, r6, r7, lr}
   d554a:	b085      	sub	sp, #20
   d554c:	461c      	mov	r4, r3
   d554e:	460e      	mov	r6, r1
   d5550:	4617      	mov	r7, r2
   d5552:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d5554:	f7ff fa56 	bl	d4a04 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d5558:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d555a:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d555c:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d5560:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d5562:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d5566:	bfa5      	ittet	ge
   d5568:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d556c:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d5570:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d5572:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d5574:	9300      	str	r3, [sp, #0]
   d5576:	4632      	mov	r2, r6
   d5578:	463b      	mov	r3, r7
   d557a:	4906      	ldr	r1, [pc, #24]	; (d5594 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d557c:	bfa8      	it	ge
   d557e:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d5582:	4628      	mov	r0, r5
   d5584:	f7ff fa36 	bl	d49f4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d5588:	fab0 f080 	clz	r0, r0
   d558c:	0940      	lsrs	r0, r0, #5
   d558e:	b005      	add	sp, #20
   d5590:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5592:	bf00      	nop
   d5594:	000d5545 	.word	0x000d5545

000d5598 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5598:	4770      	bx	lr

000d559a <_ZN9IPAddressD0Ev>:
   d559a:	b510      	push	{r4, lr}
   d559c:	2118      	movs	r1, #24
   d559e:	4604      	mov	r4, r0
   d55a0:	f000 fe33 	bl	d620a <_ZdlPvj>
   d55a4:	4620      	mov	r0, r4
   d55a6:	bd10      	pop	{r4, pc}

000d55a8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d55a8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d55aa:	7d03      	ldrb	r3, [r0, #20]
   d55ac:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d55ae:	b08d      	sub	sp, #52	; 0x34
   d55b0:	460e      	mov	r6, r1
   d55b2:	f100 0704 	add.w	r7, r0, #4
   d55b6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d55ba:	d002      	beq.n	d55c2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d55bc:	f100 0508 	add.w	r5, r0, #8
   d55c0:	e018      	b.n	d55f4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d55c2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d55c4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d55c6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d55ca:	232f      	movs	r3, #47	; 0x2f
   d55cc:	462a      	mov	r2, r5
   d55ce:	200a      	movs	r0, #10
   d55d0:	f7ff fa58 	bl	d4a84 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d55d4:	4628      	mov	r0, r5
   d55d6:	f001 fdf2 	bl	d71be <strlen>
   d55da:	6833      	ldr	r3, [r6, #0]
   d55dc:	4602      	mov	r2, r0
   d55de:	68db      	ldr	r3, [r3, #12]
   d55e0:	4629      	mov	r1, r5
   d55e2:	4630      	mov	r0, r6
   d55e4:	4798      	blx	r3
   d55e6:	e00f      	b.n	d5608 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d55e8:	b124      	cbz	r4, d55f4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d55ea:	212e      	movs	r1, #46	; 0x2e
   d55ec:	4630      	mov	r0, r6
   d55ee:	f000 f9d5 	bl	d599c <_ZN5Print5printEc>
   d55f2:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d55f4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d55f8:	220a      	movs	r2, #10
   d55fa:	4630      	mov	r0, r6
   d55fc:	f000 f9d1 	bl	d59a2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5600:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5602:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5604:	d1f0      	bne.n	d55e8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5606:	4620      	mov	r0, r4
    }
    return n;
}
   d5608:	b00d      	add	sp, #52	; 0x34
   d560a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d560c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d560c:	b510      	push	{r4, lr}
   d560e:	4b05      	ldr	r3, [pc, #20]	; (d5624 <_ZN9IPAddressC1Ev+0x18>)
   d5610:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5612:	2211      	movs	r2, #17
   d5614:	f840 3b04 	str.w	r3, [r0], #4
   d5618:	2100      	movs	r1, #0
   d561a:	f001 fd72 	bl	d7102 <memset>
{
    clear();
}
   d561e:	4620      	mov	r0, r4
   d5620:	bd10      	pop	{r4, pc}
   d5622:	bf00      	nop
   d5624:	000d9604 	.word	0x000d9604

000d5628 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5628:	4603      	mov	r3, r0
   d562a:	4a07      	ldr	r2, [pc, #28]	; (d5648 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d562c:	b510      	push	{r4, lr}
   d562e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5632:	f101 0210 	add.w	r2, r1, #16
   d5636:	f851 4b04 	ldr.w	r4, [r1], #4
   d563a:	f843 4b04 	str.w	r4, [r3], #4
   d563e:	4291      	cmp	r1, r2
   d5640:	d1f9      	bne.n	d5636 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5642:	780a      	ldrb	r2, [r1, #0]
   d5644:	701a      	strb	r2, [r3, #0]
}
   d5646:	bd10      	pop	{r4, pc}
   d5648:	000d9604 	.word	0x000d9604

000d564c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d564c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d564e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5652:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5656:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d565a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d565e:	2304      	movs	r3, #4
   d5660:	6041      	str	r1, [r0, #4]
   d5662:	7503      	strb	r3, [r0, #20]
   d5664:	bd10      	pop	{r4, pc}

000d5666 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5666:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5668:	780d      	ldrb	r5, [r1, #0]
   d566a:	788b      	ldrb	r3, [r1, #2]
   d566c:	784a      	ldrb	r2, [r1, #1]
   d566e:	78c9      	ldrb	r1, [r1, #3]
   d5670:	9100      	str	r1, [sp, #0]
   d5672:	4629      	mov	r1, r5
   d5674:	f7ff ffea 	bl	d564c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5678:	b003      	add	sp, #12
   d567a:	bd30      	pop	{r4, r5, pc}

000d567c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d567c:	4b01      	ldr	r3, [pc, #4]	; (d5684 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d567e:	4a02      	ldr	r2, [pc, #8]	; (d5688 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5680:	601a      	str	r2, [r3, #0]
   d5682:	4770      	bx	lr
   d5684:	2003e378 	.word	0x2003e378
   d5688:	000d9683 	.word	0x000d9683

000d568c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d568c:	2200      	movs	r2, #0
   d568e:	4611      	mov	r1, r2
   d5690:	6840      	ldr	r0, [r0, #4]
   d5692:	f7ff bb43 	b.w	d4d1c <network_listening>

000d5696 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5696:	2200      	movs	r2, #0
   d5698:	4611      	mov	r1, r2
   d569a:	6840      	ldr	r0, [r0, #4]
   d569c:	f7ff bb4e 	b.w	d4d3c <network_get_listen_timeout>

000d56a0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d56a0:	2200      	movs	r2, #0
   d56a2:	6840      	ldr	r0, [r0, #4]
   d56a4:	f7ff bb42 	b.w	d4d2c <network_set_listen_timeout>

000d56a8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d56a8:	2200      	movs	r2, #0
   d56aa:	f081 0101 	eor.w	r1, r1, #1
   d56ae:	6840      	ldr	r0, [r0, #4]
   d56b0:	f7ff bb2c 	b.w	d4d0c <network_listen>

000d56b4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d56b4:	2300      	movs	r3, #0
   d56b6:	461a      	mov	r2, r3
   d56b8:	2101      	movs	r1, #1
   d56ba:	6840      	ldr	r0, [r0, #4]
   d56bc:	f7ff bb1e 	b.w	d4cfc <network_off>

000d56c0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d56c0:	2300      	movs	r3, #0
   d56c2:	461a      	mov	r2, r3
   d56c4:	4619      	mov	r1, r3
   d56c6:	6840      	ldr	r0, [r0, #4]
   d56c8:	f7ff bb10 	b.w	d4cec <network_on>

000d56cc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d56cc:	2200      	movs	r2, #0
   d56ce:	4611      	mov	r1, r2
   d56d0:	6840      	ldr	r0, [r0, #4]
   d56d2:	f7ff bb03 	b.w	d4cdc <network_ready>

000d56d6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d56d6:	2200      	movs	r2, #0
   d56d8:	4611      	mov	r1, r2
   d56da:	6840      	ldr	r0, [r0, #4]
   d56dc:	f7ff baee 	b.w	d4cbc <network_connecting>

000d56e0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d56e0:	2200      	movs	r2, #0
   d56e2:	2102      	movs	r1, #2
   d56e4:	6840      	ldr	r0, [r0, #4]
   d56e6:	f7ff baf1 	b.w	d4ccc <network_disconnect>

000d56ea <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d56ea:	2300      	movs	r3, #0
   d56ec:	461a      	mov	r2, r3
   d56ee:	6840      	ldr	r0, [r0, #4]
   d56f0:	f7ff badc 	b.w	d4cac <network_connect>

000d56f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d56f4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d56f6:	4605      	mov	r5, r0
   d56f8:	b188      	cbz	r0, d571e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d56fa:	6804      	ldr	r4, [r0, #0]
   d56fc:	b14c      	cbz	r4, d5712 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d56fe:	68a3      	ldr	r3, [r4, #8]
   d5700:	b11b      	cbz	r3, d570a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5702:	2203      	movs	r2, #3
   d5704:	4621      	mov	r1, r4
   d5706:	4620      	mov	r0, r4
   d5708:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d570a:	2110      	movs	r1, #16
   d570c:	4620      	mov	r0, r4
   d570e:	f000 fd7c 	bl	d620a <_ZdlPvj>
   d5712:	4628      	mov	r0, r5
   d5714:	2114      	movs	r1, #20
      }
   d5716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d571a:	f000 bd76 	b.w	d620a <_ZdlPvj>
   d571e:	bd38      	pop	{r3, r4, r5, pc}

000d5720 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5720:	b110      	cbz	r0, d5728 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5722:	6803      	ldr	r3, [r0, #0]
   d5724:	685b      	ldr	r3, [r3, #4]
   d5726:	4718      	bx	r3
   d5728:	4770      	bx	lr

000d572a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d572a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d572c:	6803      	ldr	r3, [r0, #0]
   d572e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5730:	b1bb      	cbz	r3, d5762 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5732:	6858      	ldr	r0, [r3, #4]
   d5734:	f7ff f8ce 	bl	d48d4 <os_thread_is_current>
   d5738:	b978      	cbnz	r0, d575a <_ZN6ThreadD1Ev+0x30>
   d573a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d573c:	7c5a      	ldrb	r2, [r3, #17]
   d573e:	b912      	cbnz	r2, d5746 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5740:	6858      	ldr	r0, [r3, #4]
   d5742:	f7ff f8cf 	bl	d48e4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5746:	6823      	ldr	r3, [r4, #0]
   d5748:	6858      	ldr	r0, [r3, #4]
   d574a:	f7ff f8d3 	bl	d48f4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d574e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5750:	2300      	movs	r3, #0
   d5752:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5754:	b128      	cbz	r0, d5762 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5756:	f7ff ffcd 	bl	d56f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d575a:	6820      	ldr	r0, [r4, #0]
   d575c:	b108      	cbz	r0, d5762 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d575e:	f7ff ffc9 	bl	d56f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5762:	4620      	mov	r0, r4
   d5764:	bd10      	pop	{r4, pc}

000d5766 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5766:	b538      	push	{r3, r4, r5, lr}
   d5768:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d576a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d576e:	b108      	cbz	r0, d5774 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5770:	f7fe fc97 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5774:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5778:	b108      	cbz	r0, d577e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d577a:	f7ff f8cb 	bl	d4914 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d577e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5782:	b135      	cbz	r5, d5792 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5784:	4628      	mov	r0, r5
   d5786:	f7ff ffd0 	bl	d572a <_ZN6ThreadD1Ev>
   d578a:	2104      	movs	r1, #4
   d578c:	4628      	mov	r0, r5
   d578e:	f000 fd3c 	bl	d620a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5792:	6820      	ldr	r0, [r4, #0]
   d5794:	b108      	cbz	r0, d579a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5796:	f7ff ffc3 	bl	d5720 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d579a:	4620      	mov	r0, r4
   d579c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d57a0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d57a0:	b510      	push	{r4, lr}
   d57a2:	4b04      	ldr	r3, [pc, #16]	; (d57b4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d57a4:	4604      	mov	r4, r0
   d57a6:	f840 3b08 	str.w	r3, [r0], #8
   d57aa:	f7ff ffdc 	bl	d5766 <_ZN5spark11MeshPublishD1Ev>
   d57ae:	4620      	mov	r0, r4
   d57b0:	bd10      	pop	{r4, pc}
   d57b2:	bf00      	nop
   d57b4:	000d96f4 	.word	0x000d96f4

000d57b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d57b8:	b538      	push	{r3, r4, r5, lr}
   d57ba:	4c0e      	ldr	r4, [pc, #56]	; (d57f4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d57bc:	4b0e      	ldr	r3, [pc, #56]	; (d57f8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d57be:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d57c0:	2500      	movs	r5, #0
   d57c2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d57c4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d57c8:	6063      	str	r3, [r4, #4]
   d57ca:	60a5      	str	r5, [r4, #8]
   d57cc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d57d0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d57d4:	f7ff f896 	bl	d4904 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d57d8:	4b08      	ldr	r3, [pc, #32]	; (d57fc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d57da:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d57de:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d57e2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d57e4:	4620      	mov	r0, r4
   d57e6:	4a06      	ldr	r2, [pc, #24]	; (d5800 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d57e8:	4906      	ldr	r1, [pc, #24]	; (d5804 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d57ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d57ee:	f000 bd07 	b.w	d6200 <__aeabi_atexit>
   d57f2:	bf00      	nop
   d57f4:	2003e37c 	.word	0x2003e37c
   d57f8:	000d9728 	.word	0x000d9728
   d57fc:	000d96f4 	.word	0x000d96f4
   d5800:	2003e304 	.word	0x2003e304
   d5804:	000d57a1 	.word	0x000d57a1

000d5808 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5808:	2300      	movs	r3, #0
   d580a:	461a      	mov	r2, r3
   d580c:	6840      	ldr	r0, [r0, #4]
   d580e:	f7ff ba4d 	b.w	d4cac <network_connect>

000d5812 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5812:	2200      	movs	r2, #0
   d5814:	2102      	movs	r1, #2
   d5816:	6840      	ldr	r0, [r0, #4]
   d5818:	f7ff ba58 	b.w	d4ccc <network_disconnect>

000d581c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d581c:	2200      	movs	r2, #0
   d581e:	4611      	mov	r1, r2
   d5820:	6840      	ldr	r0, [r0, #4]
   d5822:	f7ff ba4b 	b.w	d4cbc <network_connecting>

000d5826 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5826:	2200      	movs	r2, #0
   d5828:	4611      	mov	r1, r2
   d582a:	6840      	ldr	r0, [r0, #4]
   d582c:	f7ff ba56 	b.w	d4cdc <network_ready>

000d5830 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5830:	2300      	movs	r3, #0
   d5832:	461a      	mov	r2, r3
   d5834:	4619      	mov	r1, r3
   d5836:	6840      	ldr	r0, [r0, #4]
   d5838:	f7ff ba58 	b.w	d4cec <network_on>

000d583c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d583c:	2300      	movs	r3, #0
   d583e:	461a      	mov	r2, r3
   d5840:	4619      	mov	r1, r3
   d5842:	6840      	ldr	r0, [r0, #4]
   d5844:	f7ff ba5a 	b.w	d4cfc <network_off>

000d5848 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5848:	2200      	movs	r2, #0
   d584a:	f081 0101 	eor.w	r1, r1, #1
   d584e:	6840      	ldr	r0, [r0, #4]
   d5850:	f7ff ba5c 	b.w	d4d0c <network_listen>

000d5854 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5854:	2200      	movs	r2, #0
   d5856:	6840      	ldr	r0, [r0, #4]
   d5858:	f7ff ba68 	b.w	d4d2c <network_set_listen_timeout>

000d585c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d585c:	2200      	movs	r2, #0
   d585e:	4611      	mov	r1, r2
   d5860:	6840      	ldr	r0, [r0, #4]
   d5862:	f7ff ba6b 	b.w	d4d3c <network_get_listen_timeout>

000d5866 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5866:	2200      	movs	r2, #0
   d5868:	4611      	mov	r1, r2
   d586a:	6840      	ldr	r0, [r0, #4]
   d586c:	f7ff ba56 	b.w	d4d1c <network_listening>

000d5870 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5874:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5876:	b095      	sub	sp, #84	; 0x54
   d5878:	4616      	mov	r6, r2
   d587a:	460d      	mov	r5, r1
   d587c:	4607      	mov	r7, r0
    IPAddress addr;
   d587e:	f7ff fec5 	bl	d560c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5882:	4621      	mov	r1, r4
   d5884:	2220      	movs	r2, #32
   d5886:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5888:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d588a:	f001 fc3a 	bl	d7102 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d588e:	2340      	movs	r3, #64	; 0x40
   d5890:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5892:	4621      	mov	r1, r4
   d5894:	466b      	mov	r3, sp
   d5896:	aa0c      	add	r2, sp, #48	; 0x30
   d5898:	4630      	mov	r0, r6
   d589a:	f7ff f903 	bl	d4aa4 <netdb_getaddrinfo>
    if (!r) {
   d589e:	4604      	mov	r4, r0
   d58a0:	2800      	cmp	r0, #0
   d58a2:	d144      	bne.n	d592e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d58a4:	4602      	mov	r2, r0
   d58a6:	2101      	movs	r1, #1
   d58a8:	6868      	ldr	r0, [r5, #4]
   d58aa:	f7ff fa17 	bl	d4cdc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58ae:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d58b0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58b2:	4622      	mov	r2, r4
   d58b4:	6868      	ldr	r0, [r5, #4]
   d58b6:	f7ff fa11 	bl	d4cdc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58ba:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58bc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d58be:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58c0:	2e00      	cmp	r6, #0
   d58c2:	d034      	beq.n	d592e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d58c4:	2900      	cmp	r1, #0
   d58c6:	d132      	bne.n	d592e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d58c8:	6873      	ldr	r3, [r6, #4]
   d58ca:	2b02      	cmp	r3, #2
   d58cc:	d002      	beq.n	d58d4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d58ce:	2b0a      	cmp	r3, #10
   d58d0:	d009      	beq.n	d58e6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d58d2:	e02a      	b.n	d592a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d58d4:	f1b8 0f00 	cmp.w	r8, #0
   d58d8:	d027      	beq.n	d592a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d58da:	6971      	ldr	r1, [r6, #20]
   d58dc:	4638      	mov	r0, r7
   d58de:	3104      	adds	r1, #4
   d58e0:	f7ff fec1 	bl	d5666 <_ZN9IPAddressaSEPKh>
   d58e4:	e020      	b.n	d5928 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d58e6:	f1b9 0f00 	cmp.w	r9, #0
   d58ea:	d01e      	beq.n	d592a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d58ec:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d58ee:	2211      	movs	r2, #17
   d58f0:	a801      	add	r0, sp, #4
   d58f2:	f001 fc06 	bl	d7102 <memset>
                    a.v = 6;
   d58f6:	2306      	movs	r3, #6
   d58f8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d58fc:	ad01      	add	r5, sp, #4
   d58fe:	f104 0308 	add.w	r3, r4, #8
   d5902:	3418      	adds	r4, #24
   d5904:	6818      	ldr	r0, [r3, #0]
   d5906:	6859      	ldr	r1, [r3, #4]
   d5908:	462a      	mov	r2, r5
   d590a:	c203      	stmia	r2!, {r0, r1}
   d590c:	3308      	adds	r3, #8
   d590e:	42a3      	cmp	r3, r4
   d5910:	4615      	mov	r5, r2
   d5912:	d1f7      	bne.n	d5904 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5914:	a901      	add	r1, sp, #4
   d5916:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5918:	ad07      	add	r5, sp, #28
   d591a:	f7ff fe85 	bl	d5628 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d591e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5920:	1d3c      	adds	r4, r7, #4
   d5922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5924:	682b      	ldr	r3, [r5, #0]
   d5926:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5928:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d592a:	69f6      	ldr	r6, [r6, #28]
   d592c:	e7c8      	b.n	d58c0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d592e:	9800      	ldr	r0, [sp, #0]
   d5930:	f7ff f8b0 	bl	d4a94 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5934:	4638      	mov	r0, r7
   d5936:	b015      	add	sp, #84	; 0x54
   d5938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d593c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d593c:	4b02      	ldr	r3, [pc, #8]	; (d5948 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d593e:	4a03      	ldr	r2, [pc, #12]	; (d594c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5940:	601a      	str	r2, [r3, #0]
   d5942:	2200      	movs	r2, #0
   d5944:	605a      	str	r2, [r3, #4]
   d5946:	4770      	bx	lr
   d5948:	2003e550 	.word	0x2003e550
   d594c:	000d9728 	.word	0x000d9728

000d5950 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5952:	4606      	mov	r6, r0
   d5954:	460d      	mov	r5, r1
   d5956:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5958:	2400      	movs	r4, #0
  while (size--) {
   d595a:	42bd      	cmp	r5, r7
   d595c:	d00c      	beq.n	d5978 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d595e:	6833      	ldr	r3, [r6, #0]
   d5960:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5964:	689b      	ldr	r3, [r3, #8]
   d5966:	4630      	mov	r0, r6
   d5968:	4798      	blx	r3
     if (chunk>=0)
   d596a:	2800      	cmp	r0, #0
   d596c:	db01      	blt.n	d5972 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d596e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5970:	e7f3      	b.n	d595a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5972:	2c00      	cmp	r4, #0
   d5974:	bf08      	it	eq
   d5976:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5978:	4620      	mov	r0, r4
   d597a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d597c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d597c:	b570      	push	{r4, r5, r6, lr}
   d597e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5980:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5982:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5984:	b149      	cbz	r1, d599a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5986:	f001 fc1a 	bl	d71be <strlen>
   d598a:	682b      	ldr	r3, [r5, #0]
   d598c:	4602      	mov	r2, r0
   d598e:	4621      	mov	r1, r4
   d5990:	4628      	mov	r0, r5
   d5992:	68db      	ldr	r3, [r3, #12]
    }
   d5994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5998:	4718      	bx	r3
    }
   d599a:	bd70      	pop	{r4, r5, r6, pc}

000d599c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d599c:	6803      	ldr	r3, [r0, #0]
   d599e:	689b      	ldr	r3, [r3, #8]
   d59a0:	4718      	bx	r3

000d59a2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d59a2:	b530      	push	{r4, r5, lr}
   d59a4:	b08b      	sub	sp, #44	; 0x2c
   d59a6:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d59a8:	2100      	movs	r1, #0
   d59aa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d59ae:	2a01      	cmp	r2, #1
   d59b0:	bf98      	it	ls
   d59b2:	220a      	movls	r2, #10
   d59b4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d59b8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d59bc:	fb05 3312 	mls	r3, r5, r2, r3
   d59c0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d59c4:	2b09      	cmp	r3, #9
   d59c6:	bf94      	ite	ls
   d59c8:	3330      	addls	r3, #48	; 0x30
   d59ca:	3337      	addhi	r3, #55	; 0x37
   d59cc:	b2db      	uxtb	r3, r3
   d59ce:	4621      	mov	r1, r4
   d59d0:	f804 3901 	strb.w	r3, [r4], #-1
   d59d4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d59d6:	2d00      	cmp	r5, #0
   d59d8:	d1ee      	bne.n	d59b8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d59da:	f7ff ffcf 	bl	d597c <_ZN5Print5writeEPKc>
}
   d59de:	b00b      	add	sp, #44	; 0x2c
   d59e0:	bd30      	pop	{r4, r5, pc}

000d59e2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d59e2:	b510      	push	{r4, lr}
   d59e4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d59e6:	f7ff fa32 	bl	d4e4e <_ZNSt14_Function_baseD1Ev>
   d59ea:	4620      	mov	r0, r4
   d59ec:	bd10      	pop	{r4, pc}
	...

000d59f0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d59f0:	4803      	ldr	r0, [pc, #12]	; (d5a00 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d59f2:	4a04      	ldr	r2, [pc, #16]	; (d5a04 <_GLOBAL__sub_I_RGB+0x14>)
   d59f4:	4904      	ldr	r1, [pc, #16]	; (d5a08 <_GLOBAL__sub_I_RGB+0x18>)
   d59f6:	2300      	movs	r3, #0
   d59f8:	6083      	str	r3, [r0, #8]
   d59fa:	f000 bc01 	b.w	d6200 <__aeabi_atexit>
   d59fe:	bf00      	nop
   d5a00:	2003e558 	.word	0x2003e558
   d5a04:	2003e304 	.word	0x2003e304
   d5a08:	000d59e3 	.word	0x000d59e3

000d5a0c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5a0c:	4770      	bx	lr

000d5a0e <_ZN8SPIClassD0Ev>:
   d5a0e:	b510      	push	{r4, lr}
   d5a10:	210c      	movs	r1, #12
   d5a12:	4604      	mov	r4, r0
   d5a14:	f000 fbf9 	bl	d620a <_ZdlPvj>
   d5a18:	4620      	mov	r0, r4
   d5a1a:	bd10      	pop	{r4, pc}

000d5a1c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5a1c:	b510      	push	{r4, lr}
   d5a1e:	4b05      	ldr	r3, [pc, #20]	; (d5a34 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d5a20:	6003      	str	r3, [r0, #0]
   d5a22:	4604      	mov	r4, r0
{
    _spi = spi;
   d5a24:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d5a26:	4608      	mov	r0, r1
   d5a28:	f7ff f844 	bl	d4ab4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5a2c:	2300      	movs	r3, #0
   d5a2e:	60a3      	str	r3, [r4, #8]
}
   d5a30:	4620      	mov	r0, r4
   d5a32:	bd10      	pop	{r4, pc}
   d5a34:	000d975c 	.word	0x000d975c

000d5a38 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5a38:	7900      	ldrb	r0, [r0, #4]
   d5a3a:	f7ff b843 	b.w	d4ac4 <HAL_SPI_Is_Enabled>

000d5a3e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5a3e:	b510      	push	{r4, lr}
   d5a40:	4604      	mov	r4, r0
{
	free(buffer);
   d5a42:	6800      	ldr	r0, [r0, #0]
   d5a44:	f7ff f98a 	bl	d4d5c <free>
}
   d5a48:	4620      	mov	r0, r4
   d5a4a:	bd10      	pop	{r4, pc}

000d5a4c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5a4c:	b510      	push	{r4, lr}
   d5a4e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5a50:	6800      	ldr	r0, [r0, #0]
   d5a52:	b108      	cbz	r0, d5a58 <_ZN6String10invalidateEv+0xc>
   d5a54:	f7ff f982 	bl	d4d5c <free>
	buffer = NULL;
   d5a58:	2300      	movs	r3, #0
   d5a5a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5a5c:	60a3      	str	r3, [r4, #8]
   d5a5e:	6063      	str	r3, [r4, #4]
   d5a60:	bd10      	pop	{r4, pc}

000d5a62 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5a62:	b538      	push	{r3, r4, r5, lr}
   d5a64:	4604      	mov	r4, r0
   d5a66:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5a68:	6800      	ldr	r0, [r0, #0]
   d5a6a:	3101      	adds	r1, #1
   d5a6c:	f7ff f97e 	bl	d4d6c <realloc>
	if (newbuffer) {
   d5a70:	b110      	cbz	r0, d5a78 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5a72:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5a76:	2001      	movs	r0, #1
	}
	return 0;
}
   d5a78:	bd38      	pop	{r3, r4, r5, pc}

000d5a7a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5a7a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5a7c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5a7e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5a80:	b113      	cbz	r3, d5a88 <_ZN6String7reserveEj+0xe>
   d5a82:	6843      	ldr	r3, [r0, #4]
   d5a84:	428b      	cmp	r3, r1
   d5a86:	d207      	bcs.n	d5a98 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5a88:	4620      	mov	r0, r4
   d5a8a:	f7ff ffea 	bl	d5a62 <_ZN6String12changeBufferEj>
   d5a8e:	b120      	cbz	r0, d5a9a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5a90:	68a3      	ldr	r3, [r4, #8]
   d5a92:	b90b      	cbnz	r3, d5a98 <_ZN6String7reserveEj+0x1e>
   d5a94:	6822      	ldr	r2, [r4, #0]
   d5a96:	7013      	strb	r3, [r2, #0]
   d5a98:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5a9a:	bd10      	pop	{r4, pc}

000d5a9c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5a9c:	b570      	push	{r4, r5, r6, lr}
   d5a9e:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5aa0:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5aa2:	4604      	mov	r4, r0
   d5aa4:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5aa6:	f7ff ffe8 	bl	d5a7a <_ZN6String7reserveEj>
   d5aaa:	b918      	cbnz	r0, d5ab4 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5aac:	4620      	mov	r0, r4
   d5aae:	f7ff ffcd 	bl	d5a4c <_ZN6String10invalidateEv>
		return *this;
   d5ab2:	e009      	b.n	d5ac8 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5ab4:	462a      	mov	r2, r5
   d5ab6:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5ab8:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5aba:	6820      	ldr	r0, [r4, #0]
   d5abc:	f001 fb16 	bl	d70ec <memcpy>
	buffer[len] = 0;
   d5ac0:	6822      	ldr	r2, [r4, #0]
   d5ac2:	68a3      	ldr	r3, [r4, #8]
   d5ac4:	2100      	movs	r1, #0
   d5ac6:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5ac8:	4620      	mov	r0, r4
   d5aca:	bd70      	pop	{r4, r5, r6, pc}

000d5acc <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5acc:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5ace:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5ad0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5ad2:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5ad4:	6043      	str	r3, [r0, #4]
	len = 0;
   d5ad6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5ad8:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5ada:	460d      	mov	r5, r1
   d5adc:	b139      	cbz	r1, d5aee <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5ade:	4608      	mov	r0, r1
   d5ae0:	f001 fb6d 	bl	d71be <strlen>
   d5ae4:	4629      	mov	r1, r5
   d5ae6:	4602      	mov	r2, r0
   d5ae8:	4620      	mov	r0, r4
   d5aea:	f7ff ffd7 	bl	d5a9c <_ZN6String4copyEPKcj>
}
   d5aee:	4620      	mov	r0, r4
   d5af0:	bd38      	pop	{r3, r4, r5, pc}

000d5af2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5af2:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5af4:	b510      	push	{r4, lr}
   d5af6:	460b      	mov	r3, r1
   d5af8:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5afa:	d007      	beq.n	d5b0c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5afc:	6809      	ldr	r1, [r1, #0]
   d5afe:	b119      	cbz	r1, d5b08 <_ZN6StringaSERKS_+0x16>
   d5b00:	689a      	ldr	r2, [r3, #8]
   d5b02:	f7ff ffcb 	bl	d5a9c <_ZN6String4copyEPKcj>
   d5b06:	e001      	b.n	d5b0c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5b08:	f7ff ffa0 	bl	d5a4c <_ZN6String10invalidateEv>

	return *this;
}
   d5b0c:	4620      	mov	r0, r4
   d5b0e:	bd10      	pop	{r4, pc}

000d5b10 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5b10:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5b12:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5b14:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5b16:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5b18:	6043      	str	r3, [r0, #4]
	len = 0;
   d5b1a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5b1c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5b1e:	f7ff ffe8 	bl	d5af2 <_ZN6StringaSERKS_>
}
   d5b22:	4620      	mov	r0, r4
   d5b24:	bd10      	pop	{r4, pc}

000d5b26 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5b26:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5b28:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5b2a:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5b2c:	b912      	cbnz	r2, d5b34 <_ZNK6String6equalsEPKc+0xe>
   d5b2e:	b919      	cbnz	r1, d5b38 <_ZNK6String6equalsEPKc+0x12>
   d5b30:	2001      	movs	r0, #1
   d5b32:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5b34:	b911      	cbnz	r1, d5b3c <_ZNK6String6equalsEPKc+0x16>
   d5b36:	6803      	ldr	r3, [r0, #0]
   d5b38:	7818      	ldrb	r0, [r3, #0]
   d5b3a:	e002      	b.n	d5b42 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d5b3c:	6800      	ldr	r0, [r0, #0]
   d5b3e:	f001 fb11 	bl	d7164 <strcmp>
   d5b42:	fab0 f080 	clz	r0, r0
   d5b46:	0940      	lsrs	r0, r0, #5
}
   d5b48:	bd08      	pop	{r3, pc}

000d5b4a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5b4a:	b510      	push	{r4, lr}
   d5b4c:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5b4e:	6800      	ldr	r0, [r0, #0]
   d5b50:	b118      	cbz	r0, d5b5a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5b52:	f7ff f903 	bl	d4d5c <free>
            wakeupSource_ = nullptr;
   d5b56:	2300      	movs	r3, #0
   d5b58:	6023      	str	r3, [r4, #0]
   d5b5a:	bd10      	pop	{r4, pc}

000d5b5c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5b5c:	b510      	push	{r4, lr}
   d5b5e:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5b60:	f7ff fff3 	bl	d5b4a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5b64:	4620      	mov	r0, r4
   d5b66:	bd10      	pop	{r4, pc}

000d5b68 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5b68:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5b6a:	4c09      	ldr	r4, [pc, #36]	; (d5b90 <_GLOBAL__sub_I_System+0x28>)
   d5b6c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5b72:	6020      	str	r0, [r4, #0]
   d5b74:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5b76:	71a0      	strb	r0, [r4, #6]
   d5b78:	8120      	strh	r0, [r4, #8]
   d5b7a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5b7c:	f7ff f822 	bl	d4bc4 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5b80:	4620      	mov	r0, r4
   d5b82:	4a04      	ldr	r2, [pc, #16]	; (d5b94 <_GLOBAL__sub_I_System+0x2c>)
   d5b84:	4904      	ldr	r1, [pc, #16]	; (d5b98 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5b8a:	f000 bb39 	b.w	d6200 <__aeabi_atexit>
   d5b8e:	bf00      	nop
   d5b90:	2003e568 	.word	0x2003e568
   d5b94:	2003e304 	.word	0x2003e304
   d5b98:	000d5b5d 	.word	0x000d5b5d

000d5b9c <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d5b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d5b9e:	4b14      	ldr	r3, [pc, #80]	; (d5bf0 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d5ba0:	4f14      	ldr	r7, [pc, #80]	; (d5bf4 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d5ba2:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d5ba4:	4b14      	ldr	r3, [pc, #80]	; (d5bf8 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d5ba6:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d5ba8:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d5baa:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d5bac:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d5bae:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d5bb0:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d5bb2:	d01b      	beq.n	d5bec <_ZL22Refresh_UnixTime_Cachel+0x50>
   d5bb4:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d5bb6:	ad01      	add	r5, sp, #4
   d5bb8:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d5bbc:	f001 f99a 	bl	d6ef4 <localtime>
	calendar_time->tm_year += 1900;
   d5bc0:	6943      	ldr	r3, [r0, #20]
   d5bc2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d5bc6:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d5bc8:	4604      	mov	r4, r0
   d5bca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5bcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5bd2:	f8d4 e000 	ldr.w	lr, [r4]
   d5bd6:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d5bda:	ad01      	add	r5, sp, #4
   d5bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5bde:	4c07      	ldr	r4, [pc, #28]	; (d5bfc <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d5be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d5be6:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d5be8:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d5bec:	b00b      	add	sp, #44	; 0x2c
   d5bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5bf0:	2003e5a4 	.word	0x2003e5a4
   d5bf4:	2003e5a0 	.word	0x2003e5a0
   d5bf8:	2003e59c 	.word	0x2003e59c
   d5bfc:	2003e574 	.word	0x2003e574

000d5c00 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d5c00:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5c02:	2000      	movs	r0, #0
   d5c04:	f7ff f842 	bl	d4c8c <spark_sync_time_pending>
   d5c08:	b128      	cbz	r0, d5c16 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5c0a:	f7ff f82f 	bl	d4c6c <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5c0e:	f080 0001 	eor.w	r0, r0, #1
   d5c12:	b2c0      	uxtb	r0, r0
   d5c14:	bd08      	pop	{r3, pc}
   d5c16:	2001      	movs	r0, #1
    }
   d5c18:	bd08      	pop	{r3, pc}
	...

000d5c1c <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   d5c1c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d5c1e:	f7ff ffbd 	bl	d5b9c <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
   d5c22:	4b01      	ldr	r3, [pc, #4]	; (d5c28 <_ZN9TimeClass4hourEl+0xc>)
   d5c24:	6898      	ldr	r0, [r3, #8]
   d5c26:	bd08      	pop	{r3, pc}
   d5c28:	2003e574 	.word	0x2003e574

000d5c2c <_ZN9TimeClass6minuteEl>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   d5c2c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d5c2e:	f7ff ffb5 	bl	d5b9c <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_min;
}
   d5c32:	4b01      	ldr	r3, [pc, #4]	; (d5c38 <_ZN9TimeClass6minuteEl+0xc>)
   d5c34:	6858      	ldr	r0, [r3, #4]
   d5c36:	bd08      	pop	{r3, pc}
   d5c38:	2003e574 	.word	0x2003e574

000d5c3c <_ZN9TimeClass6secondEl>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
   d5c3c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d5c3e:	f7ff ffad 	bl	d5b9c <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_sec;
}
   d5c42:	4b01      	ldr	r3, [pc, #4]	; (d5c48 <_ZN9TimeClass6secondEl+0xc>)
   d5c44:	6818      	ldr	r0, [r3, #0]
   d5c46:	bd08      	pop	{r3, pc}
   d5c48:	2003e574 	.word	0x2003e574

000d5c4c <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   d5c4c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d5c4e:	f7ff ffa5 	bl	d5b9c <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
   d5c52:	4b01      	ldr	r3, [pc, #4]	; (d5c58 <_ZN9TimeClass3dayEl+0xc>)
   d5c54:	68d8      	ldr	r0, [r3, #12]
   d5c56:	bd08      	pop	{r3, pc}
   d5c58:	2003e574 	.word	0x2003e574

000d5c5c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5c5c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d5c5e:	2000      	movs	r0, #0
   d5c60:	f7fe fe98 	bl	d4994 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d5c64:	4604      	mov	r4, r0
   d5c66:	b968      	cbnz	r0, d5c84 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5c68:	f7fe ffa4 	bl	d4bb4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5c6c:	2801      	cmp	r0, #1
   d5c6e:	d10b      	bne.n	d5c88 <_ZN9TimeClass7isValidEv+0x2c>
   d5c70:	4620      	mov	r0, r4
   d5c72:	f7fe ffc7 	bl	d4c04 <system_thread_get_state>
   d5c76:	b938      	cbnz	r0, d5c88 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d5c78:	f7ff ffc2 	bl	d5c00 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5c7c:	b930      	cbnz	r0, d5c8c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d5c7e:	f7fe ffed 	bl	d4c5c <spark_process>
   d5c82:	e7f9      	b.n	d5c78 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d5c84:	2001      	movs	r0, #1
   d5c86:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d5c88:	2000      	movs	r0, #0
   d5c8a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d5c8c:	f7ff ffb8 	bl	d5c00 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d5c90:	2000      	movs	r0, #0
   d5c92:	f7fe fe7f 	bl	d4994 <HAL_RTC_Time_Is_Valid>
   d5c96:	3000      	adds	r0, #0
   d5c98:	bf18      	it	ne
   d5c9a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d5c9c:	bd10      	pop	{r4, pc}

000d5c9e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d5c9e:	b508      	push	{r3, lr}
    (void)isValid();
   d5ca0:	f7ff ffdc 	bl	d5c5c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d5ca4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d5ca8:	f7fe be54 	b.w	d4954 <HAL_RTC_Get_UnixTime>

000d5cac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5cac:	4b02      	ldr	r3, [pc, #8]	; (d5cb8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5cae:	681a      	ldr	r2, [r3, #0]
   d5cb0:	4b02      	ldr	r3, [pc, #8]	; (d5cbc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5cb2:	601a      	str	r2, [r3, #0]
   d5cb4:	4770      	bx	lr
   d5cb6:	bf00      	nop
   d5cb8:	2003e214 	.word	0x2003e214
   d5cbc:	2003e598 	.word	0x2003e598

000d5cc0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5cc0:	4770      	bx	lr

000d5cc2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5cc2:	7441      	strb	r1, [r0, #17]
   d5cc4:	4770      	bx	lr

000d5cc6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5cc6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5cc8:	7c00      	ldrb	r0, [r0, #16]
   d5cca:	f7fe ff3b 	bl	d4b44 <HAL_USART_Available_Data_For_Write>
}
   d5cce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5cd2:	bd08      	pop	{r3, pc}

000d5cd4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5cd4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5cd6:	7c00      	ldrb	r0, [r0, #16]
   d5cd8:	f7fe ff0c 	bl	d4af4 <HAL_USART_Available_Data>
}
   d5cdc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ce0:	bd08      	pop	{r3, pc}

000d5ce2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5ce2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5ce4:	7c00      	ldrb	r0, [r0, #16]
   d5ce6:	f7fe ff15 	bl	d4b14 <HAL_USART_Peek_Data>
}
   d5cea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5cee:	bf28      	it	cs
   d5cf0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5cf4:	bd08      	pop	{r3, pc}

000d5cf6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5cf6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5cf8:	7c00      	ldrb	r0, [r0, #16]
   d5cfa:	f7fe ff03 	bl	d4b04 <HAL_USART_Read_Data>
}
   d5cfe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5d02:	bf28      	it	cs
   d5d04:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5d08:	bd08      	pop	{r3, pc}

000d5d0a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5d0a:	7c00      	ldrb	r0, [r0, #16]
   d5d0c:	f7fe bf0a 	b.w	d4b24 <HAL_USART_Flush_Data>

000d5d10 <_ZN11USARTSerialD0Ev>:
   d5d10:	b510      	push	{r4, lr}
   d5d12:	2114      	movs	r1, #20
   d5d14:	4604      	mov	r4, r0
   d5d16:	f000 fa78 	bl	d620a <_ZdlPvj>
   d5d1a:	4620      	mov	r0, r4
   d5d1c:	bd10      	pop	{r4, pc}

000d5d1e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5d1e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5d20:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5d22:	4604      	mov	r4, r0
   d5d24:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5d26:	b925      	cbnz	r5, d5d32 <_ZN11USARTSerial5writeEh+0x14>
   d5d28:	7c00      	ldrb	r0, [r0, #16]
   d5d2a:	f7fe ff0b 	bl	d4b44 <HAL_USART_Available_Data_For_Write>
   d5d2e:	2800      	cmp	r0, #0
   d5d30:	dd05      	ble.n	d5d3e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5d32:	4631      	mov	r1, r6
   d5d34:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5d3a:	f7fe bed3 	b.w	d4ae4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5d3e:	4628      	mov	r0, r5
   d5d40:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5d44 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5d44:	b510      	push	{r4, lr}
   d5d46:	4604      	mov	r4, r0
   d5d48:	4608      	mov	r0, r1
   d5d4a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5d4c:	2200      	movs	r2, #0
   d5d4e:	6062      	str	r2, [r4, #4]
   d5d50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5d54:	60a2      	str	r2, [r4, #8]
   d5d56:	4a05      	ldr	r2, [pc, #20]	; (d5d6c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5d58:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5d5a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5d5c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5d5e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5d60:	461a      	mov	r2, r3
   d5d62:	f7fe feb7 	bl	d4ad4 <HAL_USART_Init>
}
   d5d66:	4620      	mov	r0, r4
   d5d68:	bd10      	pop	{r4, pc}
   d5d6a:	bf00      	nop
   d5d6c:	000d9794 	.word	0x000d9794

000d5d70 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5d70:	7c00      	ldrb	r0, [r0, #16]
   d5d72:	f7fe bedf 	b.w	d4b34 <HAL_USART_Is_Enabled>
	...

000d5d78 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5d78:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5d7a:	4d0c      	ldr	r5, [pc, #48]	; (d5dac <_Z22__fetch_global_Serial1v+0x34>)
   d5d7c:	6829      	ldr	r1, [r5, #0]
   d5d7e:	f011 0401 	ands.w	r4, r1, #1
   d5d82:	d111      	bne.n	d5da8 <_Z22__fetch_global_Serial1v+0x30>
   d5d84:	4628      	mov	r0, r5
   d5d86:	f7fe f98e 	bl	d40a6 <__cxa_guard_acquire>
   d5d8a:	b168      	cbz	r0, d5da8 <_Z22__fetch_global_Serial1v+0x30>
   d5d8c:	4a08      	ldr	r2, [pc, #32]	; (d5db0 <_Z22__fetch_global_Serial1v+0x38>)
   d5d8e:	4b09      	ldr	r3, [pc, #36]	; (d5db4 <_Z22__fetch_global_Serial1v+0x3c>)
   d5d90:	4809      	ldr	r0, [pc, #36]	; (d5db8 <_Z22__fetch_global_Serial1v+0x40>)
   d5d92:	4621      	mov	r1, r4
   d5d94:	f7ff ffd6 	bl	d5d44 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5d98:	4628      	mov	r0, r5
   d5d9a:	f7fe f989 	bl	d40b0 <__cxa_guard_release>
   d5d9e:	4a07      	ldr	r2, [pc, #28]	; (d5dbc <_Z22__fetch_global_Serial1v+0x44>)
   d5da0:	4907      	ldr	r1, [pc, #28]	; (d5dc0 <_Z22__fetch_global_Serial1v+0x48>)
   d5da2:	4805      	ldr	r0, [pc, #20]	; (d5db8 <_Z22__fetch_global_Serial1v+0x40>)
   d5da4:	f000 fa2c 	bl	d6200 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5da8:	4803      	ldr	r0, [pc, #12]	; (d5db8 <_Z22__fetch_global_Serial1v+0x40>)
   d5daa:	bd38      	pop	{r3, r4, r5, pc}
   d5dac:	2003e640 	.word	0x2003e640
   d5db0:	2003e644 	.word	0x2003e644
   d5db4:	2003e5bc 	.word	0x2003e5bc
   d5db8:	2003e5a8 	.word	0x2003e5a8
   d5dbc:	2003e304 	.word	0x2003e304
   d5dc0:	000d5cc1 	.word	0x000d5cc1

000d5dc4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5dc4:	7441      	strb	r1, [r0, #17]
   d5dc6:	4770      	bx	lr

000d5dc8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5dc8:	4770      	bx	lr

000d5dca <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5dca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5dcc:	2100      	movs	r1, #0
   d5dce:	7c00      	ldrb	r0, [r0, #16]
   d5dd0:	f7fe fed8 	bl	d4b84 <HAL_USB_USART_Receive_Data>
}
   d5dd4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5dd8:	bf28      	it	cs
   d5dda:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5dde:	bd08      	pop	{r3, pc}

000d5de0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5de0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5de2:	2101      	movs	r1, #1
   d5de4:	7c00      	ldrb	r0, [r0, #16]
   d5de6:	f7fe fecd 	bl	d4b84 <HAL_USB_USART_Receive_Data>
}
   d5dea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5dee:	bf28      	it	cs
   d5df0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5df4:	bd08      	pop	{r3, pc}

000d5df6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5df6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5df8:	7c00      	ldrb	r0, [r0, #16]
   d5dfa:	f7fe febb 	bl	d4b74 <HAL_USB_USART_Available_Data_For_Write>
}
   d5dfe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e02:	bd08      	pop	{r3, pc}

000d5e04 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5e04:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5e06:	7c00      	ldrb	r0, [r0, #16]
   d5e08:	f7fe feac 	bl	d4b64 <HAL_USB_USART_Available_Data>
}
   d5e0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e10:	bd08      	pop	{r3, pc}

000d5e12 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5e12:	7c00      	ldrb	r0, [r0, #16]
   d5e14:	f7fe bec6 	b.w	d4ba4 <HAL_USB_USART_Flush_Data>

000d5e18 <_ZN9USBSerialD0Ev>:
   d5e18:	b510      	push	{r4, lr}
   d5e1a:	2114      	movs	r1, #20
   d5e1c:	4604      	mov	r4, r0
   d5e1e:	f000 f9f4 	bl	d620a <_ZdlPvj>
   d5e22:	4620      	mov	r0, r4
   d5e24:	bd10      	pop	{r4, pc}

000d5e26 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5e26:	b538      	push	{r3, r4, r5, lr}
   d5e28:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5e2a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5e2c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5e2e:	f7fe fea1 	bl	d4b74 <HAL_USB_USART_Available_Data_For_Write>
   d5e32:	2800      	cmp	r0, #0
   d5e34:	dc01      	bgt.n	d5e3a <_ZN9USBSerial5writeEh+0x14>
   d5e36:	7c60      	ldrb	r0, [r4, #17]
   d5e38:	b128      	cbz	r0, d5e46 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5e3a:	4629      	mov	r1, r5
   d5e3c:	7c20      	ldrb	r0, [r4, #16]
   d5e3e:	f7fe fea9 	bl	d4b94 <HAL_USB_USART_Send_Data>
   d5e42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5e46:	bd38      	pop	{r3, r4, r5, pc}

000d5e48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5e48:	b510      	push	{r4, lr}
   d5e4a:	4604      	mov	r4, r0
   d5e4c:	2300      	movs	r3, #0
   d5e4e:	6063      	str	r3, [r4, #4]
   d5e50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5e54:	60a3      	str	r3, [r4, #8]
   d5e56:	4b05      	ldr	r3, [pc, #20]	; (d5e6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5e58:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5e5a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5e5c:	4608      	mov	r0, r1
{
  _serial = serial;
   d5e5e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5e60:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5e62:	4611      	mov	r1, r2
   d5e64:	f7fe fe76 	bl	d4b54 <HAL_USB_USART_Init>
}
   d5e68:	4620      	mov	r0, r4
   d5e6a:	bd10      	pop	{r4, pc}
   d5e6c:	000d97c4 	.word	0x000d97c4

000d5e70 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5e70:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5e72:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5e74:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5e76:	2100      	movs	r1, #0
   d5e78:	f001 f943 	bl	d7102 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5e7c:	4620      	mov	r0, r4
   d5e7e:	bd10      	pop	{r4, pc}

000d5e80 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5e80:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5e82:	4d0e      	ldr	r5, [pc, #56]	; (d5ebc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5e84:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5e86:	a801      	add	r0, sp, #4
   d5e88:	f7ff fff2 	bl	d5e70 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5e8c:	6829      	ldr	r1, [r5, #0]
   d5e8e:	f011 0401 	ands.w	r4, r1, #1
   d5e92:	d110      	bne.n	d5eb6 <_Z16_fetch_usbserialv+0x36>
   d5e94:	4628      	mov	r0, r5
   d5e96:	f7fe f906 	bl	d40a6 <__cxa_guard_acquire>
   d5e9a:	b160      	cbz	r0, d5eb6 <_Z16_fetch_usbserialv+0x36>
   d5e9c:	aa01      	add	r2, sp, #4
   d5e9e:	4621      	mov	r1, r4
   d5ea0:	4807      	ldr	r0, [pc, #28]	; (d5ec0 <_Z16_fetch_usbserialv+0x40>)
   d5ea2:	f7ff ffd1 	bl	d5e48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5ea6:	4628      	mov	r0, r5
   d5ea8:	f7fe f902 	bl	d40b0 <__cxa_guard_release>
   d5eac:	4a05      	ldr	r2, [pc, #20]	; (d5ec4 <_Z16_fetch_usbserialv+0x44>)
   d5eae:	4906      	ldr	r1, [pc, #24]	; (d5ec8 <_Z16_fetch_usbserialv+0x48>)
   d5eb0:	4803      	ldr	r0, [pc, #12]	; (d5ec0 <_Z16_fetch_usbserialv+0x40>)
   d5eb2:	f000 f9a5 	bl	d6200 <__aeabi_atexit>
	return _usbserial;
}
   d5eb6:	4802      	ldr	r0, [pc, #8]	; (d5ec0 <_Z16_fetch_usbserialv+0x40>)
   d5eb8:	b007      	add	sp, #28
   d5eba:	bd30      	pop	{r4, r5, pc}
   d5ebc:	2003e6c8 	.word	0x2003e6c8
   d5ec0:	2003e6cc 	.word	0x2003e6cc
   d5ec4:	2003e304 	.word	0x2003e304
   d5ec8:	000d5dc9 	.word	0x000d5dc9

000d5ecc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5ecc:	2200      	movs	r2, #0
   d5ece:	4611      	mov	r1, r2
   d5ed0:	6840      	ldr	r0, [r0, #4]
   d5ed2:	f7fe bf03 	b.w	d4cdc <network_ready>

000d5ed6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5ed6:	2200      	movs	r2, #0
   d5ed8:	4611      	mov	r1, r2
   d5eda:	6840      	ldr	r0, [r0, #4]
   d5edc:	f7fe bf1e 	b.w	d4d1c <network_listening>

000d5ee0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5ee0:	2200      	movs	r2, #0
   d5ee2:	4611      	mov	r1, r2
   d5ee4:	6840      	ldr	r0, [r0, #4]
   d5ee6:	f7fe bf29 	b.w	d4d3c <network_get_listen_timeout>

000d5eea <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5eea:	2200      	movs	r2, #0
   d5eec:	6840      	ldr	r0, [r0, #4]
   d5eee:	f7fe bf1d 	b.w	d4d2c <network_set_listen_timeout>

000d5ef2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5ef2:	2200      	movs	r2, #0
   d5ef4:	f081 0101 	eor.w	r1, r1, #1
   d5ef8:	6840      	ldr	r0, [r0, #4]
   d5efa:	f7fe bf07 	b.w	d4d0c <network_listen>

000d5efe <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5efe:	2300      	movs	r3, #0
   d5f00:	461a      	mov	r2, r3
   d5f02:	4619      	mov	r1, r3
   d5f04:	6840      	ldr	r0, [r0, #4]
   d5f06:	f7fe bef9 	b.w	d4cfc <network_off>

000d5f0a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5f0a:	2300      	movs	r3, #0
   d5f0c:	461a      	mov	r2, r3
   d5f0e:	4619      	mov	r1, r3
   d5f10:	6840      	ldr	r0, [r0, #4]
   d5f12:	f7fe beeb 	b.w	d4cec <network_on>

000d5f16 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5f16:	2200      	movs	r2, #0
   d5f18:	4611      	mov	r1, r2
   d5f1a:	6840      	ldr	r0, [r0, #4]
   d5f1c:	f7fe bece 	b.w	d4cbc <network_connecting>

000d5f20 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5f20:	2200      	movs	r2, #0
   d5f22:	2102      	movs	r1, #2
   d5f24:	6840      	ldr	r0, [r0, #4]
   d5f26:	f7fe bed1 	b.w	d4ccc <network_disconnect>

000d5f2a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5f2a:	2300      	movs	r3, #0
   d5f2c:	461a      	mov	r2, r3
   d5f2e:	6840      	ldr	r0, [r0, #4]
   d5f30:	f7fe bebc 	b.w	d4cac <network_connect>

000d5f34 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5f34:	4b02      	ldr	r3, [pc, #8]	; (d5f40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5f36:	2204      	movs	r2, #4
   d5f38:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5f3a:	4a02      	ldr	r2, [pc, #8]	; (d5f44 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5f3c:	601a      	str	r2, [r3, #0]
   d5f3e:	4770      	bx	lr
   d5f40:	2003e6e0 	.word	0x2003e6e0
   d5f44:	000d97f4 	.word	0x000d97f4

000d5f48 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5f48:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5f4a:	4b0c      	ldr	r3, [pc, #48]	; (d5f7c <serialEventRun+0x34>)
   d5f4c:	b133      	cbz	r3, d5f5c <serialEventRun+0x14>
   d5f4e:	f7ff ff97 	bl	d5e80 <_Z16_fetch_usbserialv>
   d5f52:	6803      	ldr	r3, [r0, #0]
   d5f54:	691b      	ldr	r3, [r3, #16]
   d5f56:	4798      	blx	r3
   d5f58:	2800      	cmp	r0, #0
   d5f5a:	dc09      	bgt.n	d5f70 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5f5c:	4b08      	ldr	r3, [pc, #32]	; (d5f80 <serialEventRun+0x38>)
   d5f5e:	b163      	cbz	r3, d5f7a <serialEventRun+0x32>
   d5f60:	f7ff ff0a 	bl	d5d78 <_Z22__fetch_global_Serial1v>
   d5f64:	6803      	ldr	r3, [r0, #0]
   d5f66:	691b      	ldr	r3, [r3, #16]
   d5f68:	4798      	blx	r3
   d5f6a:	2800      	cmp	r0, #0
   d5f6c:	dc03      	bgt.n	d5f76 <serialEventRun+0x2e>
   d5f6e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5f70:	f3af 8000 	nop.w
   d5f74:	e7f2      	b.n	d5f5c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5f76:	f3af 8000 	nop.w
   d5f7a:	bd08      	pop	{r3, pc}
	...

000d5f84 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5f84:	b508      	push	{r3, lr}
	serialEventRun();
   d5f86:	f7ff ffdf 	bl	d5f48 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5f8a:	f7fe fcdb 	bl	d4944 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5f8e:	4b01      	ldr	r3, [pc, #4]	; (d5f94 <_post_loop+0x10>)
   d5f90:	6018      	str	r0, [r3, #0]
   d5f92:	bd08      	pop	{r3, pc}
   d5f94:	2003e6f0 	.word	0x2003e6f0

000d5f98 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5f98:	4802      	ldr	r0, [pc, #8]	; (d5fa4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5f9a:	4a03      	ldr	r2, [pc, #12]	; (d5fa8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5f9c:	4903      	ldr	r1, [pc, #12]	; (d5fac <_Z33system_initialize_user_backup_ramv+0x14>)
   d5f9e:	1a12      	subs	r2, r2, r0
   d5fa0:	f001 b8a4 	b.w	d70ec <memcpy>
   d5fa4:	2003f400 	.word	0x2003f400
   d5fa8:	2003f404 	.word	0x2003f404
   d5fac:	000d9bd0 	.word	0x000d9bd0

000d5fb0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5fb0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5fb2:	2300      	movs	r3, #0
   d5fb4:	9300      	str	r3, [sp, #0]
   d5fb6:	461a      	mov	r2, r3
   d5fb8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5fbc:	f7fe fe34 	bl	d4c28 <system_ctrl_set_result>
}
   d5fc0:	b003      	add	sp, #12
   d5fc2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5fc8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5fc8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5fca:	8843      	ldrh	r3, [r0, #2]
   d5fcc:	2b0a      	cmp	r3, #10
   d5fce:	d008      	beq.n	d5fe2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5fd0:	2b50      	cmp	r3, #80	; 0x50
   d5fd2:	d109      	bne.n	d5fe8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5fd4:	4b09      	ldr	r3, [pc, #36]	; (d5ffc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5fd6:	681b      	ldr	r3, [r3, #0]
   d5fd8:	b13b      	cbz	r3, d5fea <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5fda:	b003      	add	sp, #12
   d5fdc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5fe0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5fe2:	f7ff ffe5 	bl	d5fb0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5fe6:	e006      	b.n	d5ff6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5fe8:	2300      	movs	r3, #0
   d5fea:	9300      	str	r3, [sp, #0]
   d5fec:	461a      	mov	r2, r3
   d5fee:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5ff2:	f7fe fe19 	bl	d4c28 <system_ctrl_set_result>
        break;
    }
}
   d5ff6:	b003      	add	sp, #12
   d5ff8:	f85d fb04 	ldr.w	pc, [sp], #4
   d5ffc:	2003e6e8 	.word	0x2003e6e8

000d6000 <module_user_init_hook>:

void module_user_init_hook()
{
   d6000:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6002:	4c10      	ldr	r4, [pc, #64]	; (d6044 <module_user_init_hook+0x44>)
   d6004:	4d10      	ldr	r5, [pc, #64]	; (d6048 <module_user_init_hook+0x48>)
   d6006:	6823      	ldr	r3, [r4, #0]
   d6008:	42ab      	cmp	r3, r5
   d600a:	4b10      	ldr	r3, [pc, #64]	; (d604c <module_user_init_hook+0x4c>)
   d600c:	bf0c      	ite	eq
   d600e:	2201      	moveq	r2, #1
   d6010:	2200      	movne	r2, #0
   d6012:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6014:	d002      	beq.n	d601c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d6016:	f7ff ffbf 	bl	d5f98 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d601a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d601c:	f7fe fc82 	bl	d4924 <HAL_RNG_GetRandomNumber>
   d6020:	4604      	mov	r4, r0
    srand(seed);
   d6022:	f001 f877 	bl	d7114 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6026:	4b0a      	ldr	r3, [pc, #40]	; (d6050 <module_user_init_hook+0x50>)
   d6028:	b113      	cbz	r3, d6030 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d602a:	4620      	mov	r0, r4
   d602c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6030:	2100      	movs	r1, #0
   d6032:	4807      	ldr	r0, [pc, #28]	; (d6050 <module_user_init_hook+0x50>)
   d6034:	f7fe fe32 	bl	d4c9c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6038:	2100      	movs	r1, #0
   d603a:	4806      	ldr	r0, [pc, #24]	; (d6054 <module_user_init_hook+0x54>)
}
   d603c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6040:	f7fe bde8 	b.w	d4c14 <system_ctrl_set_app_request_handler>
   d6044:	2003f400 	.word	0x2003f400
   d6048:	9a271c1e 	.word	0x9a271c1e
   d604c:	2003e6ec 	.word	0x2003e6ec
   d6050:	00000000 	.word	0x00000000
   d6054:	000d5fc9 	.word	0x000d5fc9

000d6058 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6058:	b510      	push	{r4, lr}
   d605a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d605c:	f000 f8b0 	bl	d61c0 <_ZN8particle7globals11instanceSpiEv>
   d6060:	f7ff fcea 	bl	d5a38 <_ZN8SPIClass9isEnabledEv>
   d6064:	b128      	cbz	r0, d6072 <pinAvailable+0x1a>
   d6066:	f1a4 030b 	sub.w	r3, r4, #11
   d606a:	2b02      	cmp	r3, #2
   d606c:	d801      	bhi.n	d6072 <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d606e:	2000      	movs	r0, #0
   d6070:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6072:	f000 f87f 	bl	d6174 <_Z19__fetch_global_Wirev>
   d6076:	f7ff fa61 	bl	d553c <_ZN7TwoWire9isEnabledEv>
   d607a:	b108      	cbz	r0, d6080 <pinAvailable+0x28>
   d607c:	2c01      	cmp	r4, #1
   d607e:	d9f6      	bls.n	d606e <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6080:	f7ff fe7a 	bl	d5d78 <_Z22__fetch_global_Serial1v>
   d6084:	f7ff fe74 	bl	d5d70 <_ZN11USARTSerial9isEnabledEv>
   d6088:	b118      	cbz	r0, d6092 <pinAvailable+0x3a>
   d608a:	f1a4 0309 	sub.w	r3, r4, #9
   d608e:	2b01      	cmp	r3, #1
   d6090:	d9ed      	bls.n	d606e <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6092:	2c23      	cmp	r4, #35	; 0x23
   d6094:	bf8c      	ite	hi
   d6096:	2000      	movhi	r0, #0
   d6098:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d609a:	bd10      	pop	{r4, pc}

000d609c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d609c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d609e:	b538      	push	{r3, r4, r5, lr}
   d60a0:	4604      	mov	r4, r0
   d60a2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d60a4:	d80a      	bhi.n	d60bc <pinMode+0x20>
   d60a6:	29ff      	cmp	r1, #255	; 0xff
   d60a8:	d008      	beq.n	d60bc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d60aa:	f7ff ffd5 	bl	d6058 <pinAvailable>
   d60ae:	b128      	cbz	r0, d60bc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d60b0:	4629      	mov	r1, r5
   d60b2:	4620      	mov	r0, r4
}
   d60b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d60b8:	f7fe bc7c 	b.w	d49b4 <HAL_Pin_Mode>
   d60bc:	bd38      	pop	{r3, r4, r5, pc}

000d60be <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d60be:	b538      	push	{r3, r4, r5, lr}
   d60c0:	4604      	mov	r4, r0
   d60c2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d60c4:	f7fe fc7e 	bl	d49c4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d60c8:	28ff      	cmp	r0, #255	; 0xff
   d60ca:	d010      	beq.n	d60ee <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d60cc:	2806      	cmp	r0, #6
   d60ce:	d804      	bhi.n	d60da <digitalWrite+0x1c>
   d60d0:	234d      	movs	r3, #77	; 0x4d
   d60d2:	fa23 f000 	lsr.w	r0, r3, r0
   d60d6:	07c3      	lsls	r3, r0, #31
   d60d8:	d409      	bmi.n	d60ee <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d60da:	4620      	mov	r0, r4
   d60dc:	f7ff ffbc 	bl	d6058 <pinAvailable>
   d60e0:	b128      	cbz	r0, d60ee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d60e2:	4629      	mov	r1, r5
   d60e4:	4620      	mov	r0, r4
}
   d60e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d60ea:	f7fe bc73 	b.w	d49d4 <HAL_GPIO_Write>
   d60ee:	bd38      	pop	{r3, r4, r5, pc}

000d60f0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d60f0:	b510      	push	{r4, lr}
   d60f2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d60f4:	f7fe fc66 	bl	d49c4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d60f8:	3804      	subs	r0, #4
   d60fa:	b2c0      	uxtb	r0, r0
   d60fc:	2801      	cmp	r0, #1
   d60fe:	d908      	bls.n	d6112 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6100:	4620      	mov	r0, r4
   d6102:	f7ff ffa9 	bl	d6058 <pinAvailable>
   d6106:	b120      	cbz	r0, d6112 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6108:	4620      	mov	r0, r4
}
   d610a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d610e:	f7fe bc69 	b.w	d49e4 <HAL_GPIO_Read>
}
   d6112:	2000      	movs	r0, #0
   d6114:	bd10      	pop	{r4, pc}
	...

000d6118 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d6118:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d611a:	4c07      	ldr	r4, [pc, #28]	; (d6138 <_Z21__fetch_global_EEPROMv+0x20>)
   d611c:	6823      	ldr	r3, [r4, #0]
   d611e:	07db      	lsls	r3, r3, #31
   d6120:	d408      	bmi.n	d6134 <_Z21__fetch_global_EEPROMv+0x1c>
   d6122:	4620      	mov	r0, r4
   d6124:	f7fd ffbf 	bl	d40a6 <__cxa_guard_acquire>
   d6128:	b120      	cbz	r0, d6134 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d612a:	f7fe fc1b 	bl	d4964 <HAL_EEPROM_Init>
   d612e:	4620      	mov	r0, r4
   d6130:	f7fd ffbe 	bl	d40b0 <__cxa_guard_release>
	return eeprom;
}
   d6134:	4801      	ldr	r0, [pc, #4]	; (d613c <_Z21__fetch_global_EEPROMv+0x24>)
   d6136:	bd10      	pop	{r4, pc}
   d6138:	2003e6f4 	.word	0x2003e6f4
   d613c:	2003e6f8 	.word	0x2003e6f8

000d6140 <_Z17acquireWireBufferv>:
   d6140:	b570      	push	{r4, r5, r6, lr}
   d6142:	4604      	mov	r4, r0
   d6144:	2514      	movs	r5, #20
   d6146:	462a      	mov	r2, r5
   d6148:	4e09      	ldr	r6, [pc, #36]	; (d6170 <_Z17acquireWireBufferv+0x30>)
   d614a:	2100      	movs	r1, #0
   d614c:	f000 ffd9 	bl	d7102 <memset>
   d6150:	8025      	strh	r5, [r4, #0]
   d6152:	2520      	movs	r5, #32
   d6154:	4631      	mov	r1, r6
   d6156:	60a5      	str	r5, [r4, #8]
   d6158:	6125      	str	r5, [r4, #16]
   d615a:	4628      	mov	r0, r5
   d615c:	f000 f86f 	bl	d623e <_ZnajRKSt9nothrow_t>
   d6160:	4631      	mov	r1, r6
   d6162:	6060      	str	r0, [r4, #4]
   d6164:	4628      	mov	r0, r5
   d6166:	f000 f86a 	bl	d623e <_ZnajRKSt9nothrow_t>
   d616a:	60e0      	str	r0, [r4, #12]
   d616c:	4620      	mov	r0, r4
   d616e:	bd70      	pop	{r4, r5, r6, pc}
   d6170:	000d9820 	.word	0x000d9820

000d6174 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6174:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6176:	4d0e      	ldr	r5, [pc, #56]	; (d61b0 <_Z19__fetch_global_Wirev+0x3c>)
   d6178:	6829      	ldr	r1, [r5, #0]
   d617a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d617e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6180:	d113      	bne.n	d61aa <_Z19__fetch_global_Wirev+0x36>
   d6182:	4628      	mov	r0, r5
   d6184:	f7fd ff8f 	bl	d40a6 <__cxa_guard_acquire>
   d6188:	b178      	cbz	r0, d61aa <_Z19__fetch_global_Wirev+0x36>
   d618a:	a801      	add	r0, sp, #4
   d618c:	f7ff ffd8 	bl	d6140 <_Z17acquireWireBufferv>
   d6190:	aa01      	add	r2, sp, #4
   d6192:	4621      	mov	r1, r4
   d6194:	4807      	ldr	r0, [pc, #28]	; (d61b4 <_Z19__fetch_global_Wirev+0x40>)
   d6196:	f7ff f9bf 	bl	d5518 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d619a:	4628      	mov	r0, r5
   d619c:	f7fd ff88 	bl	d40b0 <__cxa_guard_release>
   d61a0:	4a05      	ldr	r2, [pc, #20]	; (d61b8 <_Z19__fetch_global_Wirev+0x44>)
   d61a2:	4906      	ldr	r1, [pc, #24]	; (d61bc <_Z19__fetch_global_Wirev+0x48>)
   d61a4:	4803      	ldr	r0, [pc, #12]	; (d61b4 <_Z19__fetch_global_Wirev+0x40>)
   d61a6:	f000 f82b 	bl	d6200 <__aeabi_atexit>
	return wire;
}
   d61aa:	4802      	ldr	r0, [pc, #8]	; (d61b4 <_Z19__fetch_global_Wirev+0x40>)
   d61ac:	b007      	add	sp, #28
   d61ae:	bd30      	pop	{r4, r5, pc}
   d61b0:	2003e6fc 	.word	0x2003e6fc
   d61b4:	2003e700 	.word	0x2003e700
   d61b8:	2003e304 	.word	0x2003e304
   d61bc:	000d54c1 	.word	0x000d54c1

000d61c0 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d61c0:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d61c2:	4d0b      	ldr	r5, [pc, #44]	; (d61f0 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d61c4:	6829      	ldr	r1, [r5, #0]
   d61c6:	f011 0401 	ands.w	r4, r1, #1
   d61ca:	d10f      	bne.n	d61ec <_ZN8particle7globals11instanceSpiEv+0x2c>
   d61cc:	4628      	mov	r0, r5
   d61ce:	f7fd ff6a 	bl	d40a6 <__cxa_guard_acquire>
   d61d2:	b158      	cbz	r0, d61ec <_ZN8particle7globals11instanceSpiEv+0x2c>
   d61d4:	4621      	mov	r1, r4
   d61d6:	4807      	ldr	r0, [pc, #28]	; (d61f4 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d61d8:	f7ff fc20 	bl	d5a1c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d61dc:	4628      	mov	r0, r5
   d61de:	f7fd ff67 	bl	d40b0 <__cxa_guard_release>
   d61e2:	4a05      	ldr	r2, [pc, #20]	; (d61f8 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d61e4:	4905      	ldr	r1, [pc, #20]	; (d61fc <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d61e6:	4803      	ldr	r0, [pc, #12]	; (d61f4 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d61e8:	f000 f80a 	bl	d6200 <__aeabi_atexit>
    return instance;
}
   d61ec:	4801      	ldr	r0, [pc, #4]	; (d61f4 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d61ee:	bd38      	pop	{r3, r4, r5, pc}
   d61f0:	2003e720 	.word	0x2003e720
   d61f4:	2003e714 	.word	0x2003e714
   d61f8:	2003e304 	.word	0x2003e304
   d61fc:	000d5a0d 	.word	0x000d5a0d

000d6200 <__aeabi_atexit>:
   d6200:	460b      	mov	r3, r1
   d6202:	4601      	mov	r1, r0
   d6204:	4618      	mov	r0, r3
   d6206:	f000 be67 	b.w	d6ed8 <__cxa_atexit>

000d620a <_ZdlPvj>:
   d620a:	f7fd bf48 	b.w	d409e <_ZdlPv>
	...

000d6210 <_ZSt15get_new_handlerv>:
   d6210:	4b02      	ldr	r3, [pc, #8]	; (d621c <_ZSt15get_new_handlerv+0xc>)
   d6212:	6818      	ldr	r0, [r3, #0]
   d6214:	f3bf 8f5f 	dmb	sy
   d6218:	4770      	bx	lr
   d621a:	bf00      	nop
   d621c:	2003e724 	.word	0x2003e724

000d6220 <_ZnwjRKSt9nothrow_t>:
   d6220:	b510      	push	{r4, lr}
   d6222:	2800      	cmp	r0, #0
   d6224:	bf14      	ite	ne
   d6226:	4604      	movne	r4, r0
   d6228:	2401      	moveq	r4, #1
   d622a:	4620      	mov	r0, r4
   d622c:	f7fe fd8e 	bl	d4d4c <malloc>
   d6230:	b920      	cbnz	r0, d623c <_ZnwjRKSt9nothrow_t+0x1c>
   d6232:	f7ff ffed 	bl	d6210 <_ZSt15get_new_handlerv>
   d6236:	b108      	cbz	r0, d623c <_ZnwjRKSt9nothrow_t+0x1c>
   d6238:	4780      	blx	r0
   d623a:	e7f6      	b.n	d622a <_ZnwjRKSt9nothrow_t+0xa>
   d623c:	bd10      	pop	{r4, pc}

000d623e <_ZnajRKSt9nothrow_t>:
   d623e:	f7ff bfef 	b.w	d6220 <_ZnwjRKSt9nothrow_t>

000d6242 <_ZSt25__throw_bad_function_callv>:
   d6242:	b508      	push	{r3, lr}
   d6244:	f7fe fdaa 	bl	d4d9c <abort>

000d6248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6248:	4b24      	ldr	r3, [pc, #144]	; (d62dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d624a:	681a      	ldr	r2, [r3, #0]
   d624c:	07d0      	lsls	r0, r2, #31
   d624e:	bf5c      	itt	pl
   d6250:	2201      	movpl	r2, #1
   d6252:	601a      	strpl	r2, [r3, #0]
   d6254:	4b22      	ldr	r3, [pc, #136]	; (d62e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6256:	681a      	ldr	r2, [r3, #0]
   d6258:	07d1      	lsls	r1, r2, #31
   d625a:	bf5c      	itt	pl
   d625c:	2201      	movpl	r2, #1
   d625e:	601a      	strpl	r2, [r3, #0]
   d6260:	4b20      	ldr	r3, [pc, #128]	; (d62e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6262:	681a      	ldr	r2, [r3, #0]
   d6264:	07d2      	lsls	r2, r2, #31
   d6266:	bf5c      	itt	pl
   d6268:	2201      	movpl	r2, #1
   d626a:	601a      	strpl	r2, [r3, #0]
   d626c:	4b1e      	ldr	r3, [pc, #120]	; (d62e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d626e:	681a      	ldr	r2, [r3, #0]
   d6270:	07d0      	lsls	r0, r2, #31
   d6272:	bf5c      	itt	pl
   d6274:	2201      	movpl	r2, #1
   d6276:	601a      	strpl	r2, [r3, #0]
   d6278:	4b1c      	ldr	r3, [pc, #112]	; (d62ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d627a:	681a      	ldr	r2, [r3, #0]
   d627c:	07d1      	lsls	r1, r2, #31
   d627e:	bf5c      	itt	pl
   d6280:	2201      	movpl	r2, #1
   d6282:	601a      	strpl	r2, [r3, #0]
   d6284:	4b1a      	ldr	r3, [pc, #104]	; (d62f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6286:	681a      	ldr	r2, [r3, #0]
   d6288:	07d2      	lsls	r2, r2, #31
   d628a:	bf5c      	itt	pl
   d628c:	2201      	movpl	r2, #1
   d628e:	601a      	strpl	r2, [r3, #0]
   d6290:	4b18      	ldr	r3, [pc, #96]	; (d62f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6292:	681a      	ldr	r2, [r3, #0]
   d6294:	07d0      	lsls	r0, r2, #31
   d6296:	bf5c      	itt	pl
   d6298:	2201      	movpl	r2, #1
   d629a:	601a      	strpl	r2, [r3, #0]
   d629c:	4b16      	ldr	r3, [pc, #88]	; (d62f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d629e:	681a      	ldr	r2, [r3, #0]
   d62a0:	07d1      	lsls	r1, r2, #31
   d62a2:	bf5c      	itt	pl
   d62a4:	2201      	movpl	r2, #1
   d62a6:	601a      	strpl	r2, [r3, #0]
   d62a8:	4b14      	ldr	r3, [pc, #80]	; (d62fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d62aa:	681a      	ldr	r2, [r3, #0]
   d62ac:	07d2      	lsls	r2, r2, #31
   d62ae:	bf5c      	itt	pl
   d62b0:	2201      	movpl	r2, #1
   d62b2:	601a      	strpl	r2, [r3, #0]
   d62b4:	4b12      	ldr	r3, [pc, #72]	; (d6300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d62b6:	681a      	ldr	r2, [r3, #0]
   d62b8:	07d0      	lsls	r0, r2, #31
   d62ba:	bf5c      	itt	pl
   d62bc:	2201      	movpl	r2, #1
   d62be:	601a      	strpl	r2, [r3, #0]
   d62c0:	4b10      	ldr	r3, [pc, #64]	; (d6304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d62c2:	681a      	ldr	r2, [r3, #0]
   d62c4:	07d1      	lsls	r1, r2, #31
   d62c6:	bf5c      	itt	pl
   d62c8:	2201      	movpl	r2, #1
   d62ca:	601a      	strpl	r2, [r3, #0]
   d62cc:	4b0e      	ldr	r3, [pc, #56]	; (d6308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d62ce:	681a      	ldr	r2, [r3, #0]
   d62d0:	07d2      	lsls	r2, r2, #31
   d62d2:	bf5c      	itt	pl
   d62d4:	2201      	movpl	r2, #1
   d62d6:	601a      	strpl	r2, [r3, #0]
   d62d8:	4770      	bx	lr
   d62da:	bf00      	nop
   d62dc:	2003e754 	.word	0x2003e754
   d62e0:	2003e750 	.word	0x2003e750
   d62e4:	2003e74c 	.word	0x2003e74c
   d62e8:	2003e748 	.word	0x2003e748
   d62ec:	2003e744 	.word	0x2003e744
   d62f0:	2003e740 	.word	0x2003e740
   d62f4:	2003e73c 	.word	0x2003e73c
   d62f8:	2003e738 	.word	0x2003e738
   d62fc:	2003e734 	.word	0x2003e734
   d6300:	2003e730 	.word	0x2003e730
   d6304:	2003e72c 	.word	0x2003e72c
   d6308:	2003e728 	.word	0x2003e728

000d630c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d630c:	4b18      	ldr	r3, [pc, #96]	; (d6370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d630e:	681a      	ldr	r2, [r3, #0]
   d6310:	07d1      	lsls	r1, r2, #31
   d6312:	bf5c      	itt	pl
   d6314:	2201      	movpl	r2, #1
   d6316:	601a      	strpl	r2, [r3, #0]
   d6318:	4b16      	ldr	r3, [pc, #88]	; (d6374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d631a:	681a      	ldr	r2, [r3, #0]
   d631c:	07d2      	lsls	r2, r2, #31
   d631e:	bf5c      	itt	pl
   d6320:	2201      	movpl	r2, #1
   d6322:	601a      	strpl	r2, [r3, #0]
   d6324:	4b14      	ldr	r3, [pc, #80]	; (d6378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6326:	681a      	ldr	r2, [r3, #0]
   d6328:	07d0      	lsls	r0, r2, #31
   d632a:	bf5c      	itt	pl
   d632c:	2201      	movpl	r2, #1
   d632e:	601a      	strpl	r2, [r3, #0]
   d6330:	4b12      	ldr	r3, [pc, #72]	; (d637c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6332:	681a      	ldr	r2, [r3, #0]
   d6334:	07d1      	lsls	r1, r2, #31
   d6336:	bf5c      	itt	pl
   d6338:	2201      	movpl	r2, #1
   d633a:	601a      	strpl	r2, [r3, #0]
   d633c:	4b10      	ldr	r3, [pc, #64]	; (d6380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d633e:	681a      	ldr	r2, [r3, #0]
   d6340:	07d2      	lsls	r2, r2, #31
   d6342:	bf5c      	itt	pl
   d6344:	2201      	movpl	r2, #1
   d6346:	601a      	strpl	r2, [r3, #0]
   d6348:	4b0e      	ldr	r3, [pc, #56]	; (d6384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d634a:	681a      	ldr	r2, [r3, #0]
   d634c:	07d0      	lsls	r0, r2, #31
   d634e:	bf5c      	itt	pl
   d6350:	2201      	movpl	r2, #1
   d6352:	601a      	strpl	r2, [r3, #0]
   d6354:	4b0c      	ldr	r3, [pc, #48]	; (d6388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6356:	681a      	ldr	r2, [r3, #0]
   d6358:	07d1      	lsls	r1, r2, #31
   d635a:	bf5c      	itt	pl
   d635c:	2201      	movpl	r2, #1
   d635e:	601a      	strpl	r2, [r3, #0]
   d6360:	4b0a      	ldr	r3, [pc, #40]	; (d638c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6362:	681a      	ldr	r2, [r3, #0]
   d6364:	07d2      	lsls	r2, r2, #31
   d6366:	bf5c      	itt	pl
   d6368:	2201      	movpl	r2, #1
   d636a:	601a      	strpl	r2, [r3, #0]
   d636c:	4770      	bx	lr
   d636e:	bf00      	nop
   d6370:	2003e774 	.word	0x2003e774
   d6374:	2003e770 	.word	0x2003e770
   d6378:	2003e76c 	.word	0x2003e76c
   d637c:	2003e768 	.word	0x2003e768
   d6380:	2003e764 	.word	0x2003e764
   d6384:	2003e760 	.word	0x2003e760
   d6388:	2003e75c 	.word	0x2003e75c
   d638c:	2003e758 	.word	0x2003e758

000d6390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6390:	4b18      	ldr	r3, [pc, #96]	; (d63f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6392:	681a      	ldr	r2, [r3, #0]
   d6394:	07d1      	lsls	r1, r2, #31
   d6396:	bf5c      	itt	pl
   d6398:	2201      	movpl	r2, #1
   d639a:	601a      	strpl	r2, [r3, #0]
   d639c:	4b16      	ldr	r3, [pc, #88]	; (d63f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d639e:	681a      	ldr	r2, [r3, #0]
   d63a0:	07d2      	lsls	r2, r2, #31
   d63a2:	bf5c      	itt	pl
   d63a4:	2201      	movpl	r2, #1
   d63a6:	601a      	strpl	r2, [r3, #0]
   d63a8:	4b14      	ldr	r3, [pc, #80]	; (d63fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d63aa:	681a      	ldr	r2, [r3, #0]
   d63ac:	07d0      	lsls	r0, r2, #31
   d63ae:	bf5c      	itt	pl
   d63b0:	2201      	movpl	r2, #1
   d63b2:	601a      	strpl	r2, [r3, #0]
   d63b4:	4b12      	ldr	r3, [pc, #72]	; (d6400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d63b6:	681a      	ldr	r2, [r3, #0]
   d63b8:	07d1      	lsls	r1, r2, #31
   d63ba:	bf5c      	itt	pl
   d63bc:	2201      	movpl	r2, #1
   d63be:	601a      	strpl	r2, [r3, #0]
   d63c0:	4b10      	ldr	r3, [pc, #64]	; (d6404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d63c2:	681a      	ldr	r2, [r3, #0]
   d63c4:	07d2      	lsls	r2, r2, #31
   d63c6:	bf5c      	itt	pl
   d63c8:	2201      	movpl	r2, #1
   d63ca:	601a      	strpl	r2, [r3, #0]
   d63cc:	4b0e      	ldr	r3, [pc, #56]	; (d6408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d63ce:	681a      	ldr	r2, [r3, #0]
   d63d0:	07d0      	lsls	r0, r2, #31
   d63d2:	bf5c      	itt	pl
   d63d4:	2201      	movpl	r2, #1
   d63d6:	601a      	strpl	r2, [r3, #0]
   d63d8:	4b0c      	ldr	r3, [pc, #48]	; (d640c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d63da:	681a      	ldr	r2, [r3, #0]
   d63dc:	07d1      	lsls	r1, r2, #31
   d63de:	bf5c      	itt	pl
   d63e0:	2201      	movpl	r2, #1
   d63e2:	601a      	strpl	r2, [r3, #0]
   d63e4:	4b0a      	ldr	r3, [pc, #40]	; (d6410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d63e6:	681a      	ldr	r2, [r3, #0]
   d63e8:	07d2      	lsls	r2, r2, #31
   d63ea:	bf5c      	itt	pl
   d63ec:	2201      	movpl	r2, #1
   d63ee:	601a      	strpl	r2, [r3, #0]
   d63f0:	4770      	bx	lr
   d63f2:	bf00      	nop
   d63f4:	2003e794 	.word	0x2003e794
   d63f8:	2003e790 	.word	0x2003e790
   d63fc:	2003e78c 	.word	0x2003e78c
   d6400:	2003e788 	.word	0x2003e788
   d6404:	2003e784 	.word	0x2003e784
   d6408:	2003e780 	.word	0x2003e780
   d640c:	2003e77c 	.word	0x2003e77c
   d6410:	2003e778 	.word	0x2003e778

000d6414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6414:	4b24      	ldr	r3, [pc, #144]	; (d64a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6416:	681a      	ldr	r2, [r3, #0]
   d6418:	07d0      	lsls	r0, r2, #31
   d641a:	bf5c      	itt	pl
   d641c:	2201      	movpl	r2, #1
   d641e:	601a      	strpl	r2, [r3, #0]
   d6420:	4b22      	ldr	r3, [pc, #136]	; (d64ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6422:	681a      	ldr	r2, [r3, #0]
   d6424:	07d1      	lsls	r1, r2, #31
   d6426:	bf5c      	itt	pl
   d6428:	2201      	movpl	r2, #1
   d642a:	601a      	strpl	r2, [r3, #0]
   d642c:	4b20      	ldr	r3, [pc, #128]	; (d64b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d642e:	681a      	ldr	r2, [r3, #0]
   d6430:	07d2      	lsls	r2, r2, #31
   d6432:	bf5c      	itt	pl
   d6434:	2201      	movpl	r2, #1
   d6436:	601a      	strpl	r2, [r3, #0]
   d6438:	4b1e      	ldr	r3, [pc, #120]	; (d64b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d643a:	681a      	ldr	r2, [r3, #0]
   d643c:	07d0      	lsls	r0, r2, #31
   d643e:	bf5c      	itt	pl
   d6440:	2201      	movpl	r2, #1
   d6442:	601a      	strpl	r2, [r3, #0]
   d6444:	4b1c      	ldr	r3, [pc, #112]	; (d64b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6446:	681a      	ldr	r2, [r3, #0]
   d6448:	07d1      	lsls	r1, r2, #31
   d644a:	bf5c      	itt	pl
   d644c:	2201      	movpl	r2, #1
   d644e:	601a      	strpl	r2, [r3, #0]
   d6450:	4b1a      	ldr	r3, [pc, #104]	; (d64bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6452:	681a      	ldr	r2, [r3, #0]
   d6454:	07d2      	lsls	r2, r2, #31
   d6456:	bf5c      	itt	pl
   d6458:	2201      	movpl	r2, #1
   d645a:	601a      	strpl	r2, [r3, #0]
   d645c:	4b18      	ldr	r3, [pc, #96]	; (d64c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d645e:	681a      	ldr	r2, [r3, #0]
   d6460:	07d0      	lsls	r0, r2, #31
   d6462:	bf5c      	itt	pl
   d6464:	2201      	movpl	r2, #1
   d6466:	601a      	strpl	r2, [r3, #0]
   d6468:	4b16      	ldr	r3, [pc, #88]	; (d64c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d646a:	681a      	ldr	r2, [r3, #0]
   d646c:	07d1      	lsls	r1, r2, #31
   d646e:	bf5c      	itt	pl
   d6470:	2201      	movpl	r2, #1
   d6472:	601a      	strpl	r2, [r3, #0]
   d6474:	4b14      	ldr	r3, [pc, #80]	; (d64c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6476:	681a      	ldr	r2, [r3, #0]
   d6478:	07d2      	lsls	r2, r2, #31
   d647a:	bf5c      	itt	pl
   d647c:	2201      	movpl	r2, #1
   d647e:	601a      	strpl	r2, [r3, #0]
   d6480:	4b12      	ldr	r3, [pc, #72]	; (d64cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6482:	681a      	ldr	r2, [r3, #0]
   d6484:	07d0      	lsls	r0, r2, #31
   d6486:	bf5c      	itt	pl
   d6488:	2201      	movpl	r2, #1
   d648a:	601a      	strpl	r2, [r3, #0]
   d648c:	4b10      	ldr	r3, [pc, #64]	; (d64d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d648e:	681a      	ldr	r2, [r3, #0]
   d6490:	07d1      	lsls	r1, r2, #31
   d6492:	bf5c      	itt	pl
   d6494:	2201      	movpl	r2, #1
   d6496:	601a      	strpl	r2, [r3, #0]
   d6498:	4b0e      	ldr	r3, [pc, #56]	; (d64d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d649a:	681a      	ldr	r2, [r3, #0]
   d649c:	07d2      	lsls	r2, r2, #31
   d649e:	bf5c      	itt	pl
   d64a0:	2201      	movpl	r2, #1
   d64a2:	601a      	strpl	r2, [r3, #0]
   d64a4:	4770      	bx	lr
   d64a6:	bf00      	nop
   d64a8:	2003e7c4 	.word	0x2003e7c4
   d64ac:	2003e7c0 	.word	0x2003e7c0
   d64b0:	2003e7bc 	.word	0x2003e7bc
   d64b4:	2003e7b8 	.word	0x2003e7b8
   d64b8:	2003e7b4 	.word	0x2003e7b4
   d64bc:	2003e7b0 	.word	0x2003e7b0
   d64c0:	2003e7ac 	.word	0x2003e7ac
   d64c4:	2003e7a8 	.word	0x2003e7a8
   d64c8:	2003e7a4 	.word	0x2003e7a4
   d64cc:	2003e7a0 	.word	0x2003e7a0
   d64d0:	2003e79c 	.word	0x2003e79c
   d64d4:	2003e798 	.word	0x2003e798

000d64d8 <__aeabi_drsub>:
   d64d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d64dc:	e002      	b.n	d64e4 <__adddf3>
   d64de:	bf00      	nop

000d64e0 <__aeabi_dsub>:
   d64e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d64e4 <__adddf3>:
   d64e4:	b530      	push	{r4, r5, lr}
   d64e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d64ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d64ee:	ea94 0f05 	teq	r4, r5
   d64f2:	bf08      	it	eq
   d64f4:	ea90 0f02 	teqeq	r0, r2
   d64f8:	bf1f      	itttt	ne
   d64fa:	ea54 0c00 	orrsne.w	ip, r4, r0
   d64fe:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6502:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6506:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d650a:	f000 80e2 	beq.w	d66d2 <__adddf3+0x1ee>
   d650e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6512:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6516:	bfb8      	it	lt
   d6518:	426d      	neglt	r5, r5
   d651a:	dd0c      	ble.n	d6536 <__adddf3+0x52>
   d651c:	442c      	add	r4, r5
   d651e:	ea80 0202 	eor.w	r2, r0, r2
   d6522:	ea81 0303 	eor.w	r3, r1, r3
   d6526:	ea82 0000 	eor.w	r0, r2, r0
   d652a:	ea83 0101 	eor.w	r1, r3, r1
   d652e:	ea80 0202 	eor.w	r2, r0, r2
   d6532:	ea81 0303 	eor.w	r3, r1, r3
   d6536:	2d36      	cmp	r5, #54	; 0x36
   d6538:	bf88      	it	hi
   d653a:	bd30      	pophi	{r4, r5, pc}
   d653c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6540:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6544:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6548:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d654c:	d002      	beq.n	d6554 <__adddf3+0x70>
   d654e:	4240      	negs	r0, r0
   d6550:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6554:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6558:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d655c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6560:	d002      	beq.n	d6568 <__adddf3+0x84>
   d6562:	4252      	negs	r2, r2
   d6564:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6568:	ea94 0f05 	teq	r4, r5
   d656c:	f000 80a7 	beq.w	d66be <__adddf3+0x1da>
   d6570:	f1a4 0401 	sub.w	r4, r4, #1
   d6574:	f1d5 0e20 	rsbs	lr, r5, #32
   d6578:	db0d      	blt.n	d6596 <__adddf3+0xb2>
   d657a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d657e:	fa22 f205 	lsr.w	r2, r2, r5
   d6582:	1880      	adds	r0, r0, r2
   d6584:	f141 0100 	adc.w	r1, r1, #0
   d6588:	fa03 f20e 	lsl.w	r2, r3, lr
   d658c:	1880      	adds	r0, r0, r2
   d658e:	fa43 f305 	asr.w	r3, r3, r5
   d6592:	4159      	adcs	r1, r3
   d6594:	e00e      	b.n	d65b4 <__adddf3+0xd0>
   d6596:	f1a5 0520 	sub.w	r5, r5, #32
   d659a:	f10e 0e20 	add.w	lr, lr, #32
   d659e:	2a01      	cmp	r2, #1
   d65a0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d65a4:	bf28      	it	cs
   d65a6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d65aa:	fa43 f305 	asr.w	r3, r3, r5
   d65ae:	18c0      	adds	r0, r0, r3
   d65b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d65b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d65b8:	d507      	bpl.n	d65ca <__adddf3+0xe6>
   d65ba:	f04f 0e00 	mov.w	lr, #0
   d65be:	f1dc 0c00 	rsbs	ip, ip, #0
   d65c2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d65c6:	eb6e 0101 	sbc.w	r1, lr, r1
   d65ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d65ce:	d31b      	bcc.n	d6608 <__adddf3+0x124>
   d65d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d65d4:	d30c      	bcc.n	d65f0 <__adddf3+0x10c>
   d65d6:	0849      	lsrs	r1, r1, #1
   d65d8:	ea5f 0030 	movs.w	r0, r0, rrx
   d65dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d65e0:	f104 0401 	add.w	r4, r4, #1
   d65e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d65e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d65ec:	f080 809a 	bcs.w	d6724 <__adddf3+0x240>
   d65f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d65f4:	bf08      	it	eq
   d65f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d65fa:	f150 0000 	adcs.w	r0, r0, #0
   d65fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6602:	ea41 0105 	orr.w	r1, r1, r5
   d6606:	bd30      	pop	{r4, r5, pc}
   d6608:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d660c:	4140      	adcs	r0, r0
   d660e:	eb41 0101 	adc.w	r1, r1, r1
   d6612:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6616:	f1a4 0401 	sub.w	r4, r4, #1
   d661a:	d1e9      	bne.n	d65f0 <__adddf3+0x10c>
   d661c:	f091 0f00 	teq	r1, #0
   d6620:	bf04      	itt	eq
   d6622:	4601      	moveq	r1, r0
   d6624:	2000      	moveq	r0, #0
   d6626:	fab1 f381 	clz	r3, r1
   d662a:	bf08      	it	eq
   d662c:	3320      	addeq	r3, #32
   d662e:	f1a3 030b 	sub.w	r3, r3, #11
   d6632:	f1b3 0220 	subs.w	r2, r3, #32
   d6636:	da0c      	bge.n	d6652 <__adddf3+0x16e>
   d6638:	320c      	adds	r2, #12
   d663a:	dd08      	ble.n	d664e <__adddf3+0x16a>
   d663c:	f102 0c14 	add.w	ip, r2, #20
   d6640:	f1c2 020c 	rsb	r2, r2, #12
   d6644:	fa01 f00c 	lsl.w	r0, r1, ip
   d6648:	fa21 f102 	lsr.w	r1, r1, r2
   d664c:	e00c      	b.n	d6668 <__adddf3+0x184>
   d664e:	f102 0214 	add.w	r2, r2, #20
   d6652:	bfd8      	it	le
   d6654:	f1c2 0c20 	rsble	ip, r2, #32
   d6658:	fa01 f102 	lsl.w	r1, r1, r2
   d665c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6660:	bfdc      	itt	le
   d6662:	ea41 010c 	orrle.w	r1, r1, ip
   d6666:	4090      	lslle	r0, r2
   d6668:	1ae4      	subs	r4, r4, r3
   d666a:	bfa2      	ittt	ge
   d666c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6670:	4329      	orrge	r1, r5
   d6672:	bd30      	popge	{r4, r5, pc}
   d6674:	ea6f 0404 	mvn.w	r4, r4
   d6678:	3c1f      	subs	r4, #31
   d667a:	da1c      	bge.n	d66b6 <__adddf3+0x1d2>
   d667c:	340c      	adds	r4, #12
   d667e:	dc0e      	bgt.n	d669e <__adddf3+0x1ba>
   d6680:	f104 0414 	add.w	r4, r4, #20
   d6684:	f1c4 0220 	rsb	r2, r4, #32
   d6688:	fa20 f004 	lsr.w	r0, r0, r4
   d668c:	fa01 f302 	lsl.w	r3, r1, r2
   d6690:	ea40 0003 	orr.w	r0, r0, r3
   d6694:	fa21 f304 	lsr.w	r3, r1, r4
   d6698:	ea45 0103 	orr.w	r1, r5, r3
   d669c:	bd30      	pop	{r4, r5, pc}
   d669e:	f1c4 040c 	rsb	r4, r4, #12
   d66a2:	f1c4 0220 	rsb	r2, r4, #32
   d66a6:	fa20 f002 	lsr.w	r0, r0, r2
   d66aa:	fa01 f304 	lsl.w	r3, r1, r4
   d66ae:	ea40 0003 	orr.w	r0, r0, r3
   d66b2:	4629      	mov	r1, r5
   d66b4:	bd30      	pop	{r4, r5, pc}
   d66b6:	fa21 f004 	lsr.w	r0, r1, r4
   d66ba:	4629      	mov	r1, r5
   d66bc:	bd30      	pop	{r4, r5, pc}
   d66be:	f094 0f00 	teq	r4, #0
   d66c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d66c6:	bf06      	itte	eq
   d66c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d66cc:	3401      	addeq	r4, #1
   d66ce:	3d01      	subne	r5, #1
   d66d0:	e74e      	b.n	d6570 <__adddf3+0x8c>
   d66d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d66d6:	bf18      	it	ne
   d66d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d66dc:	d029      	beq.n	d6732 <__adddf3+0x24e>
   d66de:	ea94 0f05 	teq	r4, r5
   d66e2:	bf08      	it	eq
   d66e4:	ea90 0f02 	teqeq	r0, r2
   d66e8:	d005      	beq.n	d66f6 <__adddf3+0x212>
   d66ea:	ea54 0c00 	orrs.w	ip, r4, r0
   d66ee:	bf04      	itt	eq
   d66f0:	4619      	moveq	r1, r3
   d66f2:	4610      	moveq	r0, r2
   d66f4:	bd30      	pop	{r4, r5, pc}
   d66f6:	ea91 0f03 	teq	r1, r3
   d66fa:	bf1e      	ittt	ne
   d66fc:	2100      	movne	r1, #0
   d66fe:	2000      	movne	r0, #0
   d6700:	bd30      	popne	{r4, r5, pc}
   d6702:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6706:	d105      	bne.n	d6714 <__adddf3+0x230>
   d6708:	0040      	lsls	r0, r0, #1
   d670a:	4149      	adcs	r1, r1
   d670c:	bf28      	it	cs
   d670e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6712:	bd30      	pop	{r4, r5, pc}
   d6714:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6718:	bf3c      	itt	cc
   d671a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d671e:	bd30      	popcc	{r4, r5, pc}
   d6720:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6724:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d672c:	f04f 0000 	mov.w	r0, #0
   d6730:	bd30      	pop	{r4, r5, pc}
   d6732:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6736:	bf1a      	itte	ne
   d6738:	4619      	movne	r1, r3
   d673a:	4610      	movne	r0, r2
   d673c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6740:	bf1c      	itt	ne
   d6742:	460b      	movne	r3, r1
   d6744:	4602      	movne	r2, r0
   d6746:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d674a:	bf06      	itte	eq
   d674c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6750:	ea91 0f03 	teqeq	r1, r3
   d6754:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6758:	bd30      	pop	{r4, r5, pc}
   d675a:	bf00      	nop

000d675c <__aeabi_ui2d>:
   d675c:	f090 0f00 	teq	r0, #0
   d6760:	bf04      	itt	eq
   d6762:	2100      	moveq	r1, #0
   d6764:	4770      	bxeq	lr
   d6766:	b530      	push	{r4, r5, lr}
   d6768:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d676c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6770:	f04f 0500 	mov.w	r5, #0
   d6774:	f04f 0100 	mov.w	r1, #0
   d6778:	e750      	b.n	d661c <__adddf3+0x138>
   d677a:	bf00      	nop

000d677c <__aeabi_i2d>:
   d677c:	f090 0f00 	teq	r0, #0
   d6780:	bf04      	itt	eq
   d6782:	2100      	moveq	r1, #0
   d6784:	4770      	bxeq	lr
   d6786:	b530      	push	{r4, r5, lr}
   d6788:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d678c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6790:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6794:	bf48      	it	mi
   d6796:	4240      	negmi	r0, r0
   d6798:	f04f 0100 	mov.w	r1, #0
   d679c:	e73e      	b.n	d661c <__adddf3+0x138>
   d679e:	bf00      	nop

000d67a0 <__aeabi_f2d>:
   d67a0:	0042      	lsls	r2, r0, #1
   d67a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d67a6:	ea4f 0131 	mov.w	r1, r1, rrx
   d67aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d67ae:	bf1f      	itttt	ne
   d67b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d67b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d67b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d67bc:	4770      	bxne	lr
   d67be:	f092 0f00 	teq	r2, #0
   d67c2:	bf14      	ite	ne
   d67c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d67c8:	4770      	bxeq	lr
   d67ca:	b530      	push	{r4, r5, lr}
   d67cc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d67d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d67d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d67d8:	e720      	b.n	d661c <__adddf3+0x138>
   d67da:	bf00      	nop

000d67dc <__aeabi_ul2d>:
   d67dc:	ea50 0201 	orrs.w	r2, r0, r1
   d67e0:	bf08      	it	eq
   d67e2:	4770      	bxeq	lr
   d67e4:	b530      	push	{r4, r5, lr}
   d67e6:	f04f 0500 	mov.w	r5, #0
   d67ea:	e00a      	b.n	d6802 <__aeabi_l2d+0x16>

000d67ec <__aeabi_l2d>:
   d67ec:	ea50 0201 	orrs.w	r2, r0, r1
   d67f0:	bf08      	it	eq
   d67f2:	4770      	bxeq	lr
   d67f4:	b530      	push	{r4, r5, lr}
   d67f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d67fa:	d502      	bpl.n	d6802 <__aeabi_l2d+0x16>
   d67fc:	4240      	negs	r0, r0
   d67fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6802:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6806:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d680a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d680e:	f43f aedc 	beq.w	d65ca <__adddf3+0xe6>
   d6812:	f04f 0203 	mov.w	r2, #3
   d6816:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d681a:	bf18      	it	ne
   d681c:	3203      	addne	r2, #3
   d681e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6822:	bf18      	it	ne
   d6824:	3203      	addne	r2, #3
   d6826:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d682a:	f1c2 0320 	rsb	r3, r2, #32
   d682e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6832:	fa20 f002 	lsr.w	r0, r0, r2
   d6836:	fa01 fe03 	lsl.w	lr, r1, r3
   d683a:	ea40 000e 	orr.w	r0, r0, lr
   d683e:	fa21 f102 	lsr.w	r1, r1, r2
   d6842:	4414      	add	r4, r2
   d6844:	e6c1      	b.n	d65ca <__adddf3+0xe6>
   d6846:	bf00      	nop

000d6848 <__aeabi_dmul>:
   d6848:	b570      	push	{r4, r5, r6, lr}
   d684a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d684e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6852:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6856:	bf1d      	ittte	ne
   d6858:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d685c:	ea94 0f0c 	teqne	r4, ip
   d6860:	ea95 0f0c 	teqne	r5, ip
   d6864:	f000 f8de 	bleq	d6a24 <__aeabi_dmul+0x1dc>
   d6868:	442c      	add	r4, r5
   d686a:	ea81 0603 	eor.w	r6, r1, r3
   d686e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6872:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6876:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d687a:	bf18      	it	ne
   d687c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6888:	d038      	beq.n	d68fc <__aeabi_dmul+0xb4>
   d688a:	fba0 ce02 	umull	ip, lr, r0, r2
   d688e:	f04f 0500 	mov.w	r5, #0
   d6892:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6896:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d689a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d689e:	f04f 0600 	mov.w	r6, #0
   d68a2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d68a6:	f09c 0f00 	teq	ip, #0
   d68aa:	bf18      	it	ne
   d68ac:	f04e 0e01 	orrne.w	lr, lr, #1
   d68b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d68b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d68b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d68bc:	d204      	bcs.n	d68c8 <__aeabi_dmul+0x80>
   d68be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d68c2:	416d      	adcs	r5, r5
   d68c4:	eb46 0606 	adc.w	r6, r6, r6
   d68c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d68cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d68d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d68d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d68d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d68dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d68e0:	bf88      	it	hi
   d68e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d68e6:	d81e      	bhi.n	d6926 <__aeabi_dmul+0xde>
   d68e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d68ec:	bf08      	it	eq
   d68ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d68f2:	f150 0000 	adcs.w	r0, r0, #0
   d68f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d68fa:	bd70      	pop	{r4, r5, r6, pc}
   d68fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6900:	ea46 0101 	orr.w	r1, r6, r1
   d6904:	ea40 0002 	orr.w	r0, r0, r2
   d6908:	ea81 0103 	eor.w	r1, r1, r3
   d690c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6910:	bfc2      	ittt	gt
   d6912:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6916:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d691a:	bd70      	popgt	{r4, r5, r6, pc}
   d691c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6920:	f04f 0e00 	mov.w	lr, #0
   d6924:	3c01      	subs	r4, #1
   d6926:	f300 80ab 	bgt.w	d6a80 <__aeabi_dmul+0x238>
   d692a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d692e:	bfde      	ittt	le
   d6930:	2000      	movle	r0, #0
   d6932:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6936:	bd70      	pople	{r4, r5, r6, pc}
   d6938:	f1c4 0400 	rsb	r4, r4, #0
   d693c:	3c20      	subs	r4, #32
   d693e:	da35      	bge.n	d69ac <__aeabi_dmul+0x164>
   d6940:	340c      	adds	r4, #12
   d6942:	dc1b      	bgt.n	d697c <__aeabi_dmul+0x134>
   d6944:	f104 0414 	add.w	r4, r4, #20
   d6948:	f1c4 0520 	rsb	r5, r4, #32
   d694c:	fa00 f305 	lsl.w	r3, r0, r5
   d6950:	fa20 f004 	lsr.w	r0, r0, r4
   d6954:	fa01 f205 	lsl.w	r2, r1, r5
   d6958:	ea40 0002 	orr.w	r0, r0, r2
   d695c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6960:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6964:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6968:	fa21 f604 	lsr.w	r6, r1, r4
   d696c:	eb42 0106 	adc.w	r1, r2, r6
   d6970:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6974:	bf08      	it	eq
   d6976:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d697a:	bd70      	pop	{r4, r5, r6, pc}
   d697c:	f1c4 040c 	rsb	r4, r4, #12
   d6980:	f1c4 0520 	rsb	r5, r4, #32
   d6984:	fa00 f304 	lsl.w	r3, r0, r4
   d6988:	fa20 f005 	lsr.w	r0, r0, r5
   d698c:	fa01 f204 	lsl.w	r2, r1, r4
   d6990:	ea40 0002 	orr.w	r0, r0, r2
   d6994:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6998:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d699c:	f141 0100 	adc.w	r1, r1, #0
   d69a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d69a4:	bf08      	it	eq
   d69a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d69aa:	bd70      	pop	{r4, r5, r6, pc}
   d69ac:	f1c4 0520 	rsb	r5, r4, #32
   d69b0:	fa00 f205 	lsl.w	r2, r0, r5
   d69b4:	ea4e 0e02 	orr.w	lr, lr, r2
   d69b8:	fa20 f304 	lsr.w	r3, r0, r4
   d69bc:	fa01 f205 	lsl.w	r2, r1, r5
   d69c0:	ea43 0302 	orr.w	r3, r3, r2
   d69c4:	fa21 f004 	lsr.w	r0, r1, r4
   d69c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d69cc:	fa21 f204 	lsr.w	r2, r1, r4
   d69d0:	ea20 0002 	bic.w	r0, r0, r2
   d69d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d69d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d69dc:	bf08      	it	eq
   d69de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d69e2:	bd70      	pop	{r4, r5, r6, pc}
   d69e4:	f094 0f00 	teq	r4, #0
   d69e8:	d10f      	bne.n	d6a0a <__aeabi_dmul+0x1c2>
   d69ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d69ee:	0040      	lsls	r0, r0, #1
   d69f0:	eb41 0101 	adc.w	r1, r1, r1
   d69f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d69f8:	bf08      	it	eq
   d69fa:	3c01      	subeq	r4, #1
   d69fc:	d0f7      	beq.n	d69ee <__aeabi_dmul+0x1a6>
   d69fe:	ea41 0106 	orr.w	r1, r1, r6
   d6a02:	f095 0f00 	teq	r5, #0
   d6a06:	bf18      	it	ne
   d6a08:	4770      	bxne	lr
   d6a0a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6a0e:	0052      	lsls	r2, r2, #1
   d6a10:	eb43 0303 	adc.w	r3, r3, r3
   d6a14:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6a18:	bf08      	it	eq
   d6a1a:	3d01      	subeq	r5, #1
   d6a1c:	d0f7      	beq.n	d6a0e <__aeabi_dmul+0x1c6>
   d6a1e:	ea43 0306 	orr.w	r3, r3, r6
   d6a22:	4770      	bx	lr
   d6a24:	ea94 0f0c 	teq	r4, ip
   d6a28:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6a2c:	bf18      	it	ne
   d6a2e:	ea95 0f0c 	teqne	r5, ip
   d6a32:	d00c      	beq.n	d6a4e <__aeabi_dmul+0x206>
   d6a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6a38:	bf18      	it	ne
   d6a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6a3e:	d1d1      	bne.n	d69e4 <__aeabi_dmul+0x19c>
   d6a40:	ea81 0103 	eor.w	r1, r1, r3
   d6a44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a48:	f04f 0000 	mov.w	r0, #0
   d6a4c:	bd70      	pop	{r4, r5, r6, pc}
   d6a4e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6a52:	bf06      	itte	eq
   d6a54:	4610      	moveq	r0, r2
   d6a56:	4619      	moveq	r1, r3
   d6a58:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6a5c:	d019      	beq.n	d6a92 <__aeabi_dmul+0x24a>
   d6a5e:	ea94 0f0c 	teq	r4, ip
   d6a62:	d102      	bne.n	d6a6a <__aeabi_dmul+0x222>
   d6a64:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6a68:	d113      	bne.n	d6a92 <__aeabi_dmul+0x24a>
   d6a6a:	ea95 0f0c 	teq	r5, ip
   d6a6e:	d105      	bne.n	d6a7c <__aeabi_dmul+0x234>
   d6a70:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6a74:	bf1c      	itt	ne
   d6a76:	4610      	movne	r0, r2
   d6a78:	4619      	movne	r1, r3
   d6a7a:	d10a      	bne.n	d6a92 <__aeabi_dmul+0x24a>
   d6a7c:	ea81 0103 	eor.w	r1, r1, r3
   d6a80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6a84:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6a88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6a8c:	f04f 0000 	mov.w	r0, #0
   d6a90:	bd70      	pop	{r4, r5, r6, pc}
   d6a92:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6a96:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6a9a:	bd70      	pop	{r4, r5, r6, pc}

000d6a9c <__aeabi_ddiv>:
   d6a9c:	b570      	push	{r4, r5, r6, lr}
   d6a9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6aa2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6aa6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6aaa:	bf1d      	ittte	ne
   d6aac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6ab0:	ea94 0f0c 	teqne	r4, ip
   d6ab4:	ea95 0f0c 	teqne	r5, ip
   d6ab8:	f000 f8a7 	bleq	d6c0a <__aeabi_ddiv+0x16e>
   d6abc:	eba4 0405 	sub.w	r4, r4, r5
   d6ac0:	ea81 0e03 	eor.w	lr, r1, r3
   d6ac4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6ac8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6acc:	f000 8088 	beq.w	d6be0 <__aeabi_ddiv+0x144>
   d6ad0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6ad4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6ad8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6adc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6ae0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6ae4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6ae8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6aec:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6af0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6af4:	429d      	cmp	r5, r3
   d6af6:	bf08      	it	eq
   d6af8:	4296      	cmpeq	r6, r2
   d6afa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6afe:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6b02:	d202      	bcs.n	d6b0a <__aeabi_ddiv+0x6e>
   d6b04:	085b      	lsrs	r3, r3, #1
   d6b06:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b0a:	1ab6      	subs	r6, r6, r2
   d6b0c:	eb65 0503 	sbc.w	r5, r5, r3
   d6b10:	085b      	lsrs	r3, r3, #1
   d6b12:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b16:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6b1a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6b1e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b22:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b26:	bf22      	ittt	cs
   d6b28:	1ab6      	subcs	r6, r6, r2
   d6b2a:	4675      	movcs	r5, lr
   d6b2c:	ea40 000c 	orrcs.w	r0, r0, ip
   d6b30:	085b      	lsrs	r3, r3, #1
   d6b32:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b36:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b3e:	bf22      	ittt	cs
   d6b40:	1ab6      	subcs	r6, r6, r2
   d6b42:	4675      	movcs	r5, lr
   d6b44:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6b48:	085b      	lsrs	r3, r3, #1
   d6b4a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b4e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b52:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b56:	bf22      	ittt	cs
   d6b58:	1ab6      	subcs	r6, r6, r2
   d6b5a:	4675      	movcs	r5, lr
   d6b5c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6b60:	085b      	lsrs	r3, r3, #1
   d6b62:	ea4f 0232 	mov.w	r2, r2, rrx
   d6b66:	ebb6 0e02 	subs.w	lr, r6, r2
   d6b6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6b6e:	bf22      	ittt	cs
   d6b70:	1ab6      	subcs	r6, r6, r2
   d6b72:	4675      	movcs	r5, lr
   d6b74:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6b78:	ea55 0e06 	orrs.w	lr, r5, r6
   d6b7c:	d018      	beq.n	d6bb0 <__aeabi_ddiv+0x114>
   d6b7e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6b82:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6b86:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6b8a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6b8e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6b92:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6b96:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6b9a:	d1c0      	bne.n	d6b1e <__aeabi_ddiv+0x82>
   d6b9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6ba0:	d10b      	bne.n	d6bba <__aeabi_ddiv+0x11e>
   d6ba2:	ea41 0100 	orr.w	r1, r1, r0
   d6ba6:	f04f 0000 	mov.w	r0, #0
   d6baa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6bae:	e7b6      	b.n	d6b1e <__aeabi_ddiv+0x82>
   d6bb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6bb4:	bf04      	itt	eq
   d6bb6:	4301      	orreq	r1, r0
   d6bb8:	2000      	moveq	r0, #0
   d6bba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6bbe:	bf88      	it	hi
   d6bc0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6bc4:	f63f aeaf 	bhi.w	d6926 <__aeabi_dmul+0xde>
   d6bc8:	ebb5 0c03 	subs.w	ip, r5, r3
   d6bcc:	bf04      	itt	eq
   d6bce:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6bd2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6bd6:	f150 0000 	adcs.w	r0, r0, #0
   d6bda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6bde:	bd70      	pop	{r4, r5, r6, pc}
   d6be0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6be4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6be8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6bec:	bfc2      	ittt	gt
   d6bee:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6bf2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6bf6:	bd70      	popgt	{r4, r5, r6, pc}
   d6bf8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6bfc:	f04f 0e00 	mov.w	lr, #0
   d6c00:	3c01      	subs	r4, #1
   d6c02:	e690      	b.n	d6926 <__aeabi_dmul+0xde>
   d6c04:	ea45 0e06 	orr.w	lr, r5, r6
   d6c08:	e68d      	b.n	d6926 <__aeabi_dmul+0xde>
   d6c0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6c0e:	ea94 0f0c 	teq	r4, ip
   d6c12:	bf08      	it	eq
   d6c14:	ea95 0f0c 	teqeq	r5, ip
   d6c18:	f43f af3b 	beq.w	d6a92 <__aeabi_dmul+0x24a>
   d6c1c:	ea94 0f0c 	teq	r4, ip
   d6c20:	d10a      	bne.n	d6c38 <__aeabi_ddiv+0x19c>
   d6c22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6c26:	f47f af34 	bne.w	d6a92 <__aeabi_dmul+0x24a>
   d6c2a:	ea95 0f0c 	teq	r5, ip
   d6c2e:	f47f af25 	bne.w	d6a7c <__aeabi_dmul+0x234>
   d6c32:	4610      	mov	r0, r2
   d6c34:	4619      	mov	r1, r3
   d6c36:	e72c      	b.n	d6a92 <__aeabi_dmul+0x24a>
   d6c38:	ea95 0f0c 	teq	r5, ip
   d6c3c:	d106      	bne.n	d6c4c <__aeabi_ddiv+0x1b0>
   d6c3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6c42:	f43f aefd 	beq.w	d6a40 <__aeabi_dmul+0x1f8>
   d6c46:	4610      	mov	r0, r2
   d6c48:	4619      	mov	r1, r3
   d6c4a:	e722      	b.n	d6a92 <__aeabi_dmul+0x24a>
   d6c4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6c50:	bf18      	it	ne
   d6c52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6c56:	f47f aec5 	bne.w	d69e4 <__aeabi_dmul+0x19c>
   d6c5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6c5e:	f47f af0d 	bne.w	d6a7c <__aeabi_dmul+0x234>
   d6c62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6c66:	f47f aeeb 	bne.w	d6a40 <__aeabi_dmul+0x1f8>
   d6c6a:	e712      	b.n	d6a92 <__aeabi_dmul+0x24a>

000d6c6c <__gedf2>:
   d6c6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d6c70:	e006      	b.n	d6c80 <__cmpdf2+0x4>
   d6c72:	bf00      	nop

000d6c74 <__ledf2>:
   d6c74:	f04f 0c01 	mov.w	ip, #1
   d6c78:	e002      	b.n	d6c80 <__cmpdf2+0x4>
   d6c7a:	bf00      	nop

000d6c7c <__cmpdf2>:
   d6c7c:	f04f 0c01 	mov.w	ip, #1
   d6c80:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6c84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6c88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6c8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6c90:	bf18      	it	ne
   d6c92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6c96:	d01b      	beq.n	d6cd0 <__cmpdf2+0x54>
   d6c98:	b001      	add	sp, #4
   d6c9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6c9e:	bf0c      	ite	eq
   d6ca0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6ca4:	ea91 0f03 	teqne	r1, r3
   d6ca8:	bf02      	ittt	eq
   d6caa:	ea90 0f02 	teqeq	r0, r2
   d6cae:	2000      	moveq	r0, #0
   d6cb0:	4770      	bxeq	lr
   d6cb2:	f110 0f00 	cmn.w	r0, #0
   d6cb6:	ea91 0f03 	teq	r1, r3
   d6cba:	bf58      	it	pl
   d6cbc:	4299      	cmppl	r1, r3
   d6cbe:	bf08      	it	eq
   d6cc0:	4290      	cmpeq	r0, r2
   d6cc2:	bf2c      	ite	cs
   d6cc4:	17d8      	asrcs	r0, r3, #31
   d6cc6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6cca:	f040 0001 	orr.w	r0, r0, #1
   d6cce:	4770      	bx	lr
   d6cd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6cd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6cd8:	d102      	bne.n	d6ce0 <__cmpdf2+0x64>
   d6cda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6cde:	d107      	bne.n	d6cf0 <__cmpdf2+0x74>
   d6ce0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6ce4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6ce8:	d1d6      	bne.n	d6c98 <__cmpdf2+0x1c>
   d6cea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6cee:	d0d3      	beq.n	d6c98 <__cmpdf2+0x1c>
   d6cf0:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6cf4:	4770      	bx	lr
   d6cf6:	bf00      	nop

000d6cf8 <__aeabi_cdrcmple>:
   d6cf8:	4684      	mov	ip, r0
   d6cfa:	4610      	mov	r0, r2
   d6cfc:	4662      	mov	r2, ip
   d6cfe:	468c      	mov	ip, r1
   d6d00:	4619      	mov	r1, r3
   d6d02:	4663      	mov	r3, ip
   d6d04:	e000      	b.n	d6d08 <__aeabi_cdcmpeq>
   d6d06:	bf00      	nop

000d6d08 <__aeabi_cdcmpeq>:
   d6d08:	b501      	push	{r0, lr}
   d6d0a:	f7ff ffb7 	bl	d6c7c <__cmpdf2>
   d6d0e:	2800      	cmp	r0, #0
   d6d10:	bf48      	it	mi
   d6d12:	f110 0f00 	cmnmi.w	r0, #0
   d6d16:	bd01      	pop	{r0, pc}

000d6d18 <__aeabi_dcmpeq>:
   d6d18:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6d1c:	f7ff fff4 	bl	d6d08 <__aeabi_cdcmpeq>
   d6d20:	bf0c      	ite	eq
   d6d22:	2001      	moveq	r0, #1
   d6d24:	2000      	movne	r0, #0
   d6d26:	f85d fb08 	ldr.w	pc, [sp], #8
   d6d2a:	bf00      	nop

000d6d2c <__aeabi_dcmplt>:
   d6d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6d30:	f7ff ffea 	bl	d6d08 <__aeabi_cdcmpeq>
   d6d34:	bf34      	ite	cc
   d6d36:	2001      	movcc	r0, #1
   d6d38:	2000      	movcs	r0, #0
   d6d3a:	f85d fb08 	ldr.w	pc, [sp], #8
   d6d3e:	bf00      	nop

000d6d40 <__aeabi_dcmple>:
   d6d40:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6d44:	f7ff ffe0 	bl	d6d08 <__aeabi_cdcmpeq>
   d6d48:	bf94      	ite	ls
   d6d4a:	2001      	movls	r0, #1
   d6d4c:	2000      	movhi	r0, #0
   d6d4e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6d52:	bf00      	nop

000d6d54 <__aeabi_dcmpge>:
   d6d54:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6d58:	f7ff ffce 	bl	d6cf8 <__aeabi_cdrcmple>
   d6d5c:	bf94      	ite	ls
   d6d5e:	2001      	movls	r0, #1
   d6d60:	2000      	movhi	r0, #0
   d6d62:	f85d fb08 	ldr.w	pc, [sp], #8
   d6d66:	bf00      	nop

000d6d68 <__aeabi_dcmpgt>:
   d6d68:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6d6c:	f7ff ffc4 	bl	d6cf8 <__aeabi_cdrcmple>
   d6d70:	bf34      	ite	cc
   d6d72:	2001      	movcc	r0, #1
   d6d74:	2000      	movcs	r0, #0
   d6d76:	f85d fb08 	ldr.w	pc, [sp], #8
   d6d7a:	bf00      	nop

000d6d7c <__aeabi_dcmpun>:
   d6d7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6d80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6d84:	d102      	bne.n	d6d8c <__aeabi_dcmpun+0x10>
   d6d86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6d8a:	d10a      	bne.n	d6da2 <__aeabi_dcmpun+0x26>
   d6d8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6d90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6d94:	d102      	bne.n	d6d9c <__aeabi_dcmpun+0x20>
   d6d96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6d9a:	d102      	bne.n	d6da2 <__aeabi_dcmpun+0x26>
   d6d9c:	f04f 0000 	mov.w	r0, #0
   d6da0:	4770      	bx	lr
   d6da2:	f04f 0001 	mov.w	r0, #1
   d6da6:	4770      	bx	lr

000d6da8 <__aeabi_d2iz>:
   d6da8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6dac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6db0:	d215      	bcs.n	d6dde <__aeabi_d2iz+0x36>
   d6db2:	d511      	bpl.n	d6dd8 <__aeabi_d2iz+0x30>
   d6db4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6db8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6dbc:	d912      	bls.n	d6de4 <__aeabi_d2iz+0x3c>
   d6dbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6dc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6dc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6dca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6dce:	fa23 f002 	lsr.w	r0, r3, r2
   d6dd2:	bf18      	it	ne
   d6dd4:	4240      	negne	r0, r0
   d6dd6:	4770      	bx	lr
   d6dd8:	f04f 0000 	mov.w	r0, #0
   d6ddc:	4770      	bx	lr
   d6dde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6de2:	d105      	bne.n	d6df0 <__aeabi_d2iz+0x48>
   d6de4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6de8:	bf08      	it	eq
   d6dea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6dee:	4770      	bx	lr
   d6df0:	f04f 0000 	mov.w	r0, #0
   d6df4:	4770      	bx	lr
   d6df6:	bf00      	nop

000d6df8 <__aeabi_d2uiz>:
   d6df8:	004a      	lsls	r2, r1, #1
   d6dfa:	d211      	bcs.n	d6e20 <__aeabi_d2uiz+0x28>
   d6dfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6e00:	d211      	bcs.n	d6e26 <__aeabi_d2uiz+0x2e>
   d6e02:	d50d      	bpl.n	d6e20 <__aeabi_d2uiz+0x28>
   d6e04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6e08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6e0c:	d40e      	bmi.n	d6e2c <__aeabi_d2uiz+0x34>
   d6e0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6e12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6e16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6e1a:	fa23 f002 	lsr.w	r0, r3, r2
   d6e1e:	4770      	bx	lr
   d6e20:	f04f 0000 	mov.w	r0, #0
   d6e24:	4770      	bx	lr
   d6e26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6e2a:	d102      	bne.n	d6e32 <__aeabi_d2uiz+0x3a>
   d6e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6e30:	4770      	bx	lr
   d6e32:	f04f 0000 	mov.w	r0, #0
   d6e36:	4770      	bx	lr

000d6e38 <__aeabi_d2f>:
   d6e38:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6e3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6e40:	bf24      	itt	cs
   d6e42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6e46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6e4a:	d90d      	bls.n	d6e68 <__aeabi_d2f+0x30>
   d6e4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6e50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6e54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6e58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6e5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6e60:	bf08      	it	eq
   d6e62:	f020 0001 	biceq.w	r0, r0, #1
   d6e66:	4770      	bx	lr
   d6e68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6e6c:	d121      	bne.n	d6eb2 <__aeabi_d2f+0x7a>
   d6e6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6e72:	bfbc      	itt	lt
   d6e74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6e78:	4770      	bxlt	lr
   d6e7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6e7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6e82:	f1c2 0218 	rsb	r2, r2, #24
   d6e86:	f1c2 0c20 	rsb	ip, r2, #32
   d6e8a:	fa10 f30c 	lsls.w	r3, r0, ip
   d6e8e:	fa20 f002 	lsr.w	r0, r0, r2
   d6e92:	bf18      	it	ne
   d6e94:	f040 0001 	orrne.w	r0, r0, #1
   d6e98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6e9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6ea0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6ea4:	ea40 000c 	orr.w	r0, r0, ip
   d6ea8:	fa23 f302 	lsr.w	r3, r3, r2
   d6eac:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6eb0:	e7cc      	b.n	d6e4c <__aeabi_d2f+0x14>
   d6eb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6eb6:	d107      	bne.n	d6ec8 <__aeabi_d2f+0x90>
   d6eb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6ebc:	bf1e      	ittt	ne
   d6ebe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6ec2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6ec6:	4770      	bxne	lr
   d6ec8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6ecc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6ed0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6ed4:	4770      	bx	lr
   d6ed6:	bf00      	nop

000d6ed8 <__cxa_atexit>:
   d6ed8:	b510      	push	{r4, lr}
   d6eda:	4c05      	ldr	r4, [pc, #20]	; (d6ef0 <__cxa_atexit+0x18>)
   d6edc:	4613      	mov	r3, r2
   d6ede:	b12c      	cbz	r4, d6eec <__cxa_atexit+0x14>
   d6ee0:	460a      	mov	r2, r1
   d6ee2:	4601      	mov	r1, r0
   d6ee4:	2002      	movs	r0, #2
   d6ee6:	f3af 8000 	nop.w
   d6eea:	bd10      	pop	{r4, pc}
   d6eec:	4620      	mov	r0, r4
   d6eee:	bd10      	pop	{r4, pc}
   d6ef0:	00000000 	.word	0x00000000

000d6ef4 <localtime>:
   d6ef4:	b538      	push	{r3, r4, r5, lr}
   d6ef6:	4b07      	ldr	r3, [pc, #28]	; (d6f14 <localtime+0x20>)
   d6ef8:	681c      	ldr	r4, [r3, #0]
   d6efa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6efc:	4605      	mov	r5, r0
   d6efe:	b91b      	cbnz	r3, d6f08 <localtime+0x14>
   d6f00:	2024      	movs	r0, #36	; 0x24
   d6f02:	f7fd ff23 	bl	d4d4c <malloc>
   d6f06:	63e0      	str	r0, [r4, #60]	; 0x3c
   d6f08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6f0a:	4628      	mov	r0, r5
   d6f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6f10:	f000 b802 	b.w	d6f18 <localtime_r>
   d6f14:	2003e27c 	.word	0x2003e27c

000d6f18 <localtime_r>:
   d6f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6f1c:	460c      	mov	r4, r1
   d6f1e:	4680      	mov	r8, r0
   d6f20:	f001 fdc0 	bl	d8aa4 <__gettzinfo>
   d6f24:	4621      	mov	r1, r4
   d6f26:	4607      	mov	r7, r0
   d6f28:	4640      	mov	r0, r8
   d6f2a:	f001 fdbf 	bl	d8aac <gmtime_r>
   d6f2e:	6946      	ldr	r6, [r0, #20]
   d6f30:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d6f34:	07b3      	lsls	r3, r6, #30
   d6f36:	4604      	mov	r4, r0
   d6f38:	d105      	bne.n	d6f46 <localtime_r+0x2e>
   d6f3a:	2264      	movs	r2, #100	; 0x64
   d6f3c:	fb96 f3f2 	sdiv	r3, r6, r2
   d6f40:	fb02 6313 	mls	r3, r2, r3, r6
   d6f44:	b94b      	cbnz	r3, d6f5a <localtime_r+0x42>
   d6f46:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d6f4a:	fb96 f3f5 	sdiv	r3, r6, r5
   d6f4e:	fb05 6513 	mls	r5, r5, r3, r6
   d6f52:	fab5 f385 	clz	r3, r5
   d6f56:	095b      	lsrs	r3, r3, #5
   d6f58:	e000      	b.n	d6f5c <localtime_r+0x44>
   d6f5a:	2301      	movs	r3, #1
   d6f5c:	4a5f      	ldr	r2, [pc, #380]	; (d70dc <localtime_r+0x1c4>)
   d6f5e:	2530      	movs	r5, #48	; 0x30
   d6f60:	fb05 2503 	mla	r5, r5, r3, r2
   d6f64:	f001 f8b4 	bl	d80d0 <__tz_lock>
   d6f68:	f001 f8b4 	bl	d80d4 <_tzset_unlocked>
   d6f6c:	4b5c      	ldr	r3, [pc, #368]	; (d70e0 <localtime_r+0x1c8>)
   d6f6e:	681b      	ldr	r3, [r3, #0]
   d6f70:	b1f3      	cbz	r3, d6fb0 <localtime_r+0x98>
   d6f72:	687b      	ldr	r3, [r7, #4]
   d6f74:	429e      	cmp	r6, r3
   d6f76:	d105      	bne.n	d6f84 <localtime_r+0x6c>
   d6f78:	6839      	ldr	r1, [r7, #0]
   d6f7a:	f8d8 3000 	ldr.w	r3, [r8]
   d6f7e:	69fa      	ldr	r2, [r7, #28]
   d6f80:	b941      	cbnz	r1, d6f94 <localtime_r+0x7c>
   d6f82:	e00a      	b.n	d6f9a <localtime_r+0x82>
   d6f84:	4630      	mov	r0, r6
   d6f86:	f000 fffb 	bl	d7f80 <__tzcalc_limits>
   d6f8a:	2800      	cmp	r0, #0
   d6f8c:	d1f4      	bne.n	d6f78 <localtime_r+0x60>
   d6f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6f92:	e00d      	b.n	d6fb0 <localtime_r+0x98>
   d6f94:	4293      	cmp	r3, r2
   d6f96:	db08      	blt.n	d6faa <localtime_r+0x92>
   d6f98:	e001      	b.n	d6f9e <localtime_r+0x86>
   d6f9a:	4293      	cmp	r3, r2
   d6f9c:	da07      	bge.n	d6fae <localtime_r+0x96>
   d6f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d6fa0:	4293      	cmp	r3, r2
   d6fa2:	bfac      	ite	ge
   d6fa4:	2300      	movge	r3, #0
   d6fa6:	2301      	movlt	r3, #1
   d6fa8:	e002      	b.n	d6fb0 <localtime_r+0x98>
   d6faa:	2300      	movs	r3, #0
   d6fac:	e000      	b.n	d6fb0 <localtime_r+0x98>
   d6fae:	2301      	movs	r3, #1
   d6fb0:	6223      	str	r3, [r4, #32]
   d6fb2:	6a23      	ldr	r3, [r4, #32]
   d6fb4:	2b01      	cmp	r3, #1
   d6fb6:	bf0c      	ite	eq
   d6fb8:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d6fba:	6a39      	ldrne	r1, [r7, #32]
   d6fbc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d6fc0:	203c      	movs	r0, #60	; 0x3c
   d6fc2:	fb91 f6f3 	sdiv	r6, r1, r3
   d6fc6:	fb03 1316 	mls	r3, r3, r6, r1
   d6fca:	6861      	ldr	r1, [r4, #4]
   d6fcc:	fb93 f2f0 	sdiv	r2, r3, r0
   d6fd0:	fb00 3012 	mls	r0, r0, r2, r3
   d6fd4:	6823      	ldr	r3, [r4, #0]
   d6fd6:	1a89      	subs	r1, r1, r2
   d6fd8:	68a2      	ldr	r2, [r4, #8]
   d6fda:	6061      	str	r1, [r4, #4]
   d6fdc:	1a1b      	subs	r3, r3, r0
   d6fde:	1b92      	subs	r2, r2, r6
   d6fe0:	2b3b      	cmp	r3, #59	; 0x3b
   d6fe2:	6023      	str	r3, [r4, #0]
   d6fe4:	60a2      	str	r2, [r4, #8]
   d6fe6:	dd03      	ble.n	d6ff0 <localtime_r+0xd8>
   d6fe8:	3101      	adds	r1, #1
   d6fea:	6061      	str	r1, [r4, #4]
   d6fec:	3b3c      	subs	r3, #60	; 0x3c
   d6fee:	e004      	b.n	d6ffa <localtime_r+0xe2>
   d6ff0:	2b00      	cmp	r3, #0
   d6ff2:	da03      	bge.n	d6ffc <localtime_r+0xe4>
   d6ff4:	3901      	subs	r1, #1
   d6ff6:	6061      	str	r1, [r4, #4]
   d6ff8:	333c      	adds	r3, #60	; 0x3c
   d6ffa:	6023      	str	r3, [r4, #0]
   d6ffc:	6863      	ldr	r3, [r4, #4]
   d6ffe:	2b3b      	cmp	r3, #59	; 0x3b
   d7000:	dd03      	ble.n	d700a <localtime_r+0xf2>
   d7002:	3201      	adds	r2, #1
   d7004:	60a2      	str	r2, [r4, #8]
   d7006:	3b3c      	subs	r3, #60	; 0x3c
   d7008:	e004      	b.n	d7014 <localtime_r+0xfc>
   d700a:	2b00      	cmp	r3, #0
   d700c:	da03      	bge.n	d7016 <localtime_r+0xfe>
   d700e:	3a01      	subs	r2, #1
   d7010:	60a2      	str	r2, [r4, #8]
   d7012:	333c      	adds	r3, #60	; 0x3c
   d7014:	6063      	str	r3, [r4, #4]
   d7016:	68a3      	ldr	r3, [r4, #8]
   d7018:	2b17      	cmp	r3, #23
   d701a:	dd22      	ble.n	d7062 <localtime_r+0x14a>
   d701c:	69e2      	ldr	r2, [r4, #28]
   d701e:	3201      	adds	r2, #1
   d7020:	61e2      	str	r2, [r4, #28]
   d7022:	69a2      	ldr	r2, [r4, #24]
   d7024:	3201      	adds	r2, #1
   d7026:	2a06      	cmp	r2, #6
   d7028:	bfc8      	it	gt
   d702a:	2200      	movgt	r2, #0
   d702c:	61a2      	str	r2, [r4, #24]
   d702e:	68e2      	ldr	r2, [r4, #12]
   d7030:	3b18      	subs	r3, #24
   d7032:	3201      	adds	r2, #1
   d7034:	60a3      	str	r3, [r4, #8]
   d7036:	6923      	ldr	r3, [r4, #16]
   d7038:	60e2      	str	r2, [r4, #12]
   d703a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d703e:	428a      	cmp	r2, r1
   d7040:	dd46      	ble.n	d70d0 <localtime_r+0x1b8>
   d7042:	3301      	adds	r3, #1
   d7044:	2b0c      	cmp	r3, #12
   d7046:	bf0c      	ite	eq
   d7048:	6963      	ldreq	r3, [r4, #20]
   d704a:	6123      	strne	r3, [r4, #16]
   d704c:	eba2 0201 	sub.w	r2, r2, r1
   d7050:	60e2      	str	r2, [r4, #12]
   d7052:	bf01      	itttt	eq
   d7054:	3301      	addeq	r3, #1
   d7056:	2200      	moveq	r2, #0
   d7058:	6122      	streq	r2, [r4, #16]
   d705a:	6163      	streq	r3, [r4, #20]
   d705c:	bf08      	it	eq
   d705e:	61e2      	streq	r2, [r4, #28]
   d7060:	e036      	b.n	d70d0 <localtime_r+0x1b8>
   d7062:	2b00      	cmp	r3, #0
   d7064:	da34      	bge.n	d70d0 <localtime_r+0x1b8>
   d7066:	69e2      	ldr	r2, [r4, #28]
   d7068:	3a01      	subs	r2, #1
   d706a:	61e2      	str	r2, [r4, #28]
   d706c:	69a2      	ldr	r2, [r4, #24]
   d706e:	3a01      	subs	r2, #1
   d7070:	bf48      	it	mi
   d7072:	2206      	movmi	r2, #6
   d7074:	61a2      	str	r2, [r4, #24]
   d7076:	68e2      	ldr	r2, [r4, #12]
   d7078:	3318      	adds	r3, #24
   d707a:	3a01      	subs	r2, #1
   d707c:	60e2      	str	r2, [r4, #12]
   d707e:	60a3      	str	r3, [r4, #8]
   d7080:	bb32      	cbnz	r2, d70d0 <localtime_r+0x1b8>
   d7082:	6923      	ldr	r3, [r4, #16]
   d7084:	3b01      	subs	r3, #1
   d7086:	d401      	bmi.n	d708c <localtime_r+0x174>
   d7088:	6123      	str	r3, [r4, #16]
   d708a:	e01d      	b.n	d70c8 <localtime_r+0x1b0>
   d708c:	230b      	movs	r3, #11
   d708e:	6123      	str	r3, [r4, #16]
   d7090:	6963      	ldr	r3, [r4, #20]
   d7092:	1e5a      	subs	r2, r3, #1
   d7094:	f012 0f03 	tst.w	r2, #3
   d7098:	6162      	str	r2, [r4, #20]
   d709a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d709e:	d105      	bne.n	d70ac <localtime_r+0x194>
   d70a0:	2164      	movs	r1, #100	; 0x64
   d70a2:	fb93 f2f1 	sdiv	r2, r3, r1
   d70a6:	fb01 3212 	mls	r2, r1, r2, r3
   d70aa:	b94a      	cbnz	r2, d70c0 <localtime_r+0x1a8>
   d70ac:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d70b0:	fb93 f2f1 	sdiv	r2, r3, r1
   d70b4:	fb01 3312 	mls	r3, r1, r2, r3
   d70b8:	fab3 f383 	clz	r3, r3
   d70bc:	095b      	lsrs	r3, r3, #5
   d70be:	e000      	b.n	d70c2 <localtime_r+0x1aa>
   d70c0:	2301      	movs	r3, #1
   d70c2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d70c6:	61e3      	str	r3, [r4, #28]
   d70c8:	6923      	ldr	r3, [r4, #16]
   d70ca:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d70ce:	60e3      	str	r3, [r4, #12]
   d70d0:	f000 ffff 	bl	d80d2 <__tz_unlock>
   d70d4:	4620      	mov	r0, r4
   d70d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d70da:	bf00      	nop
   d70dc:	000d9990 	.word	0x000d9990
   d70e0:	2003e7e4 	.word	0x2003e7e4

000d70e4 <_localeconv_r>:
   d70e4:	4800      	ldr	r0, [pc, #0]	; (d70e8 <_localeconv_r+0x4>)
   d70e6:	4770      	bx	lr
   d70e8:	2003e280 	.word	0x2003e280

000d70ec <memcpy>:
   d70ec:	b510      	push	{r4, lr}
   d70ee:	1e43      	subs	r3, r0, #1
   d70f0:	440a      	add	r2, r1
   d70f2:	4291      	cmp	r1, r2
   d70f4:	d004      	beq.n	d7100 <memcpy+0x14>
   d70f6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d70fa:	f803 4f01 	strb.w	r4, [r3, #1]!
   d70fe:	e7f8      	b.n	d70f2 <memcpy+0x6>
   d7100:	bd10      	pop	{r4, pc}

000d7102 <memset>:
   d7102:	4402      	add	r2, r0
   d7104:	4603      	mov	r3, r0
   d7106:	4293      	cmp	r3, r2
   d7108:	d002      	beq.n	d7110 <memset+0xe>
   d710a:	f803 1b01 	strb.w	r1, [r3], #1
   d710e:	e7fa      	b.n	d7106 <memset+0x4>
   d7110:	4770      	bx	lr
	...

000d7114 <srand>:
   d7114:	b538      	push	{r3, r4, r5, lr}
   d7116:	4b12      	ldr	r3, [pc, #72]	; (d7160 <srand+0x4c>)
   d7118:	681c      	ldr	r4, [r3, #0]
   d711a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d711c:	4605      	mov	r5, r0
   d711e:	b9d3      	cbnz	r3, d7156 <srand+0x42>
   d7120:	2018      	movs	r0, #24
   d7122:	f7fd fe13 	bl	d4d4c <malloc>
   d7126:	f243 330e 	movw	r3, #13070	; 0x330e
   d712a:	63a0      	str	r0, [r4, #56]	; 0x38
   d712c:	8003      	strh	r3, [r0, #0]
   d712e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7132:	8043      	strh	r3, [r0, #2]
   d7134:	f241 2334 	movw	r3, #4660	; 0x1234
   d7138:	8083      	strh	r3, [r0, #4]
   d713a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d713e:	80c3      	strh	r3, [r0, #6]
   d7140:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7144:	8103      	strh	r3, [r0, #8]
   d7146:	2305      	movs	r3, #5
   d7148:	8143      	strh	r3, [r0, #10]
   d714a:	230b      	movs	r3, #11
   d714c:	8183      	strh	r3, [r0, #12]
   d714e:	2201      	movs	r2, #1
   d7150:	2300      	movs	r3, #0
   d7152:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7156:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7158:	2200      	movs	r2, #0
   d715a:	611d      	str	r5, [r3, #16]
   d715c:	615a      	str	r2, [r3, #20]
   d715e:	bd38      	pop	{r3, r4, r5, pc}
   d7160:	2003e27c 	.word	0x2003e27c

000d7164 <strcmp>:
   d7164:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7168:	f811 3b01 	ldrb.w	r3, [r1], #1
   d716c:	2a01      	cmp	r2, #1
   d716e:	bf28      	it	cs
   d7170:	429a      	cmpcs	r2, r3
   d7172:	d0f7      	beq.n	d7164 <strcmp>
   d7174:	1ad0      	subs	r0, r2, r3
   d7176:	4770      	bx	lr

000d7178 <strcpy>:
   d7178:	4603      	mov	r3, r0
   d717a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d717e:	f803 2b01 	strb.w	r2, [r3], #1
   d7182:	2a00      	cmp	r2, #0
   d7184:	d1f9      	bne.n	d717a <strcpy+0x2>
   d7186:	4770      	bx	lr

000d7188 <strdup>:
   d7188:	4b02      	ldr	r3, [pc, #8]	; (d7194 <strdup+0xc>)
   d718a:	4601      	mov	r1, r0
   d718c:	6818      	ldr	r0, [r3, #0]
   d718e:	f000 b803 	b.w	d7198 <_strdup_r>
   d7192:	bf00      	nop
   d7194:	2003e27c 	.word	0x2003e27c

000d7198 <_strdup_r>:
   d7198:	b570      	push	{r4, r5, r6, lr}
   d719a:	4606      	mov	r6, r0
   d719c:	4608      	mov	r0, r1
   d719e:	460c      	mov	r4, r1
   d71a0:	f000 f80d 	bl	d71be <strlen>
   d71a4:	1c45      	adds	r5, r0, #1
   d71a6:	4629      	mov	r1, r5
   d71a8:	4630      	mov	r0, r6
   d71aa:	f7fd fdff 	bl	d4dac <_malloc_r>
   d71ae:	4606      	mov	r6, r0
   d71b0:	b118      	cbz	r0, d71ba <_strdup_r+0x22>
   d71b2:	462a      	mov	r2, r5
   d71b4:	4621      	mov	r1, r4
   d71b6:	f7ff ff99 	bl	d70ec <memcpy>
   d71ba:	4630      	mov	r0, r6
   d71bc:	bd70      	pop	{r4, r5, r6, pc}

000d71be <strlen>:
   d71be:	4603      	mov	r3, r0
   d71c0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d71c4:	2a00      	cmp	r2, #0
   d71c6:	d1fb      	bne.n	d71c0 <strlen+0x2>
   d71c8:	1a18      	subs	r0, r3, r0
   d71ca:	3801      	subs	r0, #1
   d71cc:	4770      	bx	lr

000d71ce <strncmp>:
   d71ce:	b530      	push	{r4, r5, lr}
   d71d0:	b182      	cbz	r2, d71f4 <strncmp+0x26>
   d71d2:	1e45      	subs	r5, r0, #1
   d71d4:	3901      	subs	r1, #1
   d71d6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d71da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d71de:	42a3      	cmp	r3, r4
   d71e0:	d106      	bne.n	d71f0 <strncmp+0x22>
   d71e2:	43ec      	mvns	r4, r5
   d71e4:	4414      	add	r4, r2
   d71e6:	42e0      	cmn	r0, r4
   d71e8:	d001      	beq.n	d71ee <strncmp+0x20>
   d71ea:	2b00      	cmp	r3, #0
   d71ec:	d1f3      	bne.n	d71d6 <strncmp+0x8>
   d71ee:	461c      	mov	r4, r3
   d71f0:	1b18      	subs	r0, r3, r4
   d71f2:	bd30      	pop	{r4, r5, pc}
   d71f4:	4610      	mov	r0, r2
   d71f6:	bd30      	pop	{r4, r5, pc}

000d71f8 <sulp>:
   d71f8:	b570      	push	{r4, r5, r6, lr}
   d71fa:	4604      	mov	r4, r0
   d71fc:	460d      	mov	r5, r1
   d71fe:	ec45 4b10 	vmov	d0, r4, r5
   d7202:	4616      	mov	r6, r2
   d7204:	f001 ffb0 	bl	d9168 <__ulp>
   d7208:	ec51 0b10 	vmov	r0, r1, d0
   d720c:	b17e      	cbz	r6, d722e <sulp+0x36>
   d720e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d7212:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d7216:	2b00      	cmp	r3, #0
   d7218:	dd09      	ble.n	d722e <sulp+0x36>
   d721a:	051b      	lsls	r3, r3, #20
   d721c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d7220:	2400      	movs	r4, #0
   d7222:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d7226:	4622      	mov	r2, r4
   d7228:	462b      	mov	r3, r5
   d722a:	f7ff fb0d 	bl	d6848 <__aeabi_dmul>
   d722e:	bd70      	pop	{r4, r5, r6, pc}

000d7230 <_strtod_r>:
   d7230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7234:	b09d      	sub	sp, #116	; 0x74
   d7236:	2300      	movs	r3, #0
   d7238:	9002      	str	r0, [sp, #8]
   d723a:	460c      	mov	r4, r1
   d723c:	9213      	str	r2, [sp, #76]	; 0x4c
   d723e:	9318      	str	r3, [sp, #96]	; 0x60
   d7240:	f04f 0a00 	mov.w	sl, #0
   d7244:	f04f 0b00 	mov.w	fp, #0
   d7248:	9117      	str	r1, [sp, #92]	; 0x5c
   d724a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d724c:	781a      	ldrb	r2, [r3, #0]
   d724e:	2a0d      	cmp	r2, #13
   d7250:	d805      	bhi.n	d725e <_strtod_r+0x2e>
   d7252:	2a09      	cmp	r2, #9
   d7254:	d213      	bcs.n	d727e <_strtod_r+0x4e>
   d7256:	2a00      	cmp	r2, #0
   d7258:	f000 81ac 	beq.w	d75b4 <_strtod_r+0x384>
   d725c:	e012      	b.n	d7284 <_strtod_r+0x54>
   d725e:	2a2b      	cmp	r2, #43	; 0x2b
   d7260:	d004      	beq.n	d726c <_strtod_r+0x3c>
   d7262:	2a2d      	cmp	r2, #45	; 0x2d
   d7264:	d004      	beq.n	d7270 <_strtod_r+0x40>
   d7266:	2a20      	cmp	r2, #32
   d7268:	d10c      	bne.n	d7284 <_strtod_r+0x54>
   d726a:	e008      	b.n	d727e <_strtod_r+0x4e>
   d726c:	2200      	movs	r2, #0
   d726e:	e000      	b.n	d7272 <_strtod_r+0x42>
   d7270:	2201      	movs	r2, #1
   d7272:	920c      	str	r2, [sp, #48]	; 0x30
   d7274:	1c5a      	adds	r2, r3, #1
   d7276:	9217      	str	r2, [sp, #92]	; 0x5c
   d7278:	785b      	ldrb	r3, [r3, #1]
   d727a:	b92b      	cbnz	r3, d7288 <_strtod_r+0x58>
   d727c:	e19a      	b.n	d75b4 <_strtod_r+0x384>
   d727e:	3301      	adds	r3, #1
   d7280:	9317      	str	r3, [sp, #92]	; 0x5c
   d7282:	e7e2      	b.n	d724a <_strtod_r+0x1a>
   d7284:	2300      	movs	r3, #0
   d7286:	930c      	str	r3, [sp, #48]	; 0x30
   d7288:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d728a:	782b      	ldrb	r3, [r5, #0]
   d728c:	2b30      	cmp	r3, #48	; 0x30
   d728e:	d15c      	bne.n	d734a <_strtod_r+0x11a>
   d7290:	786b      	ldrb	r3, [r5, #1]
   d7292:	2b58      	cmp	r3, #88	; 0x58
   d7294:	d001      	beq.n	d729a <_strtod_r+0x6a>
   d7296:	2b78      	cmp	r3, #120	; 0x78
   d7298:	d14c      	bne.n	d7334 <_strtod_r+0x104>
   d729a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d729c:	9301      	str	r3, [sp, #4]
   d729e:	ab18      	add	r3, sp, #96	; 0x60
   d72a0:	9300      	str	r3, [sp, #0]
   d72a2:	4aa9      	ldr	r2, [pc, #676]	; (d7548 <_strtod_r+0x318>)
   d72a4:	9802      	ldr	r0, [sp, #8]
   d72a6:	ab19      	add	r3, sp, #100	; 0x64
   d72a8:	a917      	add	r1, sp, #92	; 0x5c
   d72aa:	f001 f8e4 	bl	d8476 <__gethex>
   d72ae:	f010 0607 	ands.w	r6, r0, #7
   d72b2:	4604      	mov	r4, r0
   d72b4:	f000 8587 	beq.w	d7dc6 <_strtod_r+0xb96>
   d72b8:	2e06      	cmp	r6, #6
   d72ba:	d105      	bne.n	d72c8 <_strtod_r+0x98>
   d72bc:	3501      	adds	r5, #1
   d72be:	2300      	movs	r3, #0
   d72c0:	9517      	str	r5, [sp, #92]	; 0x5c
   d72c2:	930c      	str	r3, [sp, #48]	; 0x30
   d72c4:	f000 bd7f 	b.w	d7dc6 <_strtod_r+0xb96>
   d72c8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d72ca:	b13a      	cbz	r2, d72dc <_strtod_r+0xac>
   d72cc:	2135      	movs	r1, #53	; 0x35
   d72ce:	a81a      	add	r0, sp, #104	; 0x68
   d72d0:	f002 f837 	bl	d9342 <__copybits>
   d72d4:	9918      	ldr	r1, [sp, #96]	; 0x60
   d72d6:	9802      	ldr	r0, [sp, #8]
   d72d8:	f001 fcb5 	bl	d8c46 <_Bfree>
   d72dc:	2e06      	cmp	r6, #6
   d72de:	d822      	bhi.n	d7326 <_strtod_r+0xf6>
   d72e0:	e8df f006 	tbb	[pc, r6]
   d72e4:	18080d04 	.word	0x18080d04
   d72e8:	0d1d      	.short	0x0d1d
   d72ea:	04          	.byte	0x04
   d72eb:	00          	.byte	0x00
   d72ec:	f04f 0b00 	mov.w	fp, #0
   d72f0:	46da      	mov	sl, fp
   d72f2:	e018      	b.n	d7326 <_strtod_r+0xf6>
   d72f4:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d72f8:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d72fc:	e013      	b.n	d7326 <_strtod_r+0xf6>
   d72fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d7300:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d7302:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d7306:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d730a:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d730e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d7312:	e008      	b.n	d7326 <_strtod_r+0xf6>
   d7314:	f8df b234 	ldr.w	fp, [pc, #564]	; d754c <_strtod_r+0x31c>
   d7318:	f04f 0a00 	mov.w	sl, #0
   d731c:	e003      	b.n	d7326 <_strtod_r+0xf6>
   d731e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d7322:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d7326:	0721      	lsls	r1, r4, #28
   d7328:	f140 854d 	bpl.w	d7dc6 <_strtod_r+0xb96>
   d732c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d7330:	f000 bd49 	b.w	d7dc6 <_strtod_r+0xb96>
   d7334:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7336:	1c5a      	adds	r2, r3, #1
   d7338:	9217      	str	r2, [sp, #92]	; 0x5c
   d733a:	785b      	ldrb	r3, [r3, #1]
   d733c:	2b30      	cmp	r3, #48	; 0x30
   d733e:	d0f9      	beq.n	d7334 <_strtod_r+0x104>
   d7340:	2b00      	cmp	r3, #0
   d7342:	f000 8540 	beq.w	d7dc6 <_strtod_r+0xb96>
   d7346:	2301      	movs	r3, #1
   d7348:	e000      	b.n	d734c <_strtod_r+0x11c>
   d734a:	2300      	movs	r3, #0
   d734c:	f04f 0800 	mov.w	r8, #0
   d7350:	9306      	str	r3, [sp, #24]
   d7352:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7354:	9307      	str	r3, [sp, #28]
   d7356:	f8cd 8014 	str.w	r8, [sp, #20]
   d735a:	f8cd 8010 	str.w	r8, [sp, #16]
   d735e:	220a      	movs	r2, #10
   d7360:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d7362:	782e      	ldrb	r6, [r5, #0]
   d7364:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d7368:	b2d9      	uxtb	r1, r3
   d736a:	2909      	cmp	r1, #9
   d736c:	d80e      	bhi.n	d738c <_strtod_r+0x15c>
   d736e:	9904      	ldr	r1, [sp, #16]
   d7370:	2908      	cmp	r1, #8
   d7372:	bfdd      	ittte	le
   d7374:	9905      	ldrle	r1, [sp, #20]
   d7376:	fb02 3301 	mlale	r3, r2, r1, r3
   d737a:	9305      	strle	r3, [sp, #20]
   d737c:	fb02 3808 	mlagt	r8, r2, r8, r3
   d7380:	9b04      	ldr	r3, [sp, #16]
   d7382:	3501      	adds	r5, #1
   d7384:	3301      	adds	r3, #1
   d7386:	9304      	str	r3, [sp, #16]
   d7388:	9517      	str	r5, [sp, #92]	; 0x5c
   d738a:	e7e9      	b.n	d7360 <_strtod_r+0x130>
   d738c:	9802      	ldr	r0, [sp, #8]
   d738e:	f7ff fea9 	bl	d70e4 <_localeconv_r>
   d7392:	6807      	ldr	r7, [r0, #0]
   d7394:	9802      	ldr	r0, [sp, #8]
   d7396:	f7ff fea5 	bl	d70e4 <_localeconv_r>
   d739a:	6800      	ldr	r0, [r0, #0]
   d739c:	f7ff ff0f 	bl	d71be <strlen>
   d73a0:	4639      	mov	r1, r7
   d73a2:	4602      	mov	r2, r0
   d73a4:	4628      	mov	r0, r5
   d73a6:	f7ff ff12 	bl	d71ce <strncmp>
   d73aa:	4607      	mov	r7, r0
   d73ac:	b128      	cbz	r0, d73ba <_strtod_r+0x18a>
   d73ae:	2000      	movs	r0, #0
   d73b0:	4633      	mov	r3, r6
   d73b2:	9d04      	ldr	r5, [sp, #16]
   d73b4:	4602      	mov	r2, r0
   d73b6:	4601      	mov	r1, r0
   d73b8:	e057      	b.n	d746a <_strtod_r+0x23a>
   d73ba:	9802      	ldr	r0, [sp, #8]
   d73bc:	f7ff fe92 	bl	d70e4 <_localeconv_r>
   d73c0:	6800      	ldr	r0, [r0, #0]
   d73c2:	f7ff fefc 	bl	d71be <strlen>
   d73c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d73c8:	181a      	adds	r2, r3, r0
   d73ca:	9217      	str	r2, [sp, #92]	; 0x5c
   d73cc:	9a04      	ldr	r2, [sp, #16]
   d73ce:	5c1b      	ldrb	r3, [r3, r0]
   d73d0:	2a00      	cmp	r2, #0
   d73d2:	d142      	bne.n	d745a <_strtod_r+0x22a>
   d73d4:	4610      	mov	r0, r2
   d73d6:	2b30      	cmp	r3, #48	; 0x30
   d73d8:	d105      	bne.n	d73e6 <_strtod_r+0x1b6>
   d73da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d73dc:	1c5a      	adds	r2, r3, #1
   d73de:	9217      	str	r2, [sp, #92]	; 0x5c
   d73e0:	3001      	adds	r0, #1
   d73e2:	785b      	ldrb	r3, [r3, #1]
   d73e4:	e7f7      	b.n	d73d6 <_strtod_r+0x1a6>
   d73e6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d73ea:	2a08      	cmp	r2, #8
   d73ec:	d843      	bhi.n	d7476 <_strtod_r+0x246>
   d73ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d73f0:	9207      	str	r2, [sp, #28]
   d73f2:	4602      	mov	r2, r0
   d73f4:	2000      	movs	r0, #0
   d73f6:	4605      	mov	r5, r0
   d73f8:	3b30      	subs	r3, #48	; 0x30
   d73fa:	f100 0101 	add.w	r1, r0, #1
   d73fe:	d026      	beq.n	d744e <_strtod_r+0x21e>
   d7400:	440a      	add	r2, r1
   d7402:	eb05 0c00 	add.w	ip, r5, r0
   d7406:	4629      	mov	r1, r5
   d7408:	260a      	movs	r6, #10
   d740a:	4561      	cmp	r1, ip
   d740c:	d00e      	beq.n	d742c <_strtod_r+0x1fc>
   d740e:	3101      	adds	r1, #1
   d7410:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   d7414:	f1be 0f08 	cmp.w	lr, #8
   d7418:	dc03      	bgt.n	d7422 <_strtod_r+0x1f2>
   d741a:	9f05      	ldr	r7, [sp, #20]
   d741c:	4377      	muls	r7, r6
   d741e:	9705      	str	r7, [sp, #20]
   d7420:	e7f3      	b.n	d740a <_strtod_r+0x1da>
   d7422:	2910      	cmp	r1, #16
   d7424:	bfd8      	it	le
   d7426:	fb06 f808 	mulle.w	r8, r6, r8
   d742a:	e7ee      	b.n	d740a <_strtod_r+0x1da>
   d742c:	4428      	add	r0, r5
   d742e:	2808      	cmp	r0, #8
   d7430:	f100 0501 	add.w	r5, r0, #1
   d7434:	dc05      	bgt.n	d7442 <_strtod_r+0x212>
   d7436:	9805      	ldr	r0, [sp, #20]
   d7438:	210a      	movs	r1, #10
   d743a:	fb01 3300 	mla	r3, r1, r0, r3
   d743e:	9305      	str	r3, [sp, #20]
   d7440:	e004      	b.n	d744c <_strtod_r+0x21c>
   d7442:	2d10      	cmp	r5, #16
   d7444:	bfdc      	itt	le
   d7446:	210a      	movle	r1, #10
   d7448:	fb01 3808 	mlale	r8, r1, r8, r3
   d744c:	2100      	movs	r1, #0
   d744e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7450:	1c58      	adds	r0, r3, #1
   d7452:	9017      	str	r0, [sp, #92]	; 0x5c
   d7454:	785b      	ldrb	r3, [r3, #1]
   d7456:	4608      	mov	r0, r1
   d7458:	e002      	b.n	d7460 <_strtod_r+0x230>
   d745a:	9d04      	ldr	r5, [sp, #16]
   d745c:	4638      	mov	r0, r7
   d745e:	463a      	mov	r2, r7
   d7460:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d7464:	2909      	cmp	r1, #9
   d7466:	d9c7      	bls.n	d73f8 <_strtod_r+0x1c8>
   d7468:	2101      	movs	r1, #1
   d746a:	2b65      	cmp	r3, #101	; 0x65
   d746c:	d001      	beq.n	d7472 <_strtod_r+0x242>
   d746e:	2b45      	cmp	r3, #69	; 0x45
   d7470:	d151      	bne.n	d7516 <_strtod_r+0x2e6>
   d7472:	b96d      	cbnz	r5, d7490 <_strtod_r+0x260>
   d7474:	e004      	b.n	d7480 <_strtod_r+0x250>
   d7476:	2b65      	cmp	r3, #101	; 0x65
   d7478:	f040 84b3 	bne.w	d7de2 <_strtod_r+0xbb2>
   d747c:	2200      	movs	r2, #0
   d747e:	2101      	movs	r1, #1
   d7480:	b928      	cbnz	r0, d748e <_strtod_r+0x25e>
   d7482:	9b06      	ldr	r3, [sp, #24]
   d7484:	2b00      	cmp	r3, #0
   d7486:	f000 8095 	beq.w	d75b4 <_strtod_r+0x384>
   d748a:	4605      	mov	r5, r0
   d748c:	e000      	b.n	d7490 <_strtod_r+0x260>
   d748e:	2500      	movs	r5, #0
   d7490:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d7492:	1c63      	adds	r3, r4, #1
   d7494:	9317      	str	r3, [sp, #92]	; 0x5c
   d7496:	7863      	ldrb	r3, [r4, #1]
   d7498:	2b2b      	cmp	r3, #43	; 0x2b
   d749a:	d006      	beq.n	d74aa <_strtod_r+0x27a>
   d749c:	2b2d      	cmp	r3, #45	; 0x2d
   d749e:	d002      	beq.n	d74a6 <_strtod_r+0x276>
   d74a0:	2600      	movs	r6, #0
   d74a2:	9603      	str	r6, [sp, #12]
   d74a4:	e006      	b.n	d74b4 <_strtod_r+0x284>
   d74a6:	2301      	movs	r3, #1
   d74a8:	e000      	b.n	d74ac <_strtod_r+0x27c>
   d74aa:	2300      	movs	r3, #0
   d74ac:	9303      	str	r3, [sp, #12]
   d74ae:	1ca3      	adds	r3, r4, #2
   d74b0:	9317      	str	r3, [sp, #92]	; 0x5c
   d74b2:	78a3      	ldrb	r3, [r4, #2]
   d74b4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d74b8:	2e09      	cmp	r6, #9
   d74ba:	d82b      	bhi.n	d7514 <_strtod_r+0x2e4>
   d74bc:	2b30      	cmp	r3, #48	; 0x30
   d74be:	d104      	bne.n	d74ca <_strtod_r+0x29a>
   d74c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d74c2:	1c5e      	adds	r6, r3, #1
   d74c4:	9617      	str	r6, [sp, #92]	; 0x5c
   d74c6:	785b      	ldrb	r3, [r3, #1]
   d74c8:	e7f8      	b.n	d74bc <_strtod_r+0x28c>
   d74ca:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d74ce:	2e08      	cmp	r6, #8
   d74d0:	d821      	bhi.n	d7516 <_strtod_r+0x2e6>
   d74d2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d74d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d74d8:	f04f 0c0a 	mov.w	ip, #10
   d74dc:	461f      	mov	r7, r3
   d74de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d74e0:	1c5e      	adds	r6, r3, #1
   d74e2:	9617      	str	r6, [sp, #92]	; 0x5c
   d74e4:	785b      	ldrb	r3, [r3, #1]
   d74e6:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d74ea:	f1b9 0f09 	cmp.w	r9, #9
   d74ee:	d804      	bhi.n	d74fa <_strtod_r+0x2ca>
   d74f0:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d74f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d74f8:	e7f1      	b.n	d74de <_strtod_r+0x2ae>
   d74fa:	1bf6      	subs	r6, r6, r7
   d74fc:	2e08      	cmp	r6, #8
   d74fe:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d7502:	dc02      	bgt.n	d750a <_strtod_r+0x2da>
   d7504:	45f1      	cmp	r9, lr
   d7506:	bfa8      	it	ge
   d7508:	46f1      	movge	r9, lr
   d750a:	9e03      	ldr	r6, [sp, #12]
   d750c:	b12e      	cbz	r6, d751a <_strtod_r+0x2ea>
   d750e:	f1c9 0900 	rsb	r9, r9, #0
   d7512:	e002      	b.n	d751a <_strtod_r+0x2ea>
   d7514:	9417      	str	r4, [sp, #92]	; 0x5c
   d7516:	f04f 0900 	mov.w	r9, #0
   d751a:	2d00      	cmp	r5, #0
   d751c:	d153      	bne.n	d75c6 <_strtod_r+0x396>
   d751e:	2800      	cmp	r0, #0
   d7520:	f040 8451 	bne.w	d7dc6 <_strtod_r+0xb96>
   d7524:	9a06      	ldr	r2, [sp, #24]
   d7526:	2a00      	cmp	r2, #0
   d7528:	f040 844d 	bne.w	d7dc6 <_strtod_r+0xb96>
   d752c:	2900      	cmp	r1, #0
   d752e:	d141      	bne.n	d75b4 <_strtod_r+0x384>
   d7530:	2b4e      	cmp	r3, #78	; 0x4e
   d7532:	d020      	beq.n	d7576 <_strtod_r+0x346>
   d7534:	dc02      	bgt.n	d753c <_strtod_r+0x30c>
   d7536:	2b49      	cmp	r3, #73	; 0x49
   d7538:	d00a      	beq.n	d7550 <_strtod_r+0x320>
   d753a:	e03b      	b.n	d75b4 <_strtod_r+0x384>
   d753c:	2b69      	cmp	r3, #105	; 0x69
   d753e:	d007      	beq.n	d7550 <_strtod_r+0x320>
   d7540:	2b6e      	cmp	r3, #110	; 0x6e
   d7542:	d018      	beq.n	d7576 <_strtod_r+0x346>
   d7544:	e036      	b.n	d75b4 <_strtod_r+0x384>
   d7546:	bf00      	nop
   d7548:	000d99f0 	.word	0x000d99f0
   d754c:	7ff00000 	.word	0x7ff00000
   d7550:	49a8      	ldr	r1, [pc, #672]	; (d77f4 <_strtod_r+0x5c4>)
   d7552:	a817      	add	r0, sp, #92	; 0x5c
   d7554:	f001 f9c0 	bl	d88d8 <__match>
   d7558:	b360      	cbz	r0, d75b4 <_strtod_r+0x384>
   d755a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d755c:	49a6      	ldr	r1, [pc, #664]	; (d77f8 <_strtod_r+0x5c8>)
   d755e:	3b01      	subs	r3, #1
   d7560:	a817      	add	r0, sp, #92	; 0x5c
   d7562:	9317      	str	r3, [sp, #92]	; 0x5c
   d7564:	f001 f9b8 	bl	d88d8 <__match>
   d7568:	b910      	cbnz	r0, d7570 <_strtod_r+0x340>
   d756a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d756c:	3301      	adds	r3, #1
   d756e:	9317      	str	r3, [sp, #92]	; 0x5c
   d7570:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d7814 <_strtod_r+0x5e4>
   d7574:	e01a      	b.n	d75ac <_strtod_r+0x37c>
   d7576:	49a1      	ldr	r1, [pc, #644]	; (d77fc <_strtod_r+0x5cc>)
   d7578:	a817      	add	r0, sp, #92	; 0x5c
   d757a:	f001 f9ad 	bl	d88d8 <__match>
   d757e:	b1c8      	cbz	r0, d75b4 <_strtod_r+0x384>
   d7580:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7582:	781b      	ldrb	r3, [r3, #0]
   d7584:	2b28      	cmp	r3, #40	; 0x28
   d7586:	d10f      	bne.n	d75a8 <_strtod_r+0x378>
   d7588:	aa1a      	add	r2, sp, #104	; 0x68
   d758a:	499d      	ldr	r1, [pc, #628]	; (d7800 <_strtod_r+0x5d0>)
   d758c:	a817      	add	r0, sp, #92	; 0x5c
   d758e:	f001 f9b6 	bl	d88fe <__hexnan>
   d7592:	2805      	cmp	r0, #5
   d7594:	d108      	bne.n	d75a8 <_strtod_r+0x378>
   d7596:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d7598:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d759c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d75a0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d75a4:	f000 bc0f 	b.w	d7dc6 <_strtod_r+0xb96>
   d75a8:	f8df b26c 	ldr.w	fp, [pc, #620]	; d7818 <_strtod_r+0x5e8>
   d75ac:	f04f 0a00 	mov.w	sl, #0
   d75b0:	f000 bc09 	b.w	d7dc6 <_strtod_r+0xb96>
   d75b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d75b6:	9417      	str	r4, [sp, #92]	; 0x5c
   d75b8:	2b00      	cmp	r3, #0
   d75ba:	f000 840f 	beq.w	d7ddc <_strtod_r+0xbac>
   d75be:	2300      	movs	r3, #0
   d75c0:	930c      	str	r3, [sp, #48]	; 0x30
   d75c2:	f000 bc02 	b.w	d7dca <_strtod_r+0xb9a>
   d75c6:	9b04      	ldr	r3, [sp, #16]
   d75c8:	9805      	ldr	r0, [sp, #20]
   d75ca:	2b00      	cmp	r3, #0
   d75cc:	bf08      	it	eq
   d75ce:	462b      	moveq	r3, r5
   d75d0:	2d10      	cmp	r5, #16
   d75d2:	462c      	mov	r4, r5
   d75d4:	ebc2 0909 	rsb	r9, r2, r9
   d75d8:	bfa8      	it	ge
   d75da:	2410      	movge	r4, #16
   d75dc:	9304      	str	r3, [sp, #16]
   d75de:	f7ff f8bd 	bl	d675c <__aeabi_ui2d>
   d75e2:	2c09      	cmp	r4, #9
   d75e4:	4682      	mov	sl, r0
   d75e6:	468b      	mov	fp, r1
   d75e8:	dd13      	ble.n	d7612 <_strtod_r+0x3e2>
   d75ea:	4b86      	ldr	r3, [pc, #536]	; (d7804 <_strtod_r+0x5d4>)
   d75ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d75f0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d75f4:	f7ff f928 	bl	d6848 <__aeabi_dmul>
   d75f8:	4606      	mov	r6, r0
   d75fa:	4640      	mov	r0, r8
   d75fc:	460f      	mov	r7, r1
   d75fe:	f7ff f8ad 	bl	d675c <__aeabi_ui2d>
   d7602:	4602      	mov	r2, r0
   d7604:	460b      	mov	r3, r1
   d7606:	4630      	mov	r0, r6
   d7608:	4639      	mov	r1, r7
   d760a:	f7fe ff6b 	bl	d64e4 <__adddf3>
   d760e:	4682      	mov	sl, r0
   d7610:	468b      	mov	fp, r1
   d7612:	2d0f      	cmp	r5, #15
   d7614:	dc36      	bgt.n	d7684 <_strtod_r+0x454>
   d7616:	f1b9 0f00 	cmp.w	r9, #0
   d761a:	f000 83d4 	beq.w	d7dc6 <_strtod_r+0xb96>
   d761e:	dd24      	ble.n	d766a <_strtod_r+0x43a>
   d7620:	f1b9 0f16 	cmp.w	r9, #22
   d7624:	dc07      	bgt.n	d7636 <_strtod_r+0x406>
   d7626:	4d77      	ldr	r5, [pc, #476]	; (d7804 <_strtod_r+0x5d4>)
   d7628:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d762c:	4652      	mov	r2, sl
   d762e:	465b      	mov	r3, fp
   d7630:	e9d9 0100 	ldrd	r0, r1, [r9]
   d7634:	e014      	b.n	d7660 <_strtod_r+0x430>
   d7636:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d763a:	4599      	cmp	r9, r3
   d763c:	dc22      	bgt.n	d7684 <_strtod_r+0x454>
   d763e:	4c71      	ldr	r4, [pc, #452]	; (d7804 <_strtod_r+0x5d4>)
   d7640:	f1c5 050f 	rsb	r5, r5, #15
   d7644:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d7648:	ebc5 0509 	rsb	r5, r5, r9
   d764c:	4652      	mov	r2, sl
   d764e:	465b      	mov	r3, fp
   d7650:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7654:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d7658:	f7ff f8f6 	bl	d6848 <__aeabi_dmul>
   d765c:	e9d4 2300 	ldrd	r2, r3, [r4]
   d7660:	f7ff f8f2 	bl	d6848 <__aeabi_dmul>
   d7664:	4682      	mov	sl, r0
   d7666:	468b      	mov	fp, r1
   d7668:	e3ad      	b.n	d7dc6 <_strtod_r+0xb96>
   d766a:	f119 0f16 	cmn.w	r9, #22
   d766e:	db09      	blt.n	d7684 <_strtod_r+0x454>
   d7670:	4d64      	ldr	r5, [pc, #400]	; (d7804 <_strtod_r+0x5d4>)
   d7672:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d7676:	e9d9 2300 	ldrd	r2, r3, [r9]
   d767a:	4650      	mov	r0, sl
   d767c:	4659      	mov	r1, fp
   d767e:	f7ff fa0d 	bl	d6a9c <__aeabi_ddiv>
   d7682:	e7ef      	b.n	d7664 <_strtod_r+0x434>
   d7684:	1b2c      	subs	r4, r5, r4
   d7686:	444c      	add	r4, r9
   d7688:	2c00      	cmp	r4, #0
   d768a:	dd57      	ble.n	d773c <_strtod_r+0x50c>
   d768c:	f014 010f 	ands.w	r1, r4, #15
   d7690:	d00a      	beq.n	d76a8 <_strtod_r+0x478>
   d7692:	4b5c      	ldr	r3, [pc, #368]	; (d7804 <_strtod_r+0x5d4>)
   d7694:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d7698:	4652      	mov	r2, sl
   d769a:	465b      	mov	r3, fp
   d769c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d76a0:	f7ff f8d2 	bl	d6848 <__aeabi_dmul>
   d76a4:	4682      	mov	sl, r0
   d76a6:	468b      	mov	fp, r1
   d76a8:	f034 040f 	bics.w	r4, r4, #15
   d76ac:	f000 80b8 	beq.w	d7820 <_strtod_r+0x5f0>
   d76b0:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d76b4:	dd0b      	ble.n	d76ce <_strtod_r+0x49e>
   d76b6:	2400      	movs	r4, #0
   d76b8:	4625      	mov	r5, r4
   d76ba:	9405      	str	r4, [sp, #20]
   d76bc:	9404      	str	r4, [sp, #16]
   d76be:	9a02      	ldr	r2, [sp, #8]
   d76c0:	f8df b150 	ldr.w	fp, [pc, #336]	; d7814 <_strtod_r+0x5e4>
   d76c4:	2322      	movs	r3, #34	; 0x22
   d76c6:	6013      	str	r3, [r2, #0]
   d76c8:	f04f 0a00 	mov.w	sl, #0
   d76cc:	e187      	b.n	d79de <_strtod_r+0x7ae>
   d76ce:	4e4e      	ldr	r6, [pc, #312]	; (d7808 <_strtod_r+0x5d8>)
   d76d0:	2300      	movs	r3, #0
   d76d2:	1124      	asrs	r4, r4, #4
   d76d4:	4650      	mov	r0, sl
   d76d6:	4659      	mov	r1, fp
   d76d8:	4698      	mov	r8, r3
   d76da:	4637      	mov	r7, r6
   d76dc:	2c01      	cmp	r4, #1
   d76de:	dd0b      	ble.n	d76f8 <_strtod_r+0x4c8>
   d76e0:	07e2      	lsls	r2, r4, #31
   d76e2:	d504      	bpl.n	d76ee <_strtod_r+0x4be>
   d76e4:	e9d6 2300 	ldrd	r2, r3, [r6]
   d76e8:	f7ff f8ae 	bl	d6848 <__aeabi_dmul>
   d76ec:	2301      	movs	r3, #1
   d76ee:	f108 0801 	add.w	r8, r8, #1
   d76f2:	1064      	asrs	r4, r4, #1
   d76f4:	3608      	adds	r6, #8
   d76f6:	e7f1      	b.n	d76dc <_strtod_r+0x4ac>
   d76f8:	b10b      	cbz	r3, d76fe <_strtod_r+0x4ce>
   d76fa:	4682      	mov	sl, r0
   d76fc:	468b      	mov	fp, r1
   d76fe:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d7702:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d7706:	4652      	mov	r2, sl
   d7708:	465b      	mov	r3, fp
   d770a:	e9d7 0100 	ldrd	r0, r1, [r7]
   d770e:	f7ff f89b 	bl	d6848 <__aeabi_dmul>
   d7712:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7716:	468b      	mov	fp, r1
   d7718:	460a      	mov	r2, r1
   d771a:	0d1b      	lsrs	r3, r3, #20
   d771c:	493b      	ldr	r1, [pc, #236]	; (d780c <_strtod_r+0x5dc>)
   d771e:	051b      	lsls	r3, r3, #20
   d7720:	428b      	cmp	r3, r1
   d7722:	4682      	mov	sl, r0
   d7724:	d8c7      	bhi.n	d76b6 <_strtod_r+0x486>
   d7726:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d772a:	428b      	cmp	r3, r1
   d772c:	bf86      	itte	hi
   d772e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d781c <_strtod_r+0x5ec>
   d7732:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d7736:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d773a:	e071      	b.n	d7820 <_strtod_r+0x5f0>
   d773c:	d070      	beq.n	d7820 <_strtod_r+0x5f0>
   d773e:	4264      	negs	r4, r4
   d7740:	f014 020f 	ands.w	r2, r4, #15
   d7744:	d00a      	beq.n	d775c <_strtod_r+0x52c>
   d7746:	4b2f      	ldr	r3, [pc, #188]	; (d7804 <_strtod_r+0x5d4>)
   d7748:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d774c:	4650      	mov	r0, sl
   d774e:	4659      	mov	r1, fp
   d7750:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7754:	f7ff f9a2 	bl	d6a9c <__aeabi_ddiv>
   d7758:	4682      	mov	sl, r0
   d775a:	468b      	mov	fp, r1
   d775c:	1124      	asrs	r4, r4, #4
   d775e:	d05f      	beq.n	d7820 <_strtod_r+0x5f0>
   d7760:	2c1f      	cmp	r4, #31
   d7762:	dd04      	ble.n	d776e <_strtod_r+0x53e>
   d7764:	2400      	movs	r4, #0
   d7766:	4625      	mov	r5, r4
   d7768:	9405      	str	r4, [sp, #20]
   d776a:	9404      	str	r4, [sp, #16]
   d776c:	e130      	b.n	d79d0 <_strtod_r+0x7a0>
   d776e:	f014 0f10 	tst.w	r4, #16
   d7772:	bf0c      	ite	eq
   d7774:	2300      	moveq	r3, #0
   d7776:	236a      	movne	r3, #106	; 0x6a
   d7778:	4e25      	ldr	r6, [pc, #148]	; (d7810 <_strtod_r+0x5e0>)
   d777a:	9303      	str	r3, [sp, #12]
   d777c:	4650      	mov	r0, sl
   d777e:	4659      	mov	r1, fp
   d7780:	2300      	movs	r3, #0
   d7782:	2c00      	cmp	r4, #0
   d7784:	dd09      	ble.n	d779a <_strtod_r+0x56a>
   d7786:	07e2      	lsls	r2, r4, #31
   d7788:	d504      	bpl.n	d7794 <_strtod_r+0x564>
   d778a:	e9d6 2300 	ldrd	r2, r3, [r6]
   d778e:	f7ff f85b 	bl	d6848 <__aeabi_dmul>
   d7792:	2301      	movs	r3, #1
   d7794:	1064      	asrs	r4, r4, #1
   d7796:	3608      	adds	r6, #8
   d7798:	e7f3      	b.n	d7782 <_strtod_r+0x552>
   d779a:	b10b      	cbz	r3, d77a0 <_strtod_r+0x570>
   d779c:	4682      	mov	sl, r0
   d779e:	468b      	mov	fp, r1
   d77a0:	9b03      	ldr	r3, [sp, #12]
   d77a2:	b1eb      	cbz	r3, d77e0 <_strtod_r+0x5b0>
   d77a4:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d77a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d77ac:	2b00      	cmp	r3, #0
   d77ae:	4659      	mov	r1, fp
   d77b0:	dd16      	ble.n	d77e0 <_strtod_r+0x5b0>
   d77b2:	2b1f      	cmp	r3, #31
   d77b4:	dd0e      	ble.n	d77d4 <_strtod_r+0x5a4>
   d77b6:	2b34      	cmp	r3, #52	; 0x34
   d77b8:	bfde      	ittt	le
   d77ba:	3b20      	suble	r3, #32
   d77bc:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d77c0:	fa02 f303 	lslle.w	r3, r2, r3
   d77c4:	f04f 0a00 	mov.w	sl, #0
   d77c8:	bfcc      	ite	gt
   d77ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d77ce:	ea03 0b01 	andle.w	fp, r3, r1
   d77d2:	e005      	b.n	d77e0 <_strtod_r+0x5b0>
   d77d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d77d8:	fa02 f303 	lsl.w	r3, r2, r3
   d77dc:	ea03 0a0a 	and.w	sl, r3, sl
   d77e0:	2200      	movs	r2, #0
   d77e2:	2300      	movs	r3, #0
   d77e4:	4650      	mov	r0, sl
   d77e6:	4659      	mov	r1, fp
   d77e8:	f7ff fa96 	bl	d6d18 <__aeabi_dcmpeq>
   d77ec:	2800      	cmp	r0, #0
   d77ee:	d1b9      	bne.n	d7764 <_strtod_r+0x534>
   d77f0:	e018      	b.n	d7824 <_strtod_r+0x5f4>
   d77f2:	bf00      	nop
   d77f4:	000d9a18 	.word	0x000d9a18
   d77f8:	000d9a1b 	.word	0x000d9a1b
   d77fc:	000d9a21 	.word	0x000d9a21
   d7800:	000d9a04 	.word	0x000d9a04
   d7804:	000d9a90 	.word	0x000d9a90
   d7808:	000d9b58 	.word	0x000d9b58
   d780c:	7ca00000 	.word	0x7ca00000
   d7810:	000d9a28 	.word	0x000d9a28
   d7814:	7ff00000 	.word	0x7ff00000
   d7818:	fff80000 	.word	0xfff80000
   d781c:	7fefffff 	.word	0x7fefffff
   d7820:	2300      	movs	r3, #0
   d7822:	9303      	str	r3, [sp, #12]
   d7824:	9b05      	ldr	r3, [sp, #20]
   d7826:	9300      	str	r3, [sp, #0]
   d7828:	9a04      	ldr	r2, [sp, #16]
   d782a:	9907      	ldr	r1, [sp, #28]
   d782c:	9802      	ldr	r0, [sp, #8]
   d782e:	462b      	mov	r3, r5
   d7830:	f001 fa5b 	bl	d8cea <__s2b>
   d7834:	9005      	str	r0, [sp, #20]
   d7836:	2800      	cmp	r0, #0
   d7838:	f43f af3d 	beq.w	d76b6 <_strtod_r+0x486>
   d783c:	f1b9 0f00 	cmp.w	r9, #0
   d7840:	f1c9 0300 	rsb	r3, r9, #0
   d7844:	bfa8      	it	ge
   d7846:	2300      	movge	r3, #0
   d7848:	930d      	str	r3, [sp, #52]	; 0x34
   d784a:	2400      	movs	r4, #0
   d784c:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d7850:	9312      	str	r3, [sp, #72]	; 0x48
   d7852:	4625      	mov	r5, r4
   d7854:	9b05      	ldr	r3, [sp, #20]
   d7856:	9802      	ldr	r0, [sp, #8]
   d7858:	6859      	ldr	r1, [r3, #4]
   d785a:	f001 f9bf 	bl	d8bdc <_Balloc>
   d785e:	9004      	str	r0, [sp, #16]
   d7860:	2800      	cmp	r0, #0
   d7862:	f43f af2c 	beq.w	d76be <_strtod_r+0x48e>
   d7866:	9b05      	ldr	r3, [sp, #20]
   d7868:	691a      	ldr	r2, [r3, #16]
   d786a:	3202      	adds	r2, #2
   d786c:	f103 010c 	add.w	r1, r3, #12
   d7870:	0092      	lsls	r2, r2, #2
   d7872:	300c      	adds	r0, #12
   d7874:	f7ff fc3a 	bl	d70ec <memcpy>
   d7878:	aa1a      	add	r2, sp, #104	; 0x68
   d787a:	a919      	add	r1, sp, #100	; 0x64
   d787c:	ec4b ab10 	vmov	d0, sl, fp
   d7880:	9802      	ldr	r0, [sp, #8]
   d7882:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d7886:	f001 fce4 	bl	d9252 <__d2b>
   d788a:	9018      	str	r0, [sp, #96]	; 0x60
   d788c:	2800      	cmp	r0, #0
   d788e:	f43f af16 	beq.w	d76be <_strtod_r+0x48e>
   d7892:	2101      	movs	r1, #1
   d7894:	9802      	ldr	r0, [sp, #8]
   d7896:	f001 fab3 	bl	d8e00 <__i2b>
   d789a:	4605      	mov	r5, r0
   d789c:	2800      	cmp	r0, #0
   d789e:	f43f af0e 	beq.w	d76be <_strtod_r+0x48e>
   d78a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d78a4:	9903      	ldr	r1, [sp, #12]
   d78a6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d78a8:	2b00      	cmp	r3, #0
   d78aa:	bfad      	iteet	ge
   d78ac:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d78ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d78b0:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d78b4:	eb02 0803 	addge.w	r8, r2, r3
   d78b8:	bfb8      	it	lt
   d78ba:	1ad2      	sublt	r2, r2, r3
   d78bc:	eba3 0301 	sub.w	r3, r3, r1
   d78c0:	4433      	add	r3, r6
   d78c2:	49b5      	ldr	r1, [pc, #724]	; (d7b98 <_strtod_r+0x968>)
   d78c4:	bfa8      	it	ge
   d78c6:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d78c8:	3b01      	subs	r3, #1
   d78ca:	428b      	cmp	r3, r1
   d78cc:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d78d0:	f280 808a 	bge.w	d79e8 <_strtod_r+0x7b8>
   d78d4:	1ac9      	subs	r1, r1, r3
   d78d6:	291f      	cmp	r1, #31
   d78d8:	bfc8      	it	gt
   d78da:	4fb0      	ldrgt	r7, [pc, #704]	; (d7b9c <_strtod_r+0x96c>)
   d78dc:	f04f 0901 	mov.w	r9, #1
   d78e0:	bfd4      	ite	le
   d78e2:	fa09 f301 	lslle.w	r3, r9, r1
   d78e6:	1aff      	subgt	r7, r7, r3
   d78e8:	eba6 0601 	sub.w	r6, r6, r1
   d78ec:	bfd9      	ittee	le
   d78ee:	9306      	strle	r3, [sp, #24]
   d78f0:	2700      	movle	r7, #0
   d78f2:	fa09 f707 	lslgt.w	r7, r9, r7
   d78f6:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d78fa:	eb08 0906 	add.w	r9, r8, r6
   d78fe:	9b03      	ldr	r3, [sp, #12]
   d7900:	45c8      	cmp	r8, r9
   d7902:	4416      	add	r6, r2
   d7904:	441e      	add	r6, r3
   d7906:	4643      	mov	r3, r8
   d7908:	bfa8      	it	ge
   d790a:	464b      	movge	r3, r9
   d790c:	42b3      	cmp	r3, r6
   d790e:	bfa8      	it	ge
   d7910:	4633      	movge	r3, r6
   d7912:	2b00      	cmp	r3, #0
   d7914:	bfc2      	ittt	gt
   d7916:	ebc3 0909 	rsbgt	r9, r3, r9
   d791a:	1af6      	subgt	r6, r6, r3
   d791c:	ebc3 0808 	rsbgt	r8, r3, r8
   d7920:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d7922:	2b00      	cmp	r3, #0
   d7924:	d164      	bne.n	d79f0 <_strtod_r+0x7c0>
   d7926:	f1b9 0f00 	cmp.w	r9, #0
   d792a:	dc7a      	bgt.n	d7a22 <_strtod_r+0x7f2>
   d792c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d792e:	2b00      	cmp	r3, #0
   d7930:	f040 8081 	bne.w	d7a36 <_strtod_r+0x806>
   d7934:	2e00      	cmp	r6, #0
   d7936:	f300 8088 	bgt.w	d7a4a <_strtod_r+0x81a>
   d793a:	f1b8 0f00 	cmp.w	r8, #0
   d793e:	f300 808e 	bgt.w	d7a5e <_strtod_r+0x82e>
   d7942:	9a04      	ldr	r2, [sp, #16]
   d7944:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7946:	9802      	ldr	r0, [sp, #8]
   d7948:	f001 fbaf 	bl	d90aa <__mdiff>
   d794c:	4604      	mov	r4, r0
   d794e:	2800      	cmp	r0, #0
   d7950:	f43f aeb5 	beq.w	d76be <_strtod_r+0x48e>
   d7954:	68c3      	ldr	r3, [r0, #12]
   d7956:	9307      	str	r3, [sp, #28]
   d7958:	2300      	movs	r3, #0
   d795a:	60c3      	str	r3, [r0, #12]
   d795c:	4629      	mov	r1, r5
   d795e:	f001 fb88 	bl	d9072 <__mcmp>
   d7962:	2800      	cmp	r0, #0
   d7964:	f280 8089 	bge.w	d7a7a <_strtod_r+0x84a>
   d7968:	9b07      	ldr	r3, [sp, #28]
   d796a:	2b00      	cmp	r3, #0
   d796c:	f040 8204 	bne.w	d7d78 <_strtod_r+0xb48>
   d7970:	f1ba 0f00 	cmp.w	sl, #0
   d7974:	f040 8200 	bne.w	d7d78 <_strtod_r+0xb48>
   d7978:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d797c:	2b00      	cmp	r3, #0
   d797e:	f040 81fb 	bne.w	d7d78 <_strtod_r+0xb48>
   d7982:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7986:	0d1b      	lsrs	r3, r3, #20
   d7988:	051b      	lsls	r3, r3, #20
   d798a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d798e:	f240 81f3 	bls.w	d7d78 <_strtod_r+0xb48>
   d7992:	6963      	ldr	r3, [r4, #20]
   d7994:	2b00      	cmp	r3, #0
   d7996:	d06c      	beq.n	d7a72 <_strtod_r+0x842>
   d7998:	4621      	mov	r1, r4
   d799a:	2201      	movs	r2, #1
   d799c:	9802      	ldr	r0, [sp, #8]
   d799e:	f001 fb17 	bl	d8fd0 <__lshift>
   d79a2:	4629      	mov	r1, r5
   d79a4:	4604      	mov	r4, r0
   d79a6:	f001 fb64 	bl	d9072 <__mcmp>
   d79aa:	2800      	cmp	r0, #0
   d79ac:	f340 81e4 	ble.w	d7d78 <_strtod_r+0xb48>
   d79b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d79b4:	9a03      	ldr	r2, [sp, #12]
   d79b6:	0d1b      	lsrs	r3, r3, #20
   d79b8:	051b      	lsls	r3, r3, #20
   d79ba:	2a00      	cmp	r2, #0
   d79bc:	f000 808c 	beq.w	d7ad8 <_strtod_r+0x8a8>
   d79c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d79c4:	f300 8088 	bgt.w	d7ad8 <_strtod_r+0x8a8>
   d79c8:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d79cc:	f300 81d6 	bgt.w	d7d7c <_strtod_r+0xb4c>
   d79d0:	9a02      	ldr	r2, [sp, #8]
   d79d2:	2322      	movs	r3, #34	; 0x22
   d79d4:	f04f 0a00 	mov.w	sl, #0
   d79d8:	f04f 0b00 	mov.w	fp, #0
   d79dc:	6013      	str	r3, [r2, #0]
   d79de:	9b05      	ldr	r3, [sp, #20]
   d79e0:	2b00      	cmp	r3, #0
   d79e2:	f040 81dc 	bne.w	d7d9e <_strtod_r+0xb6e>
   d79e6:	e1ee      	b.n	d7dc6 <_strtod_r+0xb96>
   d79e8:	2301      	movs	r3, #1
   d79ea:	2700      	movs	r7, #0
   d79ec:	9306      	str	r3, [sp, #24]
   d79ee:	e784      	b.n	d78fa <_strtod_r+0x6ca>
   d79f0:	4629      	mov	r1, r5
   d79f2:	461a      	mov	r2, r3
   d79f4:	9802      	ldr	r0, [sp, #8]
   d79f6:	f001 fa9d 	bl	d8f34 <__pow5mult>
   d79fa:	4605      	mov	r5, r0
   d79fc:	2800      	cmp	r0, #0
   d79fe:	f43f ae5e 	beq.w	d76be <_strtod_r+0x48e>
   d7a02:	4601      	mov	r1, r0
   d7a04:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d7a06:	9802      	ldr	r0, [sp, #8]
   d7a08:	f001 fa03 	bl	d8e12 <__multiply>
   d7a0c:	9007      	str	r0, [sp, #28]
   d7a0e:	2800      	cmp	r0, #0
   d7a10:	f43f ae55 	beq.w	d76be <_strtod_r+0x48e>
   d7a14:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7a16:	9802      	ldr	r0, [sp, #8]
   d7a18:	f001 f915 	bl	d8c46 <_Bfree>
   d7a1c:	9b07      	ldr	r3, [sp, #28]
   d7a1e:	9318      	str	r3, [sp, #96]	; 0x60
   d7a20:	e781      	b.n	d7926 <_strtod_r+0x6f6>
   d7a22:	464a      	mov	r2, r9
   d7a24:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7a26:	9802      	ldr	r0, [sp, #8]
   d7a28:	f001 fad2 	bl	d8fd0 <__lshift>
   d7a2c:	9018      	str	r0, [sp, #96]	; 0x60
   d7a2e:	2800      	cmp	r0, #0
   d7a30:	f47f af7c 	bne.w	d792c <_strtod_r+0x6fc>
   d7a34:	e643      	b.n	d76be <_strtod_r+0x48e>
   d7a36:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d7a38:	9904      	ldr	r1, [sp, #16]
   d7a3a:	9802      	ldr	r0, [sp, #8]
   d7a3c:	f001 fa7a 	bl	d8f34 <__pow5mult>
   d7a40:	9004      	str	r0, [sp, #16]
   d7a42:	2800      	cmp	r0, #0
   d7a44:	f47f af76 	bne.w	d7934 <_strtod_r+0x704>
   d7a48:	e639      	b.n	d76be <_strtod_r+0x48e>
   d7a4a:	4632      	mov	r2, r6
   d7a4c:	9904      	ldr	r1, [sp, #16]
   d7a4e:	9802      	ldr	r0, [sp, #8]
   d7a50:	f001 fabe 	bl	d8fd0 <__lshift>
   d7a54:	9004      	str	r0, [sp, #16]
   d7a56:	2800      	cmp	r0, #0
   d7a58:	f47f af6f 	bne.w	d793a <_strtod_r+0x70a>
   d7a5c:	e62f      	b.n	d76be <_strtod_r+0x48e>
   d7a5e:	4629      	mov	r1, r5
   d7a60:	4642      	mov	r2, r8
   d7a62:	9802      	ldr	r0, [sp, #8]
   d7a64:	f001 fab4 	bl	d8fd0 <__lshift>
   d7a68:	4605      	mov	r5, r0
   d7a6a:	2800      	cmp	r0, #0
   d7a6c:	f47f af69 	bne.w	d7942 <_strtod_r+0x712>
   d7a70:	e625      	b.n	d76be <_strtod_r+0x48e>
   d7a72:	6923      	ldr	r3, [r4, #16]
   d7a74:	2b01      	cmp	r3, #1
   d7a76:	dc8f      	bgt.n	d7998 <_strtod_r+0x768>
   d7a78:	e17e      	b.n	d7d78 <_strtod_r+0xb48>
   d7a7a:	d161      	bne.n	d7b40 <_strtod_r+0x910>
   d7a7c:	9a07      	ldr	r2, [sp, #28]
   d7a7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7a82:	b322      	cbz	r2, d7ace <_strtod_r+0x89e>
   d7a84:	4946      	ldr	r1, [pc, #280]	; (d7ba0 <_strtod_r+0x970>)
   d7a86:	428b      	cmp	r3, r1
   d7a88:	465a      	mov	r2, fp
   d7a8a:	d12e      	bne.n	d7aea <_strtod_r+0x8ba>
   d7a8c:	9b03      	ldr	r3, [sp, #12]
   d7a8e:	4651      	mov	r1, sl
   d7a90:	b163      	cbz	r3, d7aac <_strtod_r+0x87c>
   d7a92:	4b44      	ldr	r3, [pc, #272]	; (d7ba4 <_strtod_r+0x974>)
   d7a94:	4013      	ands	r3, r2
   d7a96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d7a9a:	d807      	bhi.n	d7aac <_strtod_r+0x87c>
   d7a9c:	0d1b      	lsrs	r3, r3, #20
   d7a9e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d7aa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7aa6:	fa00 f303 	lsl.w	r3, r0, r3
   d7aaa:	e001      	b.n	d7ab0 <_strtod_r+0x880>
   d7aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d7ab0:	428b      	cmp	r3, r1
   d7ab2:	d11a      	bne.n	d7aea <_strtod_r+0x8ba>
   d7ab4:	493c      	ldr	r1, [pc, #240]	; (d7ba8 <_strtod_r+0x978>)
   d7ab6:	428a      	cmp	r2, r1
   d7ab8:	d102      	bne.n	d7ac0 <_strtod_r+0x890>
   d7aba:	3301      	adds	r3, #1
   d7abc:	f43f adff 	beq.w	d76be <_strtod_r+0x48e>
   d7ac0:	4b38      	ldr	r3, [pc, #224]	; (d7ba4 <_strtod_r+0x974>)
   d7ac2:	4013      	ands	r3, r2
   d7ac4:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d7ac8:	f04f 0a00 	mov.w	sl, #0
   d7acc:	e154      	b.n	d7d78 <_strtod_r+0xb48>
   d7ace:	b963      	cbnz	r3, d7aea <_strtod_r+0x8ba>
   d7ad0:	f1ba 0f00 	cmp.w	sl, #0
   d7ad4:	d109      	bne.n	d7aea <_strtod_r+0x8ba>
   d7ad6:	e76b      	b.n	d79b0 <_strtod_r+0x780>
   d7ad8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d7adc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d7ae0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d7ae4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d7ae8:	e146      	b.n	d7d78 <_strtod_r+0xb48>
   d7aea:	b117      	cbz	r7, d7af2 <_strtod_r+0x8c2>
   d7aec:	ea17 0f0b 	tst.w	r7, fp
   d7af0:	e002      	b.n	d7af8 <_strtod_r+0x8c8>
   d7af2:	9b06      	ldr	r3, [sp, #24]
   d7af4:	ea13 0f0a 	tst.w	r3, sl
   d7af8:	f000 813e 	beq.w	d7d78 <_strtod_r+0xb48>
   d7afc:	9b07      	ldr	r3, [sp, #28]
   d7afe:	9a03      	ldr	r2, [sp, #12]
   d7b00:	4650      	mov	r0, sl
   d7b02:	4659      	mov	r1, fp
   d7b04:	b153      	cbz	r3, d7b1c <_strtod_r+0x8ec>
   d7b06:	f7ff fb77 	bl	d71f8 <sulp>
   d7b0a:	4602      	mov	r2, r0
   d7b0c:	460b      	mov	r3, r1
   d7b0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d7b12:	f7fe fce7 	bl	d64e4 <__adddf3>
   d7b16:	4682      	mov	sl, r0
   d7b18:	468b      	mov	fp, r1
   d7b1a:	e12d      	b.n	d7d78 <_strtod_r+0xb48>
   d7b1c:	f7ff fb6c 	bl	d71f8 <sulp>
   d7b20:	4602      	mov	r2, r0
   d7b22:	460b      	mov	r3, r1
   d7b24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d7b28:	f7fe fcda 	bl	d64e0 <__aeabi_dsub>
   d7b2c:	2200      	movs	r2, #0
   d7b2e:	2300      	movs	r3, #0
   d7b30:	4682      	mov	sl, r0
   d7b32:	468b      	mov	fp, r1
   d7b34:	f7ff f8f0 	bl	d6d18 <__aeabi_dcmpeq>
   d7b38:	2800      	cmp	r0, #0
   d7b3a:	f47f af49 	bne.w	d79d0 <_strtod_r+0x7a0>
   d7b3e:	e11b      	b.n	d7d78 <_strtod_r+0xb48>
   d7b40:	4629      	mov	r1, r5
   d7b42:	4620      	mov	r0, r4
   d7b44:	f001 fbd3 	bl	d92ee <__ratio>
   d7b48:	ec57 6b10 	vmov	r6, r7, d0
   d7b4c:	2200      	movs	r2, #0
   d7b4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d7b52:	ee10 0a10 	vmov	r0, s0
   d7b56:	4639      	mov	r1, r7
   d7b58:	f7ff f8f2 	bl	d6d40 <__aeabi_dcmple>
   d7b5c:	2800      	cmp	r0, #0
   d7b5e:	d042      	beq.n	d7be6 <_strtod_r+0x9b6>
   d7b60:	9b07      	ldr	r3, [sp, #28]
   d7b62:	b123      	cbz	r3, d7b6e <_strtod_r+0x93e>
   d7b64:	f04f 0800 	mov.w	r8, #0
   d7b68:	f8df 9040 	ldr.w	r9, [pc, #64]	; d7bac <_strtod_r+0x97c>
   d7b6c:	e011      	b.n	d7b92 <_strtod_r+0x962>
   d7b6e:	f1ba 0f00 	cmp.w	sl, #0
   d7b72:	d103      	bne.n	d7b7c <_strtod_r+0x94c>
   d7b74:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7b78:	b93b      	cbnz	r3, d7b8a <_strtod_r+0x95a>
   d7b7a:	e01b      	b.n	d7bb4 <_strtod_r+0x984>
   d7b7c:	f1ba 0f01 	cmp.w	sl, #1
   d7b80:	d103      	bne.n	d7b8a <_strtod_r+0x95a>
   d7b82:	f1bb 0f00 	cmp.w	fp, #0
   d7b86:	f43f af23 	beq.w	d79d0 <_strtod_r+0x7a0>
   d7b8a:	f8df 9024 	ldr.w	r9, [pc, #36]	; d7bb0 <_strtod_r+0x980>
   d7b8e:	f04f 0800 	mov.w	r8, #0
   d7b92:	2600      	movs	r6, #0
   d7b94:	4f05      	ldr	r7, [pc, #20]	; (d7bac <_strtod_r+0x97c>)
   d7b96:	e039      	b.n	d7c0c <_strtod_r+0x9dc>
   d7b98:	fffffc02 	.word	0xfffffc02
   d7b9c:	fffffbe2 	.word	0xfffffbe2
   d7ba0:	000fffff 	.word	0x000fffff
   d7ba4:	7ff00000 	.word	0x7ff00000
   d7ba8:	7fefffff 	.word	0x7fefffff
   d7bac:	3ff00000 	.word	0x3ff00000
   d7bb0:	bff00000 	.word	0xbff00000
   d7bb4:	2200      	movs	r2, #0
   d7bb6:	4b98      	ldr	r3, [pc, #608]	; (d7e18 <_strtod_r+0xbe8>)
   d7bb8:	4630      	mov	r0, r6
   d7bba:	4639      	mov	r1, r7
   d7bbc:	f7ff f8b6 	bl	d6d2c <__aeabi_dcmplt>
   d7bc0:	b940      	cbnz	r0, d7bd4 <_strtod_r+0x9a4>
   d7bc2:	4630      	mov	r0, r6
   d7bc4:	4639      	mov	r1, r7
   d7bc6:	2200      	movs	r2, #0
   d7bc8:	4b94      	ldr	r3, [pc, #592]	; (d7e1c <_strtod_r+0xbec>)
   d7bca:	f7fe fe3d 	bl	d6848 <__aeabi_dmul>
   d7bce:	4606      	mov	r6, r0
   d7bd0:	460f      	mov	r7, r1
   d7bd2:	e001      	b.n	d7bd8 <_strtod_r+0x9a8>
   d7bd4:	4f91      	ldr	r7, [pc, #580]	; (d7e1c <_strtod_r+0xbec>)
   d7bd6:	2600      	movs	r6, #0
   d7bd8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d7bdc:	9614      	str	r6, [sp, #80]	; 0x50
   d7bde:	9315      	str	r3, [sp, #84]	; 0x54
   d7be0:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d7be4:	e012      	b.n	d7c0c <_strtod_r+0x9dc>
   d7be6:	4b8d      	ldr	r3, [pc, #564]	; (d7e1c <_strtod_r+0xbec>)
   d7be8:	4630      	mov	r0, r6
   d7bea:	4639      	mov	r1, r7
   d7bec:	2200      	movs	r2, #0
   d7bee:	f7fe fe2b 	bl	d6848 <__aeabi_dmul>
   d7bf2:	9b07      	ldr	r3, [sp, #28]
   d7bf4:	4606      	mov	r6, r0
   d7bf6:	460f      	mov	r7, r1
   d7bf8:	b923      	cbnz	r3, d7c04 <_strtod_r+0x9d4>
   d7bfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7bfe:	900e      	str	r0, [sp, #56]	; 0x38
   d7c00:	930f      	str	r3, [sp, #60]	; 0x3c
   d7c02:	e001      	b.n	d7c08 <_strtod_r+0x9d8>
   d7c04:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d7c08:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d7c0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7c10:	0d1b      	lsrs	r3, r3, #20
   d7c12:	051b      	lsls	r3, r3, #20
   d7c14:	9306      	str	r3, [sp, #24]
   d7c16:	9a06      	ldr	r2, [sp, #24]
   d7c18:	4b81      	ldr	r3, [pc, #516]	; (d7e20 <_strtod_r+0xbf0>)
   d7c1a:	429a      	cmp	r2, r3
   d7c1c:	d12b      	bne.n	d7c76 <_strtod_r+0xa46>
   d7c1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7c22:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d7c26:	ec4b ab10 	vmov	d0, sl, fp
   d7c2a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d7c2e:	f001 fa9b 	bl	d9168 <__ulp>
   d7c32:	4640      	mov	r0, r8
   d7c34:	ec53 2b10 	vmov	r2, r3, d0
   d7c38:	4649      	mov	r1, r9
   d7c3a:	f7fe fe05 	bl	d6848 <__aeabi_dmul>
   d7c3e:	4652      	mov	r2, sl
   d7c40:	465b      	mov	r3, fp
   d7c42:	f7fe fc4f 	bl	d64e4 <__adddf3>
   d7c46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7c4a:	0d1b      	lsrs	r3, r3, #20
   d7c4c:	4a75      	ldr	r2, [pc, #468]	; (d7e24 <_strtod_r+0xbf4>)
   d7c4e:	051b      	lsls	r3, r3, #20
   d7c50:	4293      	cmp	r3, r2
   d7c52:	4682      	mov	sl, r0
   d7c54:	d90c      	bls.n	d7c70 <_strtod_r+0xa40>
   d7c56:	4b74      	ldr	r3, [pc, #464]	; (d7e28 <_strtod_r+0xbf8>)
   d7c58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d7c5a:	429a      	cmp	r2, r3
   d7c5c:	d103      	bne.n	d7c66 <_strtod_r+0xa36>
   d7c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7c60:	3301      	adds	r3, #1
   d7c62:	f43f ad2c 	beq.w	d76be <_strtod_r+0x48e>
   d7c66:	f8df b1c0 	ldr.w	fp, [pc, #448]	; d7e28 <_strtod_r+0xbf8>
   d7c6a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d7c6e:	e072      	b.n	d7d56 <_strtod_r+0xb26>
   d7c70:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d7c74:	e038      	b.n	d7ce8 <_strtod_r+0xab8>
   d7c76:	9b03      	ldr	r3, [sp, #12]
   d7c78:	b333      	cbz	r3, d7cc8 <_strtod_r+0xa98>
   d7c7a:	9b06      	ldr	r3, [sp, #24]
   d7c7c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d7c80:	d822      	bhi.n	d7cc8 <_strtod_r+0xa98>
   d7c82:	a35d      	add	r3, pc, #372	; (adr r3, d7df8 <_strtod_r+0xbc8>)
   d7c84:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7c88:	4630      	mov	r0, r6
   d7c8a:	4639      	mov	r1, r7
   d7c8c:	f7ff f858 	bl	d6d40 <__aeabi_dcmple>
   d7c90:	b1a8      	cbz	r0, d7cbe <_strtod_r+0xa8e>
   d7c92:	4639      	mov	r1, r7
   d7c94:	4630      	mov	r0, r6
   d7c96:	f7ff f8af 	bl	d6df8 <__aeabi_d2uiz>
   d7c9a:	2800      	cmp	r0, #0
   d7c9c:	bf08      	it	eq
   d7c9e:	2001      	moveq	r0, #1
   d7ca0:	f7fe fd5c 	bl	d675c <__aeabi_ui2d>
   d7ca4:	9b07      	ldr	r3, [sp, #28]
   d7ca6:	4606      	mov	r6, r0
   d7ca8:	460f      	mov	r7, r1
   d7caa:	b923      	cbnz	r3, d7cb6 <_strtod_r+0xa86>
   d7cac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7cb0:	9010      	str	r0, [sp, #64]	; 0x40
   d7cb2:	9311      	str	r3, [sp, #68]	; 0x44
   d7cb4:	e001      	b.n	d7cba <_strtod_r+0xa8a>
   d7cb6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d7cba:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d7cbe:	9a06      	ldr	r2, [sp, #24]
   d7cc0:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d7cc4:	ebc2 0903 	rsb	r9, r2, r3
   d7cc8:	ed9d 0b08 	vldr	d0, [sp, #32]
   d7ccc:	f001 fa4c 	bl	d9168 <__ulp>
   d7cd0:	4640      	mov	r0, r8
   d7cd2:	ec53 2b10 	vmov	r2, r3, d0
   d7cd6:	4649      	mov	r1, r9
   d7cd8:	f7fe fdb6 	bl	d6848 <__aeabi_dmul>
   d7cdc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7ce0:	f7fe fc00 	bl	d64e4 <__adddf3>
   d7ce4:	4682      	mov	sl, r0
   d7ce6:	468b      	mov	fp, r1
   d7ce8:	9b03      	ldr	r3, [sp, #12]
   d7cea:	bba3      	cbnz	r3, d7d56 <_strtod_r+0xb26>
   d7cec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d7cf0:	0d1b      	lsrs	r3, r3, #20
   d7cf2:	9a06      	ldr	r2, [sp, #24]
   d7cf4:	051b      	lsls	r3, r3, #20
   d7cf6:	429a      	cmp	r2, r3
   d7cf8:	46d8      	mov	r8, fp
   d7cfa:	d12c      	bne.n	d7d56 <_strtod_r+0xb26>
   d7cfc:	4639      	mov	r1, r7
   d7cfe:	4630      	mov	r0, r6
   d7d00:	f7ff f852 	bl	d6da8 <__aeabi_d2iz>
   d7d04:	f7fe fd3a 	bl	d677c <__aeabi_i2d>
   d7d08:	460b      	mov	r3, r1
   d7d0a:	4602      	mov	r2, r0
   d7d0c:	4639      	mov	r1, r7
   d7d0e:	4630      	mov	r0, r6
   d7d10:	f7fe fbe6 	bl	d64e0 <__aeabi_dsub>
   d7d14:	9b07      	ldr	r3, [sp, #28]
   d7d16:	4606      	mov	r6, r0
   d7d18:	460f      	mov	r7, r1
   d7d1a:	b92b      	cbnz	r3, d7d28 <_strtod_r+0xaf8>
   d7d1c:	f1ba 0f00 	cmp.w	sl, #0
   d7d20:	d102      	bne.n	d7d28 <_strtod_r+0xaf8>
   d7d22:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d7d26:	b183      	cbz	r3, d7d4a <_strtod_r+0xb1a>
   d7d28:	a335      	add	r3, pc, #212	; (adr r3, d7e00 <_strtod_r+0xbd0>)
   d7d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7d2e:	4630      	mov	r0, r6
   d7d30:	4639      	mov	r1, r7
   d7d32:	f7fe fffb 	bl	d6d2c <__aeabi_dcmplt>
   d7d36:	2800      	cmp	r0, #0
   d7d38:	d131      	bne.n	d7d9e <_strtod_r+0xb6e>
   d7d3a:	a333      	add	r3, pc, #204	; (adr r3, d7e08 <_strtod_r+0xbd8>)
   d7d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7d40:	4630      	mov	r0, r6
   d7d42:	4639      	mov	r1, r7
   d7d44:	f7ff f810 	bl	d6d68 <__aeabi_dcmpgt>
   d7d48:	e004      	b.n	d7d54 <_strtod_r+0xb24>
   d7d4a:	a331      	add	r3, pc, #196	; (adr r3, d7e10 <_strtod_r+0xbe0>)
   d7d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7d50:	f7fe ffec 	bl	d6d2c <__aeabi_dcmplt>
   d7d54:	bb18      	cbnz	r0, d7d9e <_strtod_r+0xb6e>
   d7d56:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7d58:	9802      	ldr	r0, [sp, #8]
   d7d5a:	f000 ff74 	bl	d8c46 <_Bfree>
   d7d5e:	9904      	ldr	r1, [sp, #16]
   d7d60:	9802      	ldr	r0, [sp, #8]
   d7d62:	f000 ff70 	bl	d8c46 <_Bfree>
   d7d66:	4629      	mov	r1, r5
   d7d68:	9802      	ldr	r0, [sp, #8]
   d7d6a:	f000 ff6c 	bl	d8c46 <_Bfree>
   d7d6e:	4621      	mov	r1, r4
   d7d70:	9802      	ldr	r0, [sp, #8]
   d7d72:	f000 ff68 	bl	d8c46 <_Bfree>
   d7d76:	e56d      	b.n	d7854 <_strtod_r+0x624>
   d7d78:	9b03      	ldr	r3, [sp, #12]
   d7d7a:	b183      	cbz	r3, d7d9e <_strtod_r+0xb6e>
   d7d7c:	4b2b      	ldr	r3, [pc, #172]	; (d7e2c <_strtod_r+0xbfc>)
   d7d7e:	930b      	str	r3, [sp, #44]	; 0x2c
   d7d80:	2300      	movs	r3, #0
   d7d82:	930a      	str	r3, [sp, #40]	; 0x28
   d7d84:	4650      	mov	r0, sl
   d7d86:	4659      	mov	r1, fp
   d7d88:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d7d8c:	f7fe fd5c 	bl	d6848 <__aeabi_dmul>
   d7d90:	4682      	mov	sl, r0
   d7d92:	468b      	mov	fp, r1
   d7d94:	b919      	cbnz	r1, d7d9e <_strtod_r+0xb6e>
   d7d96:	b910      	cbnz	r0, d7d9e <_strtod_r+0xb6e>
   d7d98:	9a02      	ldr	r2, [sp, #8]
   d7d9a:	2322      	movs	r3, #34	; 0x22
   d7d9c:	6013      	str	r3, [r2, #0]
   d7d9e:	9918      	ldr	r1, [sp, #96]	; 0x60
   d7da0:	9802      	ldr	r0, [sp, #8]
   d7da2:	f000 ff50 	bl	d8c46 <_Bfree>
   d7da6:	9904      	ldr	r1, [sp, #16]
   d7da8:	9802      	ldr	r0, [sp, #8]
   d7daa:	f000 ff4c 	bl	d8c46 <_Bfree>
   d7dae:	4629      	mov	r1, r5
   d7db0:	9802      	ldr	r0, [sp, #8]
   d7db2:	f000 ff48 	bl	d8c46 <_Bfree>
   d7db6:	9905      	ldr	r1, [sp, #20]
   d7db8:	9802      	ldr	r0, [sp, #8]
   d7dba:	f000 ff44 	bl	d8c46 <_Bfree>
   d7dbe:	4621      	mov	r1, r4
   d7dc0:	9802      	ldr	r0, [sp, #8]
   d7dc2:	f000 ff40 	bl	d8c46 <_Bfree>
   d7dc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d7dc8:	b113      	cbz	r3, d7dd0 <_strtod_r+0xba0>
   d7dca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d7dcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d7dce:	6013      	str	r3, [r2, #0]
   d7dd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d7dd2:	b11b      	cbz	r3, d7ddc <_strtod_r+0xbac>
   d7dd4:	4652      	mov	r2, sl
   d7dd6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d7dda:	e007      	b.n	d7dec <_strtod_r+0xbbc>
   d7ddc:	4652      	mov	r2, sl
   d7dde:	465b      	mov	r3, fp
   d7de0:	e004      	b.n	d7dec <_strtod_r+0xbbc>
   d7de2:	2500      	movs	r5, #0
   d7de4:	462a      	mov	r2, r5
   d7de6:	2101      	movs	r1, #1
   d7de8:	f7ff bb41 	b.w	d746e <_strtod_r+0x23e>
   d7dec:	ec43 2b10 	vmov	d0, r2, r3
   d7df0:	b01d      	add	sp, #116	; 0x74
   d7df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7df6:	bf00      	nop
   d7df8:	ffc00000 	.word	0xffc00000
   d7dfc:	41dfffff 	.word	0x41dfffff
   d7e00:	94a03595 	.word	0x94a03595
   d7e04:	3fdfffff 	.word	0x3fdfffff
   d7e08:	35afe535 	.word	0x35afe535
   d7e0c:	3fe00000 	.word	0x3fe00000
   d7e10:	94a03595 	.word	0x94a03595
   d7e14:	3fcfffff 	.word	0x3fcfffff
   d7e18:	3ff00000 	.word	0x3ff00000
   d7e1c:	3fe00000 	.word	0x3fe00000
   d7e20:	7fe00000 	.word	0x7fe00000
   d7e24:	7c9fffff 	.word	0x7c9fffff
   d7e28:	7fefffff 	.word	0x7fefffff
   d7e2c:	39500000 	.word	0x39500000

000d7e30 <strtof>:
   d7e30:	b538      	push	{r3, r4, r5, lr}
   d7e32:	4b0e      	ldr	r3, [pc, #56]	; (d7e6c <strtof+0x3c>)
   d7e34:	460a      	mov	r2, r1
   d7e36:	4601      	mov	r1, r0
   d7e38:	6818      	ldr	r0, [r3, #0]
   d7e3a:	f7ff f9f9 	bl	d7230 <_strtod_r>
   d7e3e:	ec55 4b10 	vmov	r4, r5, d0
   d7e42:	ee10 2a10 	vmov	r2, s0
   d7e46:	462b      	mov	r3, r5
   d7e48:	ee10 0a10 	vmov	r0, s0
   d7e4c:	4629      	mov	r1, r5
   d7e4e:	f7fe ff95 	bl	d6d7c <__aeabi_dcmpun>
   d7e52:	b120      	cbz	r0, d7e5e <strtof+0x2e>
   d7e54:	2000      	movs	r0, #0
   d7e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7e5a:	f001 babd 	b.w	d93d8 <nanf>
   d7e5e:	4620      	mov	r0, r4
   d7e60:	4629      	mov	r1, r5
   d7e62:	f7fe ffe9 	bl	d6e38 <__aeabi_d2f>
   d7e66:	ee00 0a10 	vmov	s0, r0
   d7e6a:	bd38      	pop	{r3, r4, r5, pc}
   d7e6c:	2003e27c 	.word	0x2003e27c

000d7e70 <_strtoul_r>:
   d7e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7e74:	4680      	mov	r8, r0
   d7e76:	483c      	ldr	r0, [pc, #240]	; (d7f68 <_strtoul_r+0xf8>)
   d7e78:	f8d0 9000 	ldr.w	r9, [r0]
   d7e7c:	460e      	mov	r6, r1
   d7e7e:	4635      	mov	r5, r6
   d7e80:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7e84:	eb09 0004 	add.w	r0, r9, r4
   d7e88:	7840      	ldrb	r0, [r0, #1]
   d7e8a:	f000 0008 	and.w	r0, r0, #8
   d7e8e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d7e92:	b108      	cbz	r0, d7e98 <_strtoul_r+0x28>
   d7e94:	462e      	mov	r6, r5
   d7e96:	e7f2      	b.n	d7e7e <_strtoul_r+0xe>
   d7e98:	2c2d      	cmp	r4, #45	; 0x2d
   d7e9a:	d103      	bne.n	d7ea4 <_strtoul_r+0x34>
   d7e9c:	1cb5      	adds	r5, r6, #2
   d7e9e:	7874      	ldrb	r4, [r6, #1]
   d7ea0:	2701      	movs	r7, #1
   d7ea2:	e003      	b.n	d7eac <_strtoul_r+0x3c>
   d7ea4:	2c2b      	cmp	r4, #43	; 0x2b
   d7ea6:	bf04      	itt	eq
   d7ea8:	7874      	ldrbeq	r4, [r6, #1]
   d7eaa:	1cb5      	addeq	r5, r6, #2
   d7eac:	b113      	cbz	r3, d7eb4 <_strtoul_r+0x44>
   d7eae:	2b10      	cmp	r3, #16
   d7eb0:	d10a      	bne.n	d7ec8 <_strtoul_r+0x58>
   d7eb2:	e053      	b.n	d7f5c <_strtoul_r+0xec>
   d7eb4:	2c30      	cmp	r4, #48	; 0x30
   d7eb6:	d14f      	bne.n	d7f58 <_strtoul_r+0xe8>
   d7eb8:	7828      	ldrb	r0, [r5, #0]
   d7eba:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7ebe:	2858      	cmp	r0, #88	; 0x58
   d7ec0:	d145      	bne.n	d7f4e <_strtoul_r+0xde>
   d7ec2:	786c      	ldrb	r4, [r5, #1]
   d7ec4:	2310      	movs	r3, #16
   d7ec6:	3502      	adds	r5, #2
   d7ec8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7ecc:	2600      	movs	r6, #0
   d7ece:	fbbc fcf3 	udiv	ip, ip, r3
   d7ed2:	fb03 fa0c 	mul.w	sl, r3, ip
   d7ed6:	ea6f 0a0a 	mvn.w	sl, sl
   d7eda:	4630      	mov	r0, r6
   d7edc:	eb09 0e04 	add.w	lr, r9, r4
   d7ee0:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7ee4:	f01e 0f04 	tst.w	lr, #4
   d7ee8:	d001      	beq.n	d7eee <_strtoul_r+0x7e>
   d7eea:	3c30      	subs	r4, #48	; 0x30
   d7eec:	e00b      	b.n	d7f06 <_strtoul_r+0x96>
   d7eee:	f01e 0e03 	ands.w	lr, lr, #3
   d7ef2:	d01a      	beq.n	d7f2a <_strtoul_r+0xba>
   d7ef4:	f1be 0f01 	cmp.w	lr, #1
   d7ef8:	bf0c      	ite	eq
   d7efa:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7efe:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7f02:	ebce 0404 	rsb	r4, lr, r4
   d7f06:	42a3      	cmp	r3, r4
   d7f08:	dd0f      	ble.n	d7f2a <_strtoul_r+0xba>
   d7f0a:	2e00      	cmp	r6, #0
   d7f0c:	db08      	blt.n	d7f20 <_strtoul_r+0xb0>
   d7f0e:	4560      	cmp	r0, ip
   d7f10:	d806      	bhi.n	d7f20 <_strtoul_r+0xb0>
   d7f12:	d101      	bne.n	d7f18 <_strtoul_r+0xa8>
   d7f14:	4554      	cmp	r4, sl
   d7f16:	dc03      	bgt.n	d7f20 <_strtoul_r+0xb0>
   d7f18:	fb03 4000 	mla	r0, r3, r0, r4
   d7f1c:	2601      	movs	r6, #1
   d7f1e:	e001      	b.n	d7f24 <_strtoul_r+0xb4>
   d7f20:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d7f24:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7f28:	e7d8      	b.n	d7edc <_strtoul_r+0x6c>
   d7f2a:	2e00      	cmp	r6, #0
   d7f2c:	da07      	bge.n	d7f3e <_strtoul_r+0xce>
   d7f2e:	2322      	movs	r3, #34	; 0x22
   d7f30:	f8c8 3000 	str.w	r3, [r8]
   d7f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7f38:	b92a      	cbnz	r2, d7f46 <_strtoul_r+0xd6>
   d7f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7f3e:	b107      	cbz	r7, d7f42 <_strtoul_r+0xd2>
   d7f40:	4240      	negs	r0, r0
   d7f42:	b172      	cbz	r2, d7f62 <_strtoul_r+0xf2>
   d7f44:	b106      	cbz	r6, d7f48 <_strtoul_r+0xd8>
   d7f46:	1e69      	subs	r1, r5, #1
   d7f48:	6011      	str	r1, [r2, #0]
   d7f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7f4e:	2430      	movs	r4, #48	; 0x30
   d7f50:	2b00      	cmp	r3, #0
   d7f52:	d1b9      	bne.n	d7ec8 <_strtoul_r+0x58>
   d7f54:	2308      	movs	r3, #8
   d7f56:	e7b7      	b.n	d7ec8 <_strtoul_r+0x58>
   d7f58:	230a      	movs	r3, #10
   d7f5a:	e7b5      	b.n	d7ec8 <_strtoul_r+0x58>
   d7f5c:	2c30      	cmp	r4, #48	; 0x30
   d7f5e:	d0ab      	beq.n	d7eb8 <_strtoul_r+0x48>
   d7f60:	e7b2      	b.n	d7ec8 <_strtoul_r+0x58>
   d7f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7f66:	bf00      	nop
   d7f68:	2003e218 	.word	0x2003e218

000d7f6c <strtoul>:
   d7f6c:	4613      	mov	r3, r2
   d7f6e:	460a      	mov	r2, r1
   d7f70:	4601      	mov	r1, r0
   d7f72:	4802      	ldr	r0, [pc, #8]	; (d7f7c <strtoul+0x10>)
   d7f74:	6800      	ldr	r0, [r0, #0]
   d7f76:	f7ff bf7b 	b.w	d7e70 <_strtoul_r>
   d7f7a:	bf00      	nop
   d7f7c:	2003e27c 	.word	0x2003e27c

000d7f80 <__tzcalc_limits>:
   d7f80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7f84:	4604      	mov	r4, r0
   d7f86:	f000 fd8d 	bl	d8aa4 <__gettzinfo>
   d7f8a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d7f8e:	429c      	cmp	r4, r3
   d7f90:	f340 8096 	ble.w	d80c0 <__tzcalc_limits+0x140>
   d7f94:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d7f98:	18e3      	adds	r3, r4, r3
   d7f9a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d7f9e:	109b      	asrs	r3, r3, #2
   d7fa0:	f240 156d 	movw	r5, #365	; 0x16d
   d7fa4:	fb05 3502 	mla	r5, r5, r2, r3
   d7fa8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d7fac:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d7fb0:	fb92 f3f3 	sdiv	r3, r2, r3
   d7fb4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d7fb8:	442b      	add	r3, r5
   d7fba:	18a5      	adds	r5, r4, r2
   d7fbc:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7fc0:	fb95 f5f2 	sdiv	r5, r5, r2
   d7fc4:	441d      	add	r5, r3
   d7fc6:	2364      	movs	r3, #100	; 0x64
   d7fc8:	fb94 f7f2 	sdiv	r7, r4, r2
   d7fcc:	fb94 f6f3 	sdiv	r6, r4, r3
   d7fd0:	fb02 4717 	mls	r7, r2, r7, r4
   d7fd4:	fb03 4616 	mls	r6, r3, r6, r4
   d7fd8:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d7fdc:	fab7 fe87 	clz	lr, r7
   d7fe0:	9301      	str	r3, [sp, #4]
   d7fe2:	f004 0303 	and.w	r3, r4, #3
   d7fe6:	6044      	str	r4, [r0, #4]
   d7fe8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d7fec:	4601      	mov	r1, r0
   d7fee:	9300      	str	r3, [sp, #0]
   d7ff0:	f04f 0c07 	mov.w	ip, #7
   d7ff4:	7a0b      	ldrb	r3, [r1, #8]
   d7ff6:	2b4a      	cmp	r3, #74	; 0x4a
   d7ff8:	d10e      	bne.n	d8018 <__tzcalc_limits+0x98>
   d7ffa:	694b      	ldr	r3, [r1, #20]
   d7ffc:	9a00      	ldr	r2, [sp, #0]
   d7ffe:	18ec      	adds	r4, r5, r3
   d8000:	b902      	cbnz	r2, d8004 <__tzcalc_limits+0x84>
   d8002:	b906      	cbnz	r6, d8006 <__tzcalc_limits+0x86>
   d8004:	b927      	cbnz	r7, d8010 <__tzcalc_limits+0x90>
   d8006:	2b3b      	cmp	r3, #59	; 0x3b
   d8008:	bfd4      	ite	le
   d800a:	2300      	movle	r3, #0
   d800c:	2301      	movgt	r3, #1
   d800e:	e000      	b.n	d8012 <__tzcalc_limits+0x92>
   d8010:	2300      	movs	r3, #0
   d8012:	4423      	add	r3, r4
   d8014:	3b01      	subs	r3, #1
   d8016:	e03f      	b.n	d8098 <__tzcalc_limits+0x118>
   d8018:	2b44      	cmp	r3, #68	; 0x44
   d801a:	d102      	bne.n	d8022 <__tzcalc_limits+0xa2>
   d801c:	694b      	ldr	r3, [r1, #20]
   d801e:	442b      	add	r3, r5
   d8020:	e03a      	b.n	d8098 <__tzcalc_limits+0x118>
   d8022:	9b00      	ldr	r3, [sp, #0]
   d8024:	b92b      	cbnz	r3, d8032 <__tzcalc_limits+0xb2>
   d8026:	2e00      	cmp	r6, #0
   d8028:	bf0c      	ite	eq
   d802a:	46f0      	moveq	r8, lr
   d802c:	f04f 0801 	movne.w	r8, #1
   d8030:	e000      	b.n	d8034 <__tzcalc_limits+0xb4>
   d8032:	46f0      	mov	r8, lr
   d8034:	4b24      	ldr	r3, [pc, #144]	; (d80c8 <__tzcalc_limits+0x148>)
   d8036:	68cc      	ldr	r4, [r1, #12]
   d8038:	2230      	movs	r2, #48	; 0x30
   d803a:	fb02 3808 	mla	r8, r2, r8, r3
   d803e:	f1a8 0a04 	sub.w	sl, r8, #4
   d8042:	46a9      	mov	r9, r5
   d8044:	2301      	movs	r3, #1
   d8046:	42a3      	cmp	r3, r4
   d8048:	da04      	bge.n	d8054 <__tzcalc_limits+0xd4>
   d804a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d804e:	3301      	adds	r3, #1
   d8050:	44d9      	add	r9, fp
   d8052:	e7f8      	b.n	d8046 <__tzcalc_limits+0xc6>
   d8054:	f109 0304 	add.w	r3, r9, #4
   d8058:	fb93 fbfc 	sdiv	fp, r3, ip
   d805c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d8060:	2c01      	cmp	r4, #1
   d8062:	ebca 0a03 	rsb	sl, sl, r3
   d8066:	694b      	ldr	r3, [r1, #20]
   d8068:	bfb8      	it	lt
   d806a:	2401      	movlt	r4, #1
   d806c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d8070:	ebb3 0a0a 	subs.w	sl, r3, sl
   d8074:	690b      	ldr	r3, [r1, #16]
   d8076:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d807a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d807e:	bf48      	it	mi
   d8080:	f10a 0a07 	addmi.w	sl, sl, #7
   d8084:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d8088:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d808c:	4453      	add	r3, sl
   d808e:	42a3      	cmp	r3, r4
   d8090:	db01      	blt.n	d8096 <__tzcalc_limits+0x116>
   d8092:	3b07      	subs	r3, #7
   d8094:	e7fb      	b.n	d808e <__tzcalc_limits+0x10e>
   d8096:	444b      	add	r3, r9
   d8098:	698c      	ldr	r4, [r1, #24]
   d809a:	4a0c      	ldr	r2, [pc, #48]	; (d80cc <__tzcalc_limits+0x14c>)
   d809c:	fb02 4303 	mla	r3, r2, r3, r4
   d80a0:	6a0c      	ldr	r4, [r1, #32]
   d80a2:	4423      	add	r3, r4
   d80a4:	f841 3f1c 	str.w	r3, [r1, #28]!
   d80a8:	9b01      	ldr	r3, [sp, #4]
   d80aa:	4299      	cmp	r1, r3
   d80ac:	d1a2      	bne.n	d7ff4 <__tzcalc_limits+0x74>
   d80ae:	69c3      	ldr	r3, [r0, #28]
   d80b0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d80b2:	4293      	cmp	r3, r2
   d80b4:	bfac      	ite	ge
   d80b6:	2300      	movge	r3, #0
   d80b8:	2301      	movlt	r3, #1
   d80ba:	6003      	str	r3, [r0, #0]
   d80bc:	2001      	movs	r0, #1
   d80be:	e000      	b.n	d80c2 <__tzcalc_limits+0x142>
   d80c0:	2000      	movs	r0, #0
   d80c2:	b003      	add	sp, #12
   d80c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d80c8:	000d9990 	.word	0x000d9990
   d80cc:	00015180 	.word	0x00015180

000d80d0 <__tz_lock>:
   d80d0:	4770      	bx	lr

000d80d2 <__tz_unlock>:
   d80d2:	4770      	bx	lr

000d80d4 <_tzset_unlocked>:
   d80d4:	4b01      	ldr	r3, [pc, #4]	; (d80dc <_tzset_unlocked+0x8>)
   d80d6:	6818      	ldr	r0, [r3, #0]
   d80d8:	f000 b802 	b.w	d80e0 <_tzset_unlocked_r>
   d80dc:	2003e27c 	.word	0x2003e27c

000d80e0 <_tzset_unlocked_r>:
   d80e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d80e4:	b08d      	sub	sp, #52	; 0x34
   d80e6:	4607      	mov	r7, r0
   d80e8:	f000 fcdc 	bl	d8aa4 <__gettzinfo>
   d80ec:	49b0      	ldr	r1, [pc, #704]	; (d83b0 <_tzset_unlocked_r+0x2d0>)
   d80ee:	4eb1      	ldr	r6, [pc, #708]	; (d83b4 <_tzset_unlocked_r+0x2d4>)
   d80f0:	4604      	mov	r4, r0
   d80f2:	4638      	mov	r0, r7
   d80f4:	f000 fcce 	bl	d8a94 <_getenv_r>
   d80f8:	4605      	mov	r5, r0
   d80fa:	b960      	cbnz	r0, d8116 <_tzset_unlocked_r+0x36>
   d80fc:	4bae      	ldr	r3, [pc, #696]	; (d83b8 <_tzset_unlocked_r+0x2d8>)
   d80fe:	4aaf      	ldr	r2, [pc, #700]	; (d83bc <_tzset_unlocked_r+0x2dc>)
   d8100:	6018      	str	r0, [r3, #0]
   d8102:	4baf      	ldr	r3, [pc, #700]	; (d83c0 <_tzset_unlocked_r+0x2e0>)
   d8104:	6018      	str	r0, [r3, #0]
   d8106:	4baf      	ldr	r3, [pc, #700]	; (d83c4 <_tzset_unlocked_r+0x2e4>)
   d8108:	6830      	ldr	r0, [r6, #0]
   d810a:	601a      	str	r2, [r3, #0]
   d810c:	605a      	str	r2, [r3, #4]
   d810e:	f7fc fe25 	bl	d4d5c <free>
   d8112:	6035      	str	r5, [r6, #0]
   d8114:	e148      	b.n	d83a8 <_tzset_unlocked_r+0x2c8>
   d8116:	6831      	ldr	r1, [r6, #0]
   d8118:	b979      	cbnz	r1, d813a <_tzset_unlocked_r+0x5a>
   d811a:	6830      	ldr	r0, [r6, #0]
   d811c:	f7fc fe1e 	bl	d4d5c <free>
   d8120:	4628      	mov	r0, r5
   d8122:	f7ff f84c 	bl	d71be <strlen>
   d8126:	1c41      	adds	r1, r0, #1
   d8128:	4638      	mov	r0, r7
   d812a:	f7fc fe3f 	bl	d4dac <_malloc_r>
   d812e:	6030      	str	r0, [r6, #0]
   d8130:	b148      	cbz	r0, d8146 <_tzset_unlocked_r+0x66>
   d8132:	4629      	mov	r1, r5
   d8134:	f7ff f820 	bl	d7178 <strcpy>
   d8138:	e005      	b.n	d8146 <_tzset_unlocked_r+0x66>
   d813a:	f7ff f813 	bl	d7164 <strcmp>
   d813e:	2800      	cmp	r0, #0
   d8140:	f000 8132 	beq.w	d83a8 <_tzset_unlocked_r+0x2c8>
   d8144:	e7e9      	b.n	d811a <_tzset_unlocked_r+0x3a>
   d8146:	782b      	ldrb	r3, [r5, #0]
   d8148:	4a9f      	ldr	r2, [pc, #636]	; (d83c8 <_tzset_unlocked_r+0x2e8>)
   d814a:	49a0      	ldr	r1, [pc, #640]	; (d83cc <_tzset_unlocked_r+0x2ec>)
   d814c:	2b3a      	cmp	r3, #58	; 0x3a
   d814e:	bf08      	it	eq
   d8150:	3501      	addeq	r5, #1
   d8152:	ae0a      	add	r6, sp, #40	; 0x28
   d8154:	4633      	mov	r3, r6
   d8156:	4628      	mov	r0, r5
   d8158:	f7fc fe10 	bl	d4d7c <siscanf>
   d815c:	2800      	cmp	r0, #0
   d815e:	f340 8123 	ble.w	d83a8 <_tzset_unlocked_r+0x2c8>
   d8162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8164:	18ef      	adds	r7, r5, r3
   d8166:	5ceb      	ldrb	r3, [r5, r3]
   d8168:	2b2d      	cmp	r3, #45	; 0x2d
   d816a:	d103      	bne.n	d8174 <_tzset_unlocked_r+0x94>
   d816c:	3701      	adds	r7, #1
   d816e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d8172:	e003      	b.n	d817c <_tzset_unlocked_r+0x9c>
   d8174:	2b2b      	cmp	r3, #43	; 0x2b
   d8176:	bf08      	it	eq
   d8178:	3701      	addeq	r7, #1
   d817a:	2501      	movs	r5, #1
   d817c:	f10d 0a20 	add.w	sl, sp, #32
   d8180:	f10d 0b1e 	add.w	fp, sp, #30
   d8184:	f04f 0800 	mov.w	r8, #0
   d8188:	9603      	str	r6, [sp, #12]
   d818a:	f8cd a008 	str.w	sl, [sp, #8]
   d818e:	9601      	str	r6, [sp, #4]
   d8190:	f8cd b000 	str.w	fp, [sp]
   d8194:	4633      	mov	r3, r6
   d8196:	aa07      	add	r2, sp, #28
   d8198:	498d      	ldr	r1, [pc, #564]	; (d83d0 <_tzset_unlocked_r+0x2f0>)
   d819a:	f8ad 801e 	strh.w	r8, [sp, #30]
   d819e:	4638      	mov	r0, r7
   d81a0:	f8ad 8020 	strh.w	r8, [sp, #32]
   d81a4:	f7fc fdea 	bl	d4d7c <siscanf>
   d81a8:	4540      	cmp	r0, r8
   d81aa:	f340 80fd 	ble.w	d83a8 <_tzset_unlocked_r+0x2c8>
   d81ae:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d81b2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d81b6:	f8df 9224 	ldr.w	r9, [pc, #548]	; d83dc <_tzset_unlocked_r+0x2fc>
   d81ba:	213c      	movs	r1, #60	; 0x3c
   d81bc:	fb01 3302 	mla	r3, r1, r2, r3
   d81c0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d81c4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d81c8:	fb01 3302 	mla	r3, r1, r2, r3
   d81cc:	435d      	muls	r5, r3
   d81ce:	6225      	str	r5, [r4, #32]
   d81d0:	4d7c      	ldr	r5, [pc, #496]	; (d83c4 <_tzset_unlocked_r+0x2e4>)
   d81d2:	4b7d      	ldr	r3, [pc, #500]	; (d83c8 <_tzset_unlocked_r+0x2e8>)
   d81d4:	602b      	str	r3, [r5, #0]
   d81d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d81d8:	497c      	ldr	r1, [pc, #496]	; (d83cc <_tzset_unlocked_r+0x2ec>)
   d81da:	441f      	add	r7, r3
   d81dc:	464a      	mov	r2, r9
   d81de:	4633      	mov	r3, r6
   d81e0:	4638      	mov	r0, r7
   d81e2:	f7fc fdcb 	bl	d4d7c <siscanf>
   d81e6:	4540      	cmp	r0, r8
   d81e8:	dc08      	bgt.n	d81fc <_tzset_unlocked_r+0x11c>
   d81ea:	682b      	ldr	r3, [r5, #0]
   d81ec:	606b      	str	r3, [r5, #4]
   d81ee:	4b72      	ldr	r3, [pc, #456]	; (d83b8 <_tzset_unlocked_r+0x2d8>)
   d81f0:	6a22      	ldr	r2, [r4, #32]
   d81f2:	601a      	str	r2, [r3, #0]
   d81f4:	4b72      	ldr	r3, [pc, #456]	; (d83c0 <_tzset_unlocked_r+0x2e0>)
   d81f6:	f8c3 8000 	str.w	r8, [r3]
   d81fa:	e0d5      	b.n	d83a8 <_tzset_unlocked_r+0x2c8>
   d81fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d81fe:	f8c5 9004 	str.w	r9, [r5, #4]
   d8202:	18fd      	adds	r5, r7, r3
   d8204:	5cfb      	ldrb	r3, [r7, r3]
   d8206:	2b2d      	cmp	r3, #45	; 0x2d
   d8208:	d103      	bne.n	d8212 <_tzset_unlocked_r+0x132>
   d820a:	3501      	adds	r5, #1
   d820c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8210:	e003      	b.n	d821a <_tzset_unlocked_r+0x13a>
   d8212:	2b2b      	cmp	r3, #43	; 0x2b
   d8214:	bf08      	it	eq
   d8216:	3501      	addeq	r5, #1
   d8218:	2701      	movs	r7, #1
   d821a:	2300      	movs	r3, #0
   d821c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8220:	f8ad 301e 	strh.w	r3, [sp, #30]
   d8224:	f8ad 3020 	strh.w	r3, [sp, #32]
   d8228:	930a      	str	r3, [sp, #40]	; 0x28
   d822a:	9603      	str	r6, [sp, #12]
   d822c:	f8cd a008 	str.w	sl, [sp, #8]
   d8230:	9601      	str	r6, [sp, #4]
   d8232:	f8cd b000 	str.w	fp, [sp]
   d8236:	4633      	mov	r3, r6
   d8238:	aa07      	add	r2, sp, #28
   d823a:	4965      	ldr	r1, [pc, #404]	; (d83d0 <_tzset_unlocked_r+0x2f0>)
   d823c:	4628      	mov	r0, r5
   d823e:	f7fc fd9d 	bl	d4d7c <siscanf>
   d8242:	2800      	cmp	r0, #0
   d8244:	dc04      	bgt.n	d8250 <_tzset_unlocked_r+0x170>
   d8246:	6a23      	ldr	r3, [r4, #32]
   d8248:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d824c:	63e3      	str	r3, [r4, #60]	; 0x3c
   d824e:	e00e      	b.n	d826e <_tzset_unlocked_r+0x18e>
   d8250:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8254:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8258:	213c      	movs	r1, #60	; 0x3c
   d825a:	fb01 3302 	mla	r3, r1, r2, r3
   d825e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8262:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8266:	fb01 3302 	mla	r3, r1, r2, r3
   d826a:	435f      	muls	r7, r3
   d826c:	63e7      	str	r7, [r4, #60]	; 0x3c
   d826e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8270:	4627      	mov	r7, r4
   d8272:	441d      	add	r5, r3
   d8274:	f04f 0900 	mov.w	r9, #0
   d8278:	782b      	ldrb	r3, [r5, #0]
   d827a:	2b2c      	cmp	r3, #44	; 0x2c
   d827c:	bf08      	it	eq
   d827e:	3501      	addeq	r5, #1
   d8280:	f895 8000 	ldrb.w	r8, [r5]
   d8284:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d8288:	d126      	bne.n	d82d8 <_tzset_unlocked_r+0x1f8>
   d828a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d828e:	9302      	str	r3, [sp, #8]
   d8290:	ab09      	add	r3, sp, #36	; 0x24
   d8292:	9300      	str	r3, [sp, #0]
   d8294:	9603      	str	r6, [sp, #12]
   d8296:	9601      	str	r6, [sp, #4]
   d8298:	4633      	mov	r3, r6
   d829a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d829e:	494d      	ldr	r1, [pc, #308]	; (d83d4 <_tzset_unlocked_r+0x2f4>)
   d82a0:	4628      	mov	r0, r5
   d82a2:	f7fc fd6b 	bl	d4d7c <siscanf>
   d82a6:	2803      	cmp	r0, #3
   d82a8:	d17e      	bne.n	d83a8 <_tzset_unlocked_r+0x2c8>
   d82aa:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d82ae:	1e4b      	subs	r3, r1, #1
   d82b0:	2b0b      	cmp	r3, #11
   d82b2:	d879      	bhi.n	d83a8 <_tzset_unlocked_r+0x2c8>
   d82b4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d82b8:	1e53      	subs	r3, r2, #1
   d82ba:	2b04      	cmp	r3, #4
   d82bc:	d874      	bhi.n	d83a8 <_tzset_unlocked_r+0x2c8>
   d82be:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d82c2:	2b06      	cmp	r3, #6
   d82c4:	d870      	bhi.n	d83a8 <_tzset_unlocked_r+0x2c8>
   d82c6:	f887 8008 	strb.w	r8, [r7, #8]
   d82ca:	60f9      	str	r1, [r7, #12]
   d82cc:	613a      	str	r2, [r7, #16]
   d82ce:	617b      	str	r3, [r7, #20]
   d82d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d82d2:	eb05 0803 	add.w	r8, r5, r3
   d82d6:	e02a      	b.n	d832e <_tzset_unlocked_r+0x24e>
   d82d8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d82dc:	bf06      	itte	eq
   d82de:	3501      	addeq	r5, #1
   d82e0:	4643      	moveq	r3, r8
   d82e2:	2344      	movne	r3, #68	; 0x44
   d82e4:	220a      	movs	r2, #10
   d82e6:	a90b      	add	r1, sp, #44	; 0x2c
   d82e8:	4628      	mov	r0, r5
   d82ea:	9305      	str	r3, [sp, #20]
   d82ec:	f7ff fe3e 	bl	d7f6c <strtoul>
   d82f0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d82f4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d82f8:	4545      	cmp	r5, r8
   d82fa:	9b05      	ldr	r3, [sp, #20]
   d82fc:	d114      	bne.n	d8328 <_tzset_unlocked_r+0x248>
   d82fe:	234d      	movs	r3, #77	; 0x4d
   d8300:	f1b9 0f00 	cmp.w	r9, #0
   d8304:	d107      	bne.n	d8316 <_tzset_unlocked_r+0x236>
   d8306:	7223      	strb	r3, [r4, #8]
   d8308:	2303      	movs	r3, #3
   d830a:	60e3      	str	r3, [r4, #12]
   d830c:	2302      	movs	r3, #2
   d830e:	6123      	str	r3, [r4, #16]
   d8310:	f8c4 9014 	str.w	r9, [r4, #20]
   d8314:	e00b      	b.n	d832e <_tzset_unlocked_r+0x24e>
   d8316:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d831a:	230b      	movs	r3, #11
   d831c:	62a3      	str	r3, [r4, #40]	; 0x28
   d831e:	2301      	movs	r3, #1
   d8320:	62e3      	str	r3, [r4, #44]	; 0x2c
   d8322:	2300      	movs	r3, #0
   d8324:	6323      	str	r3, [r4, #48]	; 0x30
   d8326:	e002      	b.n	d832e <_tzset_unlocked_r+0x24e>
   d8328:	b280      	uxth	r0, r0
   d832a:	723b      	strb	r3, [r7, #8]
   d832c:	6178      	str	r0, [r7, #20]
   d832e:	2302      	movs	r3, #2
   d8330:	f8ad 301c 	strh.w	r3, [sp, #28]
   d8334:	2300      	movs	r3, #0
   d8336:	f8ad 301e 	strh.w	r3, [sp, #30]
   d833a:	f8ad 3020 	strh.w	r3, [sp, #32]
   d833e:	930a      	str	r3, [sp, #40]	; 0x28
   d8340:	f898 3000 	ldrb.w	r3, [r8]
   d8344:	2b2f      	cmp	r3, #47	; 0x2f
   d8346:	d10b      	bne.n	d8360 <_tzset_unlocked_r+0x280>
   d8348:	9603      	str	r6, [sp, #12]
   d834a:	f8cd a008 	str.w	sl, [sp, #8]
   d834e:	9601      	str	r6, [sp, #4]
   d8350:	f8cd b000 	str.w	fp, [sp]
   d8354:	4633      	mov	r3, r6
   d8356:	aa07      	add	r2, sp, #28
   d8358:	491f      	ldr	r1, [pc, #124]	; (d83d8 <_tzset_unlocked_r+0x2f8>)
   d835a:	4640      	mov	r0, r8
   d835c:	f7fc fd0e 	bl	d4d7c <siscanf>
   d8360:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d8364:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d8368:	213c      	movs	r1, #60	; 0x3c
   d836a:	fb01 3302 	mla	r3, r1, r2, r3
   d836e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d8372:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d8376:	fb01 3302 	mla	r3, r1, r2, r3
   d837a:	61bb      	str	r3, [r7, #24]
   d837c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d837e:	f109 0901 	add.w	r9, r9, #1
   d8382:	f1b9 0f02 	cmp.w	r9, #2
   d8386:	4445      	add	r5, r8
   d8388:	f107 071c 	add.w	r7, r7, #28
   d838c:	f47f af74 	bne.w	d8278 <_tzset_unlocked_r+0x198>
   d8390:	6860      	ldr	r0, [r4, #4]
   d8392:	f7ff fdf5 	bl	d7f80 <__tzcalc_limits>
   d8396:	4b08      	ldr	r3, [pc, #32]	; (d83b8 <_tzset_unlocked_r+0x2d8>)
   d8398:	6a22      	ldr	r2, [r4, #32]
   d839a:	601a      	str	r2, [r3, #0]
   d839c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d839e:	1a9b      	subs	r3, r3, r2
   d83a0:	4a07      	ldr	r2, [pc, #28]	; (d83c0 <_tzset_unlocked_r+0x2e0>)
   d83a2:	bf18      	it	ne
   d83a4:	2301      	movne	r3, #1
   d83a6:	6013      	str	r3, [r2, #0]
   d83a8:	b00d      	add	sp, #52	; 0x34
   d83aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d83ae:	bf00      	nop
   d83b0:	000d9a50 	.word	0x000d9a50
   d83b4:	2003e7e0 	.word	0x2003e7e0
   d83b8:	2003e7e8 	.word	0x2003e7e8
   d83bc:	000d9a53 	.word	0x000d9a53
   d83c0:	2003e7e4 	.word	0x2003e7e4
   d83c4:	2003e2b8 	.word	0x2003e2b8
   d83c8:	2003e7d3 	.word	0x2003e7d3
   d83cc:	000d9a57 	.word	0x000d9a57
   d83d0:	000d9a7a 	.word	0x000d9a7a
   d83d4:	000d9a66 	.word	0x000d9a66
   d83d8:	000d9a79 	.word	0x000d9a79
   d83dc:	2003e7c8 	.word	0x2003e7c8

000d83e0 <rshift>:
   d83e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d83e2:	6906      	ldr	r6, [r0, #16]
   d83e4:	114b      	asrs	r3, r1, #5
   d83e6:	42b3      	cmp	r3, r6
   d83e8:	f100 0514 	add.w	r5, r0, #20
   d83ec:	da27      	bge.n	d843e <rshift+0x5e>
   d83ee:	f011 011f 	ands.w	r1, r1, #31
   d83f2:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   d83f6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   d83fa:	d101      	bne.n	d8400 <rshift+0x20>
   d83fc:	4629      	mov	r1, r5
   d83fe:	e016      	b.n	d842e <rshift+0x4e>
   d8400:	1d14      	adds	r4, r2, #4
   d8402:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   d8406:	f1c1 0e20 	rsb	lr, r1, #32
   d840a:	40ca      	lsrs	r2, r1
   d840c:	462b      	mov	r3, r5
   d840e:	42b4      	cmp	r4, r6
   d8410:	d209      	bcs.n	d8426 <rshift+0x46>
   d8412:	6827      	ldr	r7, [r4, #0]
   d8414:	fa07 f70e 	lsl.w	r7, r7, lr
   d8418:	433a      	orrs	r2, r7
   d841a:	f843 2b04 	str.w	r2, [r3], #4
   d841e:	f854 2b04 	ldr.w	r2, [r4], #4
   d8422:	40ca      	lsrs	r2, r1
   d8424:	e7f3      	b.n	d840e <rshift+0x2e>
   d8426:	601a      	str	r2, [r3, #0]
   d8428:	b152      	cbz	r2, d8440 <rshift+0x60>
   d842a:	3304      	adds	r3, #4
   d842c:	e008      	b.n	d8440 <rshift+0x60>
   d842e:	42b2      	cmp	r2, r6
   d8430:	460b      	mov	r3, r1
   d8432:	d205      	bcs.n	d8440 <rshift+0x60>
   d8434:	f852 3b04 	ldr.w	r3, [r2], #4
   d8438:	f841 3b04 	str.w	r3, [r1], #4
   d843c:	e7f7      	b.n	d842e <rshift+0x4e>
   d843e:	462b      	mov	r3, r5
   d8440:	1b5b      	subs	r3, r3, r5
   d8442:	109b      	asrs	r3, r3, #2
   d8444:	6103      	str	r3, [r0, #16]
   d8446:	b903      	cbnz	r3, d844a <rshift+0x6a>
   d8448:	6143      	str	r3, [r0, #20]
   d844a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d844c <__hexdig_fun>:
   d844c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8450:	2b09      	cmp	r3, #9
   d8452:	d801      	bhi.n	d8458 <__hexdig_fun+0xc>
   d8454:	3820      	subs	r0, #32
   d8456:	e00a      	b.n	d846e <__hexdig_fun+0x22>
   d8458:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d845c:	2b05      	cmp	r3, #5
   d845e:	d801      	bhi.n	d8464 <__hexdig_fun+0x18>
   d8460:	3847      	subs	r0, #71	; 0x47
   d8462:	e004      	b.n	d846e <__hexdig_fun+0x22>
   d8464:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d8468:	2b05      	cmp	r3, #5
   d846a:	d802      	bhi.n	d8472 <__hexdig_fun+0x26>
   d846c:	3827      	subs	r0, #39	; 0x27
   d846e:	b2c0      	uxtb	r0, r0
   d8470:	4770      	bx	lr
   d8472:	2000      	movs	r0, #0
   d8474:	4770      	bx	lr

000d8476 <__gethex>:
   d8476:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d847a:	b08b      	sub	sp, #44	; 0x2c
   d847c:	468a      	mov	sl, r1
   d847e:	4690      	mov	r8, r2
   d8480:	9306      	str	r3, [sp, #24]
   d8482:	9002      	str	r0, [sp, #8]
   d8484:	f7fe fe2e 	bl	d70e4 <_localeconv_r>
   d8488:	6803      	ldr	r3, [r0, #0]
   d848a:	9303      	str	r3, [sp, #12]
   d848c:	4618      	mov	r0, r3
   d848e:	f7fe fe96 	bl	d71be <strlen>
   d8492:	9b03      	ldr	r3, [sp, #12]
   d8494:	9001      	str	r0, [sp, #4]
   d8496:	4403      	add	r3, r0
   d8498:	f04f 0b00 	mov.w	fp, #0
   d849c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d84a0:	9307      	str	r3, [sp, #28]
   d84a2:	f8da 3000 	ldr.w	r3, [sl]
   d84a6:	3302      	adds	r3, #2
   d84a8:	461f      	mov	r7, r3
   d84aa:	f813 0b01 	ldrb.w	r0, [r3], #1
   d84ae:	2830      	cmp	r0, #48	; 0x30
   d84b0:	d102      	bne.n	d84b8 <__gethex+0x42>
   d84b2:	f10b 0b01 	add.w	fp, fp, #1
   d84b6:	e7f7      	b.n	d84a8 <__gethex+0x32>
   d84b8:	f7ff ffc8 	bl	d844c <__hexdig_fun>
   d84bc:	4604      	mov	r4, r0
   d84be:	b9e0      	cbnz	r0, d84fa <__gethex+0x84>
   d84c0:	9a01      	ldr	r2, [sp, #4]
   d84c2:	9903      	ldr	r1, [sp, #12]
   d84c4:	4638      	mov	r0, r7
   d84c6:	f7fe fe82 	bl	d71ce <strncmp>
   d84ca:	2800      	cmp	r0, #0
   d84cc:	d134      	bne.n	d8538 <__gethex+0xc2>
   d84ce:	9b01      	ldr	r3, [sp, #4]
   d84d0:	5cf8      	ldrb	r0, [r7, r3]
   d84d2:	18fe      	adds	r6, r7, r3
   d84d4:	f7ff ffba 	bl	d844c <__hexdig_fun>
   d84d8:	b380      	cbz	r0, d853c <__gethex+0xc6>
   d84da:	4633      	mov	r3, r6
   d84dc:	7818      	ldrb	r0, [r3, #0]
   d84de:	2830      	cmp	r0, #48	; 0x30
   d84e0:	461f      	mov	r7, r3
   d84e2:	f103 0301 	add.w	r3, r3, #1
   d84e6:	d0f9      	beq.n	d84dc <__gethex+0x66>
   d84e8:	f7ff ffb0 	bl	d844c <__hexdig_fun>
   d84ec:	fab0 f580 	clz	r5, r0
   d84f0:	096d      	lsrs	r5, r5, #5
   d84f2:	4634      	mov	r4, r6
   d84f4:	f04f 0b01 	mov.w	fp, #1
   d84f8:	e001      	b.n	d84fe <__gethex+0x88>
   d84fa:	2500      	movs	r5, #0
   d84fc:	462c      	mov	r4, r5
   d84fe:	463a      	mov	r2, r7
   d8500:	4616      	mov	r6, r2
   d8502:	3201      	adds	r2, #1
   d8504:	7830      	ldrb	r0, [r6, #0]
   d8506:	f7ff ffa1 	bl	d844c <__hexdig_fun>
   d850a:	2800      	cmp	r0, #0
   d850c:	d1f8      	bne.n	d8500 <__gethex+0x8a>
   d850e:	9a01      	ldr	r2, [sp, #4]
   d8510:	9903      	ldr	r1, [sp, #12]
   d8512:	4630      	mov	r0, r6
   d8514:	f7fe fe5b 	bl	d71ce <strncmp>
   d8518:	b950      	cbnz	r0, d8530 <__gethex+0xba>
   d851a:	b954      	cbnz	r4, d8532 <__gethex+0xbc>
   d851c:	9b01      	ldr	r3, [sp, #4]
   d851e:	18f4      	adds	r4, r6, r3
   d8520:	4622      	mov	r2, r4
   d8522:	4616      	mov	r6, r2
   d8524:	3201      	adds	r2, #1
   d8526:	7830      	ldrb	r0, [r6, #0]
   d8528:	f7ff ff90 	bl	d844c <__hexdig_fun>
   d852c:	2800      	cmp	r0, #0
   d852e:	d1f8      	bne.n	d8522 <__gethex+0xac>
   d8530:	b134      	cbz	r4, d8540 <__gethex+0xca>
   d8532:	1ba4      	subs	r4, r4, r6
   d8534:	00a4      	lsls	r4, r4, #2
   d8536:	e003      	b.n	d8540 <__gethex+0xca>
   d8538:	463e      	mov	r6, r7
   d853a:	e000      	b.n	d853e <__gethex+0xc8>
   d853c:	4604      	mov	r4, r0
   d853e:	2501      	movs	r5, #1
   d8540:	7833      	ldrb	r3, [r6, #0]
   d8542:	2b50      	cmp	r3, #80	; 0x50
   d8544:	d001      	beq.n	d854a <__gethex+0xd4>
   d8546:	2b70      	cmp	r3, #112	; 0x70
   d8548:	d12a      	bne.n	d85a0 <__gethex+0x12a>
   d854a:	7873      	ldrb	r3, [r6, #1]
   d854c:	2b2b      	cmp	r3, #43	; 0x2b
   d854e:	d008      	beq.n	d8562 <__gethex+0xec>
   d8550:	2b2d      	cmp	r3, #45	; 0x2d
   d8552:	d003      	beq.n	d855c <__gethex+0xe6>
   d8554:	1c71      	adds	r1, r6, #1
   d8556:	f04f 0900 	mov.w	r9, #0
   d855a:	e005      	b.n	d8568 <__gethex+0xf2>
   d855c:	f04f 0901 	mov.w	r9, #1
   d8560:	e001      	b.n	d8566 <__gethex+0xf0>
   d8562:	f04f 0900 	mov.w	r9, #0
   d8566:	1cb1      	adds	r1, r6, #2
   d8568:	7808      	ldrb	r0, [r1, #0]
   d856a:	f7ff ff6f 	bl	d844c <__hexdig_fun>
   d856e:	1e43      	subs	r3, r0, #1
   d8570:	b2db      	uxtb	r3, r3
   d8572:	2b18      	cmp	r3, #24
   d8574:	d814      	bhi.n	d85a0 <__gethex+0x12a>
   d8576:	f1a0 0210 	sub.w	r2, r0, #16
   d857a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d857e:	f7ff ff65 	bl	d844c <__hexdig_fun>
   d8582:	1e43      	subs	r3, r0, #1
   d8584:	b2db      	uxtb	r3, r3
   d8586:	2b18      	cmp	r3, #24
   d8588:	d804      	bhi.n	d8594 <__gethex+0x11e>
   d858a:	230a      	movs	r3, #10
   d858c:	fb03 0202 	mla	r2, r3, r2, r0
   d8590:	3a10      	subs	r2, #16
   d8592:	e7f2      	b.n	d857a <__gethex+0x104>
   d8594:	f1b9 0f00 	cmp.w	r9, #0
   d8598:	d000      	beq.n	d859c <__gethex+0x126>
   d859a:	4252      	negs	r2, r2
   d859c:	4414      	add	r4, r2
   d859e:	e000      	b.n	d85a2 <__gethex+0x12c>
   d85a0:	4631      	mov	r1, r6
   d85a2:	f8ca 1000 	str.w	r1, [sl]
   d85a6:	b12d      	cbz	r5, d85b4 <__gethex+0x13e>
   d85a8:	f1bb 0f00 	cmp.w	fp, #0
   d85ac:	bf14      	ite	ne
   d85ae:	2000      	movne	r0, #0
   d85b0:	2006      	moveq	r0, #6
   d85b2:	e17c      	b.n	d88ae <__gethex+0x438>
   d85b4:	1bf3      	subs	r3, r6, r7
   d85b6:	3b01      	subs	r3, #1
   d85b8:	4629      	mov	r1, r5
   d85ba:	2b07      	cmp	r3, #7
   d85bc:	dd02      	ble.n	d85c4 <__gethex+0x14e>
   d85be:	3101      	adds	r1, #1
   d85c0:	105b      	asrs	r3, r3, #1
   d85c2:	e7fa      	b.n	d85ba <__gethex+0x144>
   d85c4:	9802      	ldr	r0, [sp, #8]
   d85c6:	f000 fb09 	bl	d8bdc <_Balloc>
   d85ca:	9b01      	ldr	r3, [sp, #4]
   d85cc:	f100 0a14 	add.w	sl, r0, #20
   d85d0:	f04f 0900 	mov.w	r9, #0
   d85d4:	f1c3 0301 	rsb	r3, r3, #1
   d85d8:	4605      	mov	r5, r0
   d85da:	f8cd a010 	str.w	sl, [sp, #16]
   d85de:	46cb      	mov	fp, r9
   d85e0:	9308      	str	r3, [sp, #32]
   d85e2:	42b7      	cmp	r7, r6
   d85e4:	d22f      	bcs.n	d8646 <__gethex+0x1d0>
   d85e6:	1e73      	subs	r3, r6, #1
   d85e8:	9305      	str	r3, [sp, #20]
   d85ea:	9a07      	ldr	r2, [sp, #28]
   d85ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d85f0:	4293      	cmp	r3, r2
   d85f2:	d00b      	beq.n	d860c <__gethex+0x196>
   d85f4:	f1bb 0f20 	cmp.w	fp, #32
   d85f8:	d116      	bne.n	d8628 <__gethex+0x1b2>
   d85fa:	9b04      	ldr	r3, [sp, #16]
   d85fc:	f8c3 9000 	str.w	r9, [r3]
   d8600:	3304      	adds	r3, #4
   d8602:	f04f 0900 	mov.w	r9, #0
   d8606:	9304      	str	r3, [sp, #16]
   d8608:	46cb      	mov	fp, r9
   d860a:	e00d      	b.n	d8628 <__gethex+0x1b2>
   d860c:	9b05      	ldr	r3, [sp, #20]
   d860e:	9a08      	ldr	r2, [sp, #32]
   d8610:	4413      	add	r3, r2
   d8612:	429f      	cmp	r7, r3
   d8614:	d8ee      	bhi.n	d85f4 <__gethex+0x17e>
   d8616:	4618      	mov	r0, r3
   d8618:	9a01      	ldr	r2, [sp, #4]
   d861a:	9903      	ldr	r1, [sp, #12]
   d861c:	9309      	str	r3, [sp, #36]	; 0x24
   d861e:	f7fe fdd6 	bl	d71ce <strncmp>
   d8622:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8624:	b168      	cbz	r0, d8642 <__gethex+0x1cc>
   d8626:	e7e5      	b.n	d85f4 <__gethex+0x17e>
   d8628:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d862c:	f7ff ff0e 	bl	d844c <__hexdig_fun>
   d8630:	f000 000f 	and.w	r0, r0, #15
   d8634:	fa00 f00b 	lsl.w	r0, r0, fp
   d8638:	9b05      	ldr	r3, [sp, #20]
   d863a:	ea49 0900 	orr.w	r9, r9, r0
   d863e:	f10b 0b04 	add.w	fp, fp, #4
   d8642:	461e      	mov	r6, r3
   d8644:	e7cd      	b.n	d85e2 <__gethex+0x16c>
   d8646:	9804      	ldr	r0, [sp, #16]
   d8648:	f840 9b04 	str.w	r9, [r0], #4
   d864c:	ebca 0000 	rsb	r0, sl, r0
   d8650:	1080      	asrs	r0, r0, #2
   d8652:	6128      	str	r0, [r5, #16]
   d8654:	0147      	lsls	r7, r0, #5
   d8656:	4648      	mov	r0, r9
   d8658:	f000 fb85 	bl	d8d66 <__hi0bits>
   d865c:	f8d8 6000 	ldr.w	r6, [r8]
   d8660:	1a38      	subs	r0, r7, r0
   d8662:	42b0      	cmp	r0, r6
   d8664:	dd26      	ble.n	d86b4 <__gethex+0x23e>
   d8666:	1b87      	subs	r7, r0, r6
   d8668:	4639      	mov	r1, r7
   d866a:	4628      	mov	r0, r5
   d866c:	f000 fe83 	bl	d9376 <__any_on>
   d8670:	b1c8      	cbz	r0, d86a6 <__gethex+0x230>
   d8672:	1e7b      	subs	r3, r7, #1
   d8674:	1159      	asrs	r1, r3, #5
   d8676:	f003 021f 	and.w	r2, r3, #31
   d867a:	f04f 0901 	mov.w	r9, #1
   d867e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   d8682:	fa09 f202 	lsl.w	r2, r9, r2
   d8686:	420a      	tst	r2, r1
   d8688:	d00e      	beq.n	d86a8 <__gethex+0x232>
   d868a:	454b      	cmp	r3, r9
   d868c:	dc02      	bgt.n	d8694 <__gethex+0x21e>
   d868e:	f04f 0902 	mov.w	r9, #2
   d8692:	e009      	b.n	d86a8 <__gethex+0x232>
   d8694:	1eb9      	subs	r1, r7, #2
   d8696:	4628      	mov	r0, r5
   d8698:	f000 fe6d 	bl	d9376 <__any_on>
   d869c:	2800      	cmp	r0, #0
   d869e:	d0f6      	beq.n	d868e <__gethex+0x218>
   d86a0:	f04f 0903 	mov.w	r9, #3
   d86a4:	e000      	b.n	d86a8 <__gethex+0x232>
   d86a6:	4681      	mov	r9, r0
   d86a8:	4639      	mov	r1, r7
   d86aa:	4628      	mov	r0, r5
   d86ac:	f7ff fe98 	bl	d83e0 <rshift>
   d86b0:	443c      	add	r4, r7
   d86b2:	e00c      	b.n	d86ce <__gethex+0x258>
   d86b4:	da09      	bge.n	d86ca <__gethex+0x254>
   d86b6:	1a37      	subs	r7, r6, r0
   d86b8:	4629      	mov	r1, r5
   d86ba:	463a      	mov	r2, r7
   d86bc:	9802      	ldr	r0, [sp, #8]
   d86be:	f000 fc87 	bl	d8fd0 <__lshift>
   d86c2:	1be4      	subs	r4, r4, r7
   d86c4:	4605      	mov	r5, r0
   d86c6:	f100 0a14 	add.w	sl, r0, #20
   d86ca:	f04f 0900 	mov.w	r9, #0
   d86ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d86d2:	429c      	cmp	r4, r3
   d86d4:	dd08      	ble.n	d86e8 <__gethex+0x272>
   d86d6:	9802      	ldr	r0, [sp, #8]
   d86d8:	4629      	mov	r1, r5
   d86da:	f000 fab4 	bl	d8c46 <_Bfree>
   d86de:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d86e0:	2300      	movs	r3, #0
   d86e2:	6013      	str	r3, [r2, #0]
   d86e4:	20a3      	movs	r0, #163	; 0xa3
   d86e6:	e0e2      	b.n	d88ae <__gethex+0x438>
   d86e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d86ec:	4284      	cmp	r4, r0
   d86ee:	da53      	bge.n	d8798 <__gethex+0x322>
   d86f0:	1b04      	subs	r4, r0, r4
   d86f2:	42a6      	cmp	r6, r4
   d86f4:	dc2e      	bgt.n	d8754 <__gethex+0x2de>
   d86f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d86fa:	2b02      	cmp	r3, #2
   d86fc:	d01a      	beq.n	d8734 <__gethex+0x2be>
   d86fe:	2b03      	cmp	r3, #3
   d8700:	d01c      	beq.n	d873c <__gethex+0x2c6>
   d8702:	2b01      	cmp	r3, #1
   d8704:	d11d      	bne.n	d8742 <__gethex+0x2cc>
   d8706:	42a6      	cmp	r6, r4
   d8708:	d11b      	bne.n	d8742 <__gethex+0x2cc>
   d870a:	2e01      	cmp	r6, #1
   d870c:	dc0b      	bgt.n	d8726 <__gethex+0x2b0>
   d870e:	9a06      	ldr	r2, [sp, #24]
   d8710:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d8714:	6013      	str	r3, [r2, #0]
   d8716:	2301      	movs	r3, #1
   d8718:	612b      	str	r3, [r5, #16]
   d871a:	f8ca 3000 	str.w	r3, [sl]
   d871e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d8720:	2062      	movs	r0, #98	; 0x62
   d8722:	601d      	str	r5, [r3, #0]
   d8724:	e0c3      	b.n	d88ae <__gethex+0x438>
   d8726:	1e71      	subs	r1, r6, #1
   d8728:	4628      	mov	r0, r5
   d872a:	f000 fe24 	bl	d9376 <__any_on>
   d872e:	2800      	cmp	r0, #0
   d8730:	d1ed      	bne.n	d870e <__gethex+0x298>
   d8732:	e006      	b.n	d8742 <__gethex+0x2cc>
   d8734:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d8736:	2b00      	cmp	r3, #0
   d8738:	d0e9      	beq.n	d870e <__gethex+0x298>
   d873a:	e002      	b.n	d8742 <__gethex+0x2cc>
   d873c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d873e:	2b00      	cmp	r3, #0
   d8740:	d1e5      	bne.n	d870e <__gethex+0x298>
   d8742:	9802      	ldr	r0, [sp, #8]
   d8744:	4629      	mov	r1, r5
   d8746:	f000 fa7e 	bl	d8c46 <_Bfree>
   d874a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d874c:	2300      	movs	r3, #0
   d874e:	6013      	str	r3, [r2, #0]
   d8750:	2050      	movs	r0, #80	; 0x50
   d8752:	e0ac      	b.n	d88ae <__gethex+0x438>
   d8754:	1e67      	subs	r7, r4, #1
   d8756:	f1b9 0f00 	cmp.w	r9, #0
   d875a:	d106      	bne.n	d876a <__gethex+0x2f4>
   d875c:	b13f      	cbz	r7, d876e <__gethex+0x2f8>
   d875e:	4639      	mov	r1, r7
   d8760:	4628      	mov	r0, r5
   d8762:	f000 fe08 	bl	d9376 <__any_on>
   d8766:	4681      	mov	r9, r0
   d8768:	e001      	b.n	d876e <__gethex+0x2f8>
   d876a:	f04f 0901 	mov.w	r9, #1
   d876e:	117a      	asrs	r2, r7, #5
   d8770:	2301      	movs	r3, #1
   d8772:	f007 071f 	and.w	r7, r7, #31
   d8776:	fa03 f707 	lsl.w	r7, r3, r7
   d877a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   d877e:	4621      	mov	r1, r4
   d8780:	421f      	tst	r7, r3
   d8782:	4628      	mov	r0, r5
   d8784:	bf18      	it	ne
   d8786:	f049 0902 	orrne.w	r9, r9, #2
   d878a:	1b36      	subs	r6, r6, r4
   d878c:	f7ff fe28 	bl	d83e0 <rshift>
   d8790:	2702      	movs	r7, #2
   d8792:	f8d8 4004 	ldr.w	r4, [r8, #4]
   d8796:	e000      	b.n	d879a <__gethex+0x324>
   d8798:	2701      	movs	r7, #1
   d879a:	f1b9 0f00 	cmp.w	r9, #0
   d879e:	f000 8081 	beq.w	d88a4 <__gethex+0x42e>
   d87a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d87a6:	2b02      	cmp	r3, #2
   d87a8:	d00e      	beq.n	d87c8 <__gethex+0x352>
   d87aa:	2b03      	cmp	r3, #3
   d87ac:	d010      	beq.n	d87d0 <__gethex+0x35a>
   d87ae:	2b01      	cmp	r3, #1
   d87b0:	d176      	bne.n	d88a0 <__gethex+0x42a>
   d87b2:	f019 0f02 	tst.w	r9, #2
   d87b6:	d073      	beq.n	d88a0 <__gethex+0x42a>
   d87b8:	f8da 0000 	ldr.w	r0, [sl]
   d87bc:	ea49 0900 	orr.w	r9, r9, r0
   d87c0:	f019 0f01 	tst.w	r9, #1
   d87c4:	d107      	bne.n	d87d6 <__gethex+0x360>
   d87c6:	e06b      	b.n	d88a0 <__gethex+0x42a>
   d87c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d87ca:	f1c3 0301 	rsb	r3, r3, #1
   d87ce:	9315      	str	r3, [sp, #84]	; 0x54
   d87d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d87d2:	2b00      	cmp	r3, #0
   d87d4:	d064      	beq.n	d88a0 <__gethex+0x42a>
   d87d6:	f8d5 a010 	ldr.w	sl, [r5, #16]
   d87da:	f105 0314 	add.w	r3, r5, #20
   d87de:	ea4f 098a 	mov.w	r9, sl, lsl #2
   d87e2:	eb03 0109 	add.w	r1, r3, r9
   d87e6:	2000      	movs	r0, #0
   d87e8:	681a      	ldr	r2, [r3, #0]
   d87ea:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   d87ee:	d002      	beq.n	d87f6 <__gethex+0x380>
   d87f0:	3201      	adds	r2, #1
   d87f2:	601a      	str	r2, [r3, #0]
   d87f4:	e020      	b.n	d8838 <__gethex+0x3c2>
   d87f6:	f843 0b04 	str.w	r0, [r3], #4
   d87fa:	4299      	cmp	r1, r3
   d87fc:	d8f4      	bhi.n	d87e8 <__gethex+0x372>
   d87fe:	68ab      	ldr	r3, [r5, #8]
   d8800:	459a      	cmp	sl, r3
   d8802:	db12      	blt.n	d882a <__gethex+0x3b4>
   d8804:	6869      	ldr	r1, [r5, #4]
   d8806:	9802      	ldr	r0, [sp, #8]
   d8808:	3101      	adds	r1, #1
   d880a:	f000 f9e7 	bl	d8bdc <_Balloc>
   d880e:	692a      	ldr	r2, [r5, #16]
   d8810:	3202      	adds	r2, #2
   d8812:	f105 010c 	add.w	r1, r5, #12
   d8816:	4683      	mov	fp, r0
   d8818:	0092      	lsls	r2, r2, #2
   d881a:	300c      	adds	r0, #12
   d881c:	f7fe fc66 	bl	d70ec <memcpy>
   d8820:	4629      	mov	r1, r5
   d8822:	9802      	ldr	r0, [sp, #8]
   d8824:	f000 fa0f 	bl	d8c46 <_Bfree>
   d8828:	465d      	mov	r5, fp
   d882a:	692b      	ldr	r3, [r5, #16]
   d882c:	1c5a      	adds	r2, r3, #1
   d882e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   d8832:	612a      	str	r2, [r5, #16]
   d8834:	2201      	movs	r2, #1
   d8836:	615a      	str	r2, [r3, #20]
   d8838:	2f02      	cmp	r7, #2
   d883a:	f105 0214 	add.w	r2, r5, #20
   d883e:	d111      	bne.n	d8864 <__gethex+0x3ee>
   d8840:	f8d8 3000 	ldr.w	r3, [r8]
   d8844:	3b01      	subs	r3, #1
   d8846:	429e      	cmp	r6, r3
   d8848:	d127      	bne.n	d889a <__gethex+0x424>
   d884a:	1171      	asrs	r1, r6, #5
   d884c:	2301      	movs	r3, #1
   d884e:	f006 061f 	and.w	r6, r6, #31
   d8852:	fa03 f606 	lsl.w	r6, r3, r6
   d8856:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   d885a:	421e      	tst	r6, r3
   d885c:	bf0c      	ite	eq
   d885e:	2702      	moveq	r7, #2
   d8860:	2701      	movne	r7, #1
   d8862:	e01a      	b.n	d889a <__gethex+0x424>
   d8864:	692b      	ldr	r3, [r5, #16]
   d8866:	459a      	cmp	sl, r3
   d8868:	da0a      	bge.n	d8880 <__gethex+0x40a>
   d886a:	2101      	movs	r1, #1
   d886c:	4628      	mov	r0, r5
   d886e:	f7ff fdb7 	bl	d83e0 <rshift>
   d8872:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d8876:	3401      	adds	r4, #1
   d8878:	429c      	cmp	r4, r3
   d887a:	f73f af2c 	bgt.w	d86d6 <__gethex+0x260>
   d887e:	e00b      	b.n	d8898 <__gethex+0x422>
   d8880:	f016 061f 	ands.w	r6, r6, #31
   d8884:	d008      	beq.n	d8898 <__gethex+0x422>
   d8886:	4491      	add	r9, r2
   d8888:	f1c6 0620 	rsb	r6, r6, #32
   d888c:	f859 0c04 	ldr.w	r0, [r9, #-4]
   d8890:	f000 fa69 	bl	d8d66 <__hi0bits>
   d8894:	42b0      	cmp	r0, r6
   d8896:	dbe8      	blt.n	d886a <__gethex+0x3f4>
   d8898:	2701      	movs	r7, #1
   d889a:	f047 0720 	orr.w	r7, r7, #32
   d889e:	e001      	b.n	d88a4 <__gethex+0x42e>
   d88a0:	f047 0710 	orr.w	r7, r7, #16
   d88a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d88a6:	601d      	str	r5, [r3, #0]
   d88a8:	9b06      	ldr	r3, [sp, #24]
   d88aa:	4638      	mov	r0, r7
   d88ac:	601c      	str	r4, [r3, #0]
   d88ae:	b00b      	add	sp, #44	; 0x2c
   d88b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d88b4 <L_shift>:
   d88b4:	f1c2 0208 	rsb	r2, r2, #8
   d88b8:	0092      	lsls	r2, r2, #2
   d88ba:	b570      	push	{r4, r5, r6, lr}
   d88bc:	f1c2 0620 	rsb	r6, r2, #32
   d88c0:	6843      	ldr	r3, [r0, #4]
   d88c2:	6805      	ldr	r5, [r0, #0]
   d88c4:	fa03 f406 	lsl.w	r4, r3, r6
   d88c8:	432c      	orrs	r4, r5
   d88ca:	40d3      	lsrs	r3, r2
   d88cc:	6004      	str	r4, [r0, #0]
   d88ce:	f840 3f04 	str.w	r3, [r0, #4]!
   d88d2:	4288      	cmp	r0, r1
   d88d4:	d3f4      	bcc.n	d88c0 <L_shift+0xc>
   d88d6:	bd70      	pop	{r4, r5, r6, pc}

000d88d8 <__match>:
   d88d8:	b530      	push	{r4, r5, lr}
   d88da:	6803      	ldr	r3, [r0, #0]
   d88dc:	f811 4b01 	ldrb.w	r4, [r1], #1
   d88e0:	3301      	adds	r3, #1
   d88e2:	b14c      	cbz	r4, d88f8 <__match+0x20>
   d88e4:	781a      	ldrb	r2, [r3, #0]
   d88e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d88ea:	2d19      	cmp	r5, #25
   d88ec:	bf98      	it	ls
   d88ee:	3220      	addls	r2, #32
   d88f0:	42a2      	cmp	r2, r4
   d88f2:	d0f3      	beq.n	d88dc <__match+0x4>
   d88f4:	2000      	movs	r0, #0
   d88f6:	bd30      	pop	{r4, r5, pc}
   d88f8:	6003      	str	r3, [r0, #0]
   d88fa:	2001      	movs	r0, #1
   d88fc:	bd30      	pop	{r4, r5, pc}

000d88fe <__hexnan>:
   d88fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8902:	680b      	ldr	r3, [r1, #0]
   d8904:	f8d0 b000 	ldr.w	fp, [r0]
   d8908:	115e      	asrs	r6, r3, #5
   d890a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d890e:	f013 031f 	ands.w	r3, r3, #31
   d8912:	b085      	sub	sp, #20
   d8914:	bf18      	it	ne
   d8916:	3604      	addne	r6, #4
   d8918:	1f35      	subs	r5, r6, #4
   d891a:	4617      	mov	r7, r2
   d891c:	2200      	movs	r2, #0
   d891e:	4682      	mov	sl, r0
   d8920:	9301      	str	r3, [sp, #4]
   d8922:	f846 2c04 	str.w	r2, [r6, #-4]
   d8926:	46a8      	mov	r8, r5
   d8928:	462c      	mov	r4, r5
   d892a:	9200      	str	r2, [sp, #0]
   d892c:	4691      	mov	r9, r2
   d892e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   d8932:	2900      	cmp	r1, #0
   d8934:	d03c      	beq.n	d89b0 <__hexnan+0xb2>
   d8936:	4608      	mov	r0, r1
   d8938:	9203      	str	r2, [sp, #12]
   d893a:	9102      	str	r1, [sp, #8]
   d893c:	f7ff fd86 	bl	d844c <__hexdig_fun>
   d8940:	9a03      	ldr	r2, [sp, #12]
   d8942:	bb00      	cbnz	r0, d8986 <__hexnan+0x88>
   d8944:	9902      	ldr	r1, [sp, #8]
   d8946:	2920      	cmp	r1, #32
   d8948:	d816      	bhi.n	d8978 <__hexnan+0x7a>
   d894a:	9b00      	ldr	r3, [sp, #0]
   d894c:	4599      	cmp	r9, r3
   d894e:	ddee      	ble.n	d892e <__hexnan+0x30>
   d8950:	4544      	cmp	r4, r8
   d8952:	d205      	bcs.n	d8960 <__hexnan+0x62>
   d8954:	2a07      	cmp	r2, #7
   d8956:	dc03      	bgt.n	d8960 <__hexnan+0x62>
   d8958:	4641      	mov	r1, r8
   d895a:	4620      	mov	r0, r4
   d895c:	f7ff ffaa 	bl	d88b4 <L_shift>
   d8960:	42bc      	cmp	r4, r7
   d8962:	d923      	bls.n	d89ac <__hexnan+0xae>
   d8964:	2300      	movs	r3, #0
   d8966:	f1a4 0804 	sub.w	r8, r4, #4
   d896a:	f844 3c04 	str.w	r3, [r4, #-4]
   d896e:	f8cd 9000 	str.w	r9, [sp]
   d8972:	4644      	mov	r4, r8
   d8974:	461a      	mov	r2, r3
   d8976:	e7da      	b.n	d892e <__hexnan+0x30>
   d8978:	2929      	cmp	r1, #41	; 0x29
   d897a:	d148      	bne.n	d8a0e <__hexnan+0x110>
   d897c:	f10b 0301 	add.w	r3, fp, #1
   d8980:	f8ca 3000 	str.w	r3, [sl]
   d8984:	e014      	b.n	d89b0 <__hexnan+0xb2>
   d8986:	3201      	adds	r2, #1
   d8988:	2a08      	cmp	r2, #8
   d898a:	f109 0901 	add.w	r9, r9, #1
   d898e:	dd06      	ble.n	d899e <__hexnan+0xa0>
   d8990:	42bc      	cmp	r4, r7
   d8992:	d9cc      	bls.n	d892e <__hexnan+0x30>
   d8994:	2300      	movs	r3, #0
   d8996:	f844 3c04 	str.w	r3, [r4, #-4]
   d899a:	2201      	movs	r2, #1
   d899c:	3c04      	subs	r4, #4
   d899e:	6821      	ldr	r1, [r4, #0]
   d89a0:	f000 000f 	and.w	r0, r0, #15
   d89a4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   d89a8:	6020      	str	r0, [r4, #0]
   d89aa:	e7c0      	b.n	d892e <__hexnan+0x30>
   d89ac:	2208      	movs	r2, #8
   d89ae:	e7be      	b.n	d892e <__hexnan+0x30>
   d89b0:	f1b9 0f00 	cmp.w	r9, #0
   d89b4:	d02b      	beq.n	d8a0e <__hexnan+0x110>
   d89b6:	4544      	cmp	r4, r8
   d89b8:	d205      	bcs.n	d89c6 <__hexnan+0xc8>
   d89ba:	2a07      	cmp	r2, #7
   d89bc:	dc03      	bgt.n	d89c6 <__hexnan+0xc8>
   d89be:	4641      	mov	r1, r8
   d89c0:	4620      	mov	r0, r4
   d89c2:	f7ff ff77 	bl	d88b4 <L_shift>
   d89c6:	42bc      	cmp	r4, r7
   d89c8:	d90c      	bls.n	d89e4 <__hexnan+0xe6>
   d89ca:	463b      	mov	r3, r7
   d89cc:	f854 2b04 	ldr.w	r2, [r4], #4
   d89d0:	f843 2b04 	str.w	r2, [r3], #4
   d89d4:	42a5      	cmp	r5, r4
   d89d6:	d2f9      	bcs.n	d89cc <__hexnan+0xce>
   d89d8:	2200      	movs	r2, #0
   d89da:	f843 2b04 	str.w	r2, [r3], #4
   d89de:	429d      	cmp	r5, r3
   d89e0:	d2fb      	bcs.n	d89da <__hexnan+0xdc>
   d89e2:	e00b      	b.n	d89fc <__hexnan+0xfe>
   d89e4:	9b01      	ldr	r3, [sp, #4]
   d89e6:	b14b      	cbz	r3, d89fc <__hexnan+0xfe>
   d89e8:	f1c3 0220 	rsb	r2, r3, #32
   d89ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d89f0:	40d3      	lsrs	r3, r2
   d89f2:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d89f6:	4013      	ands	r3, r2
   d89f8:	f846 3c04 	str.w	r3, [r6, #-4]
   d89fc:	682b      	ldr	r3, [r5, #0]
   d89fe:	b943      	cbnz	r3, d8a12 <__hexnan+0x114>
   d8a00:	42bd      	cmp	r5, r7
   d8a02:	d102      	bne.n	d8a0a <__hexnan+0x10c>
   d8a04:	2301      	movs	r3, #1
   d8a06:	602b      	str	r3, [r5, #0]
   d8a08:	e003      	b.n	d8a12 <__hexnan+0x114>
   d8a0a:	3d04      	subs	r5, #4
   d8a0c:	e7f6      	b.n	d89fc <__hexnan+0xfe>
   d8a0e:	2004      	movs	r0, #4
   d8a10:	e000      	b.n	d8a14 <__hexnan+0x116>
   d8a12:	2005      	movs	r0, #5
   d8a14:	b005      	add	sp, #20
   d8a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d8a1c <_findenv_r>:
   d8a1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8a20:	4607      	mov	r7, r0
   d8a22:	468b      	mov	fp, r1
   d8a24:	4690      	mov	r8, r2
   d8a26:	f000 fcdd 	bl	d93e4 <__env_lock>
   d8a2a:	4b19      	ldr	r3, [pc, #100]	; (d8a90 <_findenv_r+0x74>)
   d8a2c:	681d      	ldr	r5, [r3, #0]
   d8a2e:	469a      	mov	sl, r3
   d8a30:	b13d      	cbz	r5, d8a42 <_findenv_r+0x26>
   d8a32:	465c      	mov	r4, fp
   d8a34:	4623      	mov	r3, r4
   d8a36:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8a3a:	b142      	cbz	r2, d8a4e <_findenv_r+0x32>
   d8a3c:	2a3d      	cmp	r2, #61	; 0x3d
   d8a3e:	461c      	mov	r4, r3
   d8a40:	d1f8      	bne.n	d8a34 <_findenv_r+0x18>
   d8a42:	4638      	mov	r0, r7
   d8a44:	f000 fccf 	bl	d93e6 <__env_unlock>
   d8a48:	2000      	movs	r0, #0
   d8a4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8a4e:	ebcb 0404 	rsb	r4, fp, r4
   d8a52:	46a9      	mov	r9, r5
   d8a54:	f859 0b04 	ldr.w	r0, [r9], #4
   d8a58:	2800      	cmp	r0, #0
   d8a5a:	d0f2      	beq.n	d8a42 <_findenv_r+0x26>
   d8a5c:	4622      	mov	r2, r4
   d8a5e:	4659      	mov	r1, fp
   d8a60:	f7fe fbb5 	bl	d71ce <strncmp>
   d8a64:	b988      	cbnz	r0, d8a8a <_findenv_r+0x6e>
   d8a66:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d8a6a:	191e      	adds	r6, r3, r4
   d8a6c:	5d1b      	ldrb	r3, [r3, r4]
   d8a6e:	2b3d      	cmp	r3, #61	; 0x3d
   d8a70:	d10b      	bne.n	d8a8a <_findenv_r+0x6e>
   d8a72:	f8da 3000 	ldr.w	r3, [sl]
   d8a76:	1aed      	subs	r5, r5, r3
   d8a78:	10ad      	asrs	r5, r5, #2
   d8a7a:	4638      	mov	r0, r7
   d8a7c:	f8c8 5000 	str.w	r5, [r8]
   d8a80:	f000 fcb1 	bl	d93e6 <__env_unlock>
   d8a84:	1c70      	adds	r0, r6, #1
   d8a86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8a8a:	464d      	mov	r5, r9
   d8a8c:	e7e1      	b.n	d8a52 <_findenv_r+0x36>
   d8a8e:	bf00      	nop
   d8a90:	2003e300 	.word	0x2003e300

000d8a94 <_getenv_r>:
   d8a94:	b507      	push	{r0, r1, r2, lr}
   d8a96:	aa01      	add	r2, sp, #4
   d8a98:	f7ff ffc0 	bl	d8a1c <_findenv_r>
   d8a9c:	b003      	add	sp, #12
   d8a9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8aa4 <__gettzinfo>:
   d8aa4:	4800      	ldr	r0, [pc, #0]	; (d8aa8 <__gettzinfo+0x4>)
   d8aa6:	4770      	bx	lr
   d8aa8:	2003e2c0 	.word	0x2003e2c0

000d8aac <gmtime_r>:
   d8aac:	6802      	ldr	r2, [r0, #0]
   d8aae:	4b47      	ldr	r3, [pc, #284]	; (d8bcc <gmtime_r+0x120>)
   d8ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8ab2:	fb92 f4f3 	sdiv	r4, r2, r3
   d8ab6:	fb03 2214 	mls	r2, r3, r4, r2
   d8aba:	2a00      	cmp	r2, #0
   d8abc:	bfbc      	itt	lt
   d8abe:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d8ac2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d8ac6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d8aca:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d8ace:	fb92 f3f0 	sdiv	r3, r2, r0
   d8ad2:	fb00 2213 	mls	r2, r0, r3, r2
   d8ad6:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d8ada:	bfac      	ite	ge
   d8adc:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d8ae0:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d8ae4:	608b      	str	r3, [r1, #8]
   d8ae6:	fb92 f3f0 	sdiv	r3, r2, r0
   d8aea:	fb00 2213 	mls	r2, r0, r3, r2
   d8aee:	604b      	str	r3, [r1, #4]
   d8af0:	600a      	str	r2, [r1, #0]
   d8af2:	2307      	movs	r3, #7
   d8af4:	1ce2      	adds	r2, r4, #3
   d8af6:	fb92 f3f3 	sdiv	r3, r2, r3
   d8afa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d8afe:	1ad3      	subs	r3, r2, r3
   d8b00:	618b      	str	r3, [r1, #24]
   d8b02:	4b33      	ldr	r3, [pc, #204]	; (d8bd0 <gmtime_r+0x124>)
   d8b04:	4d33      	ldr	r5, [pc, #204]	; (d8bd4 <gmtime_r+0x128>)
   d8b06:	fb94 f5f5 	sdiv	r5, r4, r5
   d8b0a:	fb03 4405 	mla	r4, r3, r5, r4
   d8b0e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d8b12:	fbb4 f2f2 	udiv	r2, r4, r2
   d8b16:	4422      	add	r2, r4
   d8b18:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d8b1c:	fbb4 f3f7 	udiv	r3, r4, r7
   d8b20:	1ad2      	subs	r2, r2, r3
   d8b22:	482d      	ldr	r0, [pc, #180]	; (d8bd8 <gmtime_r+0x12c>)
   d8b24:	fbb4 f0f0 	udiv	r0, r4, r0
   d8b28:	f648 6694 	movw	r6, #36500	; 0x8e94
   d8b2c:	1a13      	subs	r3, r2, r0
   d8b2e:	fbb3 f6f6 	udiv	r6, r3, r6
   d8b32:	4434      	add	r4, r6
   d8b34:	f240 126d 	movw	r2, #365	; 0x16d
   d8b38:	fbb3 f0f2 	udiv	r0, r3, r2
   d8b3c:	fbb3 f3f7 	udiv	r3, r3, r7
   d8b40:	1ae3      	subs	r3, r4, r3
   d8b42:	fb02 3310 	mls	r3, r2, r0, r3
   d8b46:	2499      	movs	r4, #153	; 0x99
   d8b48:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d8b4c:	3202      	adds	r2, #2
   d8b4e:	fbb2 f2f4 	udiv	r2, r2, r4
   d8b52:	2a0a      	cmp	r2, #10
   d8b54:	fb04 f402 	mul.w	r4, r4, r2
   d8b58:	f104 0602 	add.w	r6, r4, #2
   d8b5c:	f04f 0405 	mov.w	r4, #5
   d8b60:	fbb6 f4f4 	udiv	r4, r6, r4
   d8b64:	bf34      	ite	cc
   d8b66:	2602      	movcc	r6, #2
   d8b68:	f06f 0609 	mvncs.w	r6, #9
   d8b6c:	4416      	add	r6, r2
   d8b6e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8b72:	fb02 0505 	mla	r5, r2, r5, r0
   d8b76:	1c5f      	adds	r7, r3, #1
   d8b78:	2e01      	cmp	r6, #1
   d8b7a:	bf98      	it	ls
   d8b7c:	3501      	addls	r5, #1
   d8b7e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d8b82:	eba7 0704 	sub.w	r7, r7, r4
   d8b86:	d302      	bcc.n	d8b8e <gmtime_r+0xe2>
   d8b88:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d8b8c:	e014      	b.n	d8bb8 <gmtime_r+0x10c>
   d8b8e:	0782      	lsls	r2, r0, #30
   d8b90:	d105      	bne.n	d8b9e <gmtime_r+0xf2>
   d8b92:	2464      	movs	r4, #100	; 0x64
   d8b94:	fbb0 f2f4 	udiv	r2, r0, r4
   d8b98:	fb04 0212 	mls	r2, r4, r2, r0
   d8b9c:	b94a      	cbnz	r2, d8bb2 <gmtime_r+0x106>
   d8b9e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8ba2:	fbb0 f4f2 	udiv	r4, r0, r2
   d8ba6:	fb02 0014 	mls	r0, r2, r4, r0
   d8baa:	fab0 f280 	clz	r2, r0
   d8bae:	0952      	lsrs	r2, r2, #5
   d8bb0:	e000      	b.n	d8bb4 <gmtime_r+0x108>
   d8bb2:	2201      	movs	r2, #1
   d8bb4:	333b      	adds	r3, #59	; 0x3b
   d8bb6:	441a      	add	r2, r3
   d8bb8:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d8bbc:	2300      	movs	r3, #0
   d8bbe:	61ca      	str	r2, [r1, #28]
   d8bc0:	614d      	str	r5, [r1, #20]
   d8bc2:	610e      	str	r6, [r1, #16]
   d8bc4:	60cf      	str	r7, [r1, #12]
   d8bc6:	620b      	str	r3, [r1, #32]
   d8bc8:	4608      	mov	r0, r1
   d8bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8bcc:	00015180 	.word	0x00015180
   d8bd0:	fffdc54f 	.word	0xfffdc54f
   d8bd4:	00023ab1 	.word	0x00023ab1
   d8bd8:	00023ab0 	.word	0x00023ab0

000d8bdc <_Balloc>:
   d8bdc:	b570      	push	{r4, r5, r6, lr}
   d8bde:	6a45      	ldr	r5, [r0, #36]	; 0x24
   d8be0:	4604      	mov	r4, r0
   d8be2:	460e      	mov	r6, r1
   d8be4:	b93d      	cbnz	r5, d8bf6 <_Balloc+0x1a>
   d8be6:	2010      	movs	r0, #16
   d8be8:	f7fc f8b0 	bl	d4d4c <malloc>
   d8bec:	6260      	str	r0, [r4, #36]	; 0x24
   d8bee:	6045      	str	r5, [r0, #4]
   d8bf0:	6085      	str	r5, [r0, #8]
   d8bf2:	6005      	str	r5, [r0, #0]
   d8bf4:	60c5      	str	r5, [r0, #12]
   d8bf6:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d8bf8:	68eb      	ldr	r3, [r5, #12]
   d8bfa:	b143      	cbz	r3, d8c0e <_Balloc+0x32>
   d8bfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d8bfe:	68db      	ldr	r3, [r3, #12]
   d8c00:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   d8c04:	b178      	cbz	r0, d8c26 <_Balloc+0x4a>
   d8c06:	6802      	ldr	r2, [r0, #0]
   d8c08:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   d8c0c:	e017      	b.n	d8c3e <_Balloc+0x62>
   d8c0e:	2221      	movs	r2, #33	; 0x21
   d8c10:	2104      	movs	r1, #4
   d8c12:	4620      	mov	r0, r4
   d8c14:	f000 fbd1 	bl	d93ba <_calloc_r>
   d8c18:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d8c1a:	60e8      	str	r0, [r5, #12]
   d8c1c:	68db      	ldr	r3, [r3, #12]
   d8c1e:	2b00      	cmp	r3, #0
   d8c20:	d1ec      	bne.n	d8bfc <_Balloc+0x20>
   d8c22:	2000      	movs	r0, #0
   d8c24:	bd70      	pop	{r4, r5, r6, pc}
   d8c26:	2101      	movs	r1, #1
   d8c28:	fa01 f506 	lsl.w	r5, r1, r6
   d8c2c:	1d6a      	adds	r2, r5, #5
   d8c2e:	0092      	lsls	r2, r2, #2
   d8c30:	4620      	mov	r0, r4
   d8c32:	f000 fbc2 	bl	d93ba <_calloc_r>
   d8c36:	2800      	cmp	r0, #0
   d8c38:	d0f3      	beq.n	d8c22 <_Balloc+0x46>
   d8c3a:	6046      	str	r6, [r0, #4]
   d8c3c:	6085      	str	r5, [r0, #8]
   d8c3e:	2300      	movs	r3, #0
   d8c40:	6103      	str	r3, [r0, #16]
   d8c42:	60c3      	str	r3, [r0, #12]
   d8c44:	bd70      	pop	{r4, r5, r6, pc}

000d8c46 <_Bfree>:
   d8c46:	b570      	push	{r4, r5, r6, lr}
   d8c48:	6a44      	ldr	r4, [r0, #36]	; 0x24
   d8c4a:	4606      	mov	r6, r0
   d8c4c:	460d      	mov	r5, r1
   d8c4e:	b93c      	cbnz	r4, d8c60 <_Bfree+0x1a>
   d8c50:	2010      	movs	r0, #16
   d8c52:	f7fc f87b 	bl	d4d4c <malloc>
   d8c56:	6270      	str	r0, [r6, #36]	; 0x24
   d8c58:	6044      	str	r4, [r0, #4]
   d8c5a:	6084      	str	r4, [r0, #8]
   d8c5c:	6004      	str	r4, [r0, #0]
   d8c5e:	60c4      	str	r4, [r0, #12]
   d8c60:	b13d      	cbz	r5, d8c72 <_Bfree+0x2c>
   d8c62:	6a73      	ldr	r3, [r6, #36]	; 0x24
   d8c64:	686a      	ldr	r2, [r5, #4]
   d8c66:	68db      	ldr	r3, [r3, #12]
   d8c68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d8c6c:	6029      	str	r1, [r5, #0]
   d8c6e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   d8c72:	bd70      	pop	{r4, r5, r6, pc}

000d8c74 <__multadd>:
   d8c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8c78:	690d      	ldr	r5, [r1, #16]
   d8c7a:	461f      	mov	r7, r3
   d8c7c:	4606      	mov	r6, r0
   d8c7e:	460c      	mov	r4, r1
   d8c80:	f101 0e14 	add.w	lr, r1, #20
   d8c84:	2300      	movs	r3, #0
   d8c86:	f8de 0000 	ldr.w	r0, [lr]
   d8c8a:	b281      	uxth	r1, r0
   d8c8c:	fb02 7101 	mla	r1, r2, r1, r7
   d8c90:	0c0f      	lsrs	r7, r1, #16
   d8c92:	0c00      	lsrs	r0, r0, #16
   d8c94:	fb02 7000 	mla	r0, r2, r0, r7
   d8c98:	b289      	uxth	r1, r1
   d8c9a:	3301      	adds	r3, #1
   d8c9c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   d8ca0:	429d      	cmp	r5, r3
   d8ca2:	ea4f 4710 	mov.w	r7, r0, lsr #16
   d8ca6:	f84e 1b04 	str.w	r1, [lr], #4
   d8caa:	dcec      	bgt.n	d8c86 <__multadd+0x12>
   d8cac:	b1d7      	cbz	r7, d8ce4 <__multadd+0x70>
   d8cae:	68a3      	ldr	r3, [r4, #8]
   d8cb0:	429d      	cmp	r5, r3
   d8cb2:	db12      	blt.n	d8cda <__multadd+0x66>
   d8cb4:	6861      	ldr	r1, [r4, #4]
   d8cb6:	4630      	mov	r0, r6
   d8cb8:	3101      	adds	r1, #1
   d8cba:	f7ff ff8f 	bl	d8bdc <_Balloc>
   d8cbe:	6922      	ldr	r2, [r4, #16]
   d8cc0:	3202      	adds	r2, #2
   d8cc2:	f104 010c 	add.w	r1, r4, #12
   d8cc6:	4680      	mov	r8, r0
   d8cc8:	0092      	lsls	r2, r2, #2
   d8cca:	300c      	adds	r0, #12
   d8ccc:	f7fe fa0e 	bl	d70ec <memcpy>
   d8cd0:	4621      	mov	r1, r4
   d8cd2:	4630      	mov	r0, r6
   d8cd4:	f7ff ffb7 	bl	d8c46 <_Bfree>
   d8cd8:	4644      	mov	r4, r8
   d8cda:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   d8cde:	3501      	adds	r5, #1
   d8ce0:	615f      	str	r7, [r3, #20]
   d8ce2:	6125      	str	r5, [r4, #16]
   d8ce4:	4620      	mov	r0, r4
   d8ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8cea <__s2b>:
   d8cea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8cee:	460c      	mov	r4, r1
   d8cf0:	4615      	mov	r5, r2
   d8cf2:	461f      	mov	r7, r3
   d8cf4:	2209      	movs	r2, #9
   d8cf6:	3308      	adds	r3, #8
   d8cf8:	4606      	mov	r6, r0
   d8cfa:	fb93 f3f2 	sdiv	r3, r3, r2
   d8cfe:	2100      	movs	r1, #0
   d8d00:	2201      	movs	r2, #1
   d8d02:	429a      	cmp	r2, r3
   d8d04:	da02      	bge.n	d8d0c <__s2b+0x22>
   d8d06:	0052      	lsls	r2, r2, #1
   d8d08:	3101      	adds	r1, #1
   d8d0a:	e7fa      	b.n	d8d02 <__s2b+0x18>
   d8d0c:	4630      	mov	r0, r6
   d8d0e:	f7ff ff65 	bl	d8bdc <_Balloc>
   d8d12:	9b08      	ldr	r3, [sp, #32]
   d8d14:	6143      	str	r3, [r0, #20]
   d8d16:	2d09      	cmp	r5, #9
   d8d18:	f04f 0301 	mov.w	r3, #1
   d8d1c:	6103      	str	r3, [r0, #16]
   d8d1e:	dd11      	ble.n	d8d44 <__s2b+0x5a>
   d8d20:	f104 0809 	add.w	r8, r4, #9
   d8d24:	46c1      	mov	r9, r8
   d8d26:	442c      	add	r4, r5
   d8d28:	f819 3b01 	ldrb.w	r3, [r9], #1
   d8d2c:	4601      	mov	r1, r0
   d8d2e:	3b30      	subs	r3, #48	; 0x30
   d8d30:	220a      	movs	r2, #10
   d8d32:	4630      	mov	r0, r6
   d8d34:	f7ff ff9e 	bl	d8c74 <__multadd>
   d8d38:	45a1      	cmp	r9, r4
   d8d3a:	d1f5      	bne.n	d8d28 <__s2b+0x3e>
   d8d3c:	eb08 0405 	add.w	r4, r8, r5
   d8d40:	3c08      	subs	r4, #8
   d8d42:	e001      	b.n	d8d48 <__s2b+0x5e>
   d8d44:	340a      	adds	r4, #10
   d8d46:	2509      	movs	r5, #9
   d8d48:	1b2d      	subs	r5, r5, r4
   d8d4a:	1963      	adds	r3, r4, r5
   d8d4c:	429f      	cmp	r7, r3
   d8d4e:	dd08      	ble.n	d8d62 <__s2b+0x78>
   d8d50:	f814 3b01 	ldrb.w	r3, [r4], #1
   d8d54:	4601      	mov	r1, r0
   d8d56:	3b30      	subs	r3, #48	; 0x30
   d8d58:	220a      	movs	r2, #10
   d8d5a:	4630      	mov	r0, r6
   d8d5c:	f7ff ff8a 	bl	d8c74 <__multadd>
   d8d60:	e7f3      	b.n	d8d4a <__s2b+0x60>
   d8d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d8d66 <__hi0bits>:
   d8d66:	0c03      	lsrs	r3, r0, #16
   d8d68:	041b      	lsls	r3, r3, #16
   d8d6a:	b913      	cbnz	r3, d8d72 <__hi0bits+0xc>
   d8d6c:	0400      	lsls	r0, r0, #16
   d8d6e:	2310      	movs	r3, #16
   d8d70:	e000      	b.n	d8d74 <__hi0bits+0xe>
   d8d72:	2300      	movs	r3, #0
   d8d74:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d8d78:	bf04      	itt	eq
   d8d7a:	0200      	lsleq	r0, r0, #8
   d8d7c:	3308      	addeq	r3, #8
   d8d7e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d8d82:	bf04      	itt	eq
   d8d84:	0100      	lsleq	r0, r0, #4
   d8d86:	3304      	addeq	r3, #4
   d8d88:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d8d8c:	bf04      	itt	eq
   d8d8e:	0080      	lsleq	r0, r0, #2
   d8d90:	3302      	addeq	r3, #2
   d8d92:	2800      	cmp	r0, #0
   d8d94:	db03      	blt.n	d8d9e <__hi0bits+0x38>
   d8d96:	0042      	lsls	r2, r0, #1
   d8d98:	d503      	bpl.n	d8da2 <__hi0bits+0x3c>
   d8d9a:	1c58      	adds	r0, r3, #1
   d8d9c:	4770      	bx	lr
   d8d9e:	4618      	mov	r0, r3
   d8da0:	4770      	bx	lr
   d8da2:	2020      	movs	r0, #32
   d8da4:	4770      	bx	lr

000d8da6 <__lo0bits>:
   d8da6:	6803      	ldr	r3, [r0, #0]
   d8da8:	f013 0207 	ands.w	r2, r3, #7
   d8dac:	d00b      	beq.n	d8dc6 <__lo0bits+0x20>
   d8dae:	07d9      	lsls	r1, r3, #31
   d8db0:	d422      	bmi.n	d8df8 <__lo0bits+0x52>
   d8db2:	079a      	lsls	r2, r3, #30
   d8db4:	bf4b      	itete	mi
   d8db6:	085b      	lsrmi	r3, r3, #1
   d8db8:	089b      	lsrpl	r3, r3, #2
   d8dba:	6003      	strmi	r3, [r0, #0]
   d8dbc:	6003      	strpl	r3, [r0, #0]
   d8dbe:	bf4c      	ite	mi
   d8dc0:	2001      	movmi	r0, #1
   d8dc2:	2002      	movpl	r0, #2
   d8dc4:	4770      	bx	lr
   d8dc6:	b299      	uxth	r1, r3
   d8dc8:	b909      	cbnz	r1, d8dce <__lo0bits+0x28>
   d8dca:	0c1b      	lsrs	r3, r3, #16
   d8dcc:	2210      	movs	r2, #16
   d8dce:	f013 0fff 	tst.w	r3, #255	; 0xff
   d8dd2:	bf04      	itt	eq
   d8dd4:	0a1b      	lsreq	r3, r3, #8
   d8dd6:	3208      	addeq	r2, #8
   d8dd8:	0719      	lsls	r1, r3, #28
   d8dda:	bf04      	itt	eq
   d8ddc:	091b      	lsreq	r3, r3, #4
   d8dde:	3204      	addeq	r2, #4
   d8de0:	0799      	lsls	r1, r3, #30
   d8de2:	bf04      	itt	eq
   d8de4:	089b      	lsreq	r3, r3, #2
   d8de6:	3202      	addeq	r2, #2
   d8de8:	07d9      	lsls	r1, r3, #31
   d8dea:	d402      	bmi.n	d8df2 <__lo0bits+0x4c>
   d8dec:	085b      	lsrs	r3, r3, #1
   d8dee:	d005      	beq.n	d8dfc <__lo0bits+0x56>
   d8df0:	3201      	adds	r2, #1
   d8df2:	6003      	str	r3, [r0, #0]
   d8df4:	4610      	mov	r0, r2
   d8df6:	4770      	bx	lr
   d8df8:	2000      	movs	r0, #0
   d8dfa:	4770      	bx	lr
   d8dfc:	2020      	movs	r0, #32
   d8dfe:	4770      	bx	lr

000d8e00 <__i2b>:
   d8e00:	b510      	push	{r4, lr}
   d8e02:	460c      	mov	r4, r1
   d8e04:	2101      	movs	r1, #1
   d8e06:	f7ff fee9 	bl	d8bdc <_Balloc>
   d8e0a:	2201      	movs	r2, #1
   d8e0c:	6144      	str	r4, [r0, #20]
   d8e0e:	6102      	str	r2, [r0, #16]
   d8e10:	bd10      	pop	{r4, pc}

000d8e12 <__multiply>:
   d8e12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8e16:	4614      	mov	r4, r2
   d8e18:	690a      	ldr	r2, [r1, #16]
   d8e1a:	6923      	ldr	r3, [r4, #16]
   d8e1c:	429a      	cmp	r2, r3
   d8e1e:	bfb8      	it	lt
   d8e20:	460b      	movlt	r3, r1
   d8e22:	4688      	mov	r8, r1
   d8e24:	bfbc      	itt	lt
   d8e26:	46a0      	movlt	r8, r4
   d8e28:	461c      	movlt	r4, r3
   d8e2a:	f8d8 7010 	ldr.w	r7, [r8, #16]
   d8e2e:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d8e32:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d8e36:	f8d8 1004 	ldr.w	r1, [r8, #4]
   d8e3a:	eb07 0609 	add.w	r6, r7, r9
   d8e3e:	429e      	cmp	r6, r3
   d8e40:	bfc8      	it	gt
   d8e42:	3101      	addgt	r1, #1
   d8e44:	f7ff feca 	bl	d8bdc <_Balloc>
   d8e48:	f100 0514 	add.w	r5, r0, #20
   d8e4c:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   d8e50:	462b      	mov	r3, r5
   d8e52:	2200      	movs	r2, #0
   d8e54:	4563      	cmp	r3, ip
   d8e56:	d202      	bcs.n	d8e5e <__multiply+0x4c>
   d8e58:	f843 2b04 	str.w	r2, [r3], #4
   d8e5c:	e7fa      	b.n	d8e54 <__multiply+0x42>
   d8e5e:	f104 0214 	add.w	r2, r4, #20
   d8e62:	f108 0114 	add.w	r1, r8, #20
   d8e66:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d8e6a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   d8e6e:	9300      	str	r3, [sp, #0]
   d8e70:	9b00      	ldr	r3, [sp, #0]
   d8e72:	9201      	str	r2, [sp, #4]
   d8e74:	4293      	cmp	r3, r2
   d8e76:	d957      	bls.n	d8f28 <__multiply+0x116>
   d8e78:	f8b2 b000 	ldrh.w	fp, [r2]
   d8e7c:	f1bb 0f00 	cmp.w	fp, #0
   d8e80:	d023      	beq.n	d8eca <__multiply+0xb8>
   d8e82:	4689      	mov	r9, r1
   d8e84:	46ae      	mov	lr, r5
   d8e86:	f04f 0800 	mov.w	r8, #0
   d8e8a:	f859 4b04 	ldr.w	r4, [r9], #4
   d8e8e:	f8be a000 	ldrh.w	sl, [lr]
   d8e92:	b2a3      	uxth	r3, r4
   d8e94:	fb0b a303 	mla	r3, fp, r3, sl
   d8e98:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   d8e9c:	f8de 4000 	ldr.w	r4, [lr]
   d8ea0:	4443      	add	r3, r8
   d8ea2:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d8ea6:	fb0b 840a 	mla	r4, fp, sl, r8
   d8eaa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   d8eae:	46f2      	mov	sl, lr
   d8eb0:	b29b      	uxth	r3, r3
   d8eb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   d8eb6:	454f      	cmp	r7, r9
   d8eb8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d8ebc:	f84a 3b04 	str.w	r3, [sl], #4
   d8ec0:	d901      	bls.n	d8ec6 <__multiply+0xb4>
   d8ec2:	46d6      	mov	lr, sl
   d8ec4:	e7e1      	b.n	d8e8a <__multiply+0x78>
   d8ec6:	f8ce 8004 	str.w	r8, [lr, #4]
   d8eca:	9b01      	ldr	r3, [sp, #4]
   d8ecc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   d8ed0:	3204      	adds	r2, #4
   d8ed2:	f1ba 0f00 	cmp.w	sl, #0
   d8ed6:	d021      	beq.n	d8f1c <__multiply+0x10a>
   d8ed8:	682b      	ldr	r3, [r5, #0]
   d8eda:	462c      	mov	r4, r5
   d8edc:	4689      	mov	r9, r1
   d8ede:	f04f 0800 	mov.w	r8, #0
   d8ee2:	f8b9 e000 	ldrh.w	lr, [r9]
   d8ee6:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   d8eea:	fb0a be0e 	mla	lr, sl, lr, fp
   d8eee:	44f0      	add	r8, lr
   d8ef0:	46a3      	mov	fp, r4
   d8ef2:	b29b      	uxth	r3, r3
   d8ef4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   d8ef8:	f84b 3b04 	str.w	r3, [fp], #4
   d8efc:	f859 3b04 	ldr.w	r3, [r9], #4
   d8f00:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   d8f04:	0c1b      	lsrs	r3, r3, #16
   d8f06:	fb0a e303 	mla	r3, sl, r3, lr
   d8f0a:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   d8f0e:	454f      	cmp	r7, r9
   d8f10:	ea4f 4813 	mov.w	r8, r3, lsr #16
   d8f14:	d901      	bls.n	d8f1a <__multiply+0x108>
   d8f16:	465c      	mov	r4, fp
   d8f18:	e7e3      	b.n	d8ee2 <__multiply+0xd0>
   d8f1a:	6063      	str	r3, [r4, #4]
   d8f1c:	3504      	adds	r5, #4
   d8f1e:	e7a7      	b.n	d8e70 <__multiply+0x5e>
   d8f20:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   d8f24:	b913      	cbnz	r3, d8f2c <__multiply+0x11a>
   d8f26:	3e01      	subs	r6, #1
   d8f28:	2e00      	cmp	r6, #0
   d8f2a:	dcf9      	bgt.n	d8f20 <__multiply+0x10e>
   d8f2c:	6106      	str	r6, [r0, #16]
   d8f2e:	b003      	add	sp, #12
   d8f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8f34 <__pow5mult>:
   d8f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8f38:	4615      	mov	r5, r2
   d8f3a:	f012 0203 	ands.w	r2, r2, #3
   d8f3e:	4606      	mov	r6, r0
   d8f40:	460f      	mov	r7, r1
   d8f42:	d007      	beq.n	d8f54 <__pow5mult+0x20>
   d8f44:	3a01      	subs	r2, #1
   d8f46:	4c21      	ldr	r4, [pc, #132]	; (d8fcc <__pow5mult+0x98>)
   d8f48:	2300      	movs	r3, #0
   d8f4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d8f4e:	f7ff fe91 	bl	d8c74 <__multadd>
   d8f52:	4607      	mov	r7, r0
   d8f54:	10ad      	asrs	r5, r5, #2
   d8f56:	d036      	beq.n	d8fc6 <__pow5mult+0x92>
   d8f58:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d8f5a:	b93c      	cbnz	r4, d8f6c <__pow5mult+0x38>
   d8f5c:	2010      	movs	r0, #16
   d8f5e:	f7fb fef5 	bl	d4d4c <malloc>
   d8f62:	6270      	str	r0, [r6, #36]	; 0x24
   d8f64:	6044      	str	r4, [r0, #4]
   d8f66:	6084      	str	r4, [r0, #8]
   d8f68:	6004      	str	r4, [r0, #0]
   d8f6a:	60c4      	str	r4, [r0, #12]
   d8f6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d8f70:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d8f74:	b94c      	cbnz	r4, d8f8a <__pow5mult+0x56>
   d8f76:	f240 2171 	movw	r1, #625	; 0x271
   d8f7a:	4630      	mov	r0, r6
   d8f7c:	f7ff ff40 	bl	d8e00 <__i2b>
   d8f80:	2300      	movs	r3, #0
   d8f82:	f8c8 0008 	str.w	r0, [r8, #8]
   d8f86:	4604      	mov	r4, r0
   d8f88:	6003      	str	r3, [r0, #0]
   d8f8a:	f04f 0800 	mov.w	r8, #0
   d8f8e:	07eb      	lsls	r3, r5, #31
   d8f90:	d50a      	bpl.n	d8fa8 <__pow5mult+0x74>
   d8f92:	4639      	mov	r1, r7
   d8f94:	4622      	mov	r2, r4
   d8f96:	4630      	mov	r0, r6
   d8f98:	f7ff ff3b 	bl	d8e12 <__multiply>
   d8f9c:	4639      	mov	r1, r7
   d8f9e:	4681      	mov	r9, r0
   d8fa0:	4630      	mov	r0, r6
   d8fa2:	f7ff fe50 	bl	d8c46 <_Bfree>
   d8fa6:	464f      	mov	r7, r9
   d8fa8:	106d      	asrs	r5, r5, #1
   d8faa:	d00c      	beq.n	d8fc6 <__pow5mult+0x92>
   d8fac:	6820      	ldr	r0, [r4, #0]
   d8fae:	b108      	cbz	r0, d8fb4 <__pow5mult+0x80>
   d8fb0:	4604      	mov	r4, r0
   d8fb2:	e7ec      	b.n	d8f8e <__pow5mult+0x5a>
   d8fb4:	4622      	mov	r2, r4
   d8fb6:	4621      	mov	r1, r4
   d8fb8:	4630      	mov	r0, r6
   d8fba:	f7ff ff2a 	bl	d8e12 <__multiply>
   d8fbe:	6020      	str	r0, [r4, #0]
   d8fc0:	f8c0 8000 	str.w	r8, [r0]
   d8fc4:	e7f4      	b.n	d8fb0 <__pow5mult+0x7c>
   d8fc6:	4638      	mov	r0, r7
   d8fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8fcc:	000d9b80 	.word	0x000d9b80

000d8fd0 <__lshift>:
   d8fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8fd4:	460c      	mov	r4, r1
   d8fd6:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d8fda:	6926      	ldr	r6, [r4, #16]
   d8fdc:	6849      	ldr	r1, [r1, #4]
   d8fde:	68a3      	ldr	r3, [r4, #8]
   d8fe0:	4456      	add	r6, sl
   d8fe2:	4607      	mov	r7, r0
   d8fe4:	4691      	mov	r9, r2
   d8fe6:	1c75      	adds	r5, r6, #1
   d8fe8:	42ab      	cmp	r3, r5
   d8fea:	da02      	bge.n	d8ff2 <__lshift+0x22>
   d8fec:	3101      	adds	r1, #1
   d8fee:	005b      	lsls	r3, r3, #1
   d8ff0:	e7fa      	b.n	d8fe8 <__lshift+0x18>
   d8ff2:	4638      	mov	r0, r7
   d8ff4:	f7ff fdf2 	bl	d8bdc <_Balloc>
   d8ff8:	2300      	movs	r3, #0
   d8ffa:	4680      	mov	r8, r0
   d8ffc:	f100 0114 	add.w	r1, r0, #20
   d9000:	461a      	mov	r2, r3
   d9002:	4553      	cmp	r3, sl
   d9004:	da03      	bge.n	d900e <__lshift+0x3e>
   d9006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   d900a:	3301      	adds	r3, #1
   d900c:	e7f9      	b.n	d9002 <__lshift+0x32>
   d900e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   d9012:	6920      	ldr	r0, [r4, #16]
   d9014:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   d9018:	f019 091f 	ands.w	r9, r9, #31
   d901c:	f104 0114 	add.w	r1, r4, #20
   d9020:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   d9024:	d014      	beq.n	d9050 <__lshift+0x80>
   d9026:	f1c9 0c20 	rsb	ip, r9, #32
   d902a:	2200      	movs	r2, #0
   d902c:	6808      	ldr	r0, [r1, #0]
   d902e:	fa00 f009 	lsl.w	r0, r0, r9
   d9032:	4302      	orrs	r2, r0
   d9034:	469a      	mov	sl, r3
   d9036:	f843 2b04 	str.w	r2, [r3], #4
   d903a:	f851 2b04 	ldr.w	r2, [r1], #4
   d903e:	458e      	cmp	lr, r1
   d9040:	fa22 f20c 	lsr.w	r2, r2, ip
   d9044:	d8f2      	bhi.n	d902c <__lshift+0x5c>
   d9046:	f8ca 2004 	str.w	r2, [sl, #4]
   d904a:	b142      	cbz	r2, d905e <__lshift+0x8e>
   d904c:	1cb5      	adds	r5, r6, #2
   d904e:	e006      	b.n	d905e <__lshift+0x8e>
   d9050:	3b04      	subs	r3, #4
   d9052:	f851 2b04 	ldr.w	r2, [r1], #4
   d9056:	f843 2f04 	str.w	r2, [r3, #4]!
   d905a:	458e      	cmp	lr, r1
   d905c:	d8f9      	bhi.n	d9052 <__lshift+0x82>
   d905e:	3d01      	subs	r5, #1
   d9060:	4638      	mov	r0, r7
   d9062:	f8c8 5010 	str.w	r5, [r8, #16]
   d9066:	4621      	mov	r1, r4
   d9068:	f7ff fded 	bl	d8c46 <_Bfree>
   d906c:	4640      	mov	r0, r8
   d906e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d9072 <__mcmp>:
   d9072:	6903      	ldr	r3, [r0, #16]
   d9074:	690a      	ldr	r2, [r1, #16]
   d9076:	1a9b      	subs	r3, r3, r2
   d9078:	b510      	push	{r4, lr}
   d907a:	d111      	bne.n	d90a0 <__mcmp+0x2e>
   d907c:	0092      	lsls	r2, r2, #2
   d907e:	3014      	adds	r0, #20
   d9080:	3114      	adds	r1, #20
   d9082:	1883      	adds	r3, r0, r2
   d9084:	440a      	add	r2, r1
   d9086:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   d908a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   d908e:	428c      	cmp	r4, r1
   d9090:	d002      	beq.n	d9098 <__mcmp+0x26>
   d9092:	d307      	bcc.n	d90a4 <__mcmp+0x32>
   d9094:	2001      	movs	r0, #1
   d9096:	bd10      	pop	{r4, pc}
   d9098:	4298      	cmp	r0, r3
   d909a:	d3f4      	bcc.n	d9086 <__mcmp+0x14>
   d909c:	2000      	movs	r0, #0
   d909e:	bd10      	pop	{r4, pc}
   d90a0:	4618      	mov	r0, r3
   d90a2:	bd10      	pop	{r4, pc}
   d90a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d90a8:	bd10      	pop	{r4, pc}

000d90aa <__mdiff>:
   d90aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d90ae:	460c      	mov	r4, r1
   d90b0:	4607      	mov	r7, r0
   d90b2:	4611      	mov	r1, r2
   d90b4:	4620      	mov	r0, r4
   d90b6:	4615      	mov	r5, r2
   d90b8:	f7ff ffdb 	bl	d9072 <__mcmp>
   d90bc:	1e06      	subs	r6, r0, #0
   d90be:	d108      	bne.n	d90d2 <__mdiff+0x28>
   d90c0:	4631      	mov	r1, r6
   d90c2:	4638      	mov	r0, r7
   d90c4:	f7ff fd8a 	bl	d8bdc <_Balloc>
   d90c8:	2301      	movs	r3, #1
   d90ca:	6103      	str	r3, [r0, #16]
   d90cc:	6146      	str	r6, [r0, #20]
   d90ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d90d2:	bfbc      	itt	lt
   d90d4:	4623      	movlt	r3, r4
   d90d6:	462c      	movlt	r4, r5
   d90d8:	4638      	mov	r0, r7
   d90da:	6861      	ldr	r1, [r4, #4]
   d90dc:	bfba      	itte	lt
   d90de:	461d      	movlt	r5, r3
   d90e0:	2601      	movlt	r6, #1
   d90e2:	2600      	movge	r6, #0
   d90e4:	f7ff fd7a 	bl	d8bdc <_Balloc>
   d90e8:	692b      	ldr	r3, [r5, #16]
   d90ea:	60c6      	str	r6, [r0, #12]
   d90ec:	6926      	ldr	r6, [r4, #16]
   d90ee:	f105 0914 	add.w	r9, r5, #20
   d90f2:	3414      	adds	r4, #20
   d90f4:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   d90f8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   d90fc:	f100 0514 	add.w	r5, r0, #20
   d9100:	f04f 0c00 	mov.w	ip, #0
   d9104:	f854 3b04 	ldr.w	r3, [r4], #4
   d9108:	f859 2b04 	ldr.w	r2, [r9], #4
   d910c:	fa1c f183 	uxtah	r1, ip, r3
   d9110:	fa1f fe82 	uxth.w	lr, r2
   d9114:	0c12      	lsrs	r2, r2, #16
   d9116:	ebce 0101 	rsb	r1, lr, r1
   d911a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   d911e:	eb03 4321 	add.w	r3, r3, r1, asr #16
   d9122:	b289      	uxth	r1, r1
   d9124:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d9128:	45c8      	cmp	r8, r9
   d912a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   d912e:	46a6      	mov	lr, r4
   d9130:	f845 3b04 	str.w	r3, [r5], #4
   d9134:	d8e6      	bhi.n	d9104 <__mdiff+0x5a>
   d9136:	45be      	cmp	lr, r7
   d9138:	d20e      	bcs.n	d9158 <__mdiff+0xae>
   d913a:	f85e 1b04 	ldr.w	r1, [lr], #4
   d913e:	fa1c f281 	uxtah	r2, ip, r1
   d9142:	1413      	asrs	r3, r2, #16
   d9144:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   d9148:	b292      	uxth	r2, r2
   d914a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   d914e:	ea4f 4c23 	mov.w	ip, r3, asr #16
   d9152:	f845 2b04 	str.w	r2, [r5], #4
   d9156:	e7ee      	b.n	d9136 <__mdiff+0x8c>
   d9158:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   d915c:	b90b      	cbnz	r3, d9162 <__mdiff+0xb8>
   d915e:	3e01      	subs	r6, #1
   d9160:	e7fa      	b.n	d9158 <__mdiff+0xae>
   d9162:	6106      	str	r6, [r0, #16]
   d9164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d9168 <__ulp>:
   d9168:	4b12      	ldr	r3, [pc, #72]	; (d91b4 <__ulp+0x4c>)
   d916a:	ee10 2a90 	vmov	r2, s1
   d916e:	401a      	ands	r2, r3
   d9170:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   d9174:	2b00      	cmp	r3, #0
   d9176:	dd02      	ble.n	d917e <__ulp+0x16>
   d9178:	2000      	movs	r0, #0
   d917a:	4619      	mov	r1, r3
   d917c:	e017      	b.n	d91ae <__ulp+0x46>
   d917e:	425b      	negs	r3, r3
   d9180:	151b      	asrs	r3, r3, #20
   d9182:	2b13      	cmp	r3, #19
   d9184:	f04f 0000 	mov.w	r0, #0
   d9188:	f04f 0100 	mov.w	r1, #0
   d918c:	dc04      	bgt.n	d9198 <__ulp+0x30>
   d918e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   d9192:	fa42 f103 	asr.w	r1, r2, r3
   d9196:	e00a      	b.n	d91ae <__ulp+0x46>
   d9198:	3b14      	subs	r3, #20
   d919a:	2b1e      	cmp	r3, #30
   d919c:	f04f 0201 	mov.w	r2, #1
   d91a0:	bfda      	itte	le
   d91a2:	f1c3 031f 	rsble	r3, r3, #31
   d91a6:	fa02 f303 	lslle.w	r3, r2, r3
   d91aa:	4613      	movgt	r3, r2
   d91ac:	4618      	mov	r0, r3
   d91ae:	ec41 0b10 	vmov	d0, r0, r1
   d91b2:	4770      	bx	lr
   d91b4:	7ff00000 	.word	0x7ff00000

000d91b8 <__b2d>:
   d91b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d91ba:	6905      	ldr	r5, [r0, #16]
   d91bc:	f100 0614 	add.w	r6, r0, #20
   d91c0:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   d91c4:	1f2f      	subs	r7, r5, #4
   d91c6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d91ca:	4620      	mov	r0, r4
   d91cc:	f7ff fdcb 	bl	d8d66 <__hi0bits>
   d91d0:	f1c0 0320 	rsb	r3, r0, #32
   d91d4:	280a      	cmp	r0, #10
   d91d6:	600b      	str	r3, [r1, #0]
   d91d8:	dc14      	bgt.n	d9204 <__b2d+0x4c>
   d91da:	f1c0 0e0b 	rsb	lr, r0, #11
   d91de:	fa24 f10e 	lsr.w	r1, r4, lr
   d91e2:	42be      	cmp	r6, r7
   d91e4:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   d91e8:	bf34      	ite	cc
   d91ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d91ee:	2100      	movcs	r1, #0
   d91f0:	3015      	adds	r0, #21
   d91f2:	fa04 f000 	lsl.w	r0, r4, r0
   d91f6:	fa21 f10e 	lsr.w	r1, r1, lr
   d91fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d91fe:	ea40 0201 	orr.w	r2, r0, r1
   d9202:	e023      	b.n	d924c <__b2d+0x94>
   d9204:	42be      	cmp	r6, r7
   d9206:	bf3a      	itte	cc
   d9208:	f1a5 0708 	subcc.w	r7, r5, #8
   d920c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d9210:	2100      	movcs	r1, #0
   d9212:	380b      	subs	r0, #11
   d9214:	d015      	beq.n	d9242 <__b2d+0x8a>
   d9216:	4084      	lsls	r4, r0
   d9218:	f1c0 0520 	rsb	r5, r0, #32
   d921c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   d9220:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   d9224:	42b7      	cmp	r7, r6
   d9226:	fa21 fe05 	lsr.w	lr, r1, r5
   d922a:	ea44 030e 	orr.w	r3, r4, lr
   d922e:	bf8c      	ite	hi
   d9230:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   d9234:	2400      	movls	r4, #0
   d9236:	fa01 f000 	lsl.w	r0, r1, r0
   d923a:	40ec      	lsrs	r4, r5
   d923c:	ea40 0204 	orr.w	r2, r0, r4
   d9240:	e004      	b.n	d924c <__b2d+0x94>
   d9242:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   d9246:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d924a:	460a      	mov	r2, r1
   d924c:	ec43 2b10 	vmov	d0, r2, r3
   d9250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9252 <__d2b>:
   d9252:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d9256:	460e      	mov	r6, r1
   d9258:	2101      	movs	r1, #1
   d925a:	ec59 8b10 	vmov	r8, r9, d0
   d925e:	4615      	mov	r5, r2
   d9260:	f7ff fcbc 	bl	d8bdc <_Balloc>
   d9264:	f3c9 540a 	ubfx	r4, r9, #20, #11
   d9268:	4607      	mov	r7, r0
   d926a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   d926e:	b10c      	cbz	r4, d9274 <__d2b+0x22>
   d9270:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9274:	9301      	str	r3, [sp, #4]
   d9276:	f1b8 0f00 	cmp.w	r8, #0
   d927a:	d019      	beq.n	d92b0 <__d2b+0x5e>
   d927c:	a802      	add	r0, sp, #8
   d927e:	f840 8d08 	str.w	r8, [r0, #-8]!
   d9282:	f7ff fd90 	bl	d8da6 <__lo0bits>
   d9286:	9b00      	ldr	r3, [sp, #0]
   d9288:	b148      	cbz	r0, d929e <__d2b+0x4c>
   d928a:	9a01      	ldr	r2, [sp, #4]
   d928c:	f1c0 0120 	rsb	r1, r0, #32
   d9290:	fa02 f101 	lsl.w	r1, r2, r1
   d9294:	430b      	orrs	r3, r1
   d9296:	40c2      	lsrs	r2, r0
   d9298:	617b      	str	r3, [r7, #20]
   d929a:	9201      	str	r2, [sp, #4]
   d929c:	e000      	b.n	d92a0 <__d2b+0x4e>
   d929e:	617b      	str	r3, [r7, #20]
   d92a0:	9b01      	ldr	r3, [sp, #4]
   d92a2:	61bb      	str	r3, [r7, #24]
   d92a4:	2b00      	cmp	r3, #0
   d92a6:	bf14      	ite	ne
   d92a8:	2102      	movne	r1, #2
   d92aa:	2101      	moveq	r1, #1
   d92ac:	6139      	str	r1, [r7, #16]
   d92ae:	e007      	b.n	d92c0 <__d2b+0x6e>
   d92b0:	a801      	add	r0, sp, #4
   d92b2:	f7ff fd78 	bl	d8da6 <__lo0bits>
   d92b6:	9b01      	ldr	r3, [sp, #4]
   d92b8:	617b      	str	r3, [r7, #20]
   d92ba:	2101      	movs	r1, #1
   d92bc:	6139      	str	r1, [r7, #16]
   d92be:	3020      	adds	r0, #32
   d92c0:	b134      	cbz	r4, d92d0 <__d2b+0x7e>
   d92c2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   d92c6:	4404      	add	r4, r0
   d92c8:	6034      	str	r4, [r6, #0]
   d92ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   d92ce:	e009      	b.n	d92e4 <__d2b+0x92>
   d92d0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   d92d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   d92d8:	6030      	str	r0, [r6, #0]
   d92da:	6918      	ldr	r0, [r3, #16]
   d92dc:	f7ff fd43 	bl	d8d66 <__hi0bits>
   d92e0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   d92e4:	6028      	str	r0, [r5, #0]
   d92e6:	4638      	mov	r0, r7
   d92e8:	b003      	add	sp, #12
   d92ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d92ee <__ratio>:
   d92ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d92f2:	4688      	mov	r8, r1
   d92f4:	4669      	mov	r1, sp
   d92f6:	4681      	mov	r9, r0
   d92f8:	f7ff ff5e 	bl	d91b8 <__b2d>
   d92fc:	a901      	add	r1, sp, #4
   d92fe:	4640      	mov	r0, r8
   d9300:	ec55 4b10 	vmov	r4, r5, d0
   d9304:	f7ff ff58 	bl	d91b8 <__b2d>
   d9308:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d930c:	f8d8 2010 	ldr.w	r2, [r8, #16]
   d9310:	1a9a      	subs	r2, r3, r2
   d9312:	e89d 000a 	ldmia.w	sp, {r1, r3}
   d9316:	1ac9      	subs	r1, r1, r3
   d9318:	ec57 6b10 	vmov	r6, r7, d0
   d931c:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   d9320:	2b00      	cmp	r3, #0
   d9322:	bfcc      	ite	gt
   d9324:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   d9328:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   d932c:	4632      	mov	r2, r6
   d932e:	463b      	mov	r3, r7
   d9330:	4620      	mov	r0, r4
   d9332:	4629      	mov	r1, r5
   d9334:	f7fd fbb2 	bl	d6a9c <__aeabi_ddiv>
   d9338:	ec41 0b10 	vmov	d0, r0, r1
   d933c:	b003      	add	sp, #12
   d933e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d9342 <__copybits>:
   d9342:	3901      	subs	r1, #1
   d9344:	b510      	push	{r4, lr}
   d9346:	1149      	asrs	r1, r1, #5
   d9348:	6914      	ldr	r4, [r2, #16]
   d934a:	3101      	adds	r1, #1
   d934c:	f102 0314 	add.w	r3, r2, #20
   d9350:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d9354:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d9358:	42a3      	cmp	r3, r4
   d935a:	4602      	mov	r2, r0
   d935c:	d204      	bcs.n	d9368 <__copybits+0x26>
   d935e:	f853 2b04 	ldr.w	r2, [r3], #4
   d9362:	f840 2b04 	str.w	r2, [r0], #4
   d9366:	e7f7      	b.n	d9358 <__copybits+0x16>
   d9368:	2300      	movs	r3, #0
   d936a:	428a      	cmp	r2, r1
   d936c:	d202      	bcs.n	d9374 <__copybits+0x32>
   d936e:	f842 3b04 	str.w	r3, [r2], #4
   d9372:	e7fa      	b.n	d936a <__copybits+0x28>
   d9374:	bd10      	pop	{r4, pc}

000d9376 <__any_on>:
   d9376:	f100 0214 	add.w	r2, r0, #20
   d937a:	6900      	ldr	r0, [r0, #16]
   d937c:	114b      	asrs	r3, r1, #5
   d937e:	4298      	cmp	r0, r3
   d9380:	b510      	push	{r4, lr}
   d9382:	db0c      	blt.n	d939e <__any_on+0x28>
   d9384:	dd0c      	ble.n	d93a0 <__any_on+0x2a>
   d9386:	f011 011f 	ands.w	r1, r1, #31
   d938a:	d009      	beq.n	d93a0 <__any_on+0x2a>
   d938c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   d9390:	fa24 f001 	lsr.w	r0, r4, r1
   d9394:	fa00 f101 	lsl.w	r1, r0, r1
   d9398:	428c      	cmp	r4, r1
   d939a:	d10c      	bne.n	d93b6 <__any_on+0x40>
   d939c:	e000      	b.n	d93a0 <__any_on+0x2a>
   d939e:	4603      	mov	r3, r0
   d93a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d93a4:	4293      	cmp	r3, r2
   d93a6:	d904      	bls.n	d93b2 <__any_on+0x3c>
   d93a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   d93ac:	2900      	cmp	r1, #0
   d93ae:	d0f9      	beq.n	d93a4 <__any_on+0x2e>
   d93b0:	e001      	b.n	d93b6 <__any_on+0x40>
   d93b2:	2000      	movs	r0, #0
   d93b4:	bd10      	pop	{r4, pc}
   d93b6:	2001      	movs	r0, #1
   d93b8:	bd10      	pop	{r4, pc}

000d93ba <_calloc_r>:
   d93ba:	b538      	push	{r3, r4, r5, lr}
   d93bc:	fb02 f401 	mul.w	r4, r2, r1
   d93c0:	4621      	mov	r1, r4
   d93c2:	f7fb fcf3 	bl	d4dac <_malloc_r>
   d93c6:	4605      	mov	r5, r0
   d93c8:	b118      	cbz	r0, d93d2 <_calloc_r+0x18>
   d93ca:	4622      	mov	r2, r4
   d93cc:	2100      	movs	r1, #0
   d93ce:	f7fd fe98 	bl	d7102 <memset>
   d93d2:	4628      	mov	r0, r5
   d93d4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d93d8 <nanf>:
   d93d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; d93e0 <nanf+0x8>
   d93dc:	4770      	bx	lr
   d93de:	bf00      	nop
   d93e0:	7fc00000 	.word	0x7fc00000

000d93e4 <__env_lock>:
   d93e4:	4770      	bx	lr

000d93e6 <__env_unlock>:
   d93e6:	4770      	bx	lr

000d93e8 <dynalib_user>:
   d93e8:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d93f8:	0000 0000 3425 312e 2066 416d 0068 3325     ....%4.1f mAh.%3
   d9408:	312e 2066 2525 4e00 0041 3425 322e 2066     .1f %%.NA.%4.2f 
   d9418:	416d 5300 6174 7574 3a73 2520 2e34 6630     mA.Status: %4.0f
   d9428:	6d20 6841 202c 3325 312e 2566 2025 6863      mAh, %3.1f%% ch
   d9438:	7261 6567 202c 3425 332e 2066 416d 6520     arge, %4.3f mA e
   d9448:	616c 7370 6465 7420 6d69 3a65 6925 253a     lapsed time:%i:%
   d9458:	3a69 6925 253a 0069 6c53 6565 6970 676e     i:%i:%i.Sleeping
   d9468:	203a 7563 7272 6e65 3a74 2520 2e34 6633     : current: %4.3f
   d9478:	6d20 2c41 6120 6576 6172 6567 203a 3425      mA, average: %4
   d9488:	332e 2066 416d 5700 6961 6974 676e 6620     .3f mA.Waiting f
   d9498:	726f 6420 7665 6369 2065 6f74 7320 656c     or device to sle
   d94a8:	7065 5300 6174 7574 0073 6142 7474 7265     ep.Status.Batter
   d94b8:	0079 6142 7474 7265 2079 6143 6170 6963     y.Battery Capaci
   d94c8:	7974 5420 7365 2074 6f4d 6564 5300 656c     ty Test Mode.Sle
   d94d8:	7065 5300 656c 7065 5420 7365 2074 6f4d     ep.Sleep Test Mo
   d94e8:	6564 4400 7665 6369 2065 7741 6b61 2065     de.Device Awake 
   d94f8:	202d 6552 6573 7474 6e69 0067 7453 7461     - Resetting.Stat
   d9508:	0065 6544 6976 6563 5320 656c 7065 6e69     e.Device Sleepin
   d9518:	2067 202d 7473 7261 6974 676e 7420 7365     g - starting tes
   d9528:	0074 6553 2d74 6143 6170 6963 7974 5300     t.Set-Capacity.S
   d9538:	7465 432d 6168 6772 0065 6552 6573 2d74     et-Charge.Reset-
   d9548:	6554 7473 4200 7461 6574 7972 6f2d 2d72     Test.Battery-or-
   d9558:	6c53 6565 2d70 6f4d 6564 4c00 4354 3134     Sleep-Mode.LTC41
   d9568:	3035 4320 756f 6f6c 626d 4320 756f 746e     50 Coulomb Count
   d9578:	7265 5300 6174 7472 7075 0000               er.Startup..

000d9584 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d958c:	4e31 000d 4e37 000d 4e8d 000d 4e45 000d     1N..7N...N..EN..
   d959c:	4e33 000d                                   3N..

000d95a0 <_ZTVN5spark13EthernetClassE>:
	...
   d95a8:	54a3 000d 5499 000d 548f 000d 5485 000d     .T...T...T...T..
   d95b8:	5479 000d 546d 000d 5461 000d 5459 000d     yT..mT..aT..YT..
   d95c8:	544f 000d 5445 000d 5871 000d               OT..ET..qX..

000d95d4 <_ZTV7TwoWire>:
	...
   d95dc:	54c1 000d 550b 000d 54e3 000d 54c3 000d     .T...U...T...T..
   d95ec:	54eb 000d 54f3 000d 54fb 000d 5503 000d     .T...T...T...U..

000d95fc <_ZTV9IPAddress>:
	...
   d9604:	55a9 000d 5599 000d 559b 000d 6162 6475     .U...U...U..baud
   d9614:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d9624:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d9634:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d9644:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d9654:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d9664:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d9674:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d9684:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d9694:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d96a4:	203d 6400 7465 6961 736c 3d20 0020 0a0d     = .details = ...
   d96b4:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
   d96c4:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
   d96d4:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   d96e4:	696e 0063 6c61 006c                         nic.all.

000d96ec <_ZTVN5spark9MeshClassE>:
	...
   d96f4:	56eb 000d 56e1 000d 56d7 000d 56cd 000d     .V...V...V...V..
   d9704:	56c1 000d 56b5 000d 56a9 000d 56a1 000d     .V...V...V...V..
   d9714:	5697 000d 568d 000d 5871 000d               .V...V..qX..

000d9720 <_ZTVN5spark12NetworkClassE>:
	...
   d9728:	5809 000d 5813 000d 581d 000d 5827 000d     .X...X...X..'X..
   d9738:	5831 000d 583d 000d 5849 000d 5855 000d     1X..=X..IX..UX..
   d9748:	585d 000d 5867 000d 5871 000d               ]X..gX..qX..

000d9754 <_ZTV8SPIClass>:
	...
   d975c:	5a0d 000d 5a0f 000d 2b25 3330 3a64 3025     .Z...Z..%+03d:%0
   d976c:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d977c:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d978c <_ZTV11USARTSerial>:
	...
   d9794:	5cc1 000d 5d11 000d 5d1f 000d 5951 000d     .\...]...]..QY..
   d97a4:	5cd5 000d 5cf7 000d 5ce3 000d 5d0b 000d     .\...\...\...]..
   d97b4:	5cc3 000d 5cc7 000d                         .\...\..

000d97bc <_ZTV9USBSerial>:
	...
   d97c4:	5dc9 000d 5e19 000d 5e27 000d 5951 000d     .]...^..'^..QY..
   d97d4:	5e05 000d 5dcb 000d 5de1 000d 5e13 000d     .^...]...]...^..
   d97e4:	5df7 000d 5dc5 000d                         .]...]..

000d97ec <_ZTVN5spark9WiFiClassE>:
	...
   d97f4:	5f2b 000d 5f21 000d 5f17 000d 5ecd 000d     +_..!_..._...^..
   d9804:	5f0b 000d 5eff 000d 5ef3 000d 5eeb 000d     ._...^...^...^..
   d9814:	5ee1 000d 5ed7 000d 5871 000d               .^...^..qX..

000d9820 <_ZSt7nothrow>:
	...

000d9821 <_ctype_>:
   d9821:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d9831:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9841:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d9851:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d9861:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d9871:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d9881:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d9891:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d98a1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d9924 <__sf_fake_stdin>:
	...

000d9944 <__sf_fake_stdout>:
	...

000d9964 <__sf_fake_stderr>:
	...
   d9984:	0043 4f50 4953 0058 002e 0000               C.POSIX.....

000d9990 <__month_lengths>:
   d9990:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d99a0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d99b0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d99c0:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d99d0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d99e0:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000d99f0 <fpi.5344>:
   d99f0:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   d9a00:	0000 0000                                   ....

000d9a04 <fpinan.5380>:
   d9a04:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   d9a14:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.
   d9a24:	0000 0000                                   ....

000d9a28 <tinytens>:
   d9a28:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   d9a38:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   d9a48:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   d9a58:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   d9a68:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   d9a78:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   d9a88:	2575 006e 0000 0000                         u%n.....

000d9a90 <__mprec_tens>:
   d9a90:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   d9aa0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   d9ab0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   d9ac0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   d9ad0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   d9ae0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   d9af0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   d9b00:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   d9b10:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   d9b20:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   d9b30:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   d9b40:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   d9b50:	9db4 79d9 7843 44ea                         ...yCx.D

000d9b58 <__mprec_bigtens>:
   d9b58:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   d9b68:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   d9b78:	bf3c 7f73 4fdd 7515                         <.s..O.u

000d9b80 <p05.5387>:
   d9b80:	0005 0000 0019 0000 007d 0000               ........}...

000d9b8c <link_const_variable_data_end>:
   d9b8c:	000d48c5 	.word	0x000d48c5
   d9b90:	000d4e09 	.word	0x000d4e09
   d9b94:	000d54ad 	.word	0x000d54ad
   d9b98:	000d567d 	.word	0x000d567d
   d9b9c:	000d57b9 	.word	0x000d57b9
   d9ba0:	000d593d 	.word	0x000d593d
   d9ba4:	000d59f1 	.word	0x000d59f1
   d9ba8:	000d5b69 	.word	0x000d5b69
   d9bac:	000d5cad 	.word	0x000d5cad
   d9bb0:	000d5f35 	.word	0x000d5f35
   d9bb4:	000d6249 	.word	0x000d6249
   d9bb8:	000d630d 	.word	0x000d630d
   d9bbc:	000d6391 	.word	0x000d6391
   d9bc0:	000d6415 	.word	0x000d6415

000d9bc4 <link_constructors_end>:
	...
