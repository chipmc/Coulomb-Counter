
/Users/chipmc/Documents/Maker/Particle/Projects/Coulomb-Counter/target/Coulomb-Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005820  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a5840  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000114  20000000  080a5844  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000620  20000114  20000114  00040114  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a5958  080a5958  00035958  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a5980  080a5980  00035980  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a9a81  00000000  00000000  00035984  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f90f  00000000  00000000  000df405  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000132ff  00000000  00000000  000eed14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ee8  00000000  00000000  00102013  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003120  00000000  00000000  00103efb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024023  00000000  00000000  0010701b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000228f3  00000000  00000000  0012b03e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a5ef8  00000000  00000000  0014d931  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bf5c  00000000  00000000  001f382c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f002 ff41 	bl	80a2eb8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f002 ff46 	bl	80a2ece <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a5844 	.word	0x080a5844
 80a0050:	20000114 	.word	0x20000114
 80a0054:	20000114 	.word	0x20000114
 80a0058:	20000734 	.word	0x20000734
 80a005c:	20000734 	.word	0x20000734

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f001 fd4d 	bl	80a1b00 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a5804 	.word	0x080a5804
 80a0088:	080a5838 	.word	0x080a5838

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b8e0 	b.w	80a0250 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f9f7 	bl	80a0484 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f001 bcf3 	b.w	80a1a84 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f000 bcc5 	b.w	80a0a2c <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f000 bccb 	b.w	80a0a3c <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_Z5myISRv>:
  snprintf(data, sizeof(data), "Status: %4.0f mAh, %3.1f%% charge, %4.3f mA at time %i:%i:%i:%i seconds", battery_data.currentCapacity_mAh, battery_data.currentCharge_percent, mA, Time.day(elapsedSec)-1, Time.hour(elapsedSec), Time.minute(elapsedSec), Time.second(elapsedSec));
  Particle.publish("Status",data,PRIVATE);
}

void myISR() // Run automatically for falling edge on D3 (INT1)
{
 80a00b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  static boolean polarity;
  // Determine delay since last interrupt (for mA calculation)
  // Note that first interrupt will be incorrect (no previous time!)
  lasttime = runTime;
 80a00bc:	4c24      	ldr	r4, [pc, #144]	; (80a0150 <_Z5myISRv+0x98>)
 80a00be:	4e25      	ldr	r6, [pc, #148]	; (80a0154 <_Z5myISRv+0x9c>)
 80a00c0:	6823      	ldr	r3, [r4, #0]
 80a00c2:	4625      	mov	r5, r4
 80a00c4:	6033      	str	r3, [r6, #0]

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a00c6:	f000 fab3 	bl	80a0630 <HAL_Timer_Get_Micro_Seconds>
  runTime = micros();
 80a00ca:	6020      	str	r0, [r4, #0]

  // Get polarity value 
  polarity = digitalRead(polPin);
 80a00cc:	2003      	movs	r0, #3
 80a00ce:	f001 fd91 	bl	80a1bf4 <digitalRead>
 80a00d2:	4b21      	ldr	r3, [pc, #132]	; (80a0158 <_Z5myISRv+0xa0>)
 80a00d4:	1e07      	subs	r7, r0, #0
 80a00d6:	bf14      	ite	ne
 80a00d8:	2201      	movne	r2, #1
 80a00da:	2200      	moveq	r2, #0
 80a00dc:	701a      	strb	r2, [r3, #0]
 80a00de:	4c1f      	ldr	r4, [pc, #124]	; (80a015c <_Z5myISRv+0xa4>)
 80a00e0:	4b1f      	ldr	r3, [pc, #124]	; (80a0160 <_Z5myISRv+0xa8>)
 80a00e2:	46b0      	mov	r8, r6
  if (polarity) // high = charging
  {
    battery_data.currentCapacity_mAh += ah_quanta;
 80a00e4:	68a0      	ldr	r0, [r4, #8]
 80a00e6:	4e1f      	ldr	r6, [pc, #124]	; (80a0164 <_Z5myISRv+0xac>)
 80a00e8:	6819      	ldr	r1, [r3, #0]
  lasttime = runTime;
  runTime = micros();

  // Get polarity value 
  polarity = digitalRead(polPin);
  if (polarity) // high = charging
 80a00ea:	d007      	beq.n	80a00fc <_Z5myISRv+0x44>
  {
    battery_data.currentCapacity_mAh += ah_quanta;
 80a00ec:	f002 fc5c 	bl	80a29a8 <__addsf3>
 80a00f0:	60a0      	str	r0, [r4, #8]
    battery_data.currentCharge_percent += percent_quanta;
 80a00f2:	6920      	ldr	r0, [r4, #16]
 80a00f4:	6831      	ldr	r1, [r6, #0]
 80a00f6:	f002 fc57 	bl	80a29a8 <__addsf3>
 80a00fa:	e006      	b.n	80a010a <_Z5myISRv+0x52>
  }
  else // low = discharging
  {
    battery_data.currentCapacity_mAh -= ah_quanta;
 80a00fc:	f002 fc52 	bl	80a29a4 <__aeabi_fsub>
 80a0100:	60a0      	str	r0, [r4, #8]
    battery_data.currentCharge_percent -= percent_quanta;
 80a0102:	6920      	ldr	r0, [r4, #16]
 80a0104:	6831      	ldr	r1, [r6, #0]
 80a0106:	f002 fc4d 	bl	80a29a4 <__aeabi_fsub>
 80a010a:	6120      	str	r0, [r4, #16]
  }

  // Calculate mA from time delay (optional)
  mA = 614.4/((runTime-lasttime)/1000000);
 80a010c:	682b      	ldr	r3, [r5, #0]
 80a010e:	f8d8 0000 	ldr.w	r0, [r8]
 80a0112:	1a1b      	subs	r3, r3, r0
 80a0114:	4814      	ldr	r0, [pc, #80]	; (80a0168 <_Z5myISRv+0xb0>)
 80a0116:	fbb3 f0f0 	udiv	r0, r3, r0
 80a011a:	f002 f881 	bl	80a2220 <__aeabi_ui2d>
 80a011e:	460b      	mov	r3, r1
 80a0120:	4602      	mov	r2, r0
 80a0122:	a109      	add	r1, pc, #36	; (adr r1, 80a0148 <_Z5myISRv+0x90>)
 80a0124:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a0128:	f002 fa1a 	bl	80a2560 <__aeabi_ddiv>
 80a012c:	f002 fbe6 	bl	80a28fc <__aeabi_d2f>
 80a0130:	4b0e      	ldr	r3, [pc, #56]	; (80a016c <_Z5myISRv+0xb4>)
 80a0132:	6018      	str	r0, [r3, #0]

  // If charging, we'll set mA negative (optional)
  if (polarity) mA = mA * -1.0;
 80a0134:	b11f      	cbz	r7, 80a013e <_Z5myISRv+0x86>
 80a0136:	681a      	ldr	r2, [r3, #0]
 80a0138:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a013c:	601a      	str	r2, [r3, #0]
  
  // Set isrflag so main loop knows an interrupt occurred
  isrflag = true;
 80a013e:	4b0c      	ldr	r3, [pc, #48]	; (80a0170 <_Z5myISRv+0xb8>)
 80a0140:	2201      	movs	r2, #1
 80a0142:	701a      	strb	r2, [r3, #0]
 80a0144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0148:	33333333 	.word	0x33333333
 80a014c:	40833333 	.word	0x40833333
 80a0150:	20000120 	.word	0x20000120
 80a0154:	20000140 	.word	0x20000140
 80a0158:	2000011c 	.word	0x2000011c
 80a015c:	20000128 	.word	0x20000128
 80a0160:	20000010 	.word	0x20000010
 80a0164:	20000148 	.word	0x20000148
 80a0168:	000f4240 	.word	0x000f4240
 80a016c:	20000144 	.word	0x20000144
 80a0170:	20000124 	.word	0x20000124

080a0174 <_Z9resetTest6String>:
  }
  return 1;
}

int resetTest(String command)                                       // Resets the current hourly and daily counts
{
 80a0174:	b513      	push	{r0, r1, r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a0176:	4915      	ldr	r1, [pc, #84]	; (80a01cc <_Z9resetTest6String+0x58>)
 80a0178:	f001 f9f1 	bl	80a155e <_ZNK6String6equalsEPKc>
  if (command == "1")
 80a017c:	b318      	cbz	r0, 80a01c6 <_Z9resetTest6String+0x52>
  {
    battery_data.startTime = Time.now();            // When did we start the test
 80a017e:	f001 fa8e 	bl	80a169e <_ZN9TimeClass3nowEv>
 80a0182:	4c13      	ldr	r4, [pc, #76]	; (80a01d0 <_Z9resetTest6String+0x5c>)
    battery_data.currentCapacity_mAh = battery_data.startingCapacity_mAh;
 80a0184:	6863      	ldr	r3, [r4, #4]

int resetTest(String command)                                       // Resets the current hourly and daily counts
{
  if (command == "1")
  {
    battery_data.startTime = Time.now();            // When did we start the test
 80a0186:	6020      	str	r0, [r4, #0]
    battery_data.currentCapacity_mAh = battery_data.startingCapacity_mAh;
 80a0188:	60a3      	str	r3, [r4, #8]
    battery_data.currentCharge_percent = battery_data.startingCharge_percent;
 80a018a:	68e3      	ldr	r3, [r4, #12]
 80a018c:	6123      	str	r3, [r4, #16]
    EEPROM.put(0,battery_data);    
 80a018e:	f001 fd45 	bl	80a1c1c <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a0192:	2214      	movs	r2, #20
 80a0194:	4621      	mov	r1, r4
 80a0196:	2000      	movs	r0, #0
 80a0198:	f000 fa72 	bl	80a0680 <HAL_EEPROM_Put>
    snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",battery_data.currentCapacity_mAh);
 80a019c:	68a0      	ldr	r0, [r4, #8]
 80a019e:	f002 f861 	bl	80a2264 <__aeabi_f2d>
 80a01a2:	4a0c      	ldr	r2, [pc, #48]	; (80a01d4 <_Z9resetTest6String+0x60>)
 80a01a4:	e9cd 0100 	strd	r0, r1, [sp]
 80a01a8:	2110      	movs	r1, #16
 80a01aa:	480b      	ldr	r0, [pc, #44]	; (80a01d8 <_Z9resetTest6String+0x64>)
 80a01ac:	f000 fc5e 	bl	80a0a6c <snprintf>
    snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",battery_data.currentCharge_percent);
 80a01b0:	6920      	ldr	r0, [r4, #16]
 80a01b2:	f002 f857 	bl	80a2264 <__aeabi_f2d>
 80a01b6:	4a09      	ldr	r2, [pc, #36]	; (80a01dc <_Z9resetTest6String+0x68>)
 80a01b8:	e9cd 0100 	strd	r0, r1, [sp]
 80a01bc:	2110      	movs	r1, #16
 80a01be:	4808      	ldr	r0, [pc, #32]	; (80a01e0 <_Z9resetTest6String+0x6c>)
 80a01c0:	f000 fc54 	bl	80a0a6c <snprintf>
 80a01c4:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
 80a01c6:	b002      	add	sp, #8
 80a01c8:	bd10      	pop	{r4, pc}
 80a01ca:	bf00      	nop
 80a01cc:	080a530c 	.word	0x080a530c
 80a01d0:	20000128 	.word	0x20000128
 80a01d4:	080a51b4 	.word	0x080a51b4
 80a01d8:	20000014 	.word	0x20000014
 80a01dc:	080a51be 	.word	0x080a51be
 80a01e0:	20000000 	.word	0x20000000

080a01e4 <_Z20meterParticlePublishv>:

bool meterParticlePublish(void)
{
 80a01e4:	b510      	push	{r4, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a01e6:	f000 fa2b 	bl	80a0640 <HAL_Timer_Get_Milli_Seconds>
  static unsigned long lastPublish=0;                                   // Initialize and store value here
  if(millis() - lastPublish >= 1000) {                                  // Particle rate limits at 1 publish per second
 80a01ea:	4c06      	ldr	r4, [pc, #24]	; (80a0204 <_Z20meterParticlePublishv+0x20>)
 80a01ec:	6823      	ldr	r3, [r4, #0]
 80a01ee:	1ac0      	subs	r0, r0, r3
 80a01f0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80a01f4:	d304      	bcc.n	80a0200 <_Z20meterParticlePublishv+0x1c>
 80a01f6:	f000 fa23 	bl	80a0640 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 80a01fa:	6020      	str	r0, [r4, #0]
 80a01fc:	2001      	movs	r0, #1
 80a01fe:	bd10      	pop	{r4, pc}
    return 1;
  }
  else return 0;
 80a0200:	2000      	movs	r0, #0
 80a0202:	bd10      	pop	{r4, pc}
 80a0204:	20000118 	.word	0x20000118

080a0208 <_ZN11SystemClass18waitConditionWhileIZ9setCharge6StringEUlvE_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.13>:
    }


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
 80a0208:	b508      	push	{r3, lr}
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
  if ((inputValue < 0.0) || (inputValue > 100.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
  battery_data.startingCharge_percent = inputValue;                                              // Assign the input to the battery capacity variable
  snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",battery_data.startingCharge_percent);
  if (Particle.connected()) {                                            // Publish result if feeling verbose
    waitUntil(meterParticlePublish);
 80a020a:	f7ff ffeb 	bl	80a01e4 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
 80a020e:	b118      	cbz	r0, 80a0218 <_ZN11SystemClass18waitConditionWhileIZ9setCharge6StringEUlvE_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.13+0x10>
            spark_process();
        }
        return _condition();
    }
 80a0210:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0214:	f7ff bfe6 	b.w	80a01e4 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
 80a0218:	f000 fb90 	bl	80a093c <spark_process>
 80a021c:	e7f5      	b.n	80a020a <_ZN11SystemClass18waitConditionWhileIZ9setCharge6StringEUlvE_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.13+0x2>

080a021e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a021e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0220:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0222:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a0224:	b17c      	cbz	r4, 80a0246 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0226:	6863      	ldr	r3, [r4, #4]
 80a0228:	3b01      	subs	r3, #1
 80a022a:	6063      	str	r3, [r4, #4]
 80a022c:	b95b      	cbnz	r3, 80a0246 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a022e:	6823      	ldr	r3, [r4, #0]
 80a0230:	4620      	mov	r0, r4
 80a0232:	689b      	ldr	r3, [r3, #8]
 80a0234:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0236:	68a3      	ldr	r3, [r4, #8]
 80a0238:	3b01      	subs	r3, #1
 80a023a:	60a3      	str	r3, [r4, #8]
 80a023c:	b91b      	cbnz	r3, 80a0246 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a023e:	6823      	ldr	r3, [r4, #0]
 80a0240:	4620      	mov	r0, r4
 80a0242:	68db      	ldr	r3, [r3, #12]
 80a0244:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a0246:	4628      	mov	r0, r5
 80a0248:	bd38      	pop	{r3, r4, r5, pc}
 80a024a:	0000      	movs	r0, r0
 80a024c:	0000      	movs	r0, r0
	...

080a0250 <setup>:
};

battery_test_struct battery_data;

void setup()
{
 80a0250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Set up I/O pins:
  pinMode(intPin,INPUT);                          // Interrupt input pin (must be D2 or D3)
 80a0252:	2100      	movs	r1, #0
 80a0254:	2002      	movs	r0, #2
 80a0256:	f001 fca3 	bl	80a1ba0 <pinMode>
  pinMode(polPin,INPUT);                          // Polarity input pin
 80a025a:	2100      	movs	r1, #0
 80a025c:	2003      	movs	r0, #3
 80a025e:	f001 fc9f 	bl	80a1ba0 <pinMode>
  pinMode(blueLED,OUTPUT);                        // Standard Particle status LED
 80a0262:	2101      	movs	r1, #1
 80a0264:	2007      	movs	r0, #7
 80a0266:	f001 fc9b 	bl	80a1ba0 <pinMode>
  digitalWrite(blueLED,LOW);  
 80a026a:	2100      	movs	r1, #0
 80a026c:	2007      	movs	r0, #7
 80a026e:	f001 fca8 	bl	80a1bc2 <digitalWrite>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a0272:	4a45      	ldr	r2, [pc, #276]	; (80a0388 <setup+0x138>)
 80a0274:	4945      	ldr	r1, [pc, #276]	; (80a038c <setup+0x13c>)
 80a0276:	4846      	ldr	r0, [pc, #280]	; (80a0390 <setup+0x140>)
 80a0278:	f000 fc8e 	bl	80a0b98 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a027c:	4a45      	ldr	r2, [pc, #276]	; (80a0394 <setup+0x144>)
 80a027e:	4946      	ldr	r1, [pc, #280]	; (80a0398 <setup+0x148>)
 80a0280:	4843      	ldr	r0, [pc, #268]	; (80a0390 <setup+0x140>)
 80a0282:	f000 fc89 	bl	80a0b98 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0286:	4a45      	ldr	r2, [pc, #276]	; (80a039c <setup+0x14c>)
 80a0288:	4945      	ldr	r1, [pc, #276]	; (80a03a0 <setup+0x150>)
 80a028a:	4841      	ldr	r0, [pc, #260]	; (80a0390 <setup+0x140>)
 80a028c:	f000 fc84 	bl	80a0b98 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a0290:	2300      	movs	r3, #0
 80a0292:	2204      	movs	r2, #4
 80a0294:	4943      	ldr	r1, [pc, #268]	; (80a03a4 <setup+0x154>)
 80a0296:	4844      	ldr	r0, [pc, #272]	; (80a03a8 <setup+0x158>)
 80a0298:	f000 fb40 	bl	80a091c <spark_variable>
 80a029c:	2300      	movs	r3, #0
 80a029e:	2204      	movs	r2, #4
 80a02a0:	4942      	ldr	r1, [pc, #264]	; (80a03ac <setup+0x15c>)
 80a02a2:	4843      	ldr	r0, [pc, #268]	; (80a03b0 <setup+0x160>)
 80a02a4:	f000 fb3a 	bl	80a091c <spark_variable>
  Particle.function("Reset-Test",resetTest);      // Set all the values back to start

  Particle.variable("Capacity", capacityStr);
  Particle.variable("Charge", chargeStr);                   // charge value

  attachInterrupt(intPin,myISR,FALLING);
 80a02a8:	2300      	movs	r3, #0
 80a02aa:	2202      	movs	r2, #2
 80a02ac:	9300      	str	r3, [sp, #0]
 80a02ae:	4941      	ldr	r1, [pc, #260]	; (80a03b4 <setup+0x164>)
 80a02b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a02b4:	4610      	mov	r0, r2
 80a02b6:	f000 ff5d 	bl	80a1174 <_Z15attachInterrupttPFvvE13InterruptModeah>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a02ba:	f000 fb47 	bl	80a094c <spark_cloud_flag_connected>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a02be:	2800      	cmp	r0, #0
 80a02c0:	d05b      	beq.n	80a037a <setup+0x12a>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a02c2:	4c3d      	ldr	r4, [pc, #244]	; (80a03b8 <setup+0x168>)
 80a02c4:	f000 fb42 	bl	80a094c <spark_cloud_flag_connected>

  waitUntil(Particle.connected);                  // Get connected first - helps to ensure we have the right time

  EEPROM.get(0,battery_data);
 80a02c8:	f001 fca8 	bl	80a1c1c <_Z21__fetch_global_EEPROMv>
 80a02cc:	2214      	movs	r2, #20
 80a02ce:	4621      	mov	r1, r4
 80a02d0:	2000      	movs	r0, #0
 80a02d2:	f000 f9cd 	bl	80a0670 <HAL_EEPROM_Get>

  if (Time.now() - battery_data.startTime > 300) {    // Too much time went by, must be a new test
 80a02d6:	f001 f9e2 	bl	80a169e <_ZN9TimeClass3nowEv>
 80a02da:	6823      	ldr	r3, [r4, #0]
 80a02dc:	1ac0      	subs	r0, r0, r3
 80a02de:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 80a02e2:	d90d      	bls.n	80a0300 <setup+0xb0>
    battery_data.startTime = Time.now();            // When did we start the test
 80a02e4:	f001 f9db 	bl	80a169e <_ZN9TimeClass3nowEv>
    battery_data.currentCapacity_mAh = battery_data.startingCapacity_mAh;
 80a02e8:	6863      	ldr	r3, [r4, #4]
  waitUntil(Particle.connected);                  // Get connected first - helps to ensure we have the right time

  EEPROM.get(0,battery_data);

  if (Time.now() - battery_data.startTime > 300) {    // Too much time went by, must be a new test
    battery_data.startTime = Time.now();            // When did we start the test
 80a02ea:	6020      	str	r0, [r4, #0]
    battery_data.currentCapacity_mAh = battery_data.startingCapacity_mAh;
 80a02ec:	60a3      	str	r3, [r4, #8]
    battery_data.currentCharge_percent = battery_data.startingCharge_percent;
 80a02ee:	68e3      	ldr	r3, [r4, #12]
 80a02f0:	6123      	str	r3, [r4, #16]
    EEPROM.put(0,battery_data);
 80a02f2:	f001 fc93 	bl	80a1c1c <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a02f6:	2214      	movs	r2, #20
 80a02f8:	4621      	mov	r1, r4
 80a02fa:	2000      	movs	r0, #0
 80a02fc:	f000 f9c0 	bl	80a0680 <HAL_EEPROM_Put>
  }

  percent_quanta = 1.0/(battery_data.startingCapacity_mAh/1000.0*5859.0/100.0);   // % battery for each INT
 80a0300:	6860      	ldr	r0, [r4, #4]
 80a0302:	f001 ffaf 	bl	80a2264 <__aeabi_f2d>
 80a0306:	2200      	movs	r2, #0
 80a0308:	4b2c      	ldr	r3, [pc, #176]	; (80a03bc <setup+0x16c>)
 80a030a:	f002 f929 	bl	80a2560 <__aeabi_ddiv>
 80a030e:	a31c      	add	r3, pc, #112	; (adr r3, 80a0380 <setup+0x130>)
 80a0310:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0314:	f001 fffa 	bl	80a230c <__aeabi_dmul>
 80a0318:	2200      	movs	r2, #0
 80a031a:	4b29      	ldr	r3, [pc, #164]	; (80a03c0 <setup+0x170>)
 80a031c:	f002 f920 	bl	80a2560 <__aeabi_ddiv>
 80a0320:	4602      	mov	r2, r0
 80a0322:	460b      	mov	r3, r1
 80a0324:	2000      	movs	r0, #0
 80a0326:	4927      	ldr	r1, [pc, #156]	; (80a03c4 <setup+0x174>)
 80a0328:	f002 f91a 	bl	80a2560 <__aeabi_ddiv>
 80a032c:	f002 fae6 	bl	80a28fc <__aeabi_d2f>
 80a0330:	4b25      	ldr	r3, [pc, #148]	; (80a03c8 <setup+0x178>)
 80a0332:	6018      	str	r0, [r3, #0]
  
  snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",battery_data.currentCapacity_mAh);
 80a0334:	68a0      	ldr	r0, [r4, #8]
 80a0336:	f001 ff95 	bl	80a2264 <__aeabi_f2d>
 80a033a:	4a24      	ldr	r2, [pc, #144]	; (80a03cc <setup+0x17c>)
 80a033c:	e9cd 0100 	strd	r0, r1, [sp]
 80a0340:	2110      	movs	r1, #16
 80a0342:	4818      	ldr	r0, [pc, #96]	; (80a03a4 <setup+0x154>)
 80a0344:	f000 fb92 	bl	80a0a6c <snprintf>
  snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",battery_data.currentCharge_percent);
 80a0348:	6920      	ldr	r0, [r4, #16]
 80a034a:	f001 ff8b 	bl	80a2264 <__aeabi_f2d>
 80a034e:	4a20      	ldr	r2, [pc, #128]	; (80a03d0 <setup+0x180>)
 80a0350:	e9cd 0100 	strd	r0, r1, [sp]
 80a0354:	2110      	movs	r1, #16
 80a0356:	4815      	ldr	r0, [pc, #84]	; (80a03ac <setup+0x15c>)
 80a0358:	f000 fb88 	bl	80a0a6c <snprintf>
 80a035c:	4b1d      	ldr	r3, [pc, #116]	; (80a03d4 <setup+0x184>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a035e:	4a1e      	ldr	r2, [pc, #120]	; (80a03d8 <setup+0x188>)
 80a0360:	781b      	ldrb	r3, [r3, #0]
 80a0362:	491e      	ldr	r1, [pc, #120]	; (80a03dc <setup+0x18c>)
 80a0364:	f88d 3000 	strb.w	r3, [sp]
 80a0368:	a802      	add	r0, sp, #8
 80a036a:	233c      	movs	r3, #60	; 0x3c
 80a036c:	f000 fd3c 	bl	80a0de8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0370:	a803      	add	r0, sp, #12
 80a0372:	f7ff ff54 	bl	80a021e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  Particle.publish("Startup","LTC4150 Coulomb Counter",PRIVATE);
}
 80a0376:	b004      	add	sp, #16
 80a0378:	bd10      	pop	{r4, pc}
            spark_process();
 80a037a:	f000 fadf 	bl	80a093c <spark_process>
 80a037e:	e79c      	b.n	80a02ba <setup+0x6a>
 80a0380:	00000000 	.word	0x00000000
 80a0384:	40b6e300 	.word	0x40b6e300
 80a0388:	080a51c7 	.word	0x080a51c7
 80a038c:	080a0501 	.word	0x080a0501
 80a0390:	080a0b6d 	.word	0x080a0b6d
 80a0394:	080a51d4 	.word	0x080a51d4
 80a0398:	080a0581 	.word	0x080a0581
 80a039c:	080a51df 	.word	0x080a51df
 80a03a0:	080a0175 	.word	0x080a0175
 80a03a4:	20000014 	.word	0x20000014
 80a03a8:	080a51cb 	.word	0x080a51cb
 80a03ac:	20000000 	.word	0x20000000
 80a03b0:	080a51d8 	.word	0x080a51d8
 80a03b4:	080a00b9 	.word	0x080a00b9
 80a03b8:	20000128 	.word	0x20000128
 80a03bc:	408f4000 	.word	0x408f4000
 80a03c0:	40590000 	.word	0x40590000
 80a03c4:	3ff00000 	.word	0x3ff00000
 80a03c8:	20000148 	.word	0x20000148
 80a03cc:	080a51b4 	.word	0x080a51b4
 80a03d0:	080a51be 	.word	0x080a51be
 80a03d4:	2000013c 	.word	0x2000013c
 80a03d8:	080a51ea 	.word	0x080a51ea
 80a03dc:	080a5202 	.word	0x080a5202

080a03e0 <_Z13publishResultv>:
    snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",battery_data.currentCapacity_mAh);
    snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",battery_data.currentCharge_percent);
  }
}

void publishResult() {
 80a03e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a03e4:	b0a4      	sub	sp, #144	; 0x90
  char data[96];
  int elapsedSec = Time.now() - battery_data.startTime;
 80a03e6:	f001 f95a 	bl	80a169e <_ZN9TimeClass3nowEv>
 80a03ea:	4b21      	ldr	r3, [pc, #132]	; (80a0470 <_Z13publishResultv+0x90>)
 80a03ec:	681c      	ldr	r4, [r3, #0]
  snprintf(data, sizeof(data), "Status: %4.0f mAh, %3.1f%% charge, %4.3f mA at time %i:%i:%i:%i seconds", battery_data.currentCapacity_mAh, battery_data.currentCharge_percent, mA, Time.day(elapsedSec)-1, Time.hour(elapsedSec), Time.minute(elapsedSec), Time.second(elapsedSec));
 80a03ee:	689e      	ldr	r6, [r3, #8]
  }
}

void publishResult() {
  char data[96];
  int elapsedSec = Time.now() - battery_data.startTime;
 80a03f0:	1b04      	subs	r4, r0, r4
  snprintf(data, sizeof(data), "Status: %4.0f mAh, %3.1f%% charge, %4.3f mA at time %i:%i:%i:%i seconds", battery_data.currentCapacity_mAh, battery_data.currentCharge_percent, mA, Time.day(elapsedSec)-1, Time.hour(elapsedSec), Time.minute(elapsedSec), Time.second(elapsedSec));
 80a03f2:	691f      	ldr	r7, [r3, #16]
 80a03f4:	4b1f      	ldr	r3, [pc, #124]	; (80a0474 <_Z13publishResultv+0x94>)
 80a03f6:	4620      	mov	r0, r4
 80a03f8:	f8d3 8000 	ldr.w	r8, [r3]
 80a03fc:	f001 f926 	bl	80a164c <_ZN9TimeClass3dayEl>
 80a0400:	4605      	mov	r5, r0
 80a0402:	4620      	mov	r0, r4
 80a0404:	f001 f90a 	bl	80a161c <_ZN9TimeClass4hourEl>
 80a0408:	4681      	mov	r9, r0
 80a040a:	4620      	mov	r0, r4
 80a040c:	f001 f90e 	bl	80a162c <_ZN9TimeClass6minuteEl>
 80a0410:	4682      	mov	sl, r0
 80a0412:	4620      	mov	r0, r4
 80a0414:	f001 f912 	bl	80a163c <_ZN9TimeClass6secondEl>
 80a0418:	3d01      	subs	r5, #1
 80a041a:	9009      	str	r0, [sp, #36]	; 0x24
 80a041c:	4640      	mov	r0, r8
 80a041e:	f8cd a020 	str.w	sl, [sp, #32]
 80a0422:	f8cd 901c 	str.w	r9, [sp, #28]
 80a0426:	9506      	str	r5, [sp, #24]
 80a0428:	f001 ff1c 	bl	80a2264 <__aeabi_f2d>
 80a042c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a0430:	4638      	mov	r0, r7
 80a0432:	f001 ff17 	bl	80a2264 <__aeabi_f2d>
 80a0436:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a043a:	4630      	mov	r0, r6
 80a043c:	f001 ff12 	bl	80a2264 <__aeabi_f2d>
 80a0440:	4a0d      	ldr	r2, [pc, #52]	; (80a0478 <_Z13publishResultv+0x98>)
 80a0442:	e9cd 0100 	strd	r0, r1, [sp]
 80a0446:	2160      	movs	r1, #96	; 0x60
 80a0448:	a80c      	add	r0, sp, #48	; 0x30
 80a044a:	f000 fb0f 	bl	80a0a6c <snprintf>
 80a044e:	4b0b      	ldr	r3, [pc, #44]	; (80a047c <_Z13publishResultv+0x9c>)
 80a0450:	aa0c      	add	r2, sp, #48	; 0x30
 80a0452:	781b      	ldrb	r3, [r3, #0]
 80a0454:	490a      	ldr	r1, [pc, #40]	; (80a0480 <_Z13publishResultv+0xa0>)
 80a0456:	f88d 3000 	strb.w	r3, [sp]
 80a045a:	a80a      	add	r0, sp, #40	; 0x28
 80a045c:	233c      	movs	r3, #60	; 0x3c
 80a045e:	f000 fcc3 	bl	80a0de8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0462:	a80b      	add	r0, sp, #44	; 0x2c
 80a0464:	f7ff fedb 	bl	80a021e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.publish("Status",data,PRIVATE);
}
 80a0468:	b024      	add	sp, #144	; 0x90
 80a046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a046e:	bf00      	nop
 80a0470:	20000128 	.word	0x20000128
 80a0474:	20000144 	.word	0x20000144
 80a0478:	080a520a 	.word	0x080a520a
 80a047c:	2000013c 	.word	0x2000013c
 80a0480:	080a5252 	.word	0x080a5252

080a0484 <loop>:

  Particle.publish("Startup","LTC4150 Coulomb Counter",PRIVATE);
}

void loop()
{
 80a0484:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (isrflag) {
 80a0486:	4b18      	ldr	r3, [pc, #96]	; (80a04e8 <loop+0x64>)
 80a0488:	781a      	ldrb	r2, [r3, #0]
 80a048a:	b352      	cbz	r2, 80a04e2 <loop+0x5e>
    isrflag = false;                              // Reset the flag to false so we only do this once per INT
 80a048c:	2500      	movs	r5, #0
    // Blink the LED
    digitalWrite(blueLED,HIGH);
 80a048e:	2101      	movs	r1, #1
 80a0490:	2007      	movs	r0, #7
}

void loop()
{
  if (isrflag) {
    isrflag = false;                              // Reset the flag to false so we only do this once per INT
 80a0492:	701d      	strb	r5, [r3, #0]
 80a0494:	4c15      	ldr	r4, [pc, #84]	; (80a04ec <loop+0x68>)
    // Blink the LED
    digitalWrite(blueLED,HIGH);
 80a0496:	f001 fb94 	bl	80a1bc2 <digitalWrite>
    delay(100);
 80a049a:	2064      	movs	r0, #100	; 0x64
 80a049c:	f000 fafe 	bl	80a0a9c <delay>
    digitalWrite(blueLED,LOW);
 80a04a0:	4629      	mov	r1, r5
 80a04a2:	2007      	movs	r0, #7
 80a04a4:	f001 fb8d 	bl	80a1bc2 <digitalWrite>
    publishResult();                              // Print out current status (variables set by myISR())
 80a04a8:	f7ff ff9a 	bl	80a03e0 <_Z13publishResultv>
    EEPROM.put(0,battery_data);                   // Write the value to EEPROM
 80a04ac:	f001 fbb6 	bl	80a1c1c <_Z21__fetch_global_EEPROMv>
 80a04b0:	2214      	movs	r2, #20
 80a04b2:	4621      	mov	r1, r4
 80a04b4:	4628      	mov	r0, r5
 80a04b6:	f000 f8e3 	bl	80a0680 <HAL_EEPROM_Put>
    snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",battery_data.currentCapacity_mAh);
 80a04ba:	68a0      	ldr	r0, [r4, #8]
 80a04bc:	f001 fed2 	bl	80a2264 <__aeabi_f2d>
 80a04c0:	4a0b      	ldr	r2, [pc, #44]	; (80a04f0 <loop+0x6c>)
 80a04c2:	e9cd 0100 	strd	r0, r1, [sp]
 80a04c6:	2110      	movs	r1, #16
 80a04c8:	480a      	ldr	r0, [pc, #40]	; (80a04f4 <loop+0x70>)
 80a04ca:	f000 facf 	bl	80a0a6c <snprintf>
    snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",battery_data.currentCharge_percent);
 80a04ce:	6920      	ldr	r0, [r4, #16]
 80a04d0:	f001 fec8 	bl	80a2264 <__aeabi_f2d>
 80a04d4:	4a08      	ldr	r2, [pc, #32]	; (80a04f8 <loop+0x74>)
 80a04d6:	e9cd 0100 	strd	r0, r1, [sp]
 80a04da:	2110      	movs	r1, #16
 80a04dc:	4807      	ldr	r0, [pc, #28]	; (80a04fc <loop+0x78>)
 80a04de:	f000 fac5 	bl	80a0a6c <snprintf>
  }
}
 80a04e2:	b003      	add	sp, #12
 80a04e4:	bd30      	pop	{r4, r5, pc}
 80a04e6:	bf00      	nop
 80a04e8:	20000124 	.word	0x20000124
 80a04ec:	20000128 	.word	0x20000128
 80a04f0:	080a51b4 	.word	0x080a51b4
 80a04f4:	20000014 	.word	0x20000014
 80a04f8:	080a51be 	.word	0x080a51be
 80a04fc:	20000000 	.word	0x20000000

080a0500 <_Z11setCapacity6String>:
  // Set isrflag so main loop knows an interrupt occurred
  isrflag = true;
}

int setCapacity(String command)
{
 80a0500:	b530      	push	{r4, r5, lr}
 80a0502:	b087      	sub	sp, #28
  char * pEND;
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
 80a0504:	a903      	add	r1, sp, #12
 80a0506:	6800      	ldr	r0, [r0, #0]
 80a0508:	f003 fb7e 	bl	80a3c08 <strtof>
  if ((inputValue < 0.0) || (inputValue > 6000.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 80a050c:	2100      	movs	r1, #0
}

int setCapacity(String command)
{
  char * pEND;
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
 80a050e:	4605      	mov	r5, r0
  if ((inputValue < 0.0) || (inputValue > 6000.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 80a0510:	f002 fba0 	bl	80a2c54 <__aeabi_fcmplt>
 80a0514:	bb18      	cbnz	r0, 80a055e <_Z11setCapacity6String+0x5e>
 80a0516:	4914      	ldr	r1, [pc, #80]	; (80a0568 <_Z11setCapacity6String+0x68>)
 80a0518:	4628      	mov	r0, r5
 80a051a:	f002 fbb9 	bl	80a2c90 <__aeabi_fcmpgt>
 80a051e:	b9f0      	cbnz	r0, 80a055e <_Z11setCapacity6String+0x5e>
  battery_data.startingCapacity_mAh = inputValue;                                              // Assign the input to the battery capacity variable
 80a0520:	4b12      	ldr	r3, [pc, #72]	; (80a056c <_Z11setCapacity6String+0x6c>)
  snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",battery_data.startingCapacity_mAh);
 80a0522:	4628      	mov	r0, r5
int setCapacity(String command)
{
  char * pEND;
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
  if ((inputValue < 0.0) || (inputValue > 6000.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
  battery_data.startingCapacity_mAh = inputValue;                                              // Assign the input to the battery capacity variable
 80a0524:	605d      	str	r5, [r3, #4]
  snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",battery_data.startingCapacity_mAh);
 80a0526:	f001 fe9d 	bl	80a2264 <__aeabi_f2d>
 80a052a:	4a11      	ldr	r2, [pc, #68]	; (80a0570 <_Z11setCapacity6String+0x70>)
 80a052c:	e9cd 0100 	strd	r0, r1, [sp]
 80a0530:	2110      	movs	r1, #16
 80a0532:	4810      	ldr	r0, [pc, #64]	; (80a0574 <_Z11setCapacity6String+0x74>)
 80a0534:	f000 fa9a 	bl	80a0a6c <snprintf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0538:	f000 fa08 	bl	80a094c <spark_cloud_flag_connected>
  if (Particle.connected()) {                                            // Publish result if feeling verbose
 80a053c:	b188      	cbz	r0, 80a0562 <_Z11setCapacity6String+0x62>
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
 80a053e:	f7ff fe63 	bl	80a0208 <_ZN11SystemClass18waitConditionWhileIZ9setCharge6StringEUlvE_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.13>
 80a0542:	4b0d      	ldr	r3, [pc, #52]	; (80a0578 <_Z11setCapacity6String+0x78>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0544:	a804      	add	r0, sp, #16
 80a0546:	781b      	ldrb	r3, [r3, #0]
 80a0548:	4a0a      	ldr	r2, [pc, #40]	; (80a0574 <_Z11setCapacity6String+0x74>)
 80a054a:	f88d 3000 	strb.w	r3, [sp]
 80a054e:	490b      	ldr	r1, [pc, #44]	; (80a057c <_Z11setCapacity6String+0x7c>)
 80a0550:	233c      	movs	r3, #60	; 0x3c
 80a0552:	f000 fc49 	bl	80a0de8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0556:	a805      	add	r0, sp, #20
 80a0558:	f7ff fe61 	bl	80a021e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a055c:	e001      	b.n	80a0562 <_Z11setCapacity6String+0x62>

int setCapacity(String command)
{
  char * pEND;
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
  if ((inputValue < 0.0) || (inputValue > 6000.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 80a055e:	2000      	movs	r0, #0
 80a0560:	e000      	b.n	80a0564 <_Z11setCapacity6String+0x64>
  snprintf(capacityStr,sizeof(capacityStr),"%4.1f mAh",battery_data.startingCapacity_mAh);
  if (Particle.connected()) {                                            // Publish result if feeling verbose
    waitUntil(meterParticlePublish);
    Particle.publish("Capacity",capacityStr, PRIVATE);
  }
  return 1;
 80a0562:	2001      	movs	r0, #1
}
 80a0564:	b007      	add	sp, #28
 80a0566:	bd30      	pop	{r4, r5, pc}
 80a0568:	45bb8000 	.word	0x45bb8000
 80a056c:	20000128 	.word	0x20000128
 80a0570:	080a51b4 	.word	0x080a51b4
 80a0574:	20000014 	.word	0x20000014
 80a0578:	2000013c 	.word	0x2000013c
 80a057c:	080a51cb 	.word	0x080a51cb

080a0580 <_Z9setCharge6String>:

int setCharge(String command)
{
 80a0580:	b530      	push	{r4, r5, lr}
 80a0582:	b087      	sub	sp, #28
  char * pEND;
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
 80a0584:	a903      	add	r1, sp, #12
 80a0586:	6800      	ldr	r0, [r0, #0]
 80a0588:	f003 fb3e 	bl	80a3c08 <strtof>
  if ((inputValue < 0.0) || (inputValue > 100.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 80a058c:	2100      	movs	r1, #0
}

int setCharge(String command)
{
  char * pEND;
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
 80a058e:	4605      	mov	r5, r0
  if ((inputValue < 0.0) || (inputValue > 100.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 80a0590:	f002 fb60 	bl	80a2c54 <__aeabi_fcmplt>
 80a0594:	bb18      	cbnz	r0, 80a05de <_Z9setCharge6String+0x5e>
 80a0596:	4914      	ldr	r1, [pc, #80]	; (80a05e8 <_Z9setCharge6String+0x68>)
 80a0598:	4628      	mov	r0, r5
 80a059a:	f002 fb79 	bl	80a2c90 <__aeabi_fcmpgt>
 80a059e:	b9f0      	cbnz	r0, 80a05de <_Z9setCharge6String+0x5e>
  battery_data.startingCharge_percent = inputValue;                                              // Assign the input to the battery capacity variable
 80a05a0:	4b12      	ldr	r3, [pc, #72]	; (80a05ec <_Z9setCharge6String+0x6c>)
  snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",battery_data.startingCharge_percent);
 80a05a2:	4628      	mov	r0, r5
int setCharge(String command)
{
  char * pEND;
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
  if ((inputValue < 0.0) || (inputValue > 100.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
  battery_data.startingCharge_percent = inputValue;                                              // Assign the input to the battery capacity variable
 80a05a4:	60dd      	str	r5, [r3, #12]
  snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",battery_data.startingCharge_percent);
 80a05a6:	f001 fe5d 	bl	80a2264 <__aeabi_f2d>
 80a05aa:	4a11      	ldr	r2, [pc, #68]	; (80a05f0 <_Z9setCharge6String+0x70>)
 80a05ac:	e9cd 0100 	strd	r0, r1, [sp]
 80a05b0:	2110      	movs	r1, #16
 80a05b2:	4810      	ldr	r0, [pc, #64]	; (80a05f4 <_Z9setCharge6String+0x74>)
 80a05b4:	f000 fa5a 	bl	80a0a6c <snprintf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a05b8:	f000 f9c8 	bl	80a094c <spark_cloud_flag_connected>
  if (Particle.connected()) {                                            // Publish result if feeling verbose
 80a05bc:	b188      	cbz	r0, 80a05e2 <_Z9setCharge6String+0x62>
 80a05be:	f7ff fe23 	bl	80a0208 <_ZN11SystemClass18waitConditionWhileIZ9setCharge6StringEUlvE_ZNS_13waitConditionIS2_EEbT_EUlvE_EEbS4_T0_.isra.13>
 80a05c2:	4b0d      	ldr	r3, [pc, #52]	; (80a05f8 <_Z9setCharge6String+0x78>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a05c4:	a804      	add	r0, sp, #16
 80a05c6:	781b      	ldrb	r3, [r3, #0]
 80a05c8:	4a0a      	ldr	r2, [pc, #40]	; (80a05f4 <_Z9setCharge6String+0x74>)
 80a05ca:	f88d 3000 	strb.w	r3, [sp]
 80a05ce:	490b      	ldr	r1, [pc, #44]	; (80a05fc <_Z9setCharge6String+0x7c>)
 80a05d0:	233c      	movs	r3, #60	; 0x3c
 80a05d2:	f000 fc09 	bl	80a0de8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a05d6:	a805      	add	r0, sp, #20
 80a05d8:	f7ff fe21 	bl	80a021e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a05dc:	e001      	b.n	80a05e2 <_Z9setCharge6String+0x62>

int setCharge(String command)
{
  char * pEND;
  float inputValue = strtof(command,&pEND);                              // Looks for the first float and interprets it
  if ((inputValue < 0.0) || (inputValue > 100.0)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 80a05de:	2000      	movs	r0, #0
 80a05e0:	e000      	b.n	80a05e4 <_Z9setCharge6String+0x64>
  snprintf(chargeStr,sizeof(chargeStr),"%3.1f %%",battery_data.startingCharge_percent);
  if (Particle.connected()) {                                            // Publish result if feeling verbose
    waitUntil(meterParticlePublish);
    Particle.publish("Charge",chargeStr, PRIVATE);
  }
  return 1;
 80a05e2:	2001      	movs	r0, #1
}
 80a05e4:	b007      	add	sp, #28
 80a05e6:	bd30      	pop	{r4, r5, pc}
 80a05e8:	42c80000 	.word	0x42c80000
 80a05ec:	20000128 	.word	0x20000128
 80a05f0:	080a51be 	.word	0x080a51be
 80a05f4:	20000000 	.word	0x20000000
 80a05f8:	2000013c 	.word	0x2000013c
 80a05fc:	080a51d8 	.word	0x080a51d8

080a0600 <_GLOBAL__sub_I_capacityStr>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0600:	4b02      	ldr	r3, [pc, #8]	; (80a060c <_GLOBAL__sub_I_capacityStr+0xc>)
 80a0602:	2201      	movs	r2, #1
 80a0604:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0606:	f000 b84b 	b.w	80a06a0 <HAL_Pin_Map>
 80a060a:	bf00      	nop
 80a060c:	2000013c 	.word	0x2000013c

080a0610 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0610:	b508      	push	{r3, lr}
 80a0612:	4b02      	ldr	r3, [pc, #8]	; (80a061c <os_mutex_create+0xc>)
 80a0614:	681b      	ldr	r3, [r3, #0]
 80a0616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0618:	9301      	str	r3, [sp, #4]
 80a061a:	bd08      	pop	{r3, pc}
 80a061c:	080601d0 	.word	0x080601d0

080a0620 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0620:	b508      	push	{r3, lr}
 80a0622:	4b02      	ldr	r3, [pc, #8]	; (80a062c <HAL_RNG_GetRandomNumber+0xc>)
 80a0624:	681b      	ldr	r3, [r3, #0]
 80a0626:	685b      	ldr	r3, [r3, #4]
 80a0628:	9301      	str	r3, [sp, #4]
 80a062a:	bd08      	pop	{r3, pc}
 80a062c:	0806019c 	.word	0x0806019c

080a0630 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a0630:	b508      	push	{r3, lr}
 80a0632:	4b02      	ldr	r3, [pc, #8]	; (80a063c <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a0634:	681b      	ldr	r3, [r3, #0]
 80a0636:	691b      	ldr	r3, [r3, #16]
 80a0638:	9301      	str	r3, [sp, #4]
 80a063a:	bd08      	pop	{r3, pc}
 80a063c:	0806019c 	.word	0x0806019c

080a0640 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0640:	b508      	push	{r3, lr}
 80a0642:	4b02      	ldr	r3, [pc, #8]	; (80a064c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0644:	681b      	ldr	r3, [r3, #0]
 80a0646:	695b      	ldr	r3, [r3, #20]
 80a0648:	9301      	str	r3, [sp, #4]
 80a064a:	bd08      	pop	{r3, pc}
 80a064c:	0806019c 	.word	0x0806019c

080a0650 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a0650:	b508      	push	{r3, lr}
 80a0652:	4b02      	ldr	r3, [pc, #8]	; (80a065c <HAL_RTC_Get_UnixTime+0xc>)
 80a0654:	681b      	ldr	r3, [r3, #0]
 80a0656:	69db      	ldr	r3, [r3, #28]
 80a0658:	9301      	str	r3, [sp, #4]
 80a065a:	bd08      	pop	{r3, pc}
 80a065c:	0806019c 	.word	0x0806019c

080a0660 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80a0660:	b508      	push	{r3, lr}
 80a0662:	4b02      	ldr	r3, [pc, #8]	; (80a066c <HAL_EEPROM_Init+0xc>)
 80a0664:	681b      	ldr	r3, [r3, #0]
 80a0666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0668:	9301      	str	r3, [sp, #4]
 80a066a:	bd08      	pop	{r3, pc}
 80a066c:	0806019c 	.word	0x0806019c

080a0670 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 80a0670:	b508      	push	{r3, lr}
 80a0672:	4b02      	ldr	r3, [pc, #8]	; (80a067c <HAL_EEPROM_Get+0xc>)
 80a0674:	681b      	ldr	r3, [r3, #0]
 80a0676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0678:	9301      	str	r3, [sp, #4]
 80a067a:	bd08      	pop	{r3, pc}
 80a067c:	0806019c 	.word	0x0806019c

080a0680 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80a0680:	b508      	push	{r3, lr}
 80a0682:	4b02      	ldr	r3, [pc, #8]	; (80a068c <HAL_EEPROM_Put+0xc>)
 80a0684:	681b      	ldr	r3, [r3, #0]
 80a0686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0688:	9301      	str	r3, [sp, #4]
 80a068a:	bd08      	pop	{r3, pc}
 80a068c:	0806019c 	.word	0x0806019c

080a0690 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a0690:	b508      	push	{r3, lr}
 80a0692:	4b02      	ldr	r3, [pc, #8]	; (80a069c <HAL_RTC_Time_Is_Valid+0xc>)
 80a0694:	681b      	ldr	r3, [r3, #0]
 80a0696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0698:	9301      	str	r3, [sp, #4]
 80a069a:	bd08      	pop	{r3, pc}
 80a069c:	0806019c 	.word	0x0806019c

080a06a0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a06a0:	b508      	push	{r3, lr}
 80a06a2:	4b02      	ldr	r3, [pc, #8]	; (80a06ac <HAL_Pin_Map+0xc>)
 80a06a4:	681b      	ldr	r3, [r3, #0]
 80a06a6:	681b      	ldr	r3, [r3, #0]
 80a06a8:	9301      	str	r3, [sp, #4]
 80a06aa:	bd08      	pop	{r3, pc}
 80a06ac:	080601b0 	.word	0x080601b0

080a06b0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a06b0:	b508      	push	{r3, lr}
 80a06b2:	4b02      	ldr	r3, [pc, #8]	; (80a06bc <HAL_Pin_Mode+0xc>)
 80a06b4:	681b      	ldr	r3, [r3, #0]
 80a06b6:	689b      	ldr	r3, [r3, #8]
 80a06b8:	9301      	str	r3, [sp, #4]
 80a06ba:	bd08      	pop	{r3, pc}
 80a06bc:	080601b0 	.word	0x080601b0

080a06c0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a06c0:	b508      	push	{r3, lr}
 80a06c2:	4b02      	ldr	r3, [pc, #8]	; (80a06cc <HAL_Get_Pin_Mode+0xc>)
 80a06c4:	681b      	ldr	r3, [r3, #0]
 80a06c6:	68db      	ldr	r3, [r3, #12]
 80a06c8:	9301      	str	r3, [sp, #4]
 80a06ca:	bd08      	pop	{r3, pc}
 80a06cc:	080601b0 	.word	0x080601b0

080a06d0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a06d0:	b508      	push	{r3, lr}
 80a06d2:	4b02      	ldr	r3, [pc, #8]	; (80a06dc <HAL_GPIO_Write+0xc>)
 80a06d4:	681b      	ldr	r3, [r3, #0]
 80a06d6:	691b      	ldr	r3, [r3, #16]
 80a06d8:	9301      	str	r3, [sp, #4]
 80a06da:	bd08      	pop	{r3, pc}
 80a06dc:	080601b0 	.word	0x080601b0

080a06e0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a06e0:	b508      	push	{r3, lr}
 80a06e2:	4b02      	ldr	r3, [pc, #8]	; (80a06ec <HAL_GPIO_Read+0xc>)
 80a06e4:	681b      	ldr	r3, [r3, #0]
 80a06e6:	695b      	ldr	r3, [r3, #20]
 80a06e8:	9301      	str	r3, [sp, #4]
 80a06ea:	bd08      	pop	{r3, pc}
 80a06ec:	080601b0 	.word	0x080601b0

080a06f0 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a06f0:	b508      	push	{r3, lr}
 80a06f2:	4b02      	ldr	r3, [pc, #8]	; (80a06fc <HAL_Interrupts_Attach+0xc>)
 80a06f4:	681b      	ldr	r3, [r3, #0]
 80a06f6:	699b      	ldr	r3, [r3, #24]
 80a06f8:	9301      	str	r3, [sp, #4]
 80a06fa:	bd08      	pop	{r3, pc}
 80a06fc:	080601b0 	.word	0x080601b0

080a0700 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a0700:	b508      	push	{r3, lr}
 80a0702:	4b02      	ldr	r3, [pc, #8]	; (80a070c <HAL_Interrupts_Detach+0xc>)
 80a0704:	681b      	ldr	r3, [r3, #0]
 80a0706:	69db      	ldr	r3, [r3, #28]
 80a0708:	9301      	str	r3, [sp, #4]
 80a070a:	bd08      	pop	{r3, pc}
 80a070c:	080601b0 	.word	0x080601b0

080a0710 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0710:	b508      	push	{r3, lr}
 80a0712:	4b02      	ldr	r3, [pc, #8]	; (80a071c <HAL_I2C_Write_Data+0xc>)
 80a0714:	681b      	ldr	r3, [r3, #0]
 80a0716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0718:	9301      	str	r3, [sp, #4]
 80a071a:	bd08      	pop	{r3, pc}
 80a071c:	080601ac 	.word	0x080601ac

080a0720 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0720:	b508      	push	{r3, lr}
 80a0722:	4b02      	ldr	r3, [pc, #8]	; (80a072c <HAL_I2C_Available_Data+0xc>)
 80a0724:	681b      	ldr	r3, [r3, #0]
 80a0726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0728:	9301      	str	r3, [sp, #4]
 80a072a:	bd08      	pop	{r3, pc}
 80a072c:	080601ac 	.word	0x080601ac

080a0730 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0730:	b508      	push	{r3, lr}
 80a0732:	4b02      	ldr	r3, [pc, #8]	; (80a073c <HAL_I2C_Read_Data+0xc>)
 80a0734:	681b      	ldr	r3, [r3, #0]
 80a0736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0738:	9301      	str	r3, [sp, #4]
 80a073a:	bd08      	pop	{r3, pc}
 80a073c:	080601ac 	.word	0x080601ac

080a0740 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0740:	b508      	push	{r3, lr}
 80a0742:	4b02      	ldr	r3, [pc, #8]	; (80a074c <HAL_I2C_Peek_Data+0xc>)
 80a0744:	681b      	ldr	r3, [r3, #0]
 80a0746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0748:	9301      	str	r3, [sp, #4]
 80a074a:	bd08      	pop	{r3, pc}
 80a074c:	080601ac 	.word	0x080601ac

080a0750 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0750:	b508      	push	{r3, lr}
 80a0752:	4b02      	ldr	r3, [pc, #8]	; (80a075c <HAL_I2C_Flush_Data+0xc>)
 80a0754:	681b      	ldr	r3, [r3, #0]
 80a0756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0758:	9301      	str	r3, [sp, #4]
 80a075a:	bd08      	pop	{r3, pc}
 80a075c:	080601ac 	.word	0x080601ac

080a0760 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0760:	b508      	push	{r3, lr}
 80a0762:	4b02      	ldr	r3, [pc, #8]	; (80a076c <HAL_I2C_Is_Enabled+0xc>)
 80a0764:	681b      	ldr	r3, [r3, #0]
 80a0766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0768:	9301      	str	r3, [sp, #4]
 80a076a:	bd08      	pop	{r3, pc}
 80a076c:	080601ac 	.word	0x080601ac

080a0770 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0770:	b508      	push	{r3, lr}
 80a0772:	4b03      	ldr	r3, [pc, #12]	; (80a0780 <HAL_I2C_Init+0x10>)
 80a0774:	681b      	ldr	r3, [r3, #0]
 80a0776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a077a:	9301      	str	r3, [sp, #4]
 80a077c:	bd08      	pop	{r3, pc}
 80a077e:	0000      	.short	0x0000
 80a0780:	080601ac 	.word	0x080601ac

080a0784 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0784:	b508      	push	{r3, lr}
 80a0786:	4b02      	ldr	r3, [pc, #8]	; (80a0790 <HAL_SPI_Init+0xc>)
 80a0788:	681b      	ldr	r3, [r3, #0]
 80a078a:	69db      	ldr	r3, [r3, #28]
 80a078c:	9301      	str	r3, [sp, #4]
 80a078e:	bd08      	pop	{r3, pc}
 80a0790:	080601b4 	.word	0x080601b4

080a0794 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0794:	b508      	push	{r3, lr}
 80a0796:	4b02      	ldr	r3, [pc, #8]	; (80a07a0 <HAL_SPI_Is_Enabled+0xc>)
 80a0798:	681b      	ldr	r3, [r3, #0]
 80a079a:	6a1b      	ldr	r3, [r3, #32]
 80a079c:	9301      	str	r3, [sp, #4]
 80a079e:	bd08      	pop	{r3, pc}
 80a07a0:	080601b4 	.word	0x080601b4

080a07a4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a07a4:	b508      	push	{r3, lr}
 80a07a6:	4b02      	ldr	r3, [pc, #8]	; (80a07b0 <HAL_USART_Init+0xc>)
 80a07a8:	681b      	ldr	r3, [r3, #0]
 80a07aa:	699b      	ldr	r3, [r3, #24]
 80a07ac:	9301      	str	r3, [sp, #4]
 80a07ae:	bd08      	pop	{r3, pc}
 80a07b0:	080601c4 	.word	0x080601c4

080a07b4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a07b4:	b508      	push	{r3, lr}
 80a07b6:	4b02      	ldr	r3, [pc, #8]	; (80a07c0 <HAL_USART_Write_Data+0xc>)
 80a07b8:	681b      	ldr	r3, [r3, #0]
 80a07ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a07bc:	9301      	str	r3, [sp, #4]
 80a07be:	bd08      	pop	{r3, pc}
 80a07c0:	080601c4 	.word	0x080601c4

080a07c4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a07c4:	b508      	push	{r3, lr}
 80a07c6:	4b02      	ldr	r3, [pc, #8]	; (80a07d0 <HAL_USART_Available_Data+0xc>)
 80a07c8:	681b      	ldr	r3, [r3, #0]
 80a07ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a07cc:	9301      	str	r3, [sp, #4]
 80a07ce:	bd08      	pop	{r3, pc}
 80a07d0:	080601c4 	.word	0x080601c4

080a07d4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a07d4:	b508      	push	{r3, lr}
 80a07d6:	4b02      	ldr	r3, [pc, #8]	; (80a07e0 <HAL_USART_Read_Data+0xc>)
 80a07d8:	681b      	ldr	r3, [r3, #0]
 80a07da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a07dc:	9301      	str	r3, [sp, #4]
 80a07de:	bd08      	pop	{r3, pc}
 80a07e0:	080601c4 	.word	0x080601c4

080a07e4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a07e4:	b508      	push	{r3, lr}
 80a07e6:	4b02      	ldr	r3, [pc, #8]	; (80a07f0 <HAL_USART_Peek_Data+0xc>)
 80a07e8:	681b      	ldr	r3, [r3, #0]
 80a07ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a07ec:	9301      	str	r3, [sp, #4]
 80a07ee:	bd08      	pop	{r3, pc}
 80a07f0:	080601c4 	.word	0x080601c4

080a07f4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a07f4:	b508      	push	{r3, lr}
 80a07f6:	4b02      	ldr	r3, [pc, #8]	; (80a0800 <HAL_USART_Flush_Data+0xc>)
 80a07f8:	681b      	ldr	r3, [r3, #0]
 80a07fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a07fc:	9301      	str	r3, [sp, #4]
 80a07fe:	bd08      	pop	{r3, pc}
 80a0800:	080601c4 	.word	0x080601c4

080a0804 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0804:	b508      	push	{r3, lr}
 80a0806:	4b02      	ldr	r3, [pc, #8]	; (80a0810 <HAL_USART_Is_Enabled+0xc>)
 80a0808:	681b      	ldr	r3, [r3, #0]
 80a080a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a080c:	9301      	str	r3, [sp, #4]
 80a080e:	bd08      	pop	{r3, pc}
 80a0810:	080601c4 	.word	0x080601c4

080a0814 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0814:	b508      	push	{r3, lr}
 80a0816:	4b02      	ldr	r3, [pc, #8]	; (80a0820 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0818:	681b      	ldr	r3, [r3, #0]
 80a081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a081c:	9301      	str	r3, [sp, #4]
 80a081e:	bd08      	pop	{r3, pc}
 80a0820:	080601c4 	.word	0x080601c4

080a0824 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0824:	b508      	push	{r3, lr}
 80a0826:	4b02      	ldr	r3, [pc, #8]	; (80a0830 <HAL_USB_USART_Init+0xc>)
 80a0828:	681b      	ldr	r3, [r3, #0]
 80a082a:	681b      	ldr	r3, [r3, #0]
 80a082c:	9301      	str	r3, [sp, #4]
 80a082e:	bd08      	pop	{r3, pc}
 80a0830:	080601d8 	.word	0x080601d8

080a0834 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0834:	b508      	push	{r3, lr}
 80a0836:	4b02      	ldr	r3, [pc, #8]	; (80a0840 <HAL_USB_USART_Available_Data+0xc>)
 80a0838:	681b      	ldr	r3, [r3, #0]
 80a083a:	691b      	ldr	r3, [r3, #16]
 80a083c:	9301      	str	r3, [sp, #4]
 80a083e:	bd08      	pop	{r3, pc}
 80a0840:	080601d8 	.word	0x080601d8

080a0844 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0844:	b508      	push	{r3, lr}
 80a0846:	4b02      	ldr	r3, [pc, #8]	; (80a0850 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0848:	681b      	ldr	r3, [r3, #0]
 80a084a:	695b      	ldr	r3, [r3, #20]
 80a084c:	9301      	str	r3, [sp, #4]
 80a084e:	bd08      	pop	{r3, pc}
 80a0850:	080601d8 	.word	0x080601d8

080a0854 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0854:	b508      	push	{r3, lr}
 80a0856:	4b02      	ldr	r3, [pc, #8]	; (80a0860 <HAL_USB_USART_Receive_Data+0xc>)
 80a0858:	681b      	ldr	r3, [r3, #0]
 80a085a:	699b      	ldr	r3, [r3, #24]
 80a085c:	9301      	str	r3, [sp, #4]
 80a085e:	bd08      	pop	{r3, pc}
 80a0860:	080601d8 	.word	0x080601d8

080a0864 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0864:	b508      	push	{r3, lr}
 80a0866:	4b02      	ldr	r3, [pc, #8]	; (80a0870 <HAL_USB_USART_Send_Data+0xc>)
 80a0868:	681b      	ldr	r3, [r3, #0]
 80a086a:	69db      	ldr	r3, [r3, #28]
 80a086c:	9301      	str	r3, [sp, #4]
 80a086e:	bd08      	pop	{r3, pc}
 80a0870:	080601d8 	.word	0x080601d8

080a0874 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0874:	b508      	push	{r3, lr}
 80a0876:	4b02      	ldr	r3, [pc, #8]	; (80a0880 <HAL_USB_USART_Flush_Data+0xc>)
 80a0878:	681b      	ldr	r3, [r3, #0]
 80a087a:	6a1b      	ldr	r3, [r3, #32]
 80a087c:	9301      	str	r3, [sp, #4]
 80a087e:	bd08      	pop	{r3, pc}
 80a0880:	080601d8 	.word	0x080601d8

080a0884 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0884:	b508      	push	{r3, lr}
 80a0886:	4b02      	ldr	r3, [pc, #8]	; (80a0890 <inet_gethostbyname+0xc>)
 80a0888:	681b      	ldr	r3, [r3, #0]
 80a088a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a088c:	9301      	str	r3, [sp, #4]
 80a088e:	bd08      	pop	{r3, pc}
 80a0890:	080601c0 	.word	0x080601c0

080a0894 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a0894:	b508      	push	{r3, lr}
 80a0896:	4b02      	ldr	r3, [pc, #8]	; (80a08a0 <system_mode+0xc>)
 80a0898:	681b      	ldr	r3, [r3, #0]
 80a089a:	681b      	ldr	r3, [r3, #0]
 80a089c:	9301      	str	r3, [sp, #4]
 80a089e:	bd08      	pop	{r3, pc}
 80a08a0:	080601a4 	.word	0x080601a4

080a08a4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a08a4:	b508      	push	{r3, lr}
 80a08a6:	4b02      	ldr	r3, [pc, #8]	; (80a08b0 <set_system_mode+0xc>)
 80a08a8:	681b      	ldr	r3, [r3, #0]
 80a08aa:	685b      	ldr	r3, [r3, #4]
 80a08ac:	9301      	str	r3, [sp, #4]
 80a08ae:	bd08      	pop	{r3, pc}
 80a08b0:	080601a4 	.word	0x080601a4

080a08b4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a08b4:	b508      	push	{r3, lr}
 80a08b6:	4b02      	ldr	r3, [pc, #8]	; (80a08c0 <system_delay_ms+0xc>)
 80a08b8:	681b      	ldr	r3, [r3, #0]
 80a08ba:	695b      	ldr	r3, [r3, #20]
 80a08bc:	9301      	str	r3, [sp, #4]
 80a08be:	bd08      	pop	{r3, pc}
 80a08c0:	080601a4 	.word	0x080601a4

080a08c4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a08c4:	b508      	push	{r3, lr}
 80a08c6:	4b02      	ldr	r3, [pc, #8]	; (80a08d0 <application_thread_current+0xc>)
 80a08c8:	681b      	ldr	r3, [r3, #0]
 80a08ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a08cc:	9301      	str	r3, [sp, #4]
 80a08ce:	bd08      	pop	{r3, pc}
 80a08d0:	080601a4 	.word	0x080601a4

080a08d4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a08d4:	b508      	push	{r3, lr}
 80a08d6:	4b02      	ldr	r3, [pc, #8]	; (80a08e0 <application_thread_invoke+0xc>)
 80a08d8:	681b      	ldr	r3, [r3, #0]
 80a08da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a08dc:	9301      	str	r3, [sp, #4]
 80a08de:	bd08      	pop	{r3, pc}
 80a08e0:	080601a4 	.word	0x080601a4

080a08e4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a08e4:	b508      	push	{r3, lr}
 80a08e6:	4b02      	ldr	r3, [pc, #8]	; (80a08f0 <system_thread_get_state+0xc>)
 80a08e8:	681b      	ldr	r3, [r3, #0]
 80a08ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a08ec:	9301      	str	r3, [sp, #4]
 80a08ee:	bd08      	pop	{r3, pc}
 80a08f0:	080601a4 	.word	0x080601a4

080a08f4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a08f4:	b508      	push	{r3, lr}
 80a08f6:	4b03      	ldr	r3, [pc, #12]	; (80a0904 <system_ctrl_set_app_request_handler+0x10>)
 80a08f8:	681b      	ldr	r3, [r3, #0]
 80a08fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a08fe:	9301      	str	r3, [sp, #4]
 80a0900:	bd08      	pop	{r3, pc}
 80a0902:	0000      	.short	0x0000
 80a0904:	080601a4 	.word	0x080601a4

080a0908 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0908:	b508      	push	{r3, lr}
 80a090a:	4b03      	ldr	r3, [pc, #12]	; (80a0918 <system_ctrl_set_result+0x10>)
 80a090c:	681b      	ldr	r3, [r3, #0]
 80a090e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0912:	9301      	str	r3, [sp, #4]
 80a0914:	bd08      	pop	{r3, pc}
 80a0916:	0000      	.short	0x0000
 80a0918:	080601a4 	.word	0x080601a4

080a091c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a091c:	b508      	push	{r3, lr}
 80a091e:	4b02      	ldr	r3, [pc, #8]	; (80a0928 <spark_variable+0xc>)
 80a0920:	681b      	ldr	r3, [r3, #0]
 80a0922:	681b      	ldr	r3, [r3, #0]
 80a0924:	9301      	str	r3, [sp, #4]
 80a0926:	bd08      	pop	{r3, pc}
 80a0928:	080601cc 	.word	0x080601cc

080a092c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a092c:	b508      	push	{r3, lr}
 80a092e:	4b02      	ldr	r3, [pc, #8]	; (80a0938 <spark_function+0xc>)
 80a0930:	681b      	ldr	r3, [r3, #0]
 80a0932:	685b      	ldr	r3, [r3, #4]
 80a0934:	9301      	str	r3, [sp, #4]
 80a0936:	bd08      	pop	{r3, pc}
 80a0938:	080601cc 	.word	0x080601cc

080a093c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a093c:	b508      	push	{r3, lr}
 80a093e:	4b02      	ldr	r3, [pc, #8]	; (80a0948 <spark_process+0xc>)
 80a0940:	681b      	ldr	r3, [r3, #0]
 80a0942:	689b      	ldr	r3, [r3, #8]
 80a0944:	9301      	str	r3, [sp, #4]
 80a0946:	bd08      	pop	{r3, pc}
 80a0948:	080601cc 	.word	0x080601cc

080a094c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a094c:	b508      	push	{r3, lr}
 80a094e:	4b02      	ldr	r3, [pc, #8]	; (80a0958 <spark_cloud_flag_connected+0xc>)
 80a0950:	681b      	ldr	r3, [r3, #0]
 80a0952:	695b      	ldr	r3, [r3, #20]
 80a0954:	9301      	str	r3, [sp, #4]
 80a0956:	bd08      	pop	{r3, pc}
 80a0958:	080601cc 	.word	0x080601cc

080a095c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a095c:	b508      	push	{r3, lr}
 80a095e:	4b02      	ldr	r3, [pc, #8]	; (80a0968 <spark_send_event+0xc>)
 80a0960:	681b      	ldr	r3, [r3, #0]
 80a0962:	6a1b      	ldr	r3, [r3, #32]
 80a0964:	9301      	str	r3, [sp, #4]
 80a0966:	bd08      	pop	{r3, pc}
 80a0968:	080601cc 	.word	0x080601cc

080a096c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a096c:	b508      	push	{r3, lr}
 80a096e:	4b02      	ldr	r3, [pc, #8]	; (80a0978 <spark_sync_time_pending+0xc>)
 80a0970:	681b      	ldr	r3, [r3, #0]
 80a0972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0974:	9301      	str	r3, [sp, #4]
 80a0976:	bd08      	pop	{r3, pc}
 80a0978:	080601cc 	.word	0x080601cc

080a097c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a097c:	b508      	push	{r3, lr}
 80a097e:	4b02      	ldr	r3, [pc, #8]	; (80a0988 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0980:	681b      	ldr	r3, [r3, #0]
 80a0982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0984:	9301      	str	r3, [sp, #4]
 80a0986:	bd08      	pop	{r3, pc}
 80a0988:	080601cc 	.word	0x080601cc

080a098c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a098c:	b508      	push	{r3, lr}
 80a098e:	4b02      	ldr	r3, [pc, #8]	; (80a0998 <network_connect+0xc>)
 80a0990:	681b      	ldr	r3, [r3, #0]
 80a0992:	685b      	ldr	r3, [r3, #4]
 80a0994:	9301      	str	r3, [sp, #4]
 80a0996:	bd08      	pop	{r3, pc}
 80a0998:	080601c8 	.word	0x080601c8

080a099c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a099c:	b508      	push	{r3, lr}
 80a099e:	4b02      	ldr	r3, [pc, #8]	; (80a09a8 <network_connecting+0xc>)
 80a09a0:	681b      	ldr	r3, [r3, #0]
 80a09a2:	689b      	ldr	r3, [r3, #8]
 80a09a4:	9301      	str	r3, [sp, #4]
 80a09a6:	bd08      	pop	{r3, pc}
 80a09a8:	080601c8 	.word	0x080601c8

080a09ac <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a09ac:	b508      	push	{r3, lr}
 80a09ae:	4b02      	ldr	r3, [pc, #8]	; (80a09b8 <network_disconnect+0xc>)
 80a09b0:	681b      	ldr	r3, [r3, #0]
 80a09b2:	68db      	ldr	r3, [r3, #12]
 80a09b4:	9301      	str	r3, [sp, #4]
 80a09b6:	bd08      	pop	{r3, pc}
 80a09b8:	080601c8 	.word	0x080601c8

080a09bc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a09bc:	b508      	push	{r3, lr}
 80a09be:	4b02      	ldr	r3, [pc, #8]	; (80a09c8 <network_ready+0xc>)
 80a09c0:	681b      	ldr	r3, [r3, #0]
 80a09c2:	691b      	ldr	r3, [r3, #16]
 80a09c4:	9301      	str	r3, [sp, #4]
 80a09c6:	bd08      	pop	{r3, pc}
 80a09c8:	080601c8 	.word	0x080601c8

080a09cc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a09cc:	b508      	push	{r3, lr}
 80a09ce:	4b02      	ldr	r3, [pc, #8]	; (80a09d8 <network_on+0xc>)
 80a09d0:	681b      	ldr	r3, [r3, #0]
 80a09d2:	695b      	ldr	r3, [r3, #20]
 80a09d4:	9301      	str	r3, [sp, #4]
 80a09d6:	bd08      	pop	{r3, pc}
 80a09d8:	080601c8 	.word	0x080601c8

080a09dc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a09dc:	b508      	push	{r3, lr}
 80a09de:	4b02      	ldr	r3, [pc, #8]	; (80a09e8 <network_off+0xc>)
 80a09e0:	681b      	ldr	r3, [r3, #0]
 80a09e2:	699b      	ldr	r3, [r3, #24]
 80a09e4:	9301      	str	r3, [sp, #4]
 80a09e6:	bd08      	pop	{r3, pc}
 80a09e8:	080601c8 	.word	0x080601c8

080a09ec <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a09ec:	b508      	push	{r3, lr}
 80a09ee:	4b02      	ldr	r3, [pc, #8]	; (80a09f8 <network_listen+0xc>)
 80a09f0:	681b      	ldr	r3, [r3, #0]
 80a09f2:	69db      	ldr	r3, [r3, #28]
 80a09f4:	9301      	str	r3, [sp, #4]
 80a09f6:	bd08      	pop	{r3, pc}
 80a09f8:	080601c8 	.word	0x080601c8

080a09fc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a09fc:	b508      	push	{r3, lr}
 80a09fe:	4b02      	ldr	r3, [pc, #8]	; (80a0a08 <network_listening+0xc>)
 80a0a00:	681b      	ldr	r3, [r3, #0]
 80a0a02:	6a1b      	ldr	r3, [r3, #32]
 80a0a04:	9301      	str	r3, [sp, #4]
 80a0a06:	bd08      	pop	{r3, pc}
 80a0a08:	080601c8 	.word	0x080601c8

080a0a0c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0a0c:	b508      	push	{r3, lr}
 80a0a0e:	4b02      	ldr	r3, [pc, #8]	; (80a0a18 <network_set_listen_timeout+0xc>)
 80a0a10:	681b      	ldr	r3, [r3, #0]
 80a0a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0a14:	9301      	str	r3, [sp, #4]
 80a0a16:	bd08      	pop	{r3, pc}
 80a0a18:	080601c8 	.word	0x080601c8

080a0a1c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0a1c:	b508      	push	{r3, lr}
 80a0a1e:	4b02      	ldr	r3, [pc, #8]	; (80a0a28 <network_get_listen_timeout+0xc>)
 80a0a20:	681b      	ldr	r3, [r3, #0]
 80a0a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0a24:	9301      	str	r3, [sp, #4]
 80a0a26:	bd08      	pop	{r3, pc}
 80a0a28:	080601c8 	.word	0x080601c8

080a0a2c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0a2c:	b508      	push	{r3, lr}
 80a0a2e:	4b02      	ldr	r3, [pc, #8]	; (80a0a38 <malloc+0xc>)
 80a0a30:	681b      	ldr	r3, [r3, #0]
 80a0a32:	681b      	ldr	r3, [r3, #0]
 80a0a34:	9301      	str	r3, [sp, #4]
 80a0a36:	bd08      	pop	{r3, pc}
 80a0a38:	080601a0 	.word	0x080601a0

080a0a3c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0a3c:	b508      	push	{r3, lr}
 80a0a3e:	4b02      	ldr	r3, [pc, #8]	; (80a0a48 <free+0xc>)
 80a0a40:	681b      	ldr	r3, [r3, #0]
 80a0a42:	685b      	ldr	r3, [r3, #4]
 80a0a44:	9301      	str	r3, [sp, #4]
 80a0a46:	bd08      	pop	{r3, pc}
 80a0a48:	080601a0 	.word	0x080601a0

080a0a4c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0a4c:	b508      	push	{r3, lr}
 80a0a4e:	4b02      	ldr	r3, [pc, #8]	; (80a0a58 <realloc+0xc>)
 80a0a50:	681b      	ldr	r3, [r3, #0]
 80a0a52:	689b      	ldr	r3, [r3, #8]
 80a0a54:	9301      	str	r3, [sp, #4]
 80a0a56:	bd08      	pop	{r3, pc}
 80a0a58:	080601a0 	.word	0x080601a0

080a0a5c <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a0a5c:	b508      	push	{r3, lr}
 80a0a5e:	4b02      	ldr	r3, [pc, #8]	; (80a0a68 <siscanf+0xc>)
 80a0a60:	681b      	ldr	r3, [r3, #0]
 80a0a62:	699b      	ldr	r3, [r3, #24]
 80a0a64:	9301      	str	r3, [sp, #4]
 80a0a66:	bd08      	pop	{r3, pc}
 80a0a68:	080601a0 	.word	0x080601a0

080a0a6c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a0a6c:	b508      	push	{r3, lr}
 80a0a6e:	4b02      	ldr	r3, [pc, #8]	; (80a0a78 <snprintf+0xc>)
 80a0a70:	681b      	ldr	r3, [r3, #0]
 80a0a72:	69db      	ldr	r3, [r3, #28]
 80a0a74:	9301      	str	r3, [sp, #4]
 80a0a76:	bd08      	pop	{r3, pc}
 80a0a78:	080601a0 	.word	0x080601a0

080a0a7c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0a7c:	b508      	push	{r3, lr}
 80a0a7e:	4b02      	ldr	r3, [pc, #8]	; (80a0a88 <abort+0xc>)
 80a0a80:	681b      	ldr	r3, [r3, #0]
 80a0a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0a84:	9301      	str	r3, [sp, #4]
 80a0a86:	bd08      	pop	{r3, pc}
 80a0a88:	080601a0 	.word	0x080601a0

080a0a8c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0a8c:	b508      	push	{r3, lr}
 80a0a8e:	4b02      	ldr	r3, [pc, #8]	; (80a0a98 <_malloc_r+0xc>)
 80a0a90:	681b      	ldr	r3, [r3, #0]
 80a0a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0a94:	9301      	str	r3, [sp, #4]
 80a0a96:	bd08      	pop	{r3, pc}
 80a0a98:	080601a0 	.word	0x080601a0

080a0a9c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0a9c:	2100      	movs	r1, #0
 80a0a9e:	f7ff bf09 	b.w	80a08b4 <system_delay_ms>

080a0aa2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a0aa2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0aa4:	6883      	ldr	r3, [r0, #8]
 80a0aa6:	4604      	mov	r4, r0
 80a0aa8:	b90b      	cbnz	r3, 80a0aae <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a0aaa:	f001 f92c 	bl	80a1d06 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0aae:	68c3      	ldr	r3, [r0, #12]
 80a0ab0:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a0ab2:	68a3      	ldr	r3, [r4, #8]
 80a0ab4:	b11b      	cbz	r3, 80a0abe <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0ab6:	2203      	movs	r2, #3
 80a0ab8:	4621      	mov	r1, r4
 80a0aba:	4620      	mov	r0, r4
 80a0abc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0abe:	4620      	mov	r0, r4
}
 80a0ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0ac4:	2110      	movs	r1, #16
 80a0ac6:	f001 b91c 	b.w	80a1d02 <_ZdlPvj>

080a0aca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0aca:	4770      	bx	lr

080a0acc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a0acc:	2000      	movs	r0, #0
 80a0ace:	4770      	bx	lr

080a0ad0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0ad0:	b510      	push	{r4, lr}
 80a0ad2:	4604      	mov	r4, r0
 80a0ad4:	2110      	movs	r1, #16
 80a0ad6:	f001 f914 	bl	80a1d02 <_ZdlPvj>
 80a0ada:	4620      	mov	r0, r4
 80a0adc:	bd10      	pop	{r4, pc}

080a0ade <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a0ade:	b508      	push	{r3, lr}
      { delete this; }
 80a0ae0:	b108      	cbz	r0, 80a0ae6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a0ae2:	f7ff fff5 	bl	80a0ad0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0ae6:	bd08      	pop	{r3, pc}

080a0ae8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0ae8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0aea:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0aec:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0aee:	b113      	cbz	r3, 80a0af6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0af0:	2203      	movs	r2, #3
 80a0af2:	4601      	mov	r1, r0
 80a0af4:	4798      	blx	r3
    }
 80a0af6:	4620      	mov	r0, r4
 80a0af8:	bd10      	pop	{r4, pc}

080a0afa <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0afa:	2200      	movs	r2, #0
 80a0afc:	6002      	str	r2, [r0, #0]
 80a0afe:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a0b02:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a0b04:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0b06:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a0b0a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0b0c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0b0e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a0b10:	680c      	ldr	r4, [r1, #0]
 80a0b12:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0b14:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a0b16:	bd10      	pop	{r4, pc}

080a0b18 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a0b18:	b510      	push	{r4, lr}
 80a0b1a:	4604      	mov	r4, r0
    free((void*)msg_);
 80a0b1c:	6800      	ldr	r0, [r0, #0]
 80a0b1e:	f7ff ff8d 	bl	80a0a3c <free>
}
 80a0b22:	4620      	mov	r0, r4
 80a0b24:	bd10      	pop	{r4, pc}

080a0b26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a0b26:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0b28:	68c4      	ldr	r4, [r0, #12]
 80a0b2a:	b1f4      	cbz	r4, 80a0b6a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a0b2c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0b2e:	2b02      	cmp	r3, #2
 80a0b30:	d103      	bne.n	80a0b3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a0b32:	f104 000c 	add.w	r0, r4, #12
 80a0b36:	f7ff ffef 	bl	80a0b18 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a0b3a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0b3c:	b135      	cbz	r5, 80a0b4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0b3e:	4628      	mov	r0, r5
 80a0b40:	f7ff ffd2 	bl	80a0ae8 <_ZNSt14_Function_baseD1Ev>
 80a0b44:	2110      	movs	r1, #16
 80a0b46:	4628      	mov	r0, r5
 80a0b48:	f001 f8db 	bl	80a1d02 <_ZdlPvj>
 80a0b4c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0b4e:	b135      	cbz	r5, 80a0b5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a0b50:	4628      	mov	r0, r5
 80a0b52:	f7ff ffc9 	bl	80a0ae8 <_ZNSt14_Function_baseD1Ev>
 80a0b56:	2110      	movs	r1, #16
 80a0b58:	4628      	mov	r0, r5
 80a0b5a:	f001 f8d2 	bl	80a1d02 <_ZdlPvj>
 80a0b5e:	4620      	mov	r0, r4
 80a0b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0b64:	2114      	movs	r1, #20
 80a0b66:	f001 b8cc 	b.w	80a1d02 <_ZdlPvj>
 80a0b6a:	bd38      	pop	{r3, r4, r5, pc}

080a0b6c <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a0b6c:	b510      	push	{r4, lr}
 80a0b6e:	b088      	sub	sp, #32
 80a0b70:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a0b72:	4668      	mov	r0, sp
 80a0b74:	f000 fcc6 	bl	80a1504 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a0b78:	4669      	mov	r1, sp
 80a0b7a:	a804      	add	r0, sp, #16
 80a0b7c:	f000 fce4 	bl	80a1548 <_ZN6StringC1ERKS_>
 80a0b80:	a804      	add	r0, sp, #16
 80a0b82:	47a0      	blx	r4
 80a0b84:	4604      	mov	r4, r0
 80a0b86:	a804      	add	r0, sp, #16
 80a0b88:	f000 fc75 	bl	80a1476 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a0b8c:	4668      	mov	r0, sp
 80a0b8e:	f000 fc72 	bl	80a1476 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a0b92:	4620      	mov	r0, r4
 80a0b94:	b008      	add	sp, #32
 80a0b96:	bd10      	pop	{r4, pc}

080a0b98 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a0b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0b9a:	4607      	mov	r7, r0
 80a0b9c:	460e      	mov	r6, r1
 80a0b9e:	4615      	mov	r5, r2
 80a0ba0:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a0ba2:	2410      	movs	r4, #16
 80a0ba4:	4622      	mov	r2, r4
 80a0ba6:	2100      	movs	r1, #0
 80a0ba8:	4668      	mov	r0, sp
 80a0baa:	f002 f990 	bl	80a2ece <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a0bae:	2200      	movs	r2, #0
 80a0bb0:	4669      	mov	r1, sp
 80a0bb2:	4610      	mov	r0, r2
         size = sizeof(*this);
 80a0bb4:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80a0bb8:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a0bba:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a0bbc:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a0bbe:	f7ff feb5 	bl	80a092c <spark_function>
}
 80a0bc2:	b005      	add	sp, #20
 80a0bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0bc6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a0bc6:	b513      	push	{r0, r1, r4, lr}
 80a0bc8:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0bca:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a0bce:	2300      	movs	r3, #0
 80a0bd0:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0bd2:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0bd4:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a0bd6:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0bd8:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a0bda:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0bdc:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0bde:	f7ff fb1e 	bl	80a021e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0be2:	4620      	mov	r0, r4
 80a0be4:	b002      	add	sp, #8
 80a0be6:	bd10      	pop	{r4, pc}

080a0be8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a0be8:	680b      	ldr	r3, [r1, #0]
 80a0bea:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a0bec:	b113      	cbz	r3, 80a0bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a0bee:	685a      	ldr	r2, [r3, #4]
 80a0bf0:	3201      	adds	r2, #1
 80a0bf2:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a0bf4:	4770      	bx	lr

080a0bf6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0bf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0bf8:	460c      	mov	r4, r1
 80a0bfa:	4606      	mov	r6, r0
 80a0bfc:	460f      	mov	r7, r1
 80a0bfe:	f854 3b04 	ldr.w	r3, [r4], #4
 80a0c02:	ad02      	add	r5, sp, #8
 80a0c04:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a0c08:	4621      	mov	r1, r4
 80a0c0a:	a801      	add	r0, sp, #4
 80a0c0c:	f7ff ffec 	bl	80a0be8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a0c10:	4629      	mov	r1, r5
 80a0c12:	4630      	mov	r0, r6
 80a0c14:	f7ff ffd7 	bl	80a0bc6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0c18:	a801      	add	r0, sp, #4
 80a0c1a:	f7ff fb00 	bl	80a021e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0c1e:	4620      	mov	r0, r4
 80a0c20:	f7ff fafd 	bl	80a021e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a0c24:	4638      	mov	r0, r7
 80a0c26:	2108      	movs	r1, #8
 80a0c28:	f001 f86b 	bl	80a1d02 <_ZdlPvj>
        return p;
    }
 80a0c2c:	4630      	mov	r0, r6
 80a0c2e:	b003      	add	sp, #12
 80a0c30:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0c32 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a0c32:	b513      	push	{r0, r1, r4, lr}
 80a0c34:	460b      	mov	r3, r1
 80a0c36:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0c38:	c803      	ldmia	r0, {r0, r1}
 80a0c3a:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0c3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0c42:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0c46:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a0c4a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0c4e:	b002      	add	sp, #8
 80a0c50:	bd10      	pop	{r4, pc}
	...

080a0c54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0c54:	b538      	push	{r3, r4, r5, lr}
 80a0c56:	2300      	movs	r3, #0
 80a0c58:	4604      	mov	r4, r0
 80a0c5a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0c5c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0c5e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0c60:	f7ff fa1d 	bl	80a009e <_Znwj>
 80a0c64:	b128      	cbz	r0, 80a0c72 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a0c66:	2301      	movs	r3, #1
 80a0c68:	6043      	str	r3, [r0, #4]
 80a0c6a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a0c6c:	4b02      	ldr	r3, [pc, #8]	; (80a0c78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a0c6e:	60c5      	str	r5, [r0, #12]
 80a0c70:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0c72:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a0c74:	4620      	mov	r0, r4
 80a0c76:	bd38      	pop	{r3, r4, r5, pc}
 80a0c78:	080a5264 	.word	0x080a5264

080a0c7c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0c7c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0c7e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0c80:	b90a      	cbnz	r2, 80a0c86 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0c82:	f001 f840 	bl	80a1d06 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0c86:	68c3      	ldr	r3, [r0, #12]
    }
 80a0c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0c8c:	4718      	bx	r3

080a0c8e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0c8e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0c90:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0c92:	f100 0110 	add.w	r1, r0, #16
 80a0c96:	f7ff fff1 	bl	80a0c7c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0c9a:	bd08      	pop	{r3, pc}

080a0c9c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0c9c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0c9e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0ca0:	b90a      	cbnz	r2, 80a0ca6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a0ca2:	f001 f830 	bl	80a1d06 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0ca6:	68c3      	ldr	r3, [r0, #12]
    }
 80a0ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0cac:	4718      	bx	r3

080a0cae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0cae:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0cb0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0cb2:	f100 0110 	add.w	r1, r0, #16
 80a0cb6:	f7ff fff1 	bl	80a0c9c <_ZNKSt8functionIFvRKbEEclES1_>
 80a0cba:	bd08      	pop	{r3, pc}

080a0cbc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0cbc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0cbe:	2300      	movs	r3, #0
 80a0cc0:	6083      	str	r3, [r0, #8]
 80a0cc2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0cc4:	4604      	mov	r4, r0
 80a0cc6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0cc8:	b12b      	cbz	r3, 80a0cd6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0cca:	2202      	movs	r2, #2
 80a0ccc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0cce:	68eb      	ldr	r3, [r5, #12]
 80a0cd0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0cd2:	68ab      	ldr	r3, [r5, #8]
 80a0cd4:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0cd6:	4620      	mov	r0, r4
 80a0cd8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0cdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a0cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0cde:	b089      	sub	sp, #36	; 0x24
 80a0ce0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a0ce2:	4668      	mov	r0, sp
 80a0ce4:	f7ff ff09 	bl	80a0afa <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a0ce8:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a0cec:	2300      	movs	r3, #0
 80a0cee:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0cf2:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a0cf6:	2b00      	cmp	r3, #0
 80a0cf8:	d103      	bne.n	80a0d02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a0cfa:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a0cfe:	2900      	cmp	r1, #0
 80a0d00:	d1f7      	bne.n	80a0cf2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a0d02:	d002      	beq.n	80a0d0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a0d04:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0d08:	e063      	b.n	80a0dd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a0d0a:	f114 050c 	adds.w	r5, r4, #12
 80a0d0e:	d003      	beq.n	80a0d18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a0d10:	4669      	mov	r1, sp
 80a0d12:	4628      	mov	r0, r5
 80a0d14:	f7ff fef1 	bl	80a0afa <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a0d18:	f3bf 8f5f 	dmb	sy
 80a0d1c:	2301      	movs	r3, #1
 80a0d1e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0d20:	f3bf 8f5f 	dmb	sy
 80a0d24:	f104 0308 	add.w	r3, r4, #8
 80a0d28:	2000      	movs	r0, #0
 80a0d2a:	e853 6f00 	ldrex	r6, [r3]
 80a0d2e:	e843 0200 	strex	r2, r0, [r3]
 80a0d32:	2a00      	cmp	r2, #0
 80a0d34:	d1f9      	bne.n	80a0d2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a0d36:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0d3a:	2e00      	cmp	r6, #0
 80a0d3c:	d049      	beq.n	80a0dd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0d3e:	f7ff fdc1 	bl	80a08c4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0d42:	b120      	cbz	r0, 80a0d4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0d44:	4629      	mov	r1, r5
 80a0d46:	4630      	mov	r0, r6
 80a0d48:	f7ff ff98 	bl	80a0c7c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0d4c:	e03a      	b.n	80a0dc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0d4e:	4631      	mov	r1, r6
 80a0d50:	a802      	add	r0, sp, #8
 80a0d52:	f7ff ffb3 	bl	80a0cbc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0d56:	68e0      	ldr	r0, [r4, #12]
 80a0d58:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0d5c:	b108      	cbz	r0, 80a0d62 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a0d5e:	f002 f8f9 	bl	80a2f54 <strdup>
 80a0d62:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0d64:	2010      	movs	r0, #16
 80a0d66:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a0d6a:	f7ff f998 	bl	80a009e <_Znwj>
 80a0d6e:	4605      	mov	r5, r0
 80a0d70:	b1e8      	cbz	r0, 80a0dae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0d72:	2700      	movs	r7, #0
 80a0d74:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0d76:	2018      	movs	r0, #24
 80a0d78:	f7ff f991 	bl	80a009e <_Znwj>
 80a0d7c:	4604      	mov	r4, r0
 80a0d7e:	b188      	cbz	r0, 80a0da4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0d80:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0d82:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0d84:	a802      	add	r0, sp, #8
 80a0d86:	f7ff ff54 	bl	80a0c32 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0d8a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0d8c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d8e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0d90:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0d92:	9204      	str	r2, [sp, #16]
 80a0d94:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0d96:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d98:	60e3      	str	r3, [r4, #12]
 80a0d9a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0d9e:	9205      	str	r2, [sp, #20]
 80a0da0:	f7ff feab 	bl	80a0afa <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0da4:	4b0d      	ldr	r3, [pc, #52]	; (80a0ddc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0da6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0da8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0daa:	4b0d      	ldr	r3, [pc, #52]	; (80a0de0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a0dac:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a0dae:	a806      	add	r0, sp, #24
 80a0db0:	f7ff feb2 	bl	80a0b18 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0db4:	a802      	add	r0, sp, #8
 80a0db6:	f7ff fe97 	bl	80a0ae8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0dba:	2200      	movs	r2, #0
 80a0dbc:	4629      	mov	r1, r5
 80a0dbe:	4809      	ldr	r0, [pc, #36]	; (80a0de4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a0dc0:	f7ff fd88 	bl	80a08d4 <application_thread_invoke>
 80a0dc4:	4630      	mov	r0, r6
 80a0dc6:	f7ff fe8f 	bl	80a0ae8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0dca:	2110      	movs	r1, #16
 80a0dcc:	4630      	mov	r0, r6
 80a0dce:	f000 ff98 	bl	80a1d02 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a0dd2:	4668      	mov	r0, sp
 80a0dd4:	f7ff fea0 	bl	80a0b18 <_ZN8particle5ErrorD1Ev>
    }
 80a0dd8:	b009      	add	sp, #36	; 0x24
 80a0dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0ddc:	080a0c8f 	.word	0x080a0c8f
 80a0de0:	080a0f05 	.word	0x080a0f05
 80a0de4:	080a0aa3 	.word	0x080a0aa3

080a0de8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0dec:	b08b      	sub	sp, #44	; 0x2c
 80a0dee:	4606      	mov	r6, r0
 80a0df0:	460f      	mov	r7, r1
 80a0df2:	4690      	mov	r8, r2
 80a0df4:	4699      	mov	r9, r3
 80a0df6:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0dfa:	f7ff fda7 	bl	80a094c <spark_cloud_flag_connected>
 80a0dfe:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a0e00:	4683      	mov	fp, r0
 80a0e02:	bb30      	cbnz	r0, 80a0e52 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0e04:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a0e08:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0e0a:	a905      	add	r1, sp, #20
 80a0e0c:	4628      	mov	r0, r5
 80a0e0e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0e12:	f7ff fe72 	bl	80a0afa <_ZN8particle5ErrorC1EOS0_>
 80a0e16:	2014      	movs	r0, #20
 80a0e18:	f7ff f941 	bl	80a009e <_Znwj>
 80a0e1c:	4604      	mov	r4, r0
 80a0e1e:	b158      	cbz	r0, 80a0e38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a0e20:	2302      	movs	r3, #2
 80a0e22:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0e24:	2301      	movs	r3, #1
 80a0e26:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0e28:	f8c0 b004 	str.w	fp, [r0, #4]
 80a0e2c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a0e30:	4629      	mov	r1, r5
 80a0e32:	300c      	adds	r0, #12
 80a0e34:	f7ff fe61 	bl	80a0afa <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a0e38:	4630      	mov	r0, r6
 80a0e3a:	4621      	mov	r1, r4
 80a0e3c:	f840 4b04 	str.w	r4, [r0], #4
 80a0e40:	f7ff ff08 	bl	80a0c54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0e44:	4628      	mov	r0, r5
 80a0e46:	f7ff fe67 	bl	80a0b18 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a0e4a:	a805      	add	r0, sp, #20
 80a0e4c:	f7ff fe64 	bl	80a0b18 <_ZN8particle5ErrorD1Ev>
 80a0e50:	e052      	b.n	80a0ef8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0e52:	2400      	movs	r4, #0
 80a0e54:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a0e56:	2014      	movs	r0, #20
 80a0e58:	606c      	str	r4, [r5, #4]
 80a0e5a:	60ac      	str	r4, [r5, #8]
 80a0e5c:	9307      	str	r3, [sp, #28]
 80a0e5e:	f7ff f91e 	bl	80a009e <_Znwj>
 80a0e62:	4601      	mov	r1, r0
 80a0e64:	b118      	cbz	r0, 80a0e6e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a0e66:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0e68:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0e6a:	6044      	str	r4, [r0, #4]
 80a0e6c:	6084      	str	r4, [r0, #8]
 80a0e6e:	a804      	add	r0, sp, #16
 80a0e70:	9103      	str	r1, [sp, #12]
 80a0e72:	f7ff feef 	bl	80a0c54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a0e76:	4b22      	ldr	r3, [pc, #136]	; (80a0f00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a0e78:	2008      	movs	r0, #8
 80a0e7a:	9308      	str	r3, [sp, #32]
 80a0e7c:	f7ff f90f 	bl	80a009e <_Znwj>
 80a0e80:	4604      	mov	r4, r0
 80a0e82:	b128      	cbz	r0, 80a0e90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0e84:	9b03      	ldr	r3, [sp, #12]
 80a0e86:	a904      	add	r1, sp, #16
 80a0e88:	f840 3b04 	str.w	r3, [r0], #4
 80a0e8c:	f7ff feac 	bl	80a0be8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0e90:	9500      	str	r5, [sp, #0]
 80a0e92:	fa5f f38a 	uxtb.w	r3, sl
 80a0e96:	464a      	mov	r2, r9
 80a0e98:	4641      	mov	r1, r8
 80a0e9a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a0e9c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0e9e:	f7ff fd5d 	bl	80a095c <spark_send_event>
 80a0ea2:	b920      	cbnz	r0, 80a0eae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a0ea4:	9b03      	ldr	r3, [sp, #12]
 80a0ea6:	785b      	ldrb	r3, [r3, #1]
 80a0ea8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a0eac:	b183      	cbz	r3, 80a0ed0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a0eae:	9b03      	ldr	r3, [sp, #12]
 80a0eb0:	a904      	add	r1, sp, #16
 80a0eb2:	a806      	add	r0, sp, #24
 80a0eb4:	9305      	str	r3, [sp, #20]
 80a0eb6:	f7ff fe97 	bl	80a0be8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a0eba:	a905      	add	r1, sp, #20
 80a0ebc:	4630      	mov	r0, r6
 80a0ebe:	f7ff fe82 	bl	80a0bc6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0ec2:	a806      	add	r0, sp, #24
 80a0ec4:	f7ff f9ab 	bl	80a021e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0ec8:	a804      	add	r0, sp, #16
 80a0eca:	f7ff f9a8 	bl	80a021e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0ece:	e013      	b.n	80a0ef8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a0ed0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a0ed4:	a905      	add	r1, sp, #20
 80a0ed6:	a803      	add	r0, sp, #12
 80a0ed8:	9205      	str	r2, [sp, #20]
 80a0eda:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0ede:	f7ff fefd 	bl	80a0cdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a0ee2:	a805      	add	r0, sp, #20
 80a0ee4:	f7ff fe18 	bl	80a0b18 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a0ee8:	a805      	add	r0, sp, #20
 80a0eea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0eec:	f7ff fe83 	bl	80a0bf6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a0ef0:	a806      	add	r0, sp, #24
 80a0ef2:	f7ff f994 	bl	80a021e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0ef6:	e7da      	b.n	80a0eae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a0ef8:	4630      	mov	r0, r6
 80a0efa:	b00b      	add	sp, #44	; 0x2c
 80a0efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0f00:	080a1075 	.word	0x080a1075

080a0f04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0f04:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0f08:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0f0a:	d006      	beq.n	80a0f1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a0f0c:	2a03      	cmp	r2, #3
 80a0f0e:	d017      	beq.n	80a0f40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a0f10:	2a01      	cmp	r2, #1
 80a0f12:	d122      	bne.n	80a0f5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0f14:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0f16:	6003      	str	r3, [r0, #0]
	      break;
 80a0f18:	e01f      	b.n	80a0f5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0f1a:	2018      	movs	r0, #24
 80a0f1c:	680e      	ldr	r6, [r1, #0]
 80a0f1e:	f7ff f8be 	bl	80a009e <_Znwj>
 80a0f22:	4605      	mov	r5, r0
 80a0f24:	b150      	cbz	r0, 80a0f3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0f26:	4631      	mov	r1, r6
 80a0f28:	f7ff fec8 	bl	80a0cbc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0f2c:	6930      	ldr	r0, [r6, #16]
 80a0f2e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0f32:	b108      	cbz	r0, 80a0f38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a0f34:	f002 f80e 	bl	80a2f54 <strdup>
 80a0f38:	6128      	str	r0, [r5, #16]
 80a0f3a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0f3c:	6025      	str	r5, [r4, #0]
 80a0f3e:	e00c      	b.n	80a0f5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0f40:	6804      	ldr	r4, [r0, #0]
 80a0f42:	b154      	cbz	r4, 80a0f5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a0f44:	f104 0010 	add.w	r0, r4, #16
 80a0f48:	f7ff fde6 	bl	80a0b18 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0f4c:	4620      	mov	r0, r4
 80a0f4e:	f7ff fdcb 	bl	80a0ae8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0f52:	2118      	movs	r1, #24
 80a0f54:	4620      	mov	r0, r4
 80a0f56:	f000 fed4 	bl	80a1d02 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0f5a:	2000      	movs	r0, #0
 80a0f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0f5e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0f5e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0f60:	2300      	movs	r3, #0
 80a0f62:	6083      	str	r3, [r0, #8]
 80a0f64:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0f66:	4604      	mov	r4, r0
 80a0f68:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0f6a:	b12b      	cbz	r3, 80a0f78 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0f6c:	2202      	movs	r2, #2
 80a0f6e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0f70:	68eb      	ldr	r3, [r5, #12]
 80a0f72:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0f74:	68ab      	ldr	r3, [r5, #8]
 80a0f76:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0f78:	4620      	mov	r0, r4
 80a0f7a:	bd38      	pop	{r3, r4, r5, pc}

080a0f7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0f7c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0f7e:	b570      	push	{r4, r5, r6, lr}
 80a0f80:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0f82:	d006      	beq.n	80a0f92 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a0f84:	2a03      	cmp	r2, #3
 80a0f86:	d011      	beq.n	80a0fac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a0f88:	2a01      	cmp	r2, #1
 80a0f8a:	d118      	bne.n	80a0fbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0f8c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0f8e:	6003      	str	r3, [r0, #0]
	      break;
 80a0f90:	e015      	b.n	80a0fbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0f92:	2014      	movs	r0, #20
 80a0f94:	680e      	ldr	r6, [r1, #0]
 80a0f96:	f7ff f882 	bl	80a009e <_Znwj>
 80a0f9a:	4605      	mov	r5, r0
 80a0f9c:	b120      	cbz	r0, 80a0fa8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0f9e:	4631      	mov	r1, r6
 80a0fa0:	f7ff ffdd 	bl	80a0f5e <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a0fa4:	7c33      	ldrb	r3, [r6, #16]
 80a0fa6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0fa8:	6025      	str	r5, [r4, #0]
 80a0faa:	e008      	b.n	80a0fbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0fac:	6804      	ldr	r4, [r0, #0]
 80a0fae:	b134      	cbz	r4, 80a0fbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0fb0:	4620      	mov	r0, r4
 80a0fb2:	f7ff fd99 	bl	80a0ae8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0fb6:	2114      	movs	r1, #20
 80a0fb8:	4620      	mov	r0, r4
 80a0fba:	f000 fea2 	bl	80a1d02 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0fbe:	2000      	movs	r0, #0
 80a0fc0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0fc4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a0fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0fc6:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0fc8:	f3bf 8f5f 	dmb	sy
 80a0fcc:	b087      	sub	sp, #28
 80a0fce:	2300      	movs	r3, #0
 80a0fd0:	e850 6f00 	ldrex	r6, [r0]
 80a0fd4:	e840 3200 	strex	r2, r3, [r0]
 80a0fd8:	2a00      	cmp	r2, #0
 80a0fda:	d1f9      	bne.n	80a0fd0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a0fdc:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0fe0:	2e00      	cmp	r6, #0
 80a0fe2:	d03f      	beq.n	80a1064 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0fe4:	4618      	mov	r0, r3
 80a0fe6:	f7ff fc6d 	bl	80a08c4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0fea:	4607      	mov	r7, r0
 80a0fec:	b120      	cbz	r0, 80a0ff8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0fee:	4621      	mov	r1, r4
 80a0ff0:	4630      	mov	r0, r6
 80a0ff2:	f7ff fe53 	bl	80a0c9c <_ZNKSt8functionIFvRKbEEclES1_>
 80a0ff6:	e02e      	b.n	80a1056 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0ff8:	4631      	mov	r1, r6
 80a0ffa:	a801      	add	r0, sp, #4
 80a0ffc:	f7ff ffaf 	bl	80a0f5e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1000:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1002:	2010      	movs	r0, #16
 80a1004:	f88d 3014 	strb.w	r3, [sp, #20]
 80a1008:	f7ff f849 	bl	80a009e <_Znwj>
 80a100c:	4605      	mov	r5, r0
 80a100e:	b1d0      	cbz	r0, 80a1046 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1010:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1012:	2014      	movs	r0, #20
 80a1014:	f7ff f843 	bl	80a009e <_Znwj>
 80a1018:	4604      	mov	r4, r0
 80a101a:	b178      	cbz	r0, 80a103c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a101c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a101e:	4601      	mov	r1, r0
 80a1020:	a801      	add	r0, sp, #4
 80a1022:	f7ff fe06 	bl	80a0c32 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1026:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1028:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a102a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a102c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a102e:	9203      	str	r2, [sp, #12]
 80a1030:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1032:	60e3      	str	r3, [r4, #12]
 80a1034:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1038:	9204      	str	r2, [sp, #16]
 80a103a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a103c:	4b0a      	ldr	r3, [pc, #40]	; (80a1068 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a103e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1040:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1042:	4b0a      	ldr	r3, [pc, #40]	; (80a106c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a1044:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1046:	a801      	add	r0, sp, #4
 80a1048:	f7ff fd4e 	bl	80a0ae8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a104c:	2200      	movs	r2, #0
 80a104e:	4629      	mov	r1, r5
 80a1050:	4807      	ldr	r0, [pc, #28]	; (80a1070 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a1052:	f7ff fc3f 	bl	80a08d4 <application_thread_invoke>
 80a1056:	4630      	mov	r0, r6
 80a1058:	f7ff fd46 	bl	80a0ae8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a105c:	2110      	movs	r1, #16
 80a105e:	4630      	mov	r0, r6
 80a1060:	f000 fe4f 	bl	80a1d02 <_ZdlPvj>
        }
    }
 80a1064:	b007      	add	sp, #28
 80a1066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1068:	080a0caf 	.word	0x080a0caf
 80a106c:	080a0f7d 	.word	0x080a0f7d
 80a1070:	080a0aa3 	.word	0x080a0aa3

080a1074 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1074:	b530      	push	{r4, r5, lr}
 80a1076:	4604      	mov	r4, r0
 80a1078:	b085      	sub	sp, #20
 80a107a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a107c:	4668      	mov	r0, sp
 80a107e:	4611      	mov	r1, r2
 80a1080:	f7ff fdb9 	bl	80a0bf6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1084:	b17c      	cbz	r4, 80a10a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1086:	b224      	sxth	r4, r4
 80a1088:	4628      	mov	r0, r5
 80a108a:	b10d      	cbz	r5, 80a1090 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a108c:	f001 ff62 	bl	80a2f54 <strdup>
 80a1090:	9002      	str	r0, [sp, #8]
 80a1092:	a902      	add	r1, sp, #8
 80a1094:	4668      	mov	r0, sp
 80a1096:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a109a:	f7ff fe1f 	bl	80a0cdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a109e:	a802      	add	r0, sp, #8
 80a10a0:	f7ff fd3a 	bl	80a0b18 <_ZN8particle5ErrorD1Ev>
 80a10a4:	e01d      	b.n	80a10e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a10a6:	f04f 0201 	mov.w	r2, #1
 80a10aa:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a10ac:	f88d 4008 	strb.w	r4, [sp, #8]
 80a10b0:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a10b4:	42a3      	cmp	r3, r4
 80a10b6:	d103      	bne.n	80a10c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a10b8:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a10bc:	2900      	cmp	r1, #0
 80a10be:	d1f7      	bne.n	80a10b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a10c0:	d002      	beq.n	80a10c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a10c2:	f88d 3008 	strb.w	r3, [sp, #8]
 80a10c6:	e00c      	b.n	80a10e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a10c8:	f110 010c 	adds.w	r1, r0, #12
 80a10cc:	f04f 0301 	mov.w	r3, #1
 80a10d0:	bf18      	it	ne
 80a10d2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a10d4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a10d8:	3004      	adds	r0, #4
 80a10da:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a10de:	f7ff ff71 	bl	80a0fc4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a10e2:	a801      	add	r0, sp, #4
 80a10e4:	f7ff f89b 	bl	80a021e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a10e8:	b005      	add	sp, #20
 80a10ea:	bd30      	pop	{r4, r5, pc}

080a10ec <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a10ec:	4770      	bx	lr

080a10ee <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a10ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a10f0:	4606      	mov	r6, r0
 80a10f2:	4615      	mov	r5, r2
 80a10f4:	460c      	mov	r4, r1
 80a10f6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a10f8:	42bc      	cmp	r4, r7
 80a10fa:	d006      	beq.n	80a110a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a10fc:	6833      	ldr	r3, [r6, #0]
 80a10fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1102:	689b      	ldr	r3, [r3, #8]
 80a1104:	4630      	mov	r0, r6
 80a1106:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1108:	e7f6      	b.n	80a10f8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a110a:	4628      	mov	r0, r5
 80a110c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a110e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a110e:	2200      	movs	r2, #0
 80a1110:	7c00      	ldrb	r0, [r0, #16]
 80a1112:	f7ff bafd 	b.w	80a0710 <HAL_I2C_Write_Data>

080a1116 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1116:	2100      	movs	r1, #0
 80a1118:	7c00      	ldrb	r0, [r0, #16]
 80a111a:	f7ff bb01 	b.w	80a0720 <HAL_I2C_Available_Data>

080a111e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a111e:	2100      	movs	r1, #0
 80a1120:	7c00      	ldrb	r0, [r0, #16]
 80a1122:	f7ff bb05 	b.w	80a0730 <HAL_I2C_Read_Data>

080a1126 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1126:	2100      	movs	r1, #0
 80a1128:	7c00      	ldrb	r0, [r0, #16]
 80a112a:	f7ff bb09 	b.w	80a0740 <HAL_I2C_Peek_Data>

080a112e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a112e:	2100      	movs	r1, #0
 80a1130:	7c00      	ldrb	r0, [r0, #16]
 80a1132:	f7ff bb0d 	b.w	80a0750 <HAL_I2C_Flush_Data>

080a1136 <_ZN7TwoWireD0Ev>:
 80a1136:	b510      	push	{r4, lr}
 80a1138:	4604      	mov	r4, r0
 80a113a:	2114      	movs	r1, #20
 80a113c:	f000 fde1 	bl	80a1d02 <_ZdlPvj>
 80a1140:	4620      	mov	r0, r4
 80a1142:	bd10      	pop	{r4, pc}

080a1144 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1144:	b510      	push	{r4, lr}
 80a1146:	4604      	mov	r4, r0
 80a1148:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a114e:	60a3      	str	r3, [r4, #8]
 80a1150:	4b04      	ldr	r3, [pc, #16]	; (80a1164 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1152:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1154:	7420      	strb	r0, [r4, #16]
 80a1156:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1158:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a115a:	f7ff fb09 	bl	80a0770 <HAL_I2C_Init>

}
 80a115e:	4620      	mov	r0, r4
 80a1160:	bd10      	pop	{r4, pc}
 80a1162:	bf00      	nop
 80a1164:	080a5280 	.word	0x080a5280

080a1168 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1168:	2100      	movs	r1, #0
 80a116a:	7c00      	ldrb	r0, [r0, #16]
 80a116c:	f7ff baf8 	b.w	80a0760 <HAL_I2C_Is_Enabled>

080a1170 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a1170:	4700      	bx	r0
	...

080a1174 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a1174:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1176:	461c      	mov	r4, r3
 80a1178:	b085      	sub	sp, #20
 80a117a:	4605      	mov	r5, r0
 80a117c:	460e      	mov	r6, r1
 80a117e:	4617      	mov	r7, r2
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a1180:	f7ff fabe 	bl	80a0700 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80a1184:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80a1186:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a1188:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a118c:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a118e:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a1192:	bfb4      	ite	lt
 80a1194:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a1196:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a119a:	4628      	mov	r0, r5
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a119c:	bfa4      	itt	ge
 80a119e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a11a2:	ab03      	addge	r3, sp, #12
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a11a4:	9300      	str	r3, [sp, #0]
 80a11a6:	4632      	mov	r2, r6
 80a11a8:	463b      	mov	r3, r7
 80a11aa:	4904      	ldr	r1, [pc, #16]	; (80a11bc <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a11ac:	bfa8      	it	ge
 80a11ae:	f88d 400d 	strbge.w	r4, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a11b2:	f7ff fa9d 	bl	80a06f0 <HAL_Interrupts_Attach>
    return true;
}
 80a11b6:	2001      	movs	r0, #1
 80a11b8:	b005      	add	sp, #20
 80a11ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a11bc:	080a1171 	.word	0x080a1171

080a11c0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a11c0:	4770      	bx	lr

080a11c2 <_ZN9IPAddressD0Ev>:
 80a11c2:	b510      	push	{r4, lr}
 80a11c4:	4604      	mov	r4, r0
 80a11c6:	2118      	movs	r1, #24
 80a11c8:	f000 fd9b 	bl	80a1d02 <_ZdlPvj>
 80a11cc:	4620      	mov	r0, r4
 80a11ce:	bd10      	pop	{r4, pc}

080a11d0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a11d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a11d2:	460f      	mov	r7, r1
 80a11d4:	f100 0608 	add.w	r6, r0, #8
 80a11d8:	1d05      	adds	r5, r0, #4
 80a11da:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a11dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a11e0:	220a      	movs	r2, #10
 80a11e2:	4638      	mov	r0, r7
 80a11e4:	f000 f911 	bl	80a140a <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a11e8:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a11ea:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a11ec:	d007      	beq.n	80a11fe <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a11ee:	2c00      	cmp	r4, #0
 80a11f0:	d0f4      	beq.n	80a11dc <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a11f2:	212e      	movs	r1, #46	; 0x2e
 80a11f4:	4638      	mov	r0, r7
 80a11f6:	f000 f8db 	bl	80a13b0 <_ZN5Print5printEc>
 80a11fa:	4404      	add	r4, r0
 80a11fc:	e7ee      	b.n	80a11dc <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a11fe:	4620      	mov	r0, r4
 80a1200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1204 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1204:	b510      	push	{r4, lr}
 80a1206:	4604      	mov	r4, r0
 80a1208:	4b04      	ldr	r3, [pc, #16]	; (80a121c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a120a:	2211      	movs	r2, #17
 80a120c:	f840 3b04 	str.w	r3, [r0], #4
 80a1210:	2100      	movs	r1, #0
 80a1212:	f001 fe5c 	bl	80a2ece <memset>
{
    clear();
}
 80a1216:	4620      	mov	r0, r4
 80a1218:	bd10      	pop	{r4, pc}
 80a121a:	bf00      	nop
 80a121c:	080a52a8 	.word	0x080a52a8

080a1220 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1220:	4603      	mov	r3, r0
 80a1222:	4a07      	ldr	r2, [pc, #28]	; (80a1240 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1224:	b510      	push	{r4, lr}
 80a1226:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a122a:	f101 0210 	add.w	r2, r1, #16
 80a122e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1232:	4291      	cmp	r1, r2
 80a1234:	f843 4b04 	str.w	r4, [r3], #4
 80a1238:	d1f9      	bne.n	80a122e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a123a:	780a      	ldrb	r2, [r1, #0]
 80a123c:	701a      	strb	r2, [r3, #0]
}
 80a123e:	bd10      	pop	{r4, pc}
 80a1240:	080a52a8 	.word	0x080a52a8

080a1244 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1244:	4a02      	ldr	r2, [pc, #8]	; (80a1250 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1246:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1248:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a124a:	2204      	movs	r2, #4
 80a124c:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a124e:	4770      	bx	lr
 80a1250:	080a52a8 	.word	0x080a52a8

080a1254 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1254:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1256:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a125a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a125e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1262:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1266:	2304      	movs	r3, #4
 80a1268:	6041      	str	r1, [r0, #4]
 80a126a:	7503      	strb	r3, [r0, #20]
 80a126c:	bd10      	pop	{r4, pc}
	...

080a1270 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1272:	4d04      	ldr	r5, [pc, #16]	; (80a1284 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1274:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1276:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a127a:	9500      	str	r5, [sp, #0]
 80a127c:	f7ff ffea 	bl	80a1254 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1280:	b003      	add	sp, #12
 80a1282:	bd30      	pop	{r4, r5, pc}
 80a1284:	080a52a8 	.word	0x080a52a8

080a1288 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1288:	4a01      	ldr	r2, [pc, #4]	; (80a1290 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a128a:	4b02      	ldr	r3, [pc, #8]	; (80a1294 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a128c:	601a      	str	r2, [r3, #0]
 80a128e:	4770      	bx	lr
 80a1290:	080a536d 	.word	0x080a536d
 80a1294:	2000014c 	.word	0x2000014c

080a1298 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1298:	2300      	movs	r3, #0
 80a129a:	461a      	mov	r2, r3
 80a129c:	6840      	ldr	r0, [r0, #4]
 80a129e:	f7ff bb75 	b.w	80a098c <network_connect>

080a12a2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a12a2:	2200      	movs	r2, #0
 80a12a4:	2102      	movs	r1, #2
 80a12a6:	6840      	ldr	r0, [r0, #4]
 80a12a8:	f7ff bb80 	b.w	80a09ac <network_disconnect>

080a12ac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a12ac:	2200      	movs	r2, #0
 80a12ae:	4611      	mov	r1, r2
 80a12b0:	6840      	ldr	r0, [r0, #4]
 80a12b2:	f7ff bb73 	b.w	80a099c <network_connecting>

080a12b6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a12b6:	2200      	movs	r2, #0
 80a12b8:	4611      	mov	r1, r2
 80a12ba:	6840      	ldr	r0, [r0, #4]
 80a12bc:	f7ff bb7e 	b.w	80a09bc <network_ready>

080a12c0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a12c0:	2300      	movs	r3, #0
 80a12c2:	461a      	mov	r2, r3
 80a12c4:	4619      	mov	r1, r3
 80a12c6:	6840      	ldr	r0, [r0, #4]
 80a12c8:	f7ff bb80 	b.w	80a09cc <network_on>

080a12cc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a12cc:	2300      	movs	r3, #0
 80a12ce:	461a      	mov	r2, r3
 80a12d0:	4619      	mov	r1, r3
 80a12d2:	6840      	ldr	r0, [r0, #4]
 80a12d4:	f7ff bb82 	b.w	80a09dc <network_off>

080a12d8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a12d8:	2200      	movs	r2, #0
 80a12da:	f081 0101 	eor.w	r1, r1, #1
 80a12de:	6840      	ldr	r0, [r0, #4]
 80a12e0:	f7ff bb84 	b.w	80a09ec <network_listen>

080a12e4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a12e4:	2200      	movs	r2, #0
 80a12e6:	6840      	ldr	r0, [r0, #4]
 80a12e8:	f7ff bb90 	b.w	80a0a0c <network_set_listen_timeout>

080a12ec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a12ec:	2200      	movs	r2, #0
 80a12ee:	4611      	mov	r1, r2
 80a12f0:	6840      	ldr	r0, [r0, #4]
 80a12f2:	f7ff bb93 	b.w	80a0a1c <network_get_listen_timeout>

080a12f6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a12f6:	2200      	movs	r2, #0
 80a12f8:	4611      	mov	r1, r2
 80a12fa:	6840      	ldr	r0, [r0, #4]
 80a12fc:	f7ff bb7e 	b.w	80a09fc <network_listening>

080a1300 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1300:	b570      	push	{r4, r5, r6, lr}
 80a1302:	4616      	mov	r6, r2
 80a1304:	b08e      	sub	sp, #56	; 0x38
 80a1306:	4604      	mov	r4, r0
    IPAddress addr;
 80a1308:	a808      	add	r0, sp, #32
 80a130a:	f7ff ff7b 	bl	80a1204 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a130e:	2211      	movs	r2, #17
 80a1310:	2100      	movs	r1, #0
 80a1312:	a803      	add	r0, sp, #12
 80a1314:	f001 fddb 	bl	80a2ece <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1318:	4630      	mov	r0, r6
 80a131a:	f001 fe36 	bl	80a2f8a <strlen>
 80a131e:	2500      	movs	r5, #0
 80a1320:	4b0a      	ldr	r3, [pc, #40]	; (80a134c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1322:	9500      	str	r5, [sp, #0]
 80a1324:	b281      	uxth	r1, r0
 80a1326:	685b      	ldr	r3, [r3, #4]
 80a1328:	aa03      	add	r2, sp, #12
 80a132a:	4630      	mov	r0, r6
 80a132c:	f7ff faaa 	bl	80a0884 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1330:	b120      	cbz	r0, 80a133c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1332:	4629      	mov	r1, r5
 80a1334:	4620      	mov	r0, r4
 80a1336:	f7ff ff85 	bl	80a1244 <_ZN9IPAddressC1Em>
 80a133a:	e003      	b.n	80a1344 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a133c:	a903      	add	r1, sp, #12
 80a133e:	4620      	mov	r0, r4
 80a1340:	f7ff ff6e 	bl	80a1220 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1344:	4620      	mov	r0, r4
 80a1346:	b00e      	add	sp, #56	; 0x38
 80a1348:	bd70      	pop	{r4, r5, r6, pc}
 80a134a:	bf00      	nop
 80a134c:	20000600 	.word	0x20000600

080a1350 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1350:	4b02      	ldr	r3, [pc, #8]	; (80a135c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1352:	4a03      	ldr	r2, [pc, #12]	; (80a1360 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1354:	601a      	str	r2, [r3, #0]
 80a1356:	2200      	movs	r2, #0
 80a1358:	605a      	str	r2, [r3, #4]
 80a135a:	4770      	bx	lr
 80a135c:	20000150 	.word	0x20000150
 80a1360:	080a53a0 	.word	0x080a53a0

080a1364 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1366:	4606      	mov	r6, r0
 80a1368:	460d      	mov	r5, r1
 80a136a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a136c:	2400      	movs	r4, #0
  while (size--) {
 80a136e:	42bd      	cmp	r5, r7
 80a1370:	d00c      	beq.n	80a138c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1372:	6833      	ldr	r3, [r6, #0]
 80a1374:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1378:	689b      	ldr	r3, [r3, #8]
 80a137a:	4630      	mov	r0, r6
 80a137c:	4798      	blx	r3
     if (chunk>=0)
 80a137e:	2800      	cmp	r0, #0
 80a1380:	db01      	blt.n	80a1386 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1382:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1384:	e7f3      	b.n	80a136e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1386:	2c00      	cmp	r4, #0
 80a1388:	bf08      	it	eq
 80a138a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a138c:	4620      	mov	r0, r4
 80a138e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1390 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1390:	b570      	push	{r4, r5, r6, lr}
 80a1392:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1394:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1396:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1398:	b149      	cbz	r1, 80a13ae <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a139a:	f001 fdf6 	bl	80a2f8a <strlen>
 80a139e:	682b      	ldr	r3, [r5, #0]
 80a13a0:	4602      	mov	r2, r0
 80a13a2:	4621      	mov	r1, r4
 80a13a4:	4628      	mov	r0, r5
    }
 80a13a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a13aa:	68db      	ldr	r3, [r3, #12]
 80a13ac:	4718      	bx	r3
    }
 80a13ae:	bd70      	pop	{r4, r5, r6, pc}

080a13b0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a13b0:	6803      	ldr	r3, [r0, #0]
 80a13b2:	689b      	ldr	r3, [r3, #8]
 80a13b4:	4718      	bx	r3

080a13b6 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a13b6:	2a01      	cmp	r2, #1
 80a13b8:	bf98      	it	ls
 80a13ba:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a13bc:	b530      	push	{r4, r5, lr}
 80a13be:	460b      	mov	r3, r1
 80a13c0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a13c2:	2100      	movs	r1, #0
 80a13c4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a13c8:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a13cc:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a13d0:	fb05 3312 	mls	r3, r5, r2, r3
 80a13d4:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a13d6:	2b09      	cmp	r3, #9
 80a13d8:	bf94      	ite	ls
 80a13da:	3330      	addls	r3, #48	; 0x30
 80a13dc:	3337      	addhi	r3, #55	; 0x37
 80a13de:	b2db      	uxtb	r3, r3
 80a13e0:	4621      	mov	r1, r4
 80a13e2:	f804 3901 	strb.w	r3, [r4], #-1
 80a13e6:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a13e8:	2d00      	cmp	r5, #0
 80a13ea:	d1ef      	bne.n	80a13cc <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a13ec:	f7ff ffd0 	bl	80a1390 <_ZN5Print5writeEPKc>
}
 80a13f0:	b00b      	add	sp, #44	; 0x2c
 80a13f2:	bd30      	pop	{r4, r5, pc}

080a13f4 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a13f4:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a13f6:	b922      	cbnz	r2, 80a1402 <_ZN5Print5printEmi+0xe>
 80a13f8:	6803      	ldr	r3, [r0, #0]
 80a13fa:	b2c9      	uxtb	r1, r1
 80a13fc:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a13fe:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1400:	4718      	bx	r3
  else return printNumber(n, base);
 80a1402:	b2d2      	uxtb	r2, r2
}
 80a1404:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1406:	f7ff bfd6 	b.w	80a13b6 <_ZN5Print11printNumberEmh>

080a140a <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a140a:	f7ff bff3 	b.w	80a13f4 <_ZN5Print5printEmi>

080a140e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a140e:	b510      	push	{r4, lr}
 80a1410:	4604      	mov	r4, r0
 80a1412:	f7ff fb69 	bl	80a0ae8 <_ZNSt14_Function_baseD1Ev>
 80a1416:	4620      	mov	r0, r4
 80a1418:	bd10      	pop	{r4, pc}
	...

080a141c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a141c:	4803      	ldr	r0, [pc, #12]	; (80a142c <_GLOBAL__sub_I_RGB+0x10>)
 80a141e:	2300      	movs	r3, #0
 80a1420:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1422:	4a03      	ldr	r2, [pc, #12]	; (80a1430 <_GLOBAL__sub_I_RGB+0x14>)
 80a1424:	4903      	ldr	r1, [pc, #12]	; (80a1434 <_GLOBAL__sub_I_RGB+0x18>)
 80a1426:	f000 bc67 	b.w	80a1cf8 <__aeabi_atexit>
 80a142a:	bf00      	nop
 80a142c:	20000158 	.word	0x20000158
 80a1430:	20000114 	.word	0x20000114
 80a1434:	080a140f 	.word	0x080a140f

080a1438 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1438:	4770      	bx	lr

080a143a <_ZN8SPIClassD0Ev>:
 80a143a:	b510      	push	{r4, lr}
 80a143c:	4604      	mov	r4, r0
 80a143e:	2110      	movs	r1, #16
 80a1440:	f000 fc5f 	bl	80a1d02 <_ZdlPvj>
 80a1444:	4620      	mov	r0, r4
 80a1446:	bd10      	pop	{r4, pc}

080a1448 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1448:	b570      	push	{r4, r5, r6, lr}
 80a144a:	4604      	mov	r4, r0
 80a144c:	460e      	mov	r6, r1
 80a144e:	4b07      	ldr	r3, [pc, #28]	; (80a146c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1450:	2500      	movs	r5, #0
 80a1452:	6003      	str	r3, [r0, #0]
 80a1454:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1458:	f7ff f8da 	bl	80a0610 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a145c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a145e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1460:	f7ff f990 	bl	80a0784 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1464:	60a5      	str	r5, [r4, #8]
}
 80a1466:	4620      	mov	r0, r4
 80a1468:	bd70      	pop	{r4, r5, r6, pc}
 80a146a:	bf00      	nop
 80a146c:	080a53d4 	.word	0x080a53d4

080a1470 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1470:	7900      	ldrb	r0, [r0, #4]
 80a1472:	f7ff b98f 	b.w	80a0794 <HAL_SPI_Is_Enabled>

080a1476 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1476:	b510      	push	{r4, lr}
 80a1478:	4604      	mov	r4, r0
{
	free(buffer);
 80a147a:	6800      	ldr	r0, [r0, #0]
 80a147c:	f7ff fade 	bl	80a0a3c <free>
}
 80a1480:	4620      	mov	r0, r4
 80a1482:	bd10      	pop	{r4, pc}

080a1484 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1484:	b510      	push	{r4, lr}
 80a1486:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1488:	6800      	ldr	r0, [r0, #0]
 80a148a:	b108      	cbz	r0, 80a1490 <_ZN6String10invalidateEv+0xc>
 80a148c:	f7ff fad6 	bl	80a0a3c <free>
	buffer = NULL;
 80a1490:	2300      	movs	r3, #0
 80a1492:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1494:	60a3      	str	r3, [r4, #8]
 80a1496:	6063      	str	r3, [r4, #4]
 80a1498:	bd10      	pop	{r4, pc}

080a149a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a149a:	b538      	push	{r3, r4, r5, lr}
 80a149c:	4604      	mov	r4, r0
 80a149e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a14a0:	6800      	ldr	r0, [r0, #0]
 80a14a2:	3101      	adds	r1, #1
 80a14a4:	f7ff fad2 	bl	80a0a4c <realloc>
	if (newbuffer) {
 80a14a8:	b110      	cbz	r0, 80a14b0 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a14aa:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a14ae:	2001      	movs	r0, #1
	}
	return 0;
}
 80a14b0:	bd38      	pop	{r3, r4, r5, pc}

080a14b2 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a14b2:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a14b4:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a14b6:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a14b8:	b113      	cbz	r3, 80a14c0 <_ZN6String7reserveEj+0xe>
 80a14ba:	6843      	ldr	r3, [r0, #4]
 80a14bc:	428b      	cmp	r3, r1
 80a14be:	d207      	bcs.n	80a14d0 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a14c0:	4620      	mov	r0, r4
 80a14c2:	f7ff ffea 	bl	80a149a <_ZN6String12changeBufferEj>
 80a14c6:	b120      	cbz	r0, 80a14d2 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a14c8:	68a3      	ldr	r3, [r4, #8]
 80a14ca:	b90b      	cbnz	r3, 80a14d0 <_ZN6String7reserveEj+0x1e>
 80a14cc:	6822      	ldr	r2, [r4, #0]
 80a14ce:	7013      	strb	r3, [r2, #0]
 80a14d0:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a14d2:	bd10      	pop	{r4, pc}

080a14d4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a14d4:	b570      	push	{r4, r5, r6, lr}
 80a14d6:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a14d8:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a14da:	4604      	mov	r4, r0
 80a14dc:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a14de:	f7ff ffe8 	bl	80a14b2 <_ZN6String7reserveEj>
 80a14e2:	b918      	cbnz	r0, 80a14ec <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a14e4:	4620      	mov	r0, r4
 80a14e6:	f7ff ffcd 	bl	80a1484 <_ZN6String10invalidateEv>
		return *this;
 80a14ea:	e009      	b.n	80a1500 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a14ec:	462a      	mov	r2, r5
 80a14ee:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a14f0:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a14f2:	6820      	ldr	r0, [r4, #0]
 80a14f4:	f001 fce0 	bl	80a2eb8 <memcpy>
	buffer[len] = 0;
 80a14f8:	6822      	ldr	r2, [r4, #0]
 80a14fa:	68a3      	ldr	r3, [r4, #8]
 80a14fc:	2100      	movs	r1, #0
 80a14fe:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1500:	4620      	mov	r0, r4
 80a1502:	bd70      	pop	{r4, r5, r6, pc}

080a1504 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1504:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1506:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1508:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a150a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a150c:	6043      	str	r3, [r0, #4]
	len = 0;
 80a150e:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1510:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1512:	460d      	mov	r5, r1
 80a1514:	b139      	cbz	r1, 80a1526 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1516:	4608      	mov	r0, r1
 80a1518:	f001 fd37 	bl	80a2f8a <strlen>
 80a151c:	4629      	mov	r1, r5
 80a151e:	4602      	mov	r2, r0
 80a1520:	4620      	mov	r0, r4
 80a1522:	f7ff ffd7 	bl	80a14d4 <_ZN6String4copyEPKcj>
}
 80a1526:	4620      	mov	r0, r4
 80a1528:	bd38      	pop	{r3, r4, r5, pc}

080a152a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a152a:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a152c:	b510      	push	{r4, lr}
 80a152e:	460b      	mov	r3, r1
 80a1530:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1532:	d007      	beq.n	80a1544 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1534:	6809      	ldr	r1, [r1, #0]
 80a1536:	b119      	cbz	r1, 80a1540 <_ZN6StringaSERKS_+0x16>
 80a1538:	689a      	ldr	r2, [r3, #8]
 80a153a:	f7ff ffcb 	bl	80a14d4 <_ZN6String4copyEPKcj>
 80a153e:	e001      	b.n	80a1544 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a1540:	f7ff ffa0 	bl	80a1484 <_ZN6String10invalidateEv>

	return *this;
}
 80a1544:	4620      	mov	r0, r4
 80a1546:	bd10      	pop	{r4, pc}

080a1548 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a1548:	b510      	push	{r4, lr}
 80a154a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a154c:	2300      	movs	r3, #0
 80a154e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1550:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1552:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1554:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a1556:	f7ff ffe8 	bl	80a152a <_ZN6StringaSERKS_>
}
 80a155a:	4620      	mov	r0, r4
 80a155c:	bd10      	pop	{r4, pc}

080a155e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a155e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a1560:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a1562:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a1564:	b912      	cbnz	r2, 80a156c <_ZNK6String6equalsEPKc+0xe>
 80a1566:	b919      	cbnz	r1, 80a1570 <_ZNK6String6equalsEPKc+0x12>
 80a1568:	2001      	movs	r0, #1
 80a156a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a156c:	b911      	cbnz	r1, 80a1574 <_ZNK6String6equalsEPKc+0x16>
 80a156e:	6803      	ldr	r3, [r0, #0]
 80a1570:	7818      	ldrb	r0, [r3, #0]
 80a1572:	e002      	b.n	80a157a <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a1574:	6800      	ldr	r0, [r0, #0]
 80a1576:	f001 fcdb 	bl	80a2f30 <strcmp>
 80a157a:	fab0 f080 	clz	r0, r0
 80a157e:	0940      	lsrs	r0, r0, #5
}
 80a1580:	bd08      	pop	{r3, pc}
	...

080a1584 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1588:	4b03      	ldr	r3, [pc, #12]	; (80a1598 <_GLOBAL__sub_I_System+0x14>)
 80a158a:	2000      	movs	r0, #0
 80a158c:	7018      	strb	r0, [r3, #0]
 80a158e:	8058      	strh	r0, [r3, #2]
 80a1590:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1592:	f7ff b987 	b.w	80a08a4 <set_system_mode>
 80a1596:	bf00      	nop
 80a1598:	20000168 	.word	0x20000168

080a159c <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a159c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80a159e:	4b14      	ldr	r3, [pc, #80]	; (80a15f0 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a15a0:	4f14      	ldr	r7, [pc, #80]	; (80a15f4 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a15a2:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80a15a4:	4b14      	ldr	r3, [pc, #80]	; (80a15f8 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a15a6:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80a15a8:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80a15aa:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80a15ac:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80a15ae:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a15b0:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a15b2:	d01b      	beq.n	80a15ec <_ZL22Refresh_UnixTime_Cachel+0x50>
 80a15b4:	a80a      	add	r0, sp, #40	; 0x28
 80a15b6:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80a15ba:	f001 fb81 	bl	80a2cc0 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a15be:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a15c0:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80a15c2:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a15c4:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a15c8:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80a15ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a15cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a15ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a15d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a15d2:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a15d6:	4c09      	ldr	r4, [pc, #36]	; (80a15fc <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a15d8:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a15dc:	ad01      	add	r5, sp, #4
 80a15de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a15e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a15e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a15e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a15e6:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a15e8:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 80a15ec:	b00b      	add	sp, #44	; 0x2c
 80a15ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a15f0:	200001a0 	.word	0x200001a0
 80a15f4:	2000019c 	.word	0x2000019c
 80a15f8:	20000198 	.word	0x20000198
 80a15fc:	20000170 	.word	0x20000170

080a1600 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a1600:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a1602:	2000      	movs	r0, #0
 80a1604:	f7ff f9b2 	bl	80a096c <spark_sync_time_pending>
 80a1608:	b128      	cbz	r0, 80a1616 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a160a:	f7ff f99f 	bl	80a094c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a160e:	f080 0001 	eor.w	r0, r0, #1
 80a1612:	b2c0      	uxtb	r0, r0
 80a1614:	bd08      	pop	{r3, pc}
 80a1616:	2001      	movs	r0, #1
    }
 80a1618:	bd08      	pop	{r3, pc}
	...

080a161c <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
 80a161c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a161e:	f7ff ffbd 	bl	80a159c <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
 80a1622:	4b01      	ldr	r3, [pc, #4]	; (80a1628 <_ZN9TimeClass4hourEl+0xc>)
 80a1624:	6898      	ldr	r0, [r3, #8]
 80a1626:	bd08      	pop	{r3, pc}
 80a1628:	20000170 	.word	0x20000170

080a162c <_ZN9TimeClass6minuteEl>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
 80a162c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a162e:	f7ff ffb5 	bl	80a159c <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_min;
}
 80a1632:	4b01      	ldr	r3, [pc, #4]	; (80a1638 <_ZN9TimeClass6minuteEl+0xc>)
 80a1634:	6858      	ldr	r0, [r3, #4]
 80a1636:	bd08      	pop	{r3, pc}
 80a1638:	20000170 	.word	0x20000170

080a163c <_ZN9TimeClass6secondEl>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
 80a163c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a163e:	f7ff ffad 	bl	80a159c <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_sec;
}
 80a1642:	4b01      	ldr	r3, [pc, #4]	; (80a1648 <_ZN9TimeClass6secondEl+0xc>)
 80a1644:	6818      	ldr	r0, [r3, #0]
 80a1646:	bd08      	pop	{r3, pc}
 80a1648:	20000170 	.word	0x20000170

080a164c <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
 80a164c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a164e:	f7ff ffa5 	bl	80a159c <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
 80a1652:	4b01      	ldr	r3, [pc, #4]	; (80a1658 <_ZN9TimeClass3dayEl+0xc>)
 80a1654:	68d8      	ldr	r0, [r3, #12]
 80a1656:	bd08      	pop	{r3, pc}
 80a1658:	20000170 	.word	0x20000170

080a165c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a165c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a165e:	2000      	movs	r0, #0
 80a1660:	f7ff f816 	bl	80a0690 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a1664:	4604      	mov	r4, r0
 80a1666:	b968      	cbnz	r0, 80a1684 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a1668:	f7ff f914 	bl	80a0894 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a166c:	2801      	cmp	r0, #1
 80a166e:	d10b      	bne.n	80a1688 <_ZN9TimeClass7isValidEv+0x2c>
 80a1670:	4620      	mov	r0, r4
 80a1672:	f7ff f937 	bl	80a08e4 <system_thread_get_state>
 80a1676:	b938      	cbnz	r0, 80a1688 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a1678:	f7ff ffc2 	bl	80a1600 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a167c:	b930      	cbnz	r0, 80a168c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a167e:	f7ff f95d 	bl	80a093c <spark_process>
 80a1682:	e7f9      	b.n	80a1678 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a1684:	2001      	movs	r0, #1
 80a1686:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a1688:	2000      	movs	r0, #0
 80a168a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a168c:	f7ff ffb8 	bl	80a1600 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a1690:	2000      	movs	r0, #0
 80a1692:	f7fe fffd 	bl	80a0690 <HAL_RTC_Time_Is_Valid>
 80a1696:	3000      	adds	r0, #0
 80a1698:	bf18      	it	ne
 80a169a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a169c:	bd10      	pop	{r4, pc}

080a169e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a169e:	b508      	push	{r3, lr}
    (void)isValid();
 80a16a0:	f7ff ffdc 	bl	80a165c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a16a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a16a8:	f7fe bfd2 	b.w	80a0650 <HAL_RTC_Get_UnixTime>

080a16ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a16ac:	4b02      	ldr	r3, [pc, #8]	; (80a16b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a16ae:	681a      	ldr	r2, [r3, #0]
 80a16b0:	4b02      	ldr	r3, [pc, #8]	; (80a16bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a16b2:	601a      	str	r2, [r3, #0]
 80a16b4:	4770      	bx	lr
 80a16b6:	bf00      	nop
 80a16b8:	20000024 	.word	0x20000024
 80a16bc:	20000194 	.word	0x20000194

080a16c0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a16c0:	4770      	bx	lr

080a16c2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a16c2:	7441      	strb	r1, [r0, #17]
 80a16c4:	4770      	bx	lr

080a16c6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a16c6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a16c8:	7c00      	ldrb	r0, [r0, #16]
 80a16ca:	f7ff f8a3 	bl	80a0814 <HAL_USART_Available_Data_For_Write>
}
 80a16ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a16d2:	bd08      	pop	{r3, pc}

080a16d4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a16d4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a16d6:	7c00      	ldrb	r0, [r0, #16]
 80a16d8:	f7ff f874 	bl	80a07c4 <HAL_USART_Available_Data>
}
 80a16dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a16e0:	bd08      	pop	{r3, pc}

080a16e2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a16e2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a16e4:	7c00      	ldrb	r0, [r0, #16]
 80a16e6:	f7ff f87d 	bl	80a07e4 <HAL_USART_Peek_Data>
}
 80a16ea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a16ee:	bf28      	it	cs
 80a16f0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a16f4:	bd08      	pop	{r3, pc}

080a16f6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a16f6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a16f8:	7c00      	ldrb	r0, [r0, #16]
 80a16fa:	f7ff f86b 	bl	80a07d4 <HAL_USART_Read_Data>
}
 80a16fe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1702:	bf28      	it	cs
 80a1704:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1708:	bd08      	pop	{r3, pc}

080a170a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a170a:	7c00      	ldrb	r0, [r0, #16]
 80a170c:	f7ff b872 	b.w	80a07f4 <HAL_USART_Flush_Data>

080a1710 <_ZN11USARTSerialD0Ev>:
 80a1710:	b510      	push	{r4, lr}
 80a1712:	4604      	mov	r4, r0
 80a1714:	2114      	movs	r1, #20
 80a1716:	f000 faf4 	bl	80a1d02 <_ZdlPvj>
 80a171a:	4620      	mov	r0, r4
 80a171c:	bd10      	pop	{r4, pc}

080a171e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a171e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1720:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1722:	4604      	mov	r4, r0
 80a1724:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1726:	b925      	cbnz	r5, 80a1732 <_ZN11USARTSerial5writeEh+0x14>
 80a1728:	7c00      	ldrb	r0, [r0, #16]
 80a172a:	f7ff f873 	bl	80a0814 <HAL_USART_Available_Data_For_Write>
 80a172e:	2800      	cmp	r0, #0
 80a1730:	dd05      	ble.n	80a173e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1732:	4631      	mov	r1, r6
 80a1734:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a173a:	f7ff b83b 	b.w	80a07b4 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a173e:	4628      	mov	r0, r5
 80a1740:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1744 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1744:	b510      	push	{r4, lr}
 80a1746:	4604      	mov	r4, r0
 80a1748:	4608      	mov	r0, r1
 80a174a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a174c:	2200      	movs	r2, #0
 80a174e:	6062      	str	r2, [r4, #4]
 80a1750:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1754:	60a2      	str	r2, [r4, #8]
 80a1756:	4a05      	ldr	r2, [pc, #20]	; (80a176c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1758:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a175a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a175c:	2201      	movs	r2, #1
 80a175e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1760:	461a      	mov	r2, r3
 80a1762:	f7ff f81f 	bl	80a07a4 <HAL_USART_Init>
}
 80a1766:	4620      	mov	r0, r4
 80a1768:	bd10      	pop	{r4, pc}
 80a176a:	bf00      	nop
 80a176c:	080a540c 	.word	0x080a540c

080a1770 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1770:	7c00      	ldrb	r0, [r0, #16]
 80a1772:	f7ff b847 	b.w	80a0804 <HAL_USART_Is_Enabled>
	...

080a1778 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1778:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a177a:	4d0c      	ldr	r5, [pc, #48]	; (80a17ac <_Z22__fetch_global_Serial1v+0x34>)
 80a177c:	6829      	ldr	r1, [r5, #0]
 80a177e:	f011 0401 	ands.w	r4, r1, #1
 80a1782:	d111      	bne.n	80a17a8 <_Z22__fetch_global_Serial1v+0x30>
 80a1784:	4628      	mov	r0, r5
 80a1786:	f7fe fc8e 	bl	80a00a6 <__cxa_guard_acquire>
 80a178a:	b168      	cbz	r0, 80a17a8 <_Z22__fetch_global_Serial1v+0x30>
 80a178c:	4a08      	ldr	r2, [pc, #32]	; (80a17b0 <_Z22__fetch_global_Serial1v+0x38>)
 80a178e:	4621      	mov	r1, r4
 80a1790:	4b08      	ldr	r3, [pc, #32]	; (80a17b4 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1792:	4809      	ldr	r0, [pc, #36]	; (80a17b8 <_Z22__fetch_global_Serial1v+0x40>)
 80a1794:	f7ff ffd6 	bl	80a1744 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1798:	4628      	mov	r0, r5
 80a179a:	f7fe fc89 	bl	80a00b0 <__cxa_guard_release>
 80a179e:	4a07      	ldr	r2, [pc, #28]	; (80a17bc <_Z22__fetch_global_Serial1v+0x44>)
 80a17a0:	4907      	ldr	r1, [pc, #28]	; (80a17c0 <_Z22__fetch_global_Serial1v+0x48>)
 80a17a2:	4805      	ldr	r0, [pc, #20]	; (80a17b8 <_Z22__fetch_global_Serial1v+0x40>)
 80a17a4:	f000 faa8 	bl	80a1cf8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a17a8:	4803      	ldr	r0, [pc, #12]	; (80a17b8 <_Z22__fetch_global_Serial1v+0x40>)
 80a17aa:	bd38      	pop	{r3, r4, r5, pc}
 80a17ac:	2000023c 	.word	0x2000023c
 80a17b0:	20000240 	.word	0x20000240
 80a17b4:	200001b8 	.word	0x200001b8
 80a17b8:	200001a4 	.word	0x200001a4
 80a17bc:	20000114 	.word	0x20000114
 80a17c0:	080a16c1 	.word	0x080a16c1

080a17c4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a17c4:	7441      	strb	r1, [r0, #17]
 80a17c6:	4770      	bx	lr

080a17c8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a17c8:	4770      	bx	lr

080a17ca <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a17ca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a17cc:	2100      	movs	r1, #0
 80a17ce:	7c00      	ldrb	r0, [r0, #16]
 80a17d0:	f7ff f840 	bl	80a0854 <HAL_USB_USART_Receive_Data>
}
 80a17d4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a17d8:	bf28      	it	cs
 80a17da:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a17de:	bd08      	pop	{r3, pc}

080a17e0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a17e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a17e2:	2101      	movs	r1, #1
 80a17e4:	7c00      	ldrb	r0, [r0, #16]
 80a17e6:	f7ff f835 	bl	80a0854 <HAL_USB_USART_Receive_Data>
}
 80a17ea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a17ee:	bf28      	it	cs
 80a17f0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a17f4:	bd08      	pop	{r3, pc}

080a17f6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a17f6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a17f8:	7c00      	ldrb	r0, [r0, #16]
 80a17fa:	f7ff f823 	bl	80a0844 <HAL_USB_USART_Available_Data_For_Write>
}
 80a17fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1802:	bd08      	pop	{r3, pc}

080a1804 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1804:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1806:	7c00      	ldrb	r0, [r0, #16]
 80a1808:	f7ff f814 	bl	80a0834 <HAL_USB_USART_Available_Data>
}
 80a180c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1810:	bd08      	pop	{r3, pc}

080a1812 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1812:	7c00      	ldrb	r0, [r0, #16]
 80a1814:	f7ff b82e 	b.w	80a0874 <HAL_USB_USART_Flush_Data>

080a1818 <_ZN9USBSerialD0Ev>:
 80a1818:	b510      	push	{r4, lr}
 80a181a:	4604      	mov	r4, r0
 80a181c:	2114      	movs	r1, #20
 80a181e:	f000 fa70 	bl	80a1d02 <_ZdlPvj>
 80a1822:	4620      	mov	r0, r4
 80a1824:	bd10      	pop	{r4, pc}

080a1826 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1826:	b538      	push	{r3, r4, r5, lr}
 80a1828:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a182a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a182c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a182e:	f7ff f809 	bl	80a0844 <HAL_USB_USART_Available_Data_For_Write>
 80a1832:	2800      	cmp	r0, #0
 80a1834:	dc01      	bgt.n	80a183a <_ZN9USBSerial5writeEh+0x14>
 80a1836:	7c60      	ldrb	r0, [r4, #17]
 80a1838:	b128      	cbz	r0, 80a1846 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a183a:	4629      	mov	r1, r5
 80a183c:	7c20      	ldrb	r0, [r4, #16]
 80a183e:	f7ff f811 	bl	80a0864 <HAL_USB_USART_Send_Data>
 80a1842:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1846:	bd38      	pop	{r3, r4, r5, pc}

080a1848 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1848:	b510      	push	{r4, lr}
 80a184a:	4604      	mov	r4, r0
 80a184c:	2300      	movs	r3, #0
 80a184e:	6063      	str	r3, [r4, #4]
 80a1850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1854:	60a3      	str	r3, [r4, #8]
 80a1856:	4b05      	ldr	r3, [pc, #20]	; (80a186c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1858:	4608      	mov	r0, r1
 80a185a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a185c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a185e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1860:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1862:	4611      	mov	r1, r2
 80a1864:	f7fe ffde 	bl	80a0824 <HAL_USB_USART_Init>
}
 80a1868:	4620      	mov	r0, r4
 80a186a:	bd10      	pop	{r4, pc}
 80a186c:	080a543c 	.word	0x080a543c

080a1870 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1870:	b510      	push	{r4, lr}
 80a1872:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1874:	2214      	movs	r2, #20
 80a1876:	2100      	movs	r1, #0
 80a1878:	f001 fb29 	bl	80a2ece <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a187c:	4b05      	ldr	r3, [pc, #20]	; (80a1894 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a187e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1880:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1882:	4b05      	ldr	r3, [pc, #20]	; (80a1898 <_Z19acquireSerialBufferv+0x28>)
 80a1884:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1886:	f240 1301 	movw	r3, #257	; 0x101
 80a188a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a188c:	2381      	movs	r3, #129	; 0x81
 80a188e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1890:	bd10      	pop	{r4, pc}
 80a1892:	bf00      	nop
 80a1894:	20000349 	.word	0x20000349
 80a1898:	200002c8 	.word	0x200002c8

080a189c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a189c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a189e:	4d0e      	ldr	r5, [pc, #56]	; (80a18d8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a18a0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a18a2:	a801      	add	r0, sp, #4
 80a18a4:	f7ff ffe4 	bl	80a1870 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a18a8:	6829      	ldr	r1, [r5, #0]
 80a18aa:	f011 0401 	ands.w	r4, r1, #1
 80a18ae:	d110      	bne.n	80a18d2 <_Z16_fetch_usbserialv+0x36>
 80a18b0:	4628      	mov	r0, r5
 80a18b2:	f7fe fbf8 	bl	80a00a6 <__cxa_guard_acquire>
 80a18b6:	b160      	cbz	r0, 80a18d2 <_Z16_fetch_usbserialv+0x36>
 80a18b8:	aa01      	add	r2, sp, #4
 80a18ba:	4621      	mov	r1, r4
 80a18bc:	4807      	ldr	r0, [pc, #28]	; (80a18dc <_Z16_fetch_usbserialv+0x40>)
 80a18be:	f7ff ffc3 	bl	80a1848 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a18c2:	4628      	mov	r0, r5
 80a18c4:	f7fe fbf4 	bl	80a00b0 <__cxa_guard_release>
 80a18c8:	4a05      	ldr	r2, [pc, #20]	; (80a18e0 <_Z16_fetch_usbserialv+0x44>)
 80a18ca:	4906      	ldr	r1, [pc, #24]	; (80a18e4 <_Z16_fetch_usbserialv+0x48>)
 80a18cc:	4803      	ldr	r0, [pc, #12]	; (80a18dc <_Z16_fetch_usbserialv+0x40>)
 80a18ce:	f000 fa13 	bl	80a1cf8 <__aeabi_atexit>
	return _usbserial;
}
 80a18d2:	4802      	ldr	r0, [pc, #8]	; (80a18dc <_Z16_fetch_usbserialv+0x40>)
 80a18d4:	b007      	add	sp, #28
 80a18d6:	bd30      	pop	{r4, r5, pc}
 80a18d8:	200002c4 	.word	0x200002c4
 80a18dc:	2000044c 	.word	0x2000044c
 80a18e0:	20000114 	.word	0x20000114
 80a18e4:	080a17c9 	.word	0x080a17c9

080a18e8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a18e8:	b510      	push	{r4, lr}
 80a18ea:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a18ec:	2214      	movs	r2, #20
 80a18ee:	2100      	movs	r1, #0
 80a18f0:	f001 faed 	bl	80a2ece <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a18f4:	4b05      	ldr	r3, [pc, #20]	; (80a190c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a18f6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a18f8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a18fa:	4b05      	ldr	r3, [pc, #20]	; (80a1910 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a18fc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a18fe:	f240 1301 	movw	r3, #257	; 0x101
 80a1902:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1904:	2381      	movs	r3, #129	; 0x81
 80a1906:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1908:	bd10      	pop	{r4, pc}
 80a190a:	bf00      	nop
 80a190c:	200004fc 	.word	0x200004fc
 80a1910:	20000464 	.word	0x20000464

080a1914 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1914:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1916:	4c0e      	ldr	r4, [pc, #56]	; (80a1950 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1918:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a191a:	a801      	add	r0, sp, #4
 80a191c:	f7ff ffe4 	bl	80a18e8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1920:	6823      	ldr	r3, [r4, #0]
 80a1922:	07db      	lsls	r3, r3, #31
 80a1924:	d410      	bmi.n	80a1948 <_Z17_fetch_usbserial1v+0x34>
 80a1926:	4620      	mov	r0, r4
 80a1928:	f7fe fbbd 	bl	80a00a6 <__cxa_guard_acquire>
 80a192c:	b160      	cbz	r0, 80a1948 <_Z17_fetch_usbserial1v+0x34>
 80a192e:	aa01      	add	r2, sp, #4
 80a1930:	2101      	movs	r1, #1
 80a1932:	4808      	ldr	r0, [pc, #32]	; (80a1954 <_Z17_fetch_usbserial1v+0x40>)
 80a1934:	f7ff ff88 	bl	80a1848 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1938:	4620      	mov	r0, r4
 80a193a:	f7fe fbb9 	bl	80a00b0 <__cxa_guard_release>
 80a193e:	4a06      	ldr	r2, [pc, #24]	; (80a1958 <_Z17_fetch_usbserial1v+0x44>)
 80a1940:	4906      	ldr	r1, [pc, #24]	; (80a195c <_Z17_fetch_usbserial1v+0x48>)
 80a1942:	4804      	ldr	r0, [pc, #16]	; (80a1954 <_Z17_fetch_usbserial1v+0x40>)
 80a1944:	f000 f9d8 	bl	80a1cf8 <__aeabi_atexit>
  return _usbserial1;
}
 80a1948:	4802      	ldr	r0, [pc, #8]	; (80a1954 <_Z17_fetch_usbserial1v+0x40>)
 80a194a:	b006      	add	sp, #24
 80a194c:	bd10      	pop	{r4, pc}
 80a194e:	bf00      	nop
 80a1950:	20000460 	.word	0x20000460
 80a1954:	200004e8 	.word	0x200004e8
 80a1958:	20000114 	.word	0x20000114
 80a195c:	080a17c9 	.word	0x080a17c9

080a1960 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1960:	2200      	movs	r2, #0
 80a1962:	4611      	mov	r1, r2
 80a1964:	6840      	ldr	r0, [r0, #4]
 80a1966:	f7ff b829 	b.w	80a09bc <network_ready>

080a196a <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a196a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a196c:	4616      	mov	r6, r2
 80a196e:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1970:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1972:	460f      	mov	r7, r1
 80a1974:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a1976:	2100      	movs	r1, #0
 80a1978:	a803      	add	r0, sp, #12
 80a197a:	f001 faa8 	bl	80a2ece <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a197e:	4630      	mov	r0, r6
 80a1980:	f001 fb03 	bl	80a2f8a <strlen>
 80a1984:	2500      	movs	r5, #0
 80a1986:	9500      	str	r5, [sp, #0]
 80a1988:	b281      	uxth	r1, r0
 80a198a:	687b      	ldr	r3, [r7, #4]
 80a198c:	aa03      	add	r2, sp, #12
 80a198e:	4630      	mov	r0, r6
 80a1990:	f7fe ff78 	bl	80a0884 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1994:	b120      	cbz	r0, 80a19a0 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1996:	4629      	mov	r1, r5
 80a1998:	4620      	mov	r0, r4
 80a199a:	f7ff fc53 	bl	80a1244 <_ZN9IPAddressC1Em>
 80a199e:	e003      	b.n	80a19a8 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a19a0:	a903      	add	r1, sp, #12
 80a19a2:	4620      	mov	r0, r4
 80a19a4:	f7ff fc3c 	bl	80a1220 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a19a8:	4620      	mov	r0, r4
 80a19aa:	b009      	add	sp, #36	; 0x24
 80a19ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a19ae <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a19ae:	2200      	movs	r2, #0
 80a19b0:	4611      	mov	r1, r2
 80a19b2:	6840      	ldr	r0, [r0, #4]
 80a19b4:	f7ff b822 	b.w	80a09fc <network_listening>

080a19b8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a19b8:	2200      	movs	r2, #0
 80a19ba:	4611      	mov	r1, r2
 80a19bc:	6840      	ldr	r0, [r0, #4]
 80a19be:	f7ff b82d 	b.w	80a0a1c <network_get_listen_timeout>

080a19c2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a19c2:	2200      	movs	r2, #0
 80a19c4:	6840      	ldr	r0, [r0, #4]
 80a19c6:	f7ff b821 	b.w	80a0a0c <network_set_listen_timeout>

080a19ca <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a19ca:	2200      	movs	r2, #0
 80a19cc:	f081 0101 	eor.w	r1, r1, #1
 80a19d0:	6840      	ldr	r0, [r0, #4]
 80a19d2:	f7ff b80b 	b.w	80a09ec <network_listen>

080a19d6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a19d6:	2300      	movs	r3, #0
 80a19d8:	461a      	mov	r2, r3
 80a19da:	4619      	mov	r1, r3
 80a19dc:	6840      	ldr	r0, [r0, #4]
 80a19de:	f7fe bffd 	b.w	80a09dc <network_off>

080a19e2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a19e2:	2300      	movs	r3, #0
 80a19e4:	461a      	mov	r2, r3
 80a19e6:	4619      	mov	r1, r3
 80a19e8:	6840      	ldr	r0, [r0, #4]
 80a19ea:	f7fe bfef 	b.w	80a09cc <network_on>

080a19ee <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a19ee:	2200      	movs	r2, #0
 80a19f0:	4611      	mov	r1, r2
 80a19f2:	6840      	ldr	r0, [r0, #4]
 80a19f4:	f7fe bfd2 	b.w	80a099c <network_connecting>

080a19f8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a19f8:	2200      	movs	r2, #0
 80a19fa:	2102      	movs	r1, #2
 80a19fc:	6840      	ldr	r0, [r0, #4]
 80a19fe:	f7fe bfd5 	b.w	80a09ac <network_disconnect>

080a1a02 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1a02:	2300      	movs	r3, #0
 80a1a04:	461a      	mov	r2, r3
 80a1a06:	6840      	ldr	r0, [r0, #4]
 80a1a08:	f7fe bfc0 	b.w	80a098c <network_connect>

080a1a0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1a0c:	4b02      	ldr	r3, [pc, #8]	; (80a1a18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1a0e:	2204      	movs	r2, #4
 80a1a10:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1a12:	4a02      	ldr	r2, [pc, #8]	; (80a1a1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1a14:	601a      	str	r2, [r3, #0]
 80a1a16:	4770      	bx	lr
 80a1a18:	20000600 	.word	0x20000600
 80a1a1c:	080a546c 	.word	0x080a546c

080a1a20 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1a20:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1a22:	4b14      	ldr	r3, [pc, #80]	; (80a1a74 <serialEventRun+0x54>)
 80a1a24:	b133      	cbz	r3, 80a1a34 <serialEventRun+0x14>
 80a1a26:	f7ff ff39 	bl	80a189c <_Z16_fetch_usbserialv>
 80a1a2a:	6803      	ldr	r3, [r0, #0]
 80a1a2c:	691b      	ldr	r3, [r3, #16]
 80a1a2e:	4798      	blx	r3
 80a1a30:	2800      	cmp	r0, #0
 80a1a32:	dc16      	bgt.n	80a1a62 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1a34:	4b10      	ldr	r3, [pc, #64]	; (80a1a78 <serialEventRun+0x58>)
 80a1a36:	b133      	cbz	r3, 80a1a46 <serialEventRun+0x26>
 80a1a38:	f7ff fe9e 	bl	80a1778 <_Z22__fetch_global_Serial1v>
 80a1a3c:	6803      	ldr	r3, [r0, #0]
 80a1a3e:	691b      	ldr	r3, [r3, #16]
 80a1a40:	4798      	blx	r3
 80a1a42:	2800      	cmp	r0, #0
 80a1a44:	dc10      	bgt.n	80a1a68 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1a46:	4b0d      	ldr	r3, [pc, #52]	; (80a1a7c <serialEventRun+0x5c>)
 80a1a48:	b10b      	cbz	r3, 80a1a4e <serialEventRun+0x2e>
 80a1a4a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1a4e:	4b0c      	ldr	r3, [pc, #48]	; (80a1a80 <serialEventRun+0x60>)
 80a1a50:	b17b      	cbz	r3, 80a1a72 <serialEventRun+0x52>
 80a1a52:	f7ff ff5f 	bl	80a1914 <_Z17_fetch_usbserial1v>
 80a1a56:	6803      	ldr	r3, [r0, #0]
 80a1a58:	691b      	ldr	r3, [r3, #16]
 80a1a5a:	4798      	blx	r3
 80a1a5c:	2800      	cmp	r0, #0
 80a1a5e:	dc06      	bgt.n	80a1a6e <serialEventRun+0x4e>
 80a1a60:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1a62:	f3af 8000 	nop.w
 80a1a66:	e7e5      	b.n	80a1a34 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1a68:	f3af 8000 	nop.w
 80a1a6c:	e7eb      	b.n	80a1a46 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1a6e:	f3af 8000 	nop.w
 80a1a72:	bd08      	pop	{r3, pc}
	...

080a1a84 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1a84:	b508      	push	{r3, lr}
	serialEventRun();
 80a1a86:	f7ff ffcb 	bl	80a1a20 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1a8a:	f7fe fdd9 	bl	80a0640 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1a8e:	4b01      	ldr	r3, [pc, #4]	; (80a1a94 <_post_loop+0x10>)
 80a1a90:	6018      	str	r0, [r3, #0]
 80a1a92:	bd08      	pop	{r3, pc}
 80a1a94:	20000610 	.word	0x20000610

080a1a98 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1a98:	4802      	ldr	r0, [pc, #8]	; (80a1aa4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1a9a:	4a03      	ldr	r2, [pc, #12]	; (80a1aa8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1a9c:	4903      	ldr	r1, [pc, #12]	; (80a1aac <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1a9e:	1a12      	subs	r2, r2, r0
 80a1aa0:	f001 ba0a 	b.w	80a2eb8 <memcpy>
 80a1aa4:	40024000 	.word	0x40024000
 80a1aa8:	40024004 	.word	0x40024004
 80a1aac:	080a5840 	.word	0x080a5840

080a1ab0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1ab0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1ab2:	2300      	movs	r3, #0
 80a1ab4:	9300      	str	r3, [sp, #0]
 80a1ab6:	461a      	mov	r2, r3
 80a1ab8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1abc:	f7fe ff24 	bl	80a0908 <system_ctrl_set_result>
}
 80a1ac0:	b003      	add	sp, #12
 80a1ac2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1ac8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1ac8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1aca:	8843      	ldrh	r3, [r0, #2]
 80a1acc:	2b0a      	cmp	r3, #10
 80a1ace:	d008      	beq.n	80a1ae2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1ad0:	2b50      	cmp	r3, #80	; 0x50
 80a1ad2:	d109      	bne.n	80a1ae8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1ad4:	4b09      	ldr	r3, [pc, #36]	; (80a1afc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1ad6:	681b      	ldr	r3, [r3, #0]
 80a1ad8:	b13b      	cbz	r3, 80a1aea <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1ada:	b003      	add	sp, #12
 80a1adc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1ae0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1ae2:	f7ff ffe5 	bl	80a1ab0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1ae6:	e006      	b.n	80a1af6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1ae8:	2300      	movs	r3, #0
 80a1aea:	9300      	str	r3, [sp, #0]
 80a1aec:	461a      	mov	r2, r3
 80a1aee:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1af2:	f7fe ff09 	bl	80a0908 <system_ctrl_set_result>
        break;
    }
}
 80a1af6:	b003      	add	sp, #12
 80a1af8:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1afc:	20000608 	.word	0x20000608

080a1b00 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1b00:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1b02:	4c10      	ldr	r4, [pc, #64]	; (80a1b44 <module_user_init_hook+0x44>)
 80a1b04:	4d10      	ldr	r5, [pc, #64]	; (80a1b48 <module_user_init_hook+0x48>)
 80a1b06:	6823      	ldr	r3, [r4, #0]
 80a1b08:	42ab      	cmp	r3, r5
 80a1b0a:	4b10      	ldr	r3, [pc, #64]	; (80a1b4c <module_user_init_hook+0x4c>)
 80a1b0c:	bf0c      	ite	eq
 80a1b0e:	2201      	moveq	r2, #1
 80a1b10:	2200      	movne	r2, #0
 80a1b12:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1b14:	d002      	beq.n	80a1b1c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1b16:	f7ff ffbf 	bl	80a1a98 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1b1a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1b1c:	f7fe fd80 	bl	80a0620 <HAL_RNG_GetRandomNumber>
 80a1b20:	4604      	mov	r4, r0
    srand(seed);
 80a1b22:	f001 f9dd 	bl	80a2ee0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1b26:	4b0a      	ldr	r3, [pc, #40]	; (80a1b50 <module_user_init_hook+0x50>)
 80a1b28:	b113      	cbz	r3, 80a1b30 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1b2a:	4620      	mov	r0, r4
 80a1b2c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1b30:	2100      	movs	r1, #0
 80a1b32:	4807      	ldr	r0, [pc, #28]	; (80a1b50 <module_user_init_hook+0x50>)
 80a1b34:	f7fe ff22 	bl	80a097c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1b3c:	2100      	movs	r1, #0
 80a1b3e:	4805      	ldr	r0, [pc, #20]	; (80a1b54 <module_user_init_hook+0x54>)
 80a1b40:	f7fe bed8 	b.w	80a08f4 <system_ctrl_set_app_request_handler>
 80a1b44:	40024000 	.word	0x40024000
 80a1b48:	9a271c1e 	.word	0x9a271c1e
 80a1b4c:	2000060c 	.word	0x2000060c
 80a1b50:	00000000 	.word	0x00000000
 80a1b54:	080a1ac9 	.word	0x080a1ac9

080a1b58 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1b58:	b510      	push	{r4, lr}
 80a1b5a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1b5c:	480f      	ldr	r0, [pc, #60]	; (80a1b9c <pinAvailable+0x44>)
 80a1b5e:	f7ff fc87 	bl	80a1470 <_ZN8SPIClass9isEnabledEv>
 80a1b62:	b128      	cbz	r0, 80a1b70 <pinAvailable+0x18>
 80a1b64:	f1a4 030d 	sub.w	r3, r4, #13
 80a1b68:	2b02      	cmp	r3, #2
 80a1b6a:	d801      	bhi.n	80a1b70 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a1b6c:	2000      	movs	r0, #0
 80a1b6e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1b70:	f000 f868 	bl	80a1c44 <_Z19__fetch_global_Wirev>
 80a1b74:	f7ff faf8 	bl	80a1168 <_ZN7TwoWire9isEnabledEv>
 80a1b78:	b108      	cbz	r0, 80a1b7e <pinAvailable+0x26>
 80a1b7a:	2c01      	cmp	r4, #1
 80a1b7c:	d9f6      	bls.n	80a1b6c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a1b7e:	f7ff fdfb 	bl	80a1778 <_Z22__fetch_global_Serial1v>
 80a1b82:	f7ff fdf5 	bl	80a1770 <_ZN11USARTSerial9isEnabledEv>
 80a1b86:	b118      	cbz	r0, 80a1b90 <pinAvailable+0x38>
 80a1b88:	f1a4 0312 	sub.w	r3, r4, #18
 80a1b8c:	2b01      	cmp	r3, #1
 80a1b8e:	d9ed      	bls.n	80a1b6c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1b90:	2c17      	cmp	r4, #23
 80a1b92:	bf8c      	ite	hi
 80a1b94:	2000      	movhi	r0, #0
 80a1b96:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1b98:	bd10      	pop	{r4, pc}
 80a1b9a:	bf00      	nop
 80a1b9c:	2000064c 	.word	0x2000064c

080a1ba0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1ba0:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1ba2:	b538      	push	{r3, r4, r5, lr}
 80a1ba4:	4604      	mov	r4, r0
 80a1ba6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1ba8:	d80a      	bhi.n	80a1bc0 <pinMode+0x20>
 80a1baa:	29ff      	cmp	r1, #255	; 0xff
 80a1bac:	d008      	beq.n	80a1bc0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1bae:	f7ff ffd3 	bl	80a1b58 <pinAvailable>
 80a1bb2:	b128      	cbz	r0, 80a1bc0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1bb4:	4629      	mov	r1, r5
 80a1bb6:	4620      	mov	r0, r4
}
 80a1bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1bbc:	f7fe bd78 	b.w	80a06b0 <HAL_Pin_Mode>
 80a1bc0:	bd38      	pop	{r3, r4, r5, pc}

080a1bc2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1bc2:	b538      	push	{r3, r4, r5, lr}
 80a1bc4:	4604      	mov	r4, r0
 80a1bc6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1bc8:	f7fe fd7a 	bl	80a06c0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1bcc:	28ff      	cmp	r0, #255	; 0xff
 80a1bce:	d010      	beq.n	80a1bf2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1bd0:	2806      	cmp	r0, #6
 80a1bd2:	d804      	bhi.n	80a1bde <digitalWrite+0x1c>
 80a1bd4:	234d      	movs	r3, #77	; 0x4d
 80a1bd6:	fa23 f000 	lsr.w	r0, r3, r0
 80a1bda:	07c3      	lsls	r3, r0, #31
 80a1bdc:	d409      	bmi.n	80a1bf2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1bde:	4620      	mov	r0, r4
 80a1be0:	f7ff ffba 	bl	80a1b58 <pinAvailable>
 80a1be4:	b128      	cbz	r0, 80a1bf2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1be6:	4629      	mov	r1, r5
 80a1be8:	4620      	mov	r0, r4
}
 80a1bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1bee:	f7fe bd6f 	b.w	80a06d0 <HAL_GPIO_Write>
 80a1bf2:	bd38      	pop	{r3, r4, r5, pc}

080a1bf4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a1bf4:	b510      	push	{r4, lr}
 80a1bf6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1bf8:	f7fe fd62 	bl	80a06c0 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a1bfc:	3804      	subs	r0, #4
 80a1bfe:	b2c0      	uxtb	r0, r0
 80a1c00:	2801      	cmp	r0, #1
 80a1c02:	d908      	bls.n	80a1c16 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a1c04:	4620      	mov	r0, r4
 80a1c06:	f7ff ffa7 	bl	80a1b58 <pinAvailable>
 80a1c0a:	b120      	cbz	r0, 80a1c16 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1c0c:	4620      	mov	r0, r4
}
 80a1c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1c12:	f7fe bd65 	b.w	80a06e0 <HAL_GPIO_Read>
}
 80a1c16:	2000      	movs	r0, #0
 80a1c18:	bd10      	pop	{r4, pc}
	...

080a1c1c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80a1c1c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80a1c1e:	4c07      	ldr	r4, [pc, #28]	; (80a1c3c <_Z21__fetch_global_EEPROMv+0x20>)
 80a1c20:	6823      	ldr	r3, [r4, #0]
 80a1c22:	07db      	lsls	r3, r3, #31
 80a1c24:	d408      	bmi.n	80a1c38 <_Z21__fetch_global_EEPROMv+0x1c>
 80a1c26:	4620      	mov	r0, r4
 80a1c28:	f7fe fa3d 	bl	80a00a6 <__cxa_guard_acquire>
 80a1c2c:	b120      	cbz	r0, 80a1c38 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80a1c2e:	f7fe fd17 	bl	80a0660 <HAL_EEPROM_Init>
 80a1c32:	4620      	mov	r0, r4
 80a1c34:	f7fe fa3c 	bl	80a00b0 <__cxa_guard_release>
	return eeprom;
}
 80a1c38:	4801      	ldr	r0, [pc, #4]	; (80a1c40 <_Z21__fetch_global_EEPROMv+0x24>)
 80a1c3a:	bd10      	pop	{r4, pc}
 80a1c3c:	20000614 	.word	0x20000614
 80a1c40:	20000618 	.word	0x20000618

080a1c44 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1c44:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a1c46:	4d0b      	ldr	r5, [pc, #44]	; (80a1c74 <_Z19__fetch_global_Wirev+0x30>)
 80a1c48:	6829      	ldr	r1, [r5, #0]
 80a1c4a:	f011 0401 	ands.w	r4, r1, #1
 80a1c4e:	d10f      	bne.n	80a1c70 <_Z19__fetch_global_Wirev+0x2c>
 80a1c50:	4628      	mov	r0, r5
 80a1c52:	f7fe fa28 	bl	80a00a6 <__cxa_guard_acquire>
 80a1c56:	b158      	cbz	r0, 80a1c70 <_Z19__fetch_global_Wirev+0x2c>
 80a1c58:	4621      	mov	r1, r4
 80a1c5a:	4807      	ldr	r0, [pc, #28]	; (80a1c78 <_Z19__fetch_global_Wirev+0x34>)
 80a1c5c:	f7ff fa72 	bl	80a1144 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1c60:	4628      	mov	r0, r5
 80a1c62:	f7fe fa25 	bl	80a00b0 <__cxa_guard_release>
 80a1c66:	4a05      	ldr	r2, [pc, #20]	; (80a1c7c <_Z19__fetch_global_Wirev+0x38>)
 80a1c68:	4905      	ldr	r1, [pc, #20]	; (80a1c80 <_Z19__fetch_global_Wirev+0x3c>)
 80a1c6a:	4803      	ldr	r0, [pc, #12]	; (80a1c78 <_Z19__fetch_global_Wirev+0x34>)
 80a1c6c:	f000 f844 	bl	80a1cf8 <__aeabi_atexit>
	return wire;
}
 80a1c70:	4801      	ldr	r0, [pc, #4]	; (80a1c78 <_Z19__fetch_global_Wirev+0x34>)
 80a1c72:	bd38      	pop	{r3, r4, r5, pc}
 80a1c74:	2000061c 	.word	0x2000061c
 80a1c78:	20000620 	.word	0x20000620
 80a1c7c:	20000114 	.word	0x20000114
 80a1c80:	080a10ed 	.word	0x080a10ed

080a1c84 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1c84:	b513      	push	{r0, r1, r4, lr}
 80a1c86:	4c08      	ldr	r4, [pc, #32]	; (80a1ca8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1c88:	2300      	movs	r3, #0
 80a1c8a:	461a      	mov	r2, r3
 80a1c8c:	4619      	mov	r1, r3
 80a1c8e:	9300      	str	r3, [sp, #0]
 80a1c90:	4620      	mov	r0, r4
 80a1c92:	f7ff faed 	bl	80a1270 <_ZN9IPAddressC1Ehhhh>
 80a1c96:	4620      	mov	r0, r4
 80a1c98:	4a04      	ldr	r2, [pc, #16]	; (80a1cac <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1c9a:	4905      	ldr	r1, [pc, #20]	; (80a1cb0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1c9c:	b002      	add	sp, #8
 80a1c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1ca2:	f000 b829 	b.w	80a1cf8 <__aeabi_atexit>
 80a1ca6:	bf00      	nop
 80a1ca8:	20000634 	.word	0x20000634
 80a1cac:	20000114 	.word	0x20000114
 80a1cb0:	080a11c1 	.word	0x080a11c1

080a1cb4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1cb4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1cb6:	4c0c      	ldr	r4, [pc, #48]	; (80a1ce8 <_GLOBAL__sub_I_SPI+0x34>)
 80a1cb8:	4e0c      	ldr	r6, [pc, #48]	; (80a1cec <_GLOBAL__sub_I_SPI+0x38>)
 80a1cba:	4d0d      	ldr	r5, [pc, #52]	; (80a1cf0 <_GLOBAL__sub_I_SPI+0x3c>)
 80a1cbc:	2100      	movs	r1, #0
 80a1cbe:	4620      	mov	r0, r4
 80a1cc0:	f7ff fbc2 	bl	80a1448 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1cc4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1cc6:	4c0b      	ldr	r4, [pc, #44]	; (80a1cf4 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1cc8:	4632      	mov	r2, r6
 80a1cca:	4629      	mov	r1, r5
 80a1ccc:	f000 f814 	bl	80a1cf8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1cd0:	2101      	movs	r1, #1
 80a1cd2:	4620      	mov	r0, r4
 80a1cd4:	f7ff fbb8 	bl	80a1448 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1cd8:	4632      	mov	r2, r6
 80a1cda:	4629      	mov	r1, r5
 80a1cdc:	4620      	mov	r0, r4
 80a1cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1ce2:	f000 b809 	b.w	80a1cf8 <__aeabi_atexit>
 80a1ce6:	bf00      	nop
 80a1ce8:	2000064c 	.word	0x2000064c
 80a1cec:	20000114 	.word	0x20000114
 80a1cf0:	080a1439 	.word	0x080a1439
 80a1cf4:	2000065c 	.word	0x2000065c

080a1cf8 <__aeabi_atexit>:
 80a1cf8:	460b      	mov	r3, r1
 80a1cfa:	4601      	mov	r1, r0
 80a1cfc:	4618      	mov	r0, r3
 80a1cfe:	f000 bfd1 	b.w	80a2ca4 <__cxa_atexit>

080a1d02 <_ZdlPvj>:
 80a1d02:	f7fe b9ce 	b.w	80a00a2 <_ZdlPv>

080a1d06 <_ZSt25__throw_bad_function_callv>:
 80a1d06:	b508      	push	{r3, lr}
 80a1d08:	f7fe feb8 	bl	80a0a7c <abort>

080a1d0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1d0c:	4b24      	ldr	r3, [pc, #144]	; (80a1da0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1d0e:	681a      	ldr	r2, [r3, #0]
 80a1d10:	07d0      	lsls	r0, r2, #31
 80a1d12:	bf5c      	itt	pl
 80a1d14:	2201      	movpl	r2, #1
 80a1d16:	601a      	strpl	r2, [r3, #0]
 80a1d18:	4b22      	ldr	r3, [pc, #136]	; (80a1da4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1d1a:	681a      	ldr	r2, [r3, #0]
 80a1d1c:	07d1      	lsls	r1, r2, #31
 80a1d1e:	bf5c      	itt	pl
 80a1d20:	2201      	movpl	r2, #1
 80a1d22:	601a      	strpl	r2, [r3, #0]
 80a1d24:	4b20      	ldr	r3, [pc, #128]	; (80a1da8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1d26:	681a      	ldr	r2, [r3, #0]
 80a1d28:	07d2      	lsls	r2, r2, #31
 80a1d2a:	bf5c      	itt	pl
 80a1d2c:	2201      	movpl	r2, #1
 80a1d2e:	601a      	strpl	r2, [r3, #0]
 80a1d30:	4b1e      	ldr	r3, [pc, #120]	; (80a1dac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1d32:	681a      	ldr	r2, [r3, #0]
 80a1d34:	07d0      	lsls	r0, r2, #31
 80a1d36:	bf5c      	itt	pl
 80a1d38:	2201      	movpl	r2, #1
 80a1d3a:	601a      	strpl	r2, [r3, #0]
 80a1d3c:	4b1c      	ldr	r3, [pc, #112]	; (80a1db0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1d3e:	681a      	ldr	r2, [r3, #0]
 80a1d40:	07d1      	lsls	r1, r2, #31
 80a1d42:	bf5c      	itt	pl
 80a1d44:	2201      	movpl	r2, #1
 80a1d46:	601a      	strpl	r2, [r3, #0]
 80a1d48:	4b1a      	ldr	r3, [pc, #104]	; (80a1db4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1d4a:	681a      	ldr	r2, [r3, #0]
 80a1d4c:	07d2      	lsls	r2, r2, #31
 80a1d4e:	bf5c      	itt	pl
 80a1d50:	2201      	movpl	r2, #1
 80a1d52:	601a      	strpl	r2, [r3, #0]
 80a1d54:	4b18      	ldr	r3, [pc, #96]	; (80a1db8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1d56:	681a      	ldr	r2, [r3, #0]
 80a1d58:	07d0      	lsls	r0, r2, #31
 80a1d5a:	bf5c      	itt	pl
 80a1d5c:	2201      	movpl	r2, #1
 80a1d5e:	601a      	strpl	r2, [r3, #0]
 80a1d60:	4b16      	ldr	r3, [pc, #88]	; (80a1dbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1d62:	681a      	ldr	r2, [r3, #0]
 80a1d64:	07d1      	lsls	r1, r2, #31
 80a1d66:	bf5c      	itt	pl
 80a1d68:	2201      	movpl	r2, #1
 80a1d6a:	601a      	strpl	r2, [r3, #0]
 80a1d6c:	4b14      	ldr	r3, [pc, #80]	; (80a1dc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1d6e:	681a      	ldr	r2, [r3, #0]
 80a1d70:	07d2      	lsls	r2, r2, #31
 80a1d72:	bf5c      	itt	pl
 80a1d74:	2201      	movpl	r2, #1
 80a1d76:	601a      	strpl	r2, [r3, #0]
 80a1d78:	4b12      	ldr	r3, [pc, #72]	; (80a1dc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1d7a:	681a      	ldr	r2, [r3, #0]
 80a1d7c:	07d0      	lsls	r0, r2, #31
 80a1d7e:	bf5c      	itt	pl
 80a1d80:	2201      	movpl	r2, #1
 80a1d82:	601a      	strpl	r2, [r3, #0]
 80a1d84:	4b10      	ldr	r3, [pc, #64]	; (80a1dc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1d86:	681a      	ldr	r2, [r3, #0]
 80a1d88:	07d1      	lsls	r1, r2, #31
 80a1d8a:	bf5c      	itt	pl
 80a1d8c:	2201      	movpl	r2, #1
 80a1d8e:	601a      	strpl	r2, [r3, #0]
 80a1d90:	4b0e      	ldr	r3, [pc, #56]	; (80a1dcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1d92:	681a      	ldr	r2, [r3, #0]
 80a1d94:	07d2      	lsls	r2, r2, #31
 80a1d96:	bf5c      	itt	pl
 80a1d98:	2201      	movpl	r2, #1
 80a1d9a:	601a      	strpl	r2, [r3, #0]
 80a1d9c:	4770      	bx	lr
 80a1d9e:	bf00      	nop
 80a1da0:	20000698 	.word	0x20000698
 80a1da4:	20000694 	.word	0x20000694
 80a1da8:	20000690 	.word	0x20000690
 80a1dac:	2000068c 	.word	0x2000068c
 80a1db0:	20000688 	.word	0x20000688
 80a1db4:	20000684 	.word	0x20000684
 80a1db8:	20000680 	.word	0x20000680
 80a1dbc:	2000067c 	.word	0x2000067c
 80a1dc0:	20000678 	.word	0x20000678
 80a1dc4:	20000674 	.word	0x20000674
 80a1dc8:	20000670 	.word	0x20000670
 80a1dcc:	2000066c 	.word	0x2000066c

080a1dd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1dd0:	4b18      	ldr	r3, [pc, #96]	; (80a1e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1dd2:	681a      	ldr	r2, [r3, #0]
 80a1dd4:	07d1      	lsls	r1, r2, #31
 80a1dd6:	bf5c      	itt	pl
 80a1dd8:	2201      	movpl	r2, #1
 80a1dda:	601a      	strpl	r2, [r3, #0]
 80a1ddc:	4b16      	ldr	r3, [pc, #88]	; (80a1e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1dde:	681a      	ldr	r2, [r3, #0]
 80a1de0:	07d2      	lsls	r2, r2, #31
 80a1de2:	bf5c      	itt	pl
 80a1de4:	2201      	movpl	r2, #1
 80a1de6:	601a      	strpl	r2, [r3, #0]
 80a1de8:	4b14      	ldr	r3, [pc, #80]	; (80a1e3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1dea:	681a      	ldr	r2, [r3, #0]
 80a1dec:	07d0      	lsls	r0, r2, #31
 80a1dee:	bf5c      	itt	pl
 80a1df0:	2201      	movpl	r2, #1
 80a1df2:	601a      	strpl	r2, [r3, #0]
 80a1df4:	4b12      	ldr	r3, [pc, #72]	; (80a1e40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1df6:	681a      	ldr	r2, [r3, #0]
 80a1df8:	07d1      	lsls	r1, r2, #31
 80a1dfa:	bf5c      	itt	pl
 80a1dfc:	2201      	movpl	r2, #1
 80a1dfe:	601a      	strpl	r2, [r3, #0]
 80a1e00:	4b10      	ldr	r3, [pc, #64]	; (80a1e44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1e02:	681a      	ldr	r2, [r3, #0]
 80a1e04:	07d2      	lsls	r2, r2, #31
 80a1e06:	bf5c      	itt	pl
 80a1e08:	2201      	movpl	r2, #1
 80a1e0a:	601a      	strpl	r2, [r3, #0]
 80a1e0c:	4b0e      	ldr	r3, [pc, #56]	; (80a1e48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1e0e:	681a      	ldr	r2, [r3, #0]
 80a1e10:	07d0      	lsls	r0, r2, #31
 80a1e12:	bf5c      	itt	pl
 80a1e14:	2201      	movpl	r2, #1
 80a1e16:	601a      	strpl	r2, [r3, #0]
 80a1e18:	4b0c      	ldr	r3, [pc, #48]	; (80a1e4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1e1a:	681a      	ldr	r2, [r3, #0]
 80a1e1c:	07d1      	lsls	r1, r2, #31
 80a1e1e:	bf5c      	itt	pl
 80a1e20:	2201      	movpl	r2, #1
 80a1e22:	601a      	strpl	r2, [r3, #0]
 80a1e24:	4b0a      	ldr	r3, [pc, #40]	; (80a1e50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1e26:	681a      	ldr	r2, [r3, #0]
 80a1e28:	07d2      	lsls	r2, r2, #31
 80a1e2a:	bf5c      	itt	pl
 80a1e2c:	2201      	movpl	r2, #1
 80a1e2e:	601a      	strpl	r2, [r3, #0]
 80a1e30:	4770      	bx	lr
 80a1e32:	bf00      	nop
 80a1e34:	200006b8 	.word	0x200006b8
 80a1e38:	200006b4 	.word	0x200006b4
 80a1e3c:	200006b0 	.word	0x200006b0
 80a1e40:	200006ac 	.word	0x200006ac
 80a1e44:	200006a8 	.word	0x200006a8
 80a1e48:	200006a4 	.word	0x200006a4
 80a1e4c:	200006a0 	.word	0x200006a0
 80a1e50:	2000069c 	.word	0x2000069c

080a1e54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1e54:	4b18      	ldr	r3, [pc, #96]	; (80a1eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1e56:	681a      	ldr	r2, [r3, #0]
 80a1e58:	07d1      	lsls	r1, r2, #31
 80a1e5a:	bf5c      	itt	pl
 80a1e5c:	2201      	movpl	r2, #1
 80a1e5e:	601a      	strpl	r2, [r3, #0]
 80a1e60:	4b16      	ldr	r3, [pc, #88]	; (80a1ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1e62:	681a      	ldr	r2, [r3, #0]
 80a1e64:	07d2      	lsls	r2, r2, #31
 80a1e66:	bf5c      	itt	pl
 80a1e68:	2201      	movpl	r2, #1
 80a1e6a:	601a      	strpl	r2, [r3, #0]
 80a1e6c:	4b14      	ldr	r3, [pc, #80]	; (80a1ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1e6e:	681a      	ldr	r2, [r3, #0]
 80a1e70:	07d0      	lsls	r0, r2, #31
 80a1e72:	bf5c      	itt	pl
 80a1e74:	2201      	movpl	r2, #1
 80a1e76:	601a      	strpl	r2, [r3, #0]
 80a1e78:	4b12      	ldr	r3, [pc, #72]	; (80a1ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1e7a:	681a      	ldr	r2, [r3, #0]
 80a1e7c:	07d1      	lsls	r1, r2, #31
 80a1e7e:	bf5c      	itt	pl
 80a1e80:	2201      	movpl	r2, #1
 80a1e82:	601a      	strpl	r2, [r3, #0]
 80a1e84:	4b10      	ldr	r3, [pc, #64]	; (80a1ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1e86:	681a      	ldr	r2, [r3, #0]
 80a1e88:	07d2      	lsls	r2, r2, #31
 80a1e8a:	bf5c      	itt	pl
 80a1e8c:	2201      	movpl	r2, #1
 80a1e8e:	601a      	strpl	r2, [r3, #0]
 80a1e90:	4b0e      	ldr	r3, [pc, #56]	; (80a1ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1e92:	681a      	ldr	r2, [r3, #0]
 80a1e94:	07d0      	lsls	r0, r2, #31
 80a1e96:	bf5c      	itt	pl
 80a1e98:	2201      	movpl	r2, #1
 80a1e9a:	601a      	strpl	r2, [r3, #0]
 80a1e9c:	4b0c      	ldr	r3, [pc, #48]	; (80a1ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1e9e:	681a      	ldr	r2, [r3, #0]
 80a1ea0:	07d1      	lsls	r1, r2, #31
 80a1ea2:	bf5c      	itt	pl
 80a1ea4:	2201      	movpl	r2, #1
 80a1ea6:	601a      	strpl	r2, [r3, #0]
 80a1ea8:	4b0a      	ldr	r3, [pc, #40]	; (80a1ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1eaa:	681a      	ldr	r2, [r3, #0]
 80a1eac:	07d2      	lsls	r2, r2, #31
 80a1eae:	bf5c      	itt	pl
 80a1eb0:	2201      	movpl	r2, #1
 80a1eb2:	601a      	strpl	r2, [r3, #0]
 80a1eb4:	4770      	bx	lr
 80a1eb6:	bf00      	nop
 80a1eb8:	200006d8 	.word	0x200006d8
 80a1ebc:	200006d4 	.word	0x200006d4
 80a1ec0:	200006d0 	.word	0x200006d0
 80a1ec4:	200006cc 	.word	0x200006cc
 80a1ec8:	200006c8 	.word	0x200006c8
 80a1ecc:	200006c4 	.word	0x200006c4
 80a1ed0:	200006c0 	.word	0x200006c0
 80a1ed4:	200006bc 	.word	0x200006bc

080a1ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1ed8:	4b24      	ldr	r3, [pc, #144]	; (80a1f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1eda:	681a      	ldr	r2, [r3, #0]
 80a1edc:	07d0      	lsls	r0, r2, #31
 80a1ede:	bf5c      	itt	pl
 80a1ee0:	2201      	movpl	r2, #1
 80a1ee2:	601a      	strpl	r2, [r3, #0]
 80a1ee4:	4b22      	ldr	r3, [pc, #136]	; (80a1f70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1ee6:	681a      	ldr	r2, [r3, #0]
 80a1ee8:	07d1      	lsls	r1, r2, #31
 80a1eea:	bf5c      	itt	pl
 80a1eec:	2201      	movpl	r2, #1
 80a1eee:	601a      	strpl	r2, [r3, #0]
 80a1ef0:	4b20      	ldr	r3, [pc, #128]	; (80a1f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1ef2:	681a      	ldr	r2, [r3, #0]
 80a1ef4:	07d2      	lsls	r2, r2, #31
 80a1ef6:	bf5c      	itt	pl
 80a1ef8:	2201      	movpl	r2, #1
 80a1efa:	601a      	strpl	r2, [r3, #0]
 80a1efc:	4b1e      	ldr	r3, [pc, #120]	; (80a1f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1efe:	681a      	ldr	r2, [r3, #0]
 80a1f00:	07d0      	lsls	r0, r2, #31
 80a1f02:	bf5c      	itt	pl
 80a1f04:	2201      	movpl	r2, #1
 80a1f06:	601a      	strpl	r2, [r3, #0]
 80a1f08:	4b1c      	ldr	r3, [pc, #112]	; (80a1f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1f0a:	681a      	ldr	r2, [r3, #0]
 80a1f0c:	07d1      	lsls	r1, r2, #31
 80a1f0e:	bf5c      	itt	pl
 80a1f10:	2201      	movpl	r2, #1
 80a1f12:	601a      	strpl	r2, [r3, #0]
 80a1f14:	4b1a      	ldr	r3, [pc, #104]	; (80a1f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1f16:	681a      	ldr	r2, [r3, #0]
 80a1f18:	07d2      	lsls	r2, r2, #31
 80a1f1a:	bf5c      	itt	pl
 80a1f1c:	2201      	movpl	r2, #1
 80a1f1e:	601a      	strpl	r2, [r3, #0]
 80a1f20:	4b18      	ldr	r3, [pc, #96]	; (80a1f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1f22:	681a      	ldr	r2, [r3, #0]
 80a1f24:	07d0      	lsls	r0, r2, #31
 80a1f26:	bf5c      	itt	pl
 80a1f28:	2201      	movpl	r2, #1
 80a1f2a:	601a      	strpl	r2, [r3, #0]
 80a1f2c:	4b16      	ldr	r3, [pc, #88]	; (80a1f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1f2e:	681a      	ldr	r2, [r3, #0]
 80a1f30:	07d1      	lsls	r1, r2, #31
 80a1f32:	bf5c      	itt	pl
 80a1f34:	2201      	movpl	r2, #1
 80a1f36:	601a      	strpl	r2, [r3, #0]
 80a1f38:	4b14      	ldr	r3, [pc, #80]	; (80a1f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1f3a:	681a      	ldr	r2, [r3, #0]
 80a1f3c:	07d2      	lsls	r2, r2, #31
 80a1f3e:	bf5c      	itt	pl
 80a1f40:	2201      	movpl	r2, #1
 80a1f42:	601a      	strpl	r2, [r3, #0]
 80a1f44:	4b12      	ldr	r3, [pc, #72]	; (80a1f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1f46:	681a      	ldr	r2, [r3, #0]
 80a1f48:	07d0      	lsls	r0, r2, #31
 80a1f4a:	bf5c      	itt	pl
 80a1f4c:	2201      	movpl	r2, #1
 80a1f4e:	601a      	strpl	r2, [r3, #0]
 80a1f50:	4b10      	ldr	r3, [pc, #64]	; (80a1f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1f52:	681a      	ldr	r2, [r3, #0]
 80a1f54:	07d1      	lsls	r1, r2, #31
 80a1f56:	bf5c      	itt	pl
 80a1f58:	2201      	movpl	r2, #1
 80a1f5a:	601a      	strpl	r2, [r3, #0]
 80a1f5c:	4b0e      	ldr	r3, [pc, #56]	; (80a1f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1f5e:	681a      	ldr	r2, [r3, #0]
 80a1f60:	07d2      	lsls	r2, r2, #31
 80a1f62:	bf5c      	itt	pl
 80a1f64:	2201      	movpl	r2, #1
 80a1f66:	601a      	strpl	r2, [r3, #0]
 80a1f68:	4770      	bx	lr
 80a1f6a:	bf00      	nop
 80a1f6c:	20000708 	.word	0x20000708
 80a1f70:	20000704 	.word	0x20000704
 80a1f74:	20000700 	.word	0x20000700
 80a1f78:	200006fc 	.word	0x200006fc
 80a1f7c:	200006f8 	.word	0x200006f8
 80a1f80:	200006f4 	.word	0x200006f4
 80a1f84:	200006f0 	.word	0x200006f0
 80a1f88:	200006ec 	.word	0x200006ec
 80a1f8c:	200006e8 	.word	0x200006e8
 80a1f90:	200006e4 	.word	0x200006e4
 80a1f94:	200006e0 	.word	0x200006e0
 80a1f98:	200006dc 	.word	0x200006dc

080a1f9c <__aeabi_drsub>:
 80a1f9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1fa0:	e002      	b.n	80a1fa8 <__adddf3>
 80a1fa2:	bf00      	nop

080a1fa4 <__aeabi_dsub>:
 80a1fa4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1fa8 <__adddf3>:
 80a1fa8:	b530      	push	{r4, r5, lr}
 80a1faa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1fae:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1fb2:	ea94 0f05 	teq	r4, r5
 80a1fb6:	bf08      	it	eq
 80a1fb8:	ea90 0f02 	teqeq	r0, r2
 80a1fbc:	bf1f      	itttt	ne
 80a1fbe:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1fc2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1fc6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1fca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1fce:	f000 80e2 	beq.w	80a2196 <__adddf3+0x1ee>
 80a1fd2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1fd6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1fda:	bfb8      	it	lt
 80a1fdc:	426d      	neglt	r5, r5
 80a1fde:	dd0c      	ble.n	80a1ffa <__adddf3+0x52>
 80a1fe0:	442c      	add	r4, r5
 80a1fe2:	ea80 0202 	eor.w	r2, r0, r2
 80a1fe6:	ea81 0303 	eor.w	r3, r1, r3
 80a1fea:	ea82 0000 	eor.w	r0, r2, r0
 80a1fee:	ea83 0101 	eor.w	r1, r3, r1
 80a1ff2:	ea80 0202 	eor.w	r2, r0, r2
 80a1ff6:	ea81 0303 	eor.w	r3, r1, r3
 80a1ffa:	2d36      	cmp	r5, #54	; 0x36
 80a1ffc:	bf88      	it	hi
 80a1ffe:	bd30      	pophi	{r4, r5, pc}
 80a2000:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2004:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2008:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a200c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2010:	d002      	beq.n	80a2018 <__adddf3+0x70>
 80a2012:	4240      	negs	r0, r0
 80a2014:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2018:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a201c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2020:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2024:	d002      	beq.n	80a202c <__adddf3+0x84>
 80a2026:	4252      	negs	r2, r2
 80a2028:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a202c:	ea94 0f05 	teq	r4, r5
 80a2030:	f000 80a7 	beq.w	80a2182 <__adddf3+0x1da>
 80a2034:	f1a4 0401 	sub.w	r4, r4, #1
 80a2038:	f1d5 0e20 	rsbs	lr, r5, #32
 80a203c:	db0d      	blt.n	80a205a <__adddf3+0xb2>
 80a203e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2042:	fa22 f205 	lsr.w	r2, r2, r5
 80a2046:	1880      	adds	r0, r0, r2
 80a2048:	f141 0100 	adc.w	r1, r1, #0
 80a204c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2050:	1880      	adds	r0, r0, r2
 80a2052:	fa43 f305 	asr.w	r3, r3, r5
 80a2056:	4159      	adcs	r1, r3
 80a2058:	e00e      	b.n	80a2078 <__adddf3+0xd0>
 80a205a:	f1a5 0520 	sub.w	r5, r5, #32
 80a205e:	f10e 0e20 	add.w	lr, lr, #32
 80a2062:	2a01      	cmp	r2, #1
 80a2064:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2068:	bf28      	it	cs
 80a206a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a206e:	fa43 f305 	asr.w	r3, r3, r5
 80a2072:	18c0      	adds	r0, r0, r3
 80a2074:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2078:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a207c:	d507      	bpl.n	80a208e <__adddf3+0xe6>
 80a207e:	f04f 0e00 	mov.w	lr, #0
 80a2082:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2086:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a208a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a208e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2092:	d31b      	bcc.n	80a20cc <__adddf3+0x124>
 80a2094:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2098:	d30c      	bcc.n	80a20b4 <__adddf3+0x10c>
 80a209a:	0849      	lsrs	r1, r1, #1
 80a209c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a20a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a20a4:	f104 0401 	add.w	r4, r4, #1
 80a20a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a20ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a20b0:	f080 809a 	bcs.w	80a21e8 <__adddf3+0x240>
 80a20b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a20b8:	bf08      	it	eq
 80a20ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a20be:	f150 0000 	adcs.w	r0, r0, #0
 80a20c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a20c6:	ea41 0105 	orr.w	r1, r1, r5
 80a20ca:	bd30      	pop	{r4, r5, pc}
 80a20cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a20d0:	4140      	adcs	r0, r0
 80a20d2:	eb41 0101 	adc.w	r1, r1, r1
 80a20d6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a20da:	f1a4 0401 	sub.w	r4, r4, #1
 80a20de:	d1e9      	bne.n	80a20b4 <__adddf3+0x10c>
 80a20e0:	f091 0f00 	teq	r1, #0
 80a20e4:	bf04      	itt	eq
 80a20e6:	4601      	moveq	r1, r0
 80a20e8:	2000      	moveq	r0, #0
 80a20ea:	fab1 f381 	clz	r3, r1
 80a20ee:	bf08      	it	eq
 80a20f0:	3320      	addeq	r3, #32
 80a20f2:	f1a3 030b 	sub.w	r3, r3, #11
 80a20f6:	f1b3 0220 	subs.w	r2, r3, #32
 80a20fa:	da0c      	bge.n	80a2116 <__adddf3+0x16e>
 80a20fc:	320c      	adds	r2, #12
 80a20fe:	dd08      	ble.n	80a2112 <__adddf3+0x16a>
 80a2100:	f102 0c14 	add.w	ip, r2, #20
 80a2104:	f1c2 020c 	rsb	r2, r2, #12
 80a2108:	fa01 f00c 	lsl.w	r0, r1, ip
 80a210c:	fa21 f102 	lsr.w	r1, r1, r2
 80a2110:	e00c      	b.n	80a212c <__adddf3+0x184>
 80a2112:	f102 0214 	add.w	r2, r2, #20
 80a2116:	bfd8      	it	le
 80a2118:	f1c2 0c20 	rsble	ip, r2, #32
 80a211c:	fa01 f102 	lsl.w	r1, r1, r2
 80a2120:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2124:	bfdc      	itt	le
 80a2126:	ea41 010c 	orrle.w	r1, r1, ip
 80a212a:	4090      	lslle	r0, r2
 80a212c:	1ae4      	subs	r4, r4, r3
 80a212e:	bfa2      	ittt	ge
 80a2130:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2134:	4329      	orrge	r1, r5
 80a2136:	bd30      	popge	{r4, r5, pc}
 80a2138:	ea6f 0404 	mvn.w	r4, r4
 80a213c:	3c1f      	subs	r4, #31
 80a213e:	da1c      	bge.n	80a217a <__adddf3+0x1d2>
 80a2140:	340c      	adds	r4, #12
 80a2142:	dc0e      	bgt.n	80a2162 <__adddf3+0x1ba>
 80a2144:	f104 0414 	add.w	r4, r4, #20
 80a2148:	f1c4 0220 	rsb	r2, r4, #32
 80a214c:	fa20 f004 	lsr.w	r0, r0, r4
 80a2150:	fa01 f302 	lsl.w	r3, r1, r2
 80a2154:	ea40 0003 	orr.w	r0, r0, r3
 80a2158:	fa21 f304 	lsr.w	r3, r1, r4
 80a215c:	ea45 0103 	orr.w	r1, r5, r3
 80a2160:	bd30      	pop	{r4, r5, pc}
 80a2162:	f1c4 040c 	rsb	r4, r4, #12
 80a2166:	f1c4 0220 	rsb	r2, r4, #32
 80a216a:	fa20 f002 	lsr.w	r0, r0, r2
 80a216e:	fa01 f304 	lsl.w	r3, r1, r4
 80a2172:	ea40 0003 	orr.w	r0, r0, r3
 80a2176:	4629      	mov	r1, r5
 80a2178:	bd30      	pop	{r4, r5, pc}
 80a217a:	fa21 f004 	lsr.w	r0, r1, r4
 80a217e:	4629      	mov	r1, r5
 80a2180:	bd30      	pop	{r4, r5, pc}
 80a2182:	f094 0f00 	teq	r4, #0
 80a2186:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a218a:	bf06      	itte	eq
 80a218c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2190:	3401      	addeq	r4, #1
 80a2192:	3d01      	subne	r5, #1
 80a2194:	e74e      	b.n	80a2034 <__adddf3+0x8c>
 80a2196:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a219a:	bf18      	it	ne
 80a219c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a21a0:	d029      	beq.n	80a21f6 <__adddf3+0x24e>
 80a21a2:	ea94 0f05 	teq	r4, r5
 80a21a6:	bf08      	it	eq
 80a21a8:	ea90 0f02 	teqeq	r0, r2
 80a21ac:	d005      	beq.n	80a21ba <__adddf3+0x212>
 80a21ae:	ea54 0c00 	orrs.w	ip, r4, r0
 80a21b2:	bf04      	itt	eq
 80a21b4:	4619      	moveq	r1, r3
 80a21b6:	4610      	moveq	r0, r2
 80a21b8:	bd30      	pop	{r4, r5, pc}
 80a21ba:	ea91 0f03 	teq	r1, r3
 80a21be:	bf1e      	ittt	ne
 80a21c0:	2100      	movne	r1, #0
 80a21c2:	2000      	movne	r0, #0
 80a21c4:	bd30      	popne	{r4, r5, pc}
 80a21c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a21ca:	d105      	bne.n	80a21d8 <__adddf3+0x230>
 80a21cc:	0040      	lsls	r0, r0, #1
 80a21ce:	4149      	adcs	r1, r1
 80a21d0:	bf28      	it	cs
 80a21d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a21d6:	bd30      	pop	{r4, r5, pc}
 80a21d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a21dc:	bf3c      	itt	cc
 80a21de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a21e2:	bd30      	popcc	{r4, r5, pc}
 80a21e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a21e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a21ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a21f0:	f04f 0000 	mov.w	r0, #0
 80a21f4:	bd30      	pop	{r4, r5, pc}
 80a21f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a21fa:	bf1a      	itte	ne
 80a21fc:	4619      	movne	r1, r3
 80a21fe:	4610      	movne	r0, r2
 80a2200:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2204:	bf1c      	itt	ne
 80a2206:	460b      	movne	r3, r1
 80a2208:	4602      	movne	r2, r0
 80a220a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a220e:	bf06      	itte	eq
 80a2210:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2214:	ea91 0f03 	teqeq	r1, r3
 80a2218:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a221c:	bd30      	pop	{r4, r5, pc}
 80a221e:	bf00      	nop

080a2220 <__aeabi_ui2d>:
 80a2220:	f090 0f00 	teq	r0, #0
 80a2224:	bf04      	itt	eq
 80a2226:	2100      	moveq	r1, #0
 80a2228:	4770      	bxeq	lr
 80a222a:	b530      	push	{r4, r5, lr}
 80a222c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2230:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2234:	f04f 0500 	mov.w	r5, #0
 80a2238:	f04f 0100 	mov.w	r1, #0
 80a223c:	e750      	b.n	80a20e0 <__adddf3+0x138>
 80a223e:	bf00      	nop

080a2240 <__aeabi_i2d>:
 80a2240:	f090 0f00 	teq	r0, #0
 80a2244:	bf04      	itt	eq
 80a2246:	2100      	moveq	r1, #0
 80a2248:	4770      	bxeq	lr
 80a224a:	b530      	push	{r4, r5, lr}
 80a224c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2250:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2254:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2258:	bf48      	it	mi
 80a225a:	4240      	negmi	r0, r0
 80a225c:	f04f 0100 	mov.w	r1, #0
 80a2260:	e73e      	b.n	80a20e0 <__adddf3+0x138>
 80a2262:	bf00      	nop

080a2264 <__aeabi_f2d>:
 80a2264:	0042      	lsls	r2, r0, #1
 80a2266:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a226a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a226e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2272:	bf1f      	itttt	ne
 80a2274:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2278:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a227c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2280:	4770      	bxne	lr
 80a2282:	f092 0f00 	teq	r2, #0
 80a2286:	bf14      	ite	ne
 80a2288:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a228c:	4770      	bxeq	lr
 80a228e:	b530      	push	{r4, r5, lr}
 80a2290:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2294:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2298:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a229c:	e720      	b.n	80a20e0 <__adddf3+0x138>
 80a229e:	bf00      	nop

080a22a0 <__aeabi_ul2d>:
 80a22a0:	ea50 0201 	orrs.w	r2, r0, r1
 80a22a4:	bf08      	it	eq
 80a22a6:	4770      	bxeq	lr
 80a22a8:	b530      	push	{r4, r5, lr}
 80a22aa:	f04f 0500 	mov.w	r5, #0
 80a22ae:	e00a      	b.n	80a22c6 <__aeabi_l2d+0x16>

080a22b0 <__aeabi_l2d>:
 80a22b0:	ea50 0201 	orrs.w	r2, r0, r1
 80a22b4:	bf08      	it	eq
 80a22b6:	4770      	bxeq	lr
 80a22b8:	b530      	push	{r4, r5, lr}
 80a22ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a22be:	d502      	bpl.n	80a22c6 <__aeabi_l2d+0x16>
 80a22c0:	4240      	negs	r0, r0
 80a22c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a22c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a22ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a22ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a22d2:	f43f aedc 	beq.w	80a208e <__adddf3+0xe6>
 80a22d6:	f04f 0203 	mov.w	r2, #3
 80a22da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a22de:	bf18      	it	ne
 80a22e0:	3203      	addne	r2, #3
 80a22e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a22e6:	bf18      	it	ne
 80a22e8:	3203      	addne	r2, #3
 80a22ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a22ee:	f1c2 0320 	rsb	r3, r2, #32
 80a22f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80a22f6:	fa20 f002 	lsr.w	r0, r0, r2
 80a22fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80a22fe:	ea40 000e 	orr.w	r0, r0, lr
 80a2302:	fa21 f102 	lsr.w	r1, r1, r2
 80a2306:	4414      	add	r4, r2
 80a2308:	e6c1      	b.n	80a208e <__adddf3+0xe6>
 80a230a:	bf00      	nop

080a230c <__aeabi_dmul>:
 80a230c:	b570      	push	{r4, r5, r6, lr}
 80a230e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2312:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2316:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a231a:	bf1d      	ittte	ne
 80a231c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2320:	ea94 0f0c 	teqne	r4, ip
 80a2324:	ea95 0f0c 	teqne	r5, ip
 80a2328:	f000 f8de 	bleq	80a24e8 <__aeabi_dmul+0x1dc>
 80a232c:	442c      	add	r4, r5
 80a232e:	ea81 0603 	eor.w	r6, r1, r3
 80a2332:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2336:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a233a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a233e:	bf18      	it	ne
 80a2340:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2348:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a234c:	d038      	beq.n	80a23c0 <__aeabi_dmul+0xb4>
 80a234e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2352:	f04f 0500 	mov.w	r5, #0
 80a2356:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a235a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a235e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2362:	f04f 0600 	mov.w	r6, #0
 80a2366:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a236a:	f09c 0f00 	teq	ip, #0
 80a236e:	bf18      	it	ne
 80a2370:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2374:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a2378:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a237c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2380:	d204      	bcs.n	80a238c <__aeabi_dmul+0x80>
 80a2382:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a2386:	416d      	adcs	r5, r5
 80a2388:	eb46 0606 	adc.w	r6, r6, r6
 80a238c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2390:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2394:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a2398:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a239c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a23a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a23a4:	bf88      	it	hi
 80a23a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a23aa:	d81e      	bhi.n	80a23ea <__aeabi_dmul+0xde>
 80a23ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a23b0:	bf08      	it	eq
 80a23b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a23b6:	f150 0000 	adcs.w	r0, r0, #0
 80a23ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a23be:	bd70      	pop	{r4, r5, r6, pc}
 80a23c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a23c4:	ea46 0101 	orr.w	r1, r6, r1
 80a23c8:	ea40 0002 	orr.w	r0, r0, r2
 80a23cc:	ea81 0103 	eor.w	r1, r1, r3
 80a23d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a23d4:	bfc2      	ittt	gt
 80a23d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a23da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a23de:	bd70      	popgt	{r4, r5, r6, pc}
 80a23e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a23e4:	f04f 0e00 	mov.w	lr, #0
 80a23e8:	3c01      	subs	r4, #1
 80a23ea:	f300 80ab 	bgt.w	80a2544 <__aeabi_dmul+0x238>
 80a23ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a23f2:	bfde      	ittt	le
 80a23f4:	2000      	movle	r0, #0
 80a23f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a23fa:	bd70      	pople	{r4, r5, r6, pc}
 80a23fc:	f1c4 0400 	rsb	r4, r4, #0
 80a2400:	3c20      	subs	r4, #32
 80a2402:	da35      	bge.n	80a2470 <__aeabi_dmul+0x164>
 80a2404:	340c      	adds	r4, #12
 80a2406:	dc1b      	bgt.n	80a2440 <__aeabi_dmul+0x134>
 80a2408:	f104 0414 	add.w	r4, r4, #20
 80a240c:	f1c4 0520 	rsb	r5, r4, #32
 80a2410:	fa00 f305 	lsl.w	r3, r0, r5
 80a2414:	fa20 f004 	lsr.w	r0, r0, r4
 80a2418:	fa01 f205 	lsl.w	r2, r1, r5
 80a241c:	ea40 0002 	orr.w	r0, r0, r2
 80a2420:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2424:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2428:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a242c:	fa21 f604 	lsr.w	r6, r1, r4
 80a2430:	eb42 0106 	adc.w	r1, r2, r6
 80a2434:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2438:	bf08      	it	eq
 80a243a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a243e:	bd70      	pop	{r4, r5, r6, pc}
 80a2440:	f1c4 040c 	rsb	r4, r4, #12
 80a2444:	f1c4 0520 	rsb	r5, r4, #32
 80a2448:	fa00 f304 	lsl.w	r3, r0, r4
 80a244c:	fa20 f005 	lsr.w	r0, r0, r5
 80a2450:	fa01 f204 	lsl.w	r2, r1, r4
 80a2454:	ea40 0002 	orr.w	r0, r0, r2
 80a2458:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a245c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2460:	f141 0100 	adc.w	r1, r1, #0
 80a2464:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2468:	bf08      	it	eq
 80a246a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a246e:	bd70      	pop	{r4, r5, r6, pc}
 80a2470:	f1c4 0520 	rsb	r5, r4, #32
 80a2474:	fa00 f205 	lsl.w	r2, r0, r5
 80a2478:	ea4e 0e02 	orr.w	lr, lr, r2
 80a247c:	fa20 f304 	lsr.w	r3, r0, r4
 80a2480:	fa01 f205 	lsl.w	r2, r1, r5
 80a2484:	ea43 0302 	orr.w	r3, r3, r2
 80a2488:	fa21 f004 	lsr.w	r0, r1, r4
 80a248c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2490:	fa21 f204 	lsr.w	r2, r1, r4
 80a2494:	ea20 0002 	bic.w	r0, r0, r2
 80a2498:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a249c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a24a0:	bf08      	it	eq
 80a24a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a24a6:	bd70      	pop	{r4, r5, r6, pc}
 80a24a8:	f094 0f00 	teq	r4, #0
 80a24ac:	d10f      	bne.n	80a24ce <__aeabi_dmul+0x1c2>
 80a24ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a24b2:	0040      	lsls	r0, r0, #1
 80a24b4:	eb41 0101 	adc.w	r1, r1, r1
 80a24b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a24bc:	bf08      	it	eq
 80a24be:	3c01      	subeq	r4, #1
 80a24c0:	d0f7      	beq.n	80a24b2 <__aeabi_dmul+0x1a6>
 80a24c2:	ea41 0106 	orr.w	r1, r1, r6
 80a24c6:	f095 0f00 	teq	r5, #0
 80a24ca:	bf18      	it	ne
 80a24cc:	4770      	bxne	lr
 80a24ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a24d2:	0052      	lsls	r2, r2, #1
 80a24d4:	eb43 0303 	adc.w	r3, r3, r3
 80a24d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a24dc:	bf08      	it	eq
 80a24de:	3d01      	subeq	r5, #1
 80a24e0:	d0f7      	beq.n	80a24d2 <__aeabi_dmul+0x1c6>
 80a24e2:	ea43 0306 	orr.w	r3, r3, r6
 80a24e6:	4770      	bx	lr
 80a24e8:	ea94 0f0c 	teq	r4, ip
 80a24ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a24f0:	bf18      	it	ne
 80a24f2:	ea95 0f0c 	teqne	r5, ip
 80a24f6:	d00c      	beq.n	80a2512 <__aeabi_dmul+0x206>
 80a24f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a24fc:	bf18      	it	ne
 80a24fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2502:	d1d1      	bne.n	80a24a8 <__aeabi_dmul+0x19c>
 80a2504:	ea81 0103 	eor.w	r1, r1, r3
 80a2508:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a250c:	f04f 0000 	mov.w	r0, #0
 80a2510:	bd70      	pop	{r4, r5, r6, pc}
 80a2512:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2516:	bf06      	itte	eq
 80a2518:	4610      	moveq	r0, r2
 80a251a:	4619      	moveq	r1, r3
 80a251c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2520:	d019      	beq.n	80a2556 <__aeabi_dmul+0x24a>
 80a2522:	ea94 0f0c 	teq	r4, ip
 80a2526:	d102      	bne.n	80a252e <__aeabi_dmul+0x222>
 80a2528:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a252c:	d113      	bne.n	80a2556 <__aeabi_dmul+0x24a>
 80a252e:	ea95 0f0c 	teq	r5, ip
 80a2532:	d105      	bne.n	80a2540 <__aeabi_dmul+0x234>
 80a2534:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2538:	bf1c      	itt	ne
 80a253a:	4610      	movne	r0, r2
 80a253c:	4619      	movne	r1, r3
 80a253e:	d10a      	bne.n	80a2556 <__aeabi_dmul+0x24a>
 80a2540:	ea81 0103 	eor.w	r1, r1, r3
 80a2544:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2548:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a254c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2550:	f04f 0000 	mov.w	r0, #0
 80a2554:	bd70      	pop	{r4, r5, r6, pc}
 80a2556:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a255a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a255e:	bd70      	pop	{r4, r5, r6, pc}

080a2560 <__aeabi_ddiv>:
 80a2560:	b570      	push	{r4, r5, r6, lr}
 80a2562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a256a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a256e:	bf1d      	ittte	ne
 80a2570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2574:	ea94 0f0c 	teqne	r4, ip
 80a2578:	ea95 0f0c 	teqne	r5, ip
 80a257c:	f000 f8a7 	bleq	80a26ce <__aeabi_ddiv+0x16e>
 80a2580:	eba4 0405 	sub.w	r4, r4, r5
 80a2584:	ea81 0e03 	eor.w	lr, r1, r3
 80a2588:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a258c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2590:	f000 8088 	beq.w	80a26a4 <__aeabi_ddiv+0x144>
 80a2594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2598:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a259c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a25a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a25a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a25a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a25ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a25b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a25b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a25b8:	429d      	cmp	r5, r3
 80a25ba:	bf08      	it	eq
 80a25bc:	4296      	cmpeq	r6, r2
 80a25be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a25c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a25c6:	d202      	bcs.n	80a25ce <__aeabi_ddiv+0x6e>
 80a25c8:	085b      	lsrs	r3, r3, #1
 80a25ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80a25ce:	1ab6      	subs	r6, r6, r2
 80a25d0:	eb65 0503 	sbc.w	r5, r5, r3
 80a25d4:	085b      	lsrs	r3, r3, #1
 80a25d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a25da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a25de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a25e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a25e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a25ea:	bf22      	ittt	cs
 80a25ec:	1ab6      	subcs	r6, r6, r2
 80a25ee:	4675      	movcs	r5, lr
 80a25f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a25f4:	085b      	lsrs	r3, r3, #1
 80a25f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a25fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80a25fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2602:	bf22      	ittt	cs
 80a2604:	1ab6      	subcs	r6, r6, r2
 80a2606:	4675      	movcs	r5, lr
 80a2608:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a260c:	085b      	lsrs	r3, r3, #1
 80a260e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2612:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2616:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a261a:	bf22      	ittt	cs
 80a261c:	1ab6      	subcs	r6, r6, r2
 80a261e:	4675      	movcs	r5, lr
 80a2620:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2624:	085b      	lsrs	r3, r3, #1
 80a2626:	ea4f 0232 	mov.w	r2, r2, rrx
 80a262a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a262e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2632:	bf22      	ittt	cs
 80a2634:	1ab6      	subcs	r6, r6, r2
 80a2636:	4675      	movcs	r5, lr
 80a2638:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a263c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2640:	d018      	beq.n	80a2674 <__aeabi_ddiv+0x114>
 80a2642:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2646:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a264a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a264e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2652:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2656:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a265a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a265e:	d1c0      	bne.n	80a25e2 <__aeabi_ddiv+0x82>
 80a2660:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2664:	d10b      	bne.n	80a267e <__aeabi_ddiv+0x11e>
 80a2666:	ea41 0100 	orr.w	r1, r1, r0
 80a266a:	f04f 0000 	mov.w	r0, #0
 80a266e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2672:	e7b6      	b.n	80a25e2 <__aeabi_ddiv+0x82>
 80a2674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2678:	bf04      	itt	eq
 80a267a:	4301      	orreq	r1, r0
 80a267c:	2000      	moveq	r0, #0
 80a267e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2682:	bf88      	it	hi
 80a2684:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2688:	f63f aeaf 	bhi.w	80a23ea <__aeabi_dmul+0xde>
 80a268c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2690:	bf04      	itt	eq
 80a2692:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2696:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a269a:	f150 0000 	adcs.w	r0, r0, #0
 80a269e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a26a2:	bd70      	pop	{r4, r5, r6, pc}
 80a26a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a26a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a26ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a26b0:	bfc2      	ittt	gt
 80a26b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a26b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a26ba:	bd70      	popgt	{r4, r5, r6, pc}
 80a26bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a26c0:	f04f 0e00 	mov.w	lr, #0
 80a26c4:	3c01      	subs	r4, #1
 80a26c6:	e690      	b.n	80a23ea <__aeabi_dmul+0xde>
 80a26c8:	ea45 0e06 	orr.w	lr, r5, r6
 80a26cc:	e68d      	b.n	80a23ea <__aeabi_dmul+0xde>
 80a26ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a26d2:	ea94 0f0c 	teq	r4, ip
 80a26d6:	bf08      	it	eq
 80a26d8:	ea95 0f0c 	teqeq	r5, ip
 80a26dc:	f43f af3b 	beq.w	80a2556 <__aeabi_dmul+0x24a>
 80a26e0:	ea94 0f0c 	teq	r4, ip
 80a26e4:	d10a      	bne.n	80a26fc <__aeabi_ddiv+0x19c>
 80a26e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a26ea:	f47f af34 	bne.w	80a2556 <__aeabi_dmul+0x24a>
 80a26ee:	ea95 0f0c 	teq	r5, ip
 80a26f2:	f47f af25 	bne.w	80a2540 <__aeabi_dmul+0x234>
 80a26f6:	4610      	mov	r0, r2
 80a26f8:	4619      	mov	r1, r3
 80a26fa:	e72c      	b.n	80a2556 <__aeabi_dmul+0x24a>
 80a26fc:	ea95 0f0c 	teq	r5, ip
 80a2700:	d106      	bne.n	80a2710 <__aeabi_ddiv+0x1b0>
 80a2702:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2706:	f43f aefd 	beq.w	80a2504 <__aeabi_dmul+0x1f8>
 80a270a:	4610      	mov	r0, r2
 80a270c:	4619      	mov	r1, r3
 80a270e:	e722      	b.n	80a2556 <__aeabi_dmul+0x24a>
 80a2710:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2714:	bf18      	it	ne
 80a2716:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a271a:	f47f aec5 	bne.w	80a24a8 <__aeabi_dmul+0x19c>
 80a271e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2722:	f47f af0d 	bne.w	80a2540 <__aeabi_dmul+0x234>
 80a2726:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a272a:	f47f aeeb 	bne.w	80a2504 <__aeabi_dmul+0x1f8>
 80a272e:	e712      	b.n	80a2556 <__aeabi_dmul+0x24a>

080a2730 <__gedf2>:
 80a2730:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a2734:	e006      	b.n	80a2744 <__cmpdf2+0x4>
 80a2736:	bf00      	nop

080a2738 <__ledf2>:
 80a2738:	f04f 0c01 	mov.w	ip, #1
 80a273c:	e002      	b.n	80a2744 <__cmpdf2+0x4>
 80a273e:	bf00      	nop

080a2740 <__cmpdf2>:
 80a2740:	f04f 0c01 	mov.w	ip, #1
 80a2744:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2748:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a274c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2750:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2754:	bf18      	it	ne
 80a2756:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a275a:	d01b      	beq.n	80a2794 <__cmpdf2+0x54>
 80a275c:	b001      	add	sp, #4
 80a275e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2762:	bf0c      	ite	eq
 80a2764:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2768:	ea91 0f03 	teqne	r1, r3
 80a276c:	bf02      	ittt	eq
 80a276e:	ea90 0f02 	teqeq	r0, r2
 80a2772:	2000      	moveq	r0, #0
 80a2774:	4770      	bxeq	lr
 80a2776:	f110 0f00 	cmn.w	r0, #0
 80a277a:	ea91 0f03 	teq	r1, r3
 80a277e:	bf58      	it	pl
 80a2780:	4299      	cmppl	r1, r3
 80a2782:	bf08      	it	eq
 80a2784:	4290      	cmpeq	r0, r2
 80a2786:	bf2c      	ite	cs
 80a2788:	17d8      	asrcs	r0, r3, #31
 80a278a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a278e:	f040 0001 	orr.w	r0, r0, #1
 80a2792:	4770      	bx	lr
 80a2794:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2798:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a279c:	d102      	bne.n	80a27a4 <__cmpdf2+0x64>
 80a279e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a27a2:	d107      	bne.n	80a27b4 <__cmpdf2+0x74>
 80a27a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a27a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a27ac:	d1d6      	bne.n	80a275c <__cmpdf2+0x1c>
 80a27ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a27b2:	d0d3      	beq.n	80a275c <__cmpdf2+0x1c>
 80a27b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a27b8:	4770      	bx	lr
 80a27ba:	bf00      	nop

080a27bc <__aeabi_cdrcmple>:
 80a27bc:	4684      	mov	ip, r0
 80a27be:	4610      	mov	r0, r2
 80a27c0:	4662      	mov	r2, ip
 80a27c2:	468c      	mov	ip, r1
 80a27c4:	4619      	mov	r1, r3
 80a27c6:	4663      	mov	r3, ip
 80a27c8:	e000      	b.n	80a27cc <__aeabi_cdcmpeq>
 80a27ca:	bf00      	nop

080a27cc <__aeabi_cdcmpeq>:
 80a27cc:	b501      	push	{r0, lr}
 80a27ce:	f7ff ffb7 	bl	80a2740 <__cmpdf2>
 80a27d2:	2800      	cmp	r0, #0
 80a27d4:	bf48      	it	mi
 80a27d6:	f110 0f00 	cmnmi.w	r0, #0
 80a27da:	bd01      	pop	{r0, pc}

080a27dc <__aeabi_dcmpeq>:
 80a27dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a27e0:	f7ff fff4 	bl	80a27cc <__aeabi_cdcmpeq>
 80a27e4:	bf0c      	ite	eq
 80a27e6:	2001      	moveq	r0, #1
 80a27e8:	2000      	movne	r0, #0
 80a27ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80a27ee:	bf00      	nop

080a27f0 <__aeabi_dcmplt>:
 80a27f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a27f4:	f7ff ffea 	bl	80a27cc <__aeabi_cdcmpeq>
 80a27f8:	bf34      	ite	cc
 80a27fa:	2001      	movcc	r0, #1
 80a27fc:	2000      	movcs	r0, #0
 80a27fe:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2802:	bf00      	nop

080a2804 <__aeabi_dcmple>:
 80a2804:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2808:	f7ff ffe0 	bl	80a27cc <__aeabi_cdcmpeq>
 80a280c:	bf94      	ite	ls
 80a280e:	2001      	movls	r0, #1
 80a2810:	2000      	movhi	r0, #0
 80a2812:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2816:	bf00      	nop

080a2818 <__aeabi_dcmpge>:
 80a2818:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a281c:	f7ff ffce 	bl	80a27bc <__aeabi_cdrcmple>
 80a2820:	bf94      	ite	ls
 80a2822:	2001      	movls	r0, #1
 80a2824:	2000      	movhi	r0, #0
 80a2826:	f85d fb08 	ldr.w	pc, [sp], #8
 80a282a:	bf00      	nop

080a282c <__aeabi_dcmpgt>:
 80a282c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2830:	f7ff ffc4 	bl	80a27bc <__aeabi_cdrcmple>
 80a2834:	bf34      	ite	cc
 80a2836:	2001      	movcc	r0, #1
 80a2838:	2000      	movcs	r0, #0
 80a283a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a283e:	bf00      	nop

080a2840 <__aeabi_dcmpun>:
 80a2840:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2844:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2848:	d102      	bne.n	80a2850 <__aeabi_dcmpun+0x10>
 80a284a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a284e:	d10a      	bne.n	80a2866 <__aeabi_dcmpun+0x26>
 80a2850:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2858:	d102      	bne.n	80a2860 <__aeabi_dcmpun+0x20>
 80a285a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a285e:	d102      	bne.n	80a2866 <__aeabi_dcmpun+0x26>
 80a2860:	f04f 0000 	mov.w	r0, #0
 80a2864:	4770      	bx	lr
 80a2866:	f04f 0001 	mov.w	r0, #1
 80a286a:	4770      	bx	lr

080a286c <__aeabi_d2iz>:
 80a286c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2874:	d215      	bcs.n	80a28a2 <__aeabi_d2iz+0x36>
 80a2876:	d511      	bpl.n	80a289c <__aeabi_d2iz+0x30>
 80a2878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a287c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2880:	d912      	bls.n	80a28a8 <__aeabi_d2iz+0x3c>
 80a2882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a288a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a288e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2892:	fa23 f002 	lsr.w	r0, r3, r2
 80a2896:	bf18      	it	ne
 80a2898:	4240      	negne	r0, r0
 80a289a:	4770      	bx	lr
 80a289c:	f04f 0000 	mov.w	r0, #0
 80a28a0:	4770      	bx	lr
 80a28a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a28a6:	d105      	bne.n	80a28b4 <__aeabi_d2iz+0x48>
 80a28a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a28ac:	bf08      	it	eq
 80a28ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a28b2:	4770      	bx	lr
 80a28b4:	f04f 0000 	mov.w	r0, #0
 80a28b8:	4770      	bx	lr
 80a28ba:	bf00      	nop

080a28bc <__aeabi_d2uiz>:
 80a28bc:	004a      	lsls	r2, r1, #1
 80a28be:	d211      	bcs.n	80a28e4 <__aeabi_d2uiz+0x28>
 80a28c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a28c4:	d211      	bcs.n	80a28ea <__aeabi_d2uiz+0x2e>
 80a28c6:	d50d      	bpl.n	80a28e4 <__aeabi_d2uiz+0x28>
 80a28c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a28cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a28d0:	d40e      	bmi.n	80a28f0 <__aeabi_d2uiz+0x34>
 80a28d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a28d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a28da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a28de:	fa23 f002 	lsr.w	r0, r3, r2
 80a28e2:	4770      	bx	lr
 80a28e4:	f04f 0000 	mov.w	r0, #0
 80a28e8:	4770      	bx	lr
 80a28ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a28ee:	d102      	bne.n	80a28f6 <__aeabi_d2uiz+0x3a>
 80a28f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a28f4:	4770      	bx	lr
 80a28f6:	f04f 0000 	mov.w	r0, #0
 80a28fa:	4770      	bx	lr

080a28fc <__aeabi_d2f>:
 80a28fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a2904:	bf24      	itt	cs
 80a2906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a290a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a290e:	d90d      	bls.n	80a292c <__aeabi_d2f+0x30>
 80a2910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a2918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a291c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a2920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a2924:	bf08      	it	eq
 80a2926:	f020 0001 	biceq.w	r0, r0, #1
 80a292a:	4770      	bx	lr
 80a292c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a2930:	d121      	bne.n	80a2976 <__aeabi_d2f+0x7a>
 80a2932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a2936:	bfbc      	itt	lt
 80a2938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a293c:	4770      	bxlt	lr
 80a293e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a2946:	f1c2 0218 	rsb	r2, r2, #24
 80a294a:	f1c2 0c20 	rsb	ip, r2, #32
 80a294e:	fa10 f30c 	lsls.w	r3, r0, ip
 80a2952:	fa20 f002 	lsr.w	r0, r0, r2
 80a2956:	bf18      	it	ne
 80a2958:	f040 0001 	orrne.w	r0, r0, #1
 80a295c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a2964:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a2968:	ea40 000c 	orr.w	r0, r0, ip
 80a296c:	fa23 f302 	lsr.w	r3, r3, r2
 80a2970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a2974:	e7cc      	b.n	80a2910 <__aeabi_d2f+0x14>
 80a2976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a297a:	d107      	bne.n	80a298c <__aeabi_d2f+0x90>
 80a297c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a2980:	bf1e      	ittt	ne
 80a2982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a2986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a298a:	4770      	bxne	lr
 80a298c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a2990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2998:	4770      	bx	lr
 80a299a:	bf00      	nop

080a299c <__aeabi_frsub>:
 80a299c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a29a0:	e002      	b.n	80a29a8 <__addsf3>
 80a29a2:	bf00      	nop

080a29a4 <__aeabi_fsub>:
 80a29a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a29a8 <__addsf3>:
 80a29a8:	0042      	lsls	r2, r0, #1
 80a29aa:	bf1f      	itttt	ne
 80a29ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a29b0:	ea92 0f03 	teqne	r2, r3
 80a29b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a29b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a29bc:	d06a      	beq.n	80a2a94 <__addsf3+0xec>
 80a29be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a29c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a29c6:	bfc1      	itttt	gt
 80a29c8:	18d2      	addgt	r2, r2, r3
 80a29ca:	4041      	eorgt	r1, r0
 80a29cc:	4048      	eorgt	r0, r1
 80a29ce:	4041      	eorgt	r1, r0
 80a29d0:	bfb8      	it	lt
 80a29d2:	425b      	neglt	r3, r3
 80a29d4:	2b19      	cmp	r3, #25
 80a29d6:	bf88      	it	hi
 80a29d8:	4770      	bxhi	lr
 80a29da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a29de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a29e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a29e6:	bf18      	it	ne
 80a29e8:	4240      	negne	r0, r0
 80a29ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a29ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a29f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a29f6:	bf18      	it	ne
 80a29f8:	4249      	negne	r1, r1
 80a29fa:	ea92 0f03 	teq	r2, r3
 80a29fe:	d03f      	beq.n	80a2a80 <__addsf3+0xd8>
 80a2a00:	f1a2 0201 	sub.w	r2, r2, #1
 80a2a04:	fa41 fc03 	asr.w	ip, r1, r3
 80a2a08:	eb10 000c 	adds.w	r0, r0, ip
 80a2a0c:	f1c3 0320 	rsb	r3, r3, #32
 80a2a10:	fa01 f103 	lsl.w	r1, r1, r3
 80a2a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2a18:	d502      	bpl.n	80a2a20 <__addsf3+0x78>
 80a2a1a:	4249      	negs	r1, r1
 80a2a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a2a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a2a24:	d313      	bcc.n	80a2a4e <__addsf3+0xa6>
 80a2a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a2a2a:	d306      	bcc.n	80a2a3a <__addsf3+0x92>
 80a2a2c:	0840      	lsrs	r0, r0, #1
 80a2a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2a32:	f102 0201 	add.w	r2, r2, #1
 80a2a36:	2afe      	cmp	r2, #254	; 0xfe
 80a2a38:	d251      	bcs.n	80a2ade <__addsf3+0x136>
 80a2a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a2a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2a42:	bf08      	it	eq
 80a2a44:	f020 0001 	biceq.w	r0, r0, #1
 80a2a48:	ea40 0003 	orr.w	r0, r0, r3
 80a2a4c:	4770      	bx	lr
 80a2a4e:	0049      	lsls	r1, r1, #1
 80a2a50:	eb40 0000 	adc.w	r0, r0, r0
 80a2a54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a2a58:	f1a2 0201 	sub.w	r2, r2, #1
 80a2a5c:	d1ed      	bne.n	80a2a3a <__addsf3+0x92>
 80a2a5e:	fab0 fc80 	clz	ip, r0
 80a2a62:	f1ac 0c08 	sub.w	ip, ip, #8
 80a2a66:	ebb2 020c 	subs.w	r2, r2, ip
 80a2a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a2a6e:	bfaa      	itet	ge
 80a2a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2a74:	4252      	neglt	r2, r2
 80a2a76:	4318      	orrge	r0, r3
 80a2a78:	bfbc      	itt	lt
 80a2a7a:	40d0      	lsrlt	r0, r2
 80a2a7c:	4318      	orrlt	r0, r3
 80a2a7e:	4770      	bx	lr
 80a2a80:	f092 0f00 	teq	r2, #0
 80a2a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a2a88:	bf06      	itte	eq
 80a2a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a2a8e:	3201      	addeq	r2, #1
 80a2a90:	3b01      	subne	r3, #1
 80a2a92:	e7b5      	b.n	80a2a00 <__addsf3+0x58>
 80a2a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2a9c:	bf18      	it	ne
 80a2a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2aa2:	d021      	beq.n	80a2ae8 <__addsf3+0x140>
 80a2aa4:	ea92 0f03 	teq	r2, r3
 80a2aa8:	d004      	beq.n	80a2ab4 <__addsf3+0x10c>
 80a2aaa:	f092 0f00 	teq	r2, #0
 80a2aae:	bf08      	it	eq
 80a2ab0:	4608      	moveq	r0, r1
 80a2ab2:	4770      	bx	lr
 80a2ab4:	ea90 0f01 	teq	r0, r1
 80a2ab8:	bf1c      	itt	ne
 80a2aba:	2000      	movne	r0, #0
 80a2abc:	4770      	bxne	lr
 80a2abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a2ac2:	d104      	bne.n	80a2ace <__addsf3+0x126>
 80a2ac4:	0040      	lsls	r0, r0, #1
 80a2ac6:	bf28      	it	cs
 80a2ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a2acc:	4770      	bx	lr
 80a2ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a2ad2:	bf3c      	itt	cc
 80a2ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a2ad8:	4770      	bxcc	lr
 80a2ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a2ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2ae6:	4770      	bx	lr
 80a2ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a2aec:	bf16      	itet	ne
 80a2aee:	4608      	movne	r0, r1
 80a2af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a2af4:	4601      	movne	r1, r0
 80a2af6:	0242      	lsls	r2, r0, #9
 80a2af8:	bf06      	itte	eq
 80a2afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a2afe:	ea90 0f01 	teqeq	r0, r1
 80a2b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a2b06:	4770      	bx	lr

080a2b08 <__aeabi_ui2f>:
 80a2b08:	f04f 0300 	mov.w	r3, #0
 80a2b0c:	e004      	b.n	80a2b18 <__aeabi_i2f+0x8>
 80a2b0e:	bf00      	nop

080a2b10 <__aeabi_i2f>:
 80a2b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a2b14:	bf48      	it	mi
 80a2b16:	4240      	negmi	r0, r0
 80a2b18:	ea5f 0c00 	movs.w	ip, r0
 80a2b1c:	bf08      	it	eq
 80a2b1e:	4770      	bxeq	lr
 80a2b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a2b24:	4601      	mov	r1, r0
 80a2b26:	f04f 0000 	mov.w	r0, #0
 80a2b2a:	e01c      	b.n	80a2b66 <__aeabi_l2f+0x2a>

080a2b2c <__aeabi_ul2f>:
 80a2b2c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2b30:	bf08      	it	eq
 80a2b32:	4770      	bxeq	lr
 80a2b34:	f04f 0300 	mov.w	r3, #0
 80a2b38:	e00a      	b.n	80a2b50 <__aeabi_l2f+0x14>
 80a2b3a:	bf00      	nop

080a2b3c <__aeabi_l2f>:
 80a2b3c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2b40:	bf08      	it	eq
 80a2b42:	4770      	bxeq	lr
 80a2b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a2b48:	d502      	bpl.n	80a2b50 <__aeabi_l2f+0x14>
 80a2b4a:	4240      	negs	r0, r0
 80a2b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2b50:	ea5f 0c01 	movs.w	ip, r1
 80a2b54:	bf02      	ittt	eq
 80a2b56:	4684      	moveq	ip, r0
 80a2b58:	4601      	moveq	r1, r0
 80a2b5a:	2000      	moveq	r0, #0
 80a2b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a2b60:	bf08      	it	eq
 80a2b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a2b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a2b6a:	fabc f28c 	clz	r2, ip
 80a2b6e:	3a08      	subs	r2, #8
 80a2b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a2b74:	db10      	blt.n	80a2b98 <__aeabi_l2f+0x5c>
 80a2b76:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2b7a:	4463      	add	r3, ip
 80a2b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2b80:	f1c2 0220 	rsb	r2, r2, #32
 80a2b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2b88:	fa20 f202 	lsr.w	r2, r0, r2
 80a2b8c:	eb43 0002 	adc.w	r0, r3, r2
 80a2b90:	bf08      	it	eq
 80a2b92:	f020 0001 	biceq.w	r0, r0, #1
 80a2b96:	4770      	bx	lr
 80a2b98:	f102 0220 	add.w	r2, r2, #32
 80a2b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2ba0:	f1c2 0220 	rsb	r2, r2, #32
 80a2ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a2ba8:	fa21 f202 	lsr.w	r2, r1, r2
 80a2bac:	eb43 0002 	adc.w	r0, r3, r2
 80a2bb0:	bf08      	it	eq
 80a2bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2bb6:	4770      	bx	lr

080a2bb8 <__gesf2>:
 80a2bb8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a2bbc:	e006      	b.n	80a2bcc <__cmpsf2+0x4>
 80a2bbe:	bf00      	nop

080a2bc0 <__lesf2>:
 80a2bc0:	f04f 0c01 	mov.w	ip, #1
 80a2bc4:	e002      	b.n	80a2bcc <__cmpsf2+0x4>
 80a2bc6:	bf00      	nop

080a2bc8 <__cmpsf2>:
 80a2bc8:	f04f 0c01 	mov.w	ip, #1
 80a2bcc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2bd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2bd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2bd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2bdc:	bf18      	it	ne
 80a2bde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2be2:	d011      	beq.n	80a2c08 <__cmpsf2+0x40>
 80a2be4:	b001      	add	sp, #4
 80a2be6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a2bea:	bf18      	it	ne
 80a2bec:	ea90 0f01 	teqne	r0, r1
 80a2bf0:	bf58      	it	pl
 80a2bf2:	ebb2 0003 	subspl.w	r0, r2, r3
 80a2bf6:	bf88      	it	hi
 80a2bf8:	17c8      	asrhi	r0, r1, #31
 80a2bfa:	bf38      	it	cc
 80a2bfc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a2c00:	bf18      	it	ne
 80a2c02:	f040 0001 	orrne.w	r0, r0, #1
 80a2c06:	4770      	bx	lr
 80a2c08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2c0c:	d102      	bne.n	80a2c14 <__cmpsf2+0x4c>
 80a2c0e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a2c12:	d105      	bne.n	80a2c20 <__cmpsf2+0x58>
 80a2c14:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2c18:	d1e4      	bne.n	80a2be4 <__cmpsf2+0x1c>
 80a2c1a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a2c1e:	d0e1      	beq.n	80a2be4 <__cmpsf2+0x1c>
 80a2c20:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2c24:	4770      	bx	lr
 80a2c26:	bf00      	nop

080a2c28 <__aeabi_cfrcmple>:
 80a2c28:	4684      	mov	ip, r0
 80a2c2a:	4608      	mov	r0, r1
 80a2c2c:	4661      	mov	r1, ip
 80a2c2e:	e7ff      	b.n	80a2c30 <__aeabi_cfcmpeq>

080a2c30 <__aeabi_cfcmpeq>:
 80a2c30:	b50f      	push	{r0, r1, r2, r3, lr}
 80a2c32:	f7ff ffc9 	bl	80a2bc8 <__cmpsf2>
 80a2c36:	2800      	cmp	r0, #0
 80a2c38:	bf48      	it	mi
 80a2c3a:	f110 0f00 	cmnmi.w	r0, #0
 80a2c3e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a2c40 <__aeabi_fcmpeq>:
 80a2c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c44:	f7ff fff4 	bl	80a2c30 <__aeabi_cfcmpeq>
 80a2c48:	bf0c      	ite	eq
 80a2c4a:	2001      	moveq	r0, #1
 80a2c4c:	2000      	movne	r0, #0
 80a2c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c52:	bf00      	nop

080a2c54 <__aeabi_fcmplt>:
 80a2c54:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c58:	f7ff ffea 	bl	80a2c30 <__aeabi_cfcmpeq>
 80a2c5c:	bf34      	ite	cc
 80a2c5e:	2001      	movcc	r0, #1
 80a2c60:	2000      	movcs	r0, #0
 80a2c62:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c66:	bf00      	nop

080a2c68 <__aeabi_fcmple>:
 80a2c68:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c6c:	f7ff ffe0 	bl	80a2c30 <__aeabi_cfcmpeq>
 80a2c70:	bf94      	ite	ls
 80a2c72:	2001      	movls	r0, #1
 80a2c74:	2000      	movhi	r0, #0
 80a2c76:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c7a:	bf00      	nop

080a2c7c <__aeabi_fcmpge>:
 80a2c7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c80:	f7ff ffd2 	bl	80a2c28 <__aeabi_cfrcmple>
 80a2c84:	bf94      	ite	ls
 80a2c86:	2001      	movls	r0, #1
 80a2c88:	2000      	movhi	r0, #0
 80a2c8a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2c8e:	bf00      	nop

080a2c90 <__aeabi_fcmpgt>:
 80a2c90:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2c94:	f7ff ffc8 	bl	80a2c28 <__aeabi_cfrcmple>
 80a2c98:	bf34      	ite	cc
 80a2c9a:	2001      	movcc	r0, #1
 80a2c9c:	2000      	movcs	r0, #0
 80a2c9e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2ca2:	bf00      	nop

080a2ca4 <__cxa_atexit>:
 80a2ca4:	b510      	push	{r4, lr}
 80a2ca6:	4c05      	ldr	r4, [pc, #20]	; (80a2cbc <__cxa_atexit+0x18>)
 80a2ca8:	4613      	mov	r3, r2
 80a2caa:	b12c      	cbz	r4, 80a2cb8 <__cxa_atexit+0x14>
 80a2cac:	460a      	mov	r2, r1
 80a2cae:	4601      	mov	r1, r0
 80a2cb0:	2002      	movs	r0, #2
 80a2cb2:	f3af 8000 	nop.w
 80a2cb6:	bd10      	pop	{r4, pc}
 80a2cb8:	4620      	mov	r0, r4
 80a2cba:	bd10      	pop	{r4, pc}
 80a2cbc:	00000000 	.word	0x00000000

080a2cc0 <localtime>:
 80a2cc0:	b538      	push	{r3, r4, r5, lr}
 80a2cc2:	4b07      	ldr	r3, [pc, #28]	; (80a2ce0 <localtime+0x20>)
 80a2cc4:	4605      	mov	r5, r0
 80a2cc6:	681c      	ldr	r4, [r3, #0]
 80a2cc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a2cca:	b91b      	cbnz	r3, 80a2cd4 <localtime+0x14>
 80a2ccc:	2024      	movs	r0, #36	; 0x24
 80a2cce:	f7fd fead 	bl	80a0a2c <malloc>
 80a2cd2:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a2cd4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a2cd6:	4628      	mov	r0, r5
 80a2cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a2cdc:	f000 b802 	b.w	80a2ce4 <localtime_r>
 80a2ce0:	2000008c 	.word	0x2000008c

080a2ce4 <localtime_r>:
 80a2ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2ce8:	460c      	mov	r4, r1
 80a2cea:	4680      	mov	r8, r0
 80a2cec:	f001 fdc0 	bl	80a4870 <__gettzinfo>
 80a2cf0:	4621      	mov	r1, r4
 80a2cf2:	4607      	mov	r7, r0
 80a2cf4:	4640      	mov	r0, r8
 80a2cf6:	f001 fdbf 	bl	80a4878 <gmtime_r>
 80a2cfa:	6946      	ldr	r6, [r0, #20]
 80a2cfc:	4604      	mov	r4, r0
 80a2cfe:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a2d02:	07b3      	lsls	r3, r6, #30
 80a2d04:	d105      	bne.n	80a2d12 <localtime_r+0x2e>
 80a2d06:	2264      	movs	r2, #100	; 0x64
 80a2d08:	fb96 f3f2 	sdiv	r3, r6, r2
 80a2d0c:	fb02 6313 	mls	r3, r2, r3, r6
 80a2d10:	b94b      	cbnz	r3, 80a2d26 <localtime_r+0x42>
 80a2d12:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a2d16:	fb96 f3f5 	sdiv	r3, r6, r5
 80a2d1a:	fb05 6513 	mls	r5, r5, r3, r6
 80a2d1e:	fab5 f385 	clz	r3, r5
 80a2d22:	095b      	lsrs	r3, r3, #5
 80a2d24:	e000      	b.n	80a2d28 <localtime_r+0x44>
 80a2d26:	2301      	movs	r3, #1
 80a2d28:	4a5f      	ldr	r2, [pc, #380]	; (80a2ea8 <localtime_r+0x1c4>)
 80a2d2a:	2530      	movs	r5, #48	; 0x30
 80a2d2c:	fb05 2503 	mla	r5, r5, r3, r2
 80a2d30:	f001 f8b4 	bl	80a3e9c <__tz_lock>
 80a2d34:	f001 f8b4 	bl	80a3ea0 <_tzset_unlocked>
 80a2d38:	4b5c      	ldr	r3, [pc, #368]	; (80a2eac <localtime_r+0x1c8>)
 80a2d3a:	681b      	ldr	r3, [r3, #0]
 80a2d3c:	b1f3      	cbz	r3, 80a2d7c <localtime_r+0x98>
 80a2d3e:	687b      	ldr	r3, [r7, #4]
 80a2d40:	429e      	cmp	r6, r3
 80a2d42:	d105      	bne.n	80a2d50 <localtime_r+0x6c>
 80a2d44:	6839      	ldr	r1, [r7, #0]
 80a2d46:	f8d8 3000 	ldr.w	r3, [r8]
 80a2d4a:	69fa      	ldr	r2, [r7, #28]
 80a2d4c:	b941      	cbnz	r1, 80a2d60 <localtime_r+0x7c>
 80a2d4e:	e00a      	b.n	80a2d66 <localtime_r+0x82>
 80a2d50:	4630      	mov	r0, r6
 80a2d52:	f000 fffb 	bl	80a3d4c <__tzcalc_limits>
 80a2d56:	2800      	cmp	r0, #0
 80a2d58:	d1f4      	bne.n	80a2d44 <localtime_r+0x60>
 80a2d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a2d5e:	e00d      	b.n	80a2d7c <localtime_r+0x98>
 80a2d60:	4293      	cmp	r3, r2
 80a2d62:	db08      	blt.n	80a2d76 <localtime_r+0x92>
 80a2d64:	e001      	b.n	80a2d6a <localtime_r+0x86>
 80a2d66:	4293      	cmp	r3, r2
 80a2d68:	da07      	bge.n	80a2d7a <localtime_r+0x96>
 80a2d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a2d6c:	4293      	cmp	r3, r2
 80a2d6e:	bfac      	ite	ge
 80a2d70:	2300      	movge	r3, #0
 80a2d72:	2301      	movlt	r3, #1
 80a2d74:	e002      	b.n	80a2d7c <localtime_r+0x98>
 80a2d76:	2300      	movs	r3, #0
 80a2d78:	e000      	b.n	80a2d7c <localtime_r+0x98>
 80a2d7a:	2301      	movs	r3, #1
 80a2d7c:	6223      	str	r3, [r4, #32]
 80a2d7e:	6a23      	ldr	r3, [r4, #32]
 80a2d80:	203c      	movs	r0, #60	; 0x3c
 80a2d82:	2b01      	cmp	r3, #1
 80a2d84:	bf0c      	ite	eq
 80a2d86:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a2d88:	6a39      	ldrne	r1, [r7, #32]
 80a2d8a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a2d8e:	fb91 f6f3 	sdiv	r6, r1, r3
 80a2d92:	fb03 1316 	mls	r3, r3, r6, r1
 80a2d96:	fb93 f2f0 	sdiv	r2, r3, r0
 80a2d9a:	fb00 3012 	mls	r0, r0, r2, r3
 80a2d9e:	6861      	ldr	r1, [r4, #4]
 80a2da0:	6823      	ldr	r3, [r4, #0]
 80a2da2:	1a89      	subs	r1, r1, r2
 80a2da4:	68a2      	ldr	r2, [r4, #8]
 80a2da6:	1a1b      	subs	r3, r3, r0
 80a2da8:	1b92      	subs	r2, r2, r6
 80a2daa:	2b3b      	cmp	r3, #59	; 0x3b
 80a2dac:	6023      	str	r3, [r4, #0]
 80a2dae:	6061      	str	r1, [r4, #4]
 80a2db0:	60a2      	str	r2, [r4, #8]
 80a2db2:	dd03      	ble.n	80a2dbc <localtime_r+0xd8>
 80a2db4:	3101      	adds	r1, #1
 80a2db6:	6061      	str	r1, [r4, #4]
 80a2db8:	3b3c      	subs	r3, #60	; 0x3c
 80a2dba:	e004      	b.n	80a2dc6 <localtime_r+0xe2>
 80a2dbc:	2b00      	cmp	r3, #0
 80a2dbe:	da03      	bge.n	80a2dc8 <localtime_r+0xe4>
 80a2dc0:	3901      	subs	r1, #1
 80a2dc2:	6061      	str	r1, [r4, #4]
 80a2dc4:	333c      	adds	r3, #60	; 0x3c
 80a2dc6:	6023      	str	r3, [r4, #0]
 80a2dc8:	6863      	ldr	r3, [r4, #4]
 80a2dca:	2b3b      	cmp	r3, #59	; 0x3b
 80a2dcc:	dd03      	ble.n	80a2dd6 <localtime_r+0xf2>
 80a2dce:	3201      	adds	r2, #1
 80a2dd0:	60a2      	str	r2, [r4, #8]
 80a2dd2:	3b3c      	subs	r3, #60	; 0x3c
 80a2dd4:	e004      	b.n	80a2de0 <localtime_r+0xfc>
 80a2dd6:	2b00      	cmp	r3, #0
 80a2dd8:	da03      	bge.n	80a2de2 <localtime_r+0xfe>
 80a2dda:	3a01      	subs	r2, #1
 80a2ddc:	60a2      	str	r2, [r4, #8]
 80a2dde:	333c      	adds	r3, #60	; 0x3c
 80a2de0:	6063      	str	r3, [r4, #4]
 80a2de2:	68a3      	ldr	r3, [r4, #8]
 80a2de4:	2b17      	cmp	r3, #23
 80a2de6:	dd22      	ble.n	80a2e2e <localtime_r+0x14a>
 80a2de8:	69e2      	ldr	r2, [r4, #28]
 80a2dea:	3b18      	subs	r3, #24
 80a2dec:	3201      	adds	r2, #1
 80a2dee:	61e2      	str	r2, [r4, #28]
 80a2df0:	69a2      	ldr	r2, [r4, #24]
 80a2df2:	60a3      	str	r3, [r4, #8]
 80a2df4:	3201      	adds	r2, #1
 80a2df6:	2a06      	cmp	r2, #6
 80a2df8:	bfc8      	it	gt
 80a2dfa:	2200      	movgt	r2, #0
 80a2dfc:	61a2      	str	r2, [r4, #24]
 80a2dfe:	68e2      	ldr	r2, [r4, #12]
 80a2e00:	6923      	ldr	r3, [r4, #16]
 80a2e02:	3201      	adds	r2, #1
 80a2e04:	60e2      	str	r2, [r4, #12]
 80a2e06:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a2e0a:	428a      	cmp	r2, r1
 80a2e0c:	dd46      	ble.n	80a2e9c <localtime_r+0x1b8>
 80a2e0e:	3301      	adds	r3, #1
 80a2e10:	2b0c      	cmp	r3, #12
 80a2e12:	bf08      	it	eq
 80a2e14:	6963      	ldreq	r3, [r4, #20]
 80a2e16:	eba2 0201 	sub.w	r2, r2, r1
 80a2e1a:	60e2      	str	r2, [r4, #12]
 80a2e1c:	bf05      	ittet	eq
 80a2e1e:	3301      	addeq	r3, #1
 80a2e20:	2200      	moveq	r2, #0
 80a2e22:	6123      	strne	r3, [r4, #16]
 80a2e24:	6122      	streq	r2, [r4, #16]
 80a2e26:	bf04      	itt	eq
 80a2e28:	6163      	streq	r3, [r4, #20]
 80a2e2a:	61e2      	streq	r2, [r4, #28]
 80a2e2c:	e036      	b.n	80a2e9c <localtime_r+0x1b8>
 80a2e2e:	2b00      	cmp	r3, #0
 80a2e30:	da34      	bge.n	80a2e9c <localtime_r+0x1b8>
 80a2e32:	69e2      	ldr	r2, [r4, #28]
 80a2e34:	3318      	adds	r3, #24
 80a2e36:	3a01      	subs	r2, #1
 80a2e38:	61e2      	str	r2, [r4, #28]
 80a2e3a:	69a2      	ldr	r2, [r4, #24]
 80a2e3c:	60a3      	str	r3, [r4, #8]
 80a2e3e:	3a01      	subs	r2, #1
 80a2e40:	bf48      	it	mi
 80a2e42:	2206      	movmi	r2, #6
 80a2e44:	61a2      	str	r2, [r4, #24]
 80a2e46:	68e2      	ldr	r2, [r4, #12]
 80a2e48:	3a01      	subs	r2, #1
 80a2e4a:	60e2      	str	r2, [r4, #12]
 80a2e4c:	bb32      	cbnz	r2, 80a2e9c <localtime_r+0x1b8>
 80a2e4e:	6923      	ldr	r3, [r4, #16]
 80a2e50:	3b01      	subs	r3, #1
 80a2e52:	d401      	bmi.n	80a2e58 <localtime_r+0x174>
 80a2e54:	6123      	str	r3, [r4, #16]
 80a2e56:	e01d      	b.n	80a2e94 <localtime_r+0x1b0>
 80a2e58:	230b      	movs	r3, #11
 80a2e5a:	6123      	str	r3, [r4, #16]
 80a2e5c:	6963      	ldr	r3, [r4, #20]
 80a2e5e:	1e5a      	subs	r2, r3, #1
 80a2e60:	f012 0f03 	tst.w	r2, #3
 80a2e64:	6162      	str	r2, [r4, #20]
 80a2e66:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a2e6a:	d105      	bne.n	80a2e78 <localtime_r+0x194>
 80a2e6c:	2164      	movs	r1, #100	; 0x64
 80a2e6e:	fb93 f2f1 	sdiv	r2, r3, r1
 80a2e72:	fb01 3212 	mls	r2, r1, r2, r3
 80a2e76:	b94a      	cbnz	r2, 80a2e8c <localtime_r+0x1a8>
 80a2e78:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a2e7c:	fb93 f2f1 	sdiv	r2, r3, r1
 80a2e80:	fb01 3312 	mls	r3, r1, r2, r3
 80a2e84:	fab3 f383 	clz	r3, r3
 80a2e88:	095b      	lsrs	r3, r3, #5
 80a2e8a:	e000      	b.n	80a2e8e <localtime_r+0x1aa>
 80a2e8c:	2301      	movs	r3, #1
 80a2e8e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a2e92:	61e3      	str	r3, [r4, #28]
 80a2e94:	6923      	ldr	r3, [r4, #16]
 80a2e96:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a2e9a:	60e3      	str	r3, [r4, #12]
 80a2e9c:	f000 ffff 	bl	80a3e9e <__tz_unlock>
 80a2ea0:	4620      	mov	r0, r4
 80a2ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2ea6:	bf00      	nop
 80a2ea8:	080a5608 	.word	0x080a5608
 80a2eac:	20000728 	.word	0x20000728

080a2eb0 <_localeconv_r>:
 80a2eb0:	4800      	ldr	r0, [pc, #0]	; (80a2eb4 <_localeconv_r+0x4>)
 80a2eb2:	4770      	bx	lr
 80a2eb4:	20000090 	.word	0x20000090

080a2eb8 <memcpy>:
 80a2eb8:	b510      	push	{r4, lr}
 80a2eba:	1e43      	subs	r3, r0, #1
 80a2ebc:	440a      	add	r2, r1
 80a2ebe:	4291      	cmp	r1, r2
 80a2ec0:	d004      	beq.n	80a2ecc <memcpy+0x14>
 80a2ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2ec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2eca:	e7f8      	b.n	80a2ebe <memcpy+0x6>
 80a2ecc:	bd10      	pop	{r4, pc}

080a2ece <memset>:
 80a2ece:	4603      	mov	r3, r0
 80a2ed0:	4402      	add	r2, r0
 80a2ed2:	4293      	cmp	r3, r2
 80a2ed4:	d002      	beq.n	80a2edc <memset+0xe>
 80a2ed6:	f803 1b01 	strb.w	r1, [r3], #1
 80a2eda:	e7fa      	b.n	80a2ed2 <memset+0x4>
 80a2edc:	4770      	bx	lr
	...

080a2ee0 <srand>:
 80a2ee0:	b538      	push	{r3, r4, r5, lr}
 80a2ee2:	4b12      	ldr	r3, [pc, #72]	; (80a2f2c <srand+0x4c>)
 80a2ee4:	4605      	mov	r5, r0
 80a2ee6:	681c      	ldr	r4, [r3, #0]
 80a2ee8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2eea:	b9d3      	cbnz	r3, 80a2f22 <srand+0x42>
 80a2eec:	2018      	movs	r0, #24
 80a2eee:	f7fd fd9d 	bl	80a0a2c <malloc>
 80a2ef2:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2ef6:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2ef8:	8003      	strh	r3, [r0, #0]
 80a2efa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2efe:	8043      	strh	r3, [r0, #2]
 80a2f00:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2f04:	8083      	strh	r3, [r0, #4]
 80a2f06:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2f0a:	80c3      	strh	r3, [r0, #6]
 80a2f0c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2f10:	8103      	strh	r3, [r0, #8]
 80a2f12:	2305      	movs	r3, #5
 80a2f14:	8143      	strh	r3, [r0, #10]
 80a2f16:	230b      	movs	r3, #11
 80a2f18:	8183      	strh	r3, [r0, #12]
 80a2f1a:	2201      	movs	r2, #1
 80a2f1c:	2300      	movs	r3, #0
 80a2f1e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2f22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2f24:	2200      	movs	r2, #0
 80a2f26:	611d      	str	r5, [r3, #16]
 80a2f28:	615a      	str	r2, [r3, #20]
 80a2f2a:	bd38      	pop	{r3, r4, r5, pc}
 80a2f2c:	2000008c 	.word	0x2000008c

080a2f30 <strcmp>:
 80a2f30:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a2f34:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a2f38:	2a01      	cmp	r2, #1
 80a2f3a:	bf28      	it	cs
 80a2f3c:	429a      	cmpcs	r2, r3
 80a2f3e:	d0f7      	beq.n	80a2f30 <strcmp>
 80a2f40:	1ad0      	subs	r0, r2, r3
 80a2f42:	4770      	bx	lr

080a2f44 <strcpy>:
 80a2f44:	4603      	mov	r3, r0
 80a2f46:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a2f4a:	f803 2b01 	strb.w	r2, [r3], #1
 80a2f4e:	2a00      	cmp	r2, #0
 80a2f50:	d1f9      	bne.n	80a2f46 <strcpy+0x2>
 80a2f52:	4770      	bx	lr

080a2f54 <strdup>:
 80a2f54:	4b02      	ldr	r3, [pc, #8]	; (80a2f60 <strdup+0xc>)
 80a2f56:	4601      	mov	r1, r0
 80a2f58:	6818      	ldr	r0, [r3, #0]
 80a2f5a:	f000 b803 	b.w	80a2f64 <_strdup_r>
 80a2f5e:	bf00      	nop
 80a2f60:	2000008c 	.word	0x2000008c

080a2f64 <_strdup_r>:
 80a2f64:	b570      	push	{r4, r5, r6, lr}
 80a2f66:	4606      	mov	r6, r0
 80a2f68:	4608      	mov	r0, r1
 80a2f6a:	460c      	mov	r4, r1
 80a2f6c:	f000 f80d 	bl	80a2f8a <strlen>
 80a2f70:	1c45      	adds	r5, r0, #1
 80a2f72:	4629      	mov	r1, r5
 80a2f74:	4630      	mov	r0, r6
 80a2f76:	f7fd fd89 	bl	80a0a8c <_malloc_r>
 80a2f7a:	4606      	mov	r6, r0
 80a2f7c:	b118      	cbz	r0, 80a2f86 <_strdup_r+0x22>
 80a2f7e:	462a      	mov	r2, r5
 80a2f80:	4621      	mov	r1, r4
 80a2f82:	f7ff ff99 	bl	80a2eb8 <memcpy>
 80a2f86:	4630      	mov	r0, r6
 80a2f88:	bd70      	pop	{r4, r5, r6, pc}

080a2f8a <strlen>:
 80a2f8a:	4603      	mov	r3, r0
 80a2f8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2f90:	2a00      	cmp	r2, #0
 80a2f92:	d1fb      	bne.n	80a2f8c <strlen+0x2>
 80a2f94:	1a18      	subs	r0, r3, r0
 80a2f96:	3801      	subs	r0, #1
 80a2f98:	4770      	bx	lr

080a2f9a <strncmp>:
 80a2f9a:	b530      	push	{r4, r5, lr}
 80a2f9c:	b182      	cbz	r2, 80a2fc0 <strncmp+0x26>
 80a2f9e:	1e45      	subs	r5, r0, #1
 80a2fa0:	3901      	subs	r1, #1
 80a2fa2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a2fa6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a2faa:	42a3      	cmp	r3, r4
 80a2fac:	d106      	bne.n	80a2fbc <strncmp+0x22>
 80a2fae:	43ec      	mvns	r4, r5
 80a2fb0:	4414      	add	r4, r2
 80a2fb2:	42e0      	cmn	r0, r4
 80a2fb4:	d001      	beq.n	80a2fba <strncmp+0x20>
 80a2fb6:	2b00      	cmp	r3, #0
 80a2fb8:	d1f3      	bne.n	80a2fa2 <strncmp+0x8>
 80a2fba:	461c      	mov	r4, r3
 80a2fbc:	1b18      	subs	r0, r3, r4
 80a2fbe:	bd30      	pop	{r4, r5, pc}
 80a2fc0:	4610      	mov	r0, r2
 80a2fc2:	bd30      	pop	{r4, r5, pc}

080a2fc4 <sulp>:
 80a2fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2fc8:	460f      	mov	r7, r1
 80a2fca:	4690      	mov	r8, r2
 80a2fcc:	f001 ffb0 	bl	80a4f30 <__ulp>
 80a2fd0:	4604      	mov	r4, r0
 80a2fd2:	460d      	mov	r5, r1
 80a2fd4:	f1b8 0f00 	cmp.w	r8, #0
 80a2fd8:	d011      	beq.n	80a2ffe <sulp+0x3a>
 80a2fda:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80a2fde:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a2fe2:	2b00      	cmp	r3, #0
 80a2fe4:	dd0b      	ble.n	80a2ffe <sulp+0x3a>
 80a2fe6:	051b      	lsls	r3, r3, #20
 80a2fe8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80a2fec:	2400      	movs	r4, #0
 80a2fee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80a2ff2:	4622      	mov	r2, r4
 80a2ff4:	462b      	mov	r3, r5
 80a2ff6:	f7ff f989 	bl	80a230c <__aeabi_dmul>
 80a2ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2ffe:	4620      	mov	r0, r4
 80a3000:	4629      	mov	r1, r5
 80a3002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a3008 <_strtod_r>:
 80a3008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a300c:	4682      	mov	sl, r0
 80a300e:	460c      	mov	r4, r1
 80a3010:	b09d      	sub	sp, #116	; 0x74
 80a3012:	2300      	movs	r3, #0
 80a3014:	9213      	str	r2, [sp, #76]	; 0x4c
 80a3016:	9318      	str	r3, [sp, #96]	; 0x60
 80a3018:	f04f 0800 	mov.w	r8, #0
 80a301c:	f04f 0900 	mov.w	r9, #0
 80a3020:	9117      	str	r1, [sp, #92]	; 0x5c
 80a3022:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a3024:	781a      	ldrb	r2, [r3, #0]
 80a3026:	2a0d      	cmp	r2, #13
 80a3028:	d805      	bhi.n	80a3036 <_strtod_r+0x2e>
 80a302a:	2a09      	cmp	r2, #9
 80a302c:	d213      	bcs.n	80a3056 <_strtod_r+0x4e>
 80a302e:	2a00      	cmp	r2, #0
 80a3030:	f000 81ad 	beq.w	80a338e <_strtod_r+0x386>
 80a3034:	e012      	b.n	80a305c <_strtod_r+0x54>
 80a3036:	2a2b      	cmp	r2, #43	; 0x2b
 80a3038:	d004      	beq.n	80a3044 <_strtod_r+0x3c>
 80a303a:	2a2d      	cmp	r2, #45	; 0x2d
 80a303c:	d004      	beq.n	80a3048 <_strtod_r+0x40>
 80a303e:	2a20      	cmp	r2, #32
 80a3040:	d10c      	bne.n	80a305c <_strtod_r+0x54>
 80a3042:	e008      	b.n	80a3056 <_strtod_r+0x4e>
 80a3044:	2200      	movs	r2, #0
 80a3046:	e000      	b.n	80a304a <_strtod_r+0x42>
 80a3048:	2201      	movs	r2, #1
 80a304a:	920c      	str	r2, [sp, #48]	; 0x30
 80a304c:	1c5a      	adds	r2, r3, #1
 80a304e:	9217      	str	r2, [sp, #92]	; 0x5c
 80a3050:	785b      	ldrb	r3, [r3, #1]
 80a3052:	b92b      	cbnz	r3, 80a3060 <_strtod_r+0x58>
 80a3054:	e19b      	b.n	80a338e <_strtod_r+0x386>
 80a3056:	3301      	adds	r3, #1
 80a3058:	9317      	str	r3, [sp, #92]	; 0x5c
 80a305a:	e7e2      	b.n	80a3022 <_strtod_r+0x1a>
 80a305c:	2300      	movs	r3, #0
 80a305e:	930c      	str	r3, [sp, #48]	; 0x30
 80a3060:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a3062:	782b      	ldrb	r3, [r5, #0]
 80a3064:	2b30      	cmp	r3, #48	; 0x30
 80a3066:	d15c      	bne.n	80a3122 <_strtod_r+0x11a>
 80a3068:	786b      	ldrb	r3, [r5, #1]
 80a306a:	2b58      	cmp	r3, #88	; 0x58
 80a306c:	d001      	beq.n	80a3072 <_strtod_r+0x6a>
 80a306e:	2b78      	cmp	r3, #120	; 0x78
 80a3070:	d14c      	bne.n	80a310c <_strtod_r+0x104>
 80a3072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a3074:	4aa8      	ldr	r2, [pc, #672]	; (80a3318 <_strtod_r+0x310>)
 80a3076:	9301      	str	r3, [sp, #4]
 80a3078:	ab18      	add	r3, sp, #96	; 0x60
 80a307a:	9300      	str	r3, [sp, #0]
 80a307c:	a917      	add	r1, sp, #92	; 0x5c
 80a307e:	ab19      	add	r3, sp, #100	; 0x64
 80a3080:	4650      	mov	r0, sl
 80a3082:	f001 f8de 	bl	80a4242 <__gethex>
 80a3086:	f010 0607 	ands.w	r6, r0, #7
 80a308a:	4604      	mov	r4, r0
 80a308c:	f000 8585 	beq.w	80a3b9a <_strtod_r+0xb92>
 80a3090:	2e06      	cmp	r6, #6
 80a3092:	d105      	bne.n	80a30a0 <_strtod_r+0x98>
 80a3094:	3501      	adds	r5, #1
 80a3096:	2300      	movs	r3, #0
 80a3098:	9517      	str	r5, [sp, #92]	; 0x5c
 80a309a:	930c      	str	r3, [sp, #48]	; 0x30
 80a309c:	f000 bd7d 	b.w	80a3b9a <_strtod_r+0xb92>
 80a30a0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a30a2:	b13a      	cbz	r2, 80a30b4 <_strtod_r+0xac>
 80a30a4:	2135      	movs	r1, #53	; 0x35
 80a30a6:	a81a      	add	r0, sp, #104	; 0x68
 80a30a8:	f002 f829 	bl	80a50fe <__copybits>
 80a30ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a30ae:	4650      	mov	r0, sl
 80a30b0:	f001 fcad 	bl	80a4a0e <_Bfree>
 80a30b4:	2e06      	cmp	r6, #6
 80a30b6:	d822      	bhi.n	80a30fe <_strtod_r+0xf6>
 80a30b8:	e8df f006 	tbb	[pc, r6]
 80a30bc:	18080d04 	.word	0x18080d04
 80a30c0:	0d1d      	.short	0x0d1d
 80a30c2:	04          	.byte	0x04
 80a30c3:	00          	.byte	0x00
 80a30c4:	f04f 0900 	mov.w	r9, #0
 80a30c8:	46c8      	mov	r8, r9
 80a30ca:	e018      	b.n	80a30fe <_strtod_r+0xf6>
 80a30cc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a30d0:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80a30d4:	e013      	b.n	80a30fe <_strtod_r+0xf6>
 80a30d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a30d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a30da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80a30de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80a30e2:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a30e6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80a30ea:	e008      	b.n	80a30fe <_strtod_r+0xf6>
 80a30ec:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80a331c <_strtod_r+0x314>
 80a30f0:	f04f 0800 	mov.w	r8, #0
 80a30f4:	e003      	b.n	80a30fe <_strtod_r+0xf6>
 80a30f6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80a30fa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a30fe:	0721      	lsls	r1, r4, #28
 80a3100:	f140 854b 	bpl.w	80a3b9a <_strtod_r+0xb92>
 80a3104:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80a3108:	f000 bd47 	b.w	80a3b9a <_strtod_r+0xb92>
 80a310c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a310e:	1c5a      	adds	r2, r3, #1
 80a3110:	9217      	str	r2, [sp, #92]	; 0x5c
 80a3112:	785b      	ldrb	r3, [r3, #1]
 80a3114:	2b30      	cmp	r3, #48	; 0x30
 80a3116:	d0f9      	beq.n	80a310c <_strtod_r+0x104>
 80a3118:	2b00      	cmp	r3, #0
 80a311a:	f000 853e 	beq.w	80a3b9a <_strtod_r+0xb92>
 80a311e:	2301      	movs	r3, #1
 80a3120:	e000      	b.n	80a3124 <_strtod_r+0x11c>
 80a3122:	2300      	movs	r3, #0
 80a3124:	9305      	str	r3, [sp, #20]
 80a3126:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a3128:	220a      	movs	r2, #10
 80a312a:	9306      	str	r3, [sp, #24]
 80a312c:	2300      	movs	r3, #0
 80a312e:	469b      	mov	fp, r3
 80a3130:	9302      	str	r3, [sp, #8]
 80a3132:	9304      	str	r3, [sp, #16]
 80a3134:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a3136:	782e      	ldrb	r6, [r5, #0]
 80a3138:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80a313c:	b2d9      	uxtb	r1, r3
 80a313e:	2909      	cmp	r1, #9
 80a3140:	d811      	bhi.n	80a3166 <_strtod_r+0x15e>
 80a3142:	f1bb 0f08 	cmp.w	fp, #8
 80a3146:	bfd5      	itete	le
 80a3148:	9904      	ldrle	r1, [sp, #16]
 80a314a:	9902      	ldrgt	r1, [sp, #8]
 80a314c:	fb02 3301 	mlale	r3, r2, r1, r3
 80a3150:	fb02 3301 	mlagt	r3, r2, r1, r3
 80a3154:	f105 0501 	add.w	r5, r5, #1
 80a3158:	bfd4      	ite	le
 80a315a:	9304      	strle	r3, [sp, #16]
 80a315c:	9302      	strgt	r3, [sp, #8]
 80a315e:	f10b 0b01 	add.w	fp, fp, #1
 80a3162:	9517      	str	r5, [sp, #92]	; 0x5c
 80a3164:	e7e6      	b.n	80a3134 <_strtod_r+0x12c>
 80a3166:	4650      	mov	r0, sl
 80a3168:	f7ff fea2 	bl	80a2eb0 <_localeconv_r>
 80a316c:	6807      	ldr	r7, [r0, #0]
 80a316e:	4650      	mov	r0, sl
 80a3170:	f7ff fe9e 	bl	80a2eb0 <_localeconv_r>
 80a3174:	6800      	ldr	r0, [r0, #0]
 80a3176:	f7ff ff08 	bl	80a2f8a <strlen>
 80a317a:	4639      	mov	r1, r7
 80a317c:	4602      	mov	r2, r0
 80a317e:	4628      	mov	r0, r5
 80a3180:	f7ff ff0b 	bl	80a2f9a <strncmp>
 80a3184:	4607      	mov	r7, r0
 80a3186:	b128      	cbz	r0, 80a3194 <_strtod_r+0x18c>
 80a3188:	2000      	movs	r0, #0
 80a318a:	4633      	mov	r3, r6
 80a318c:	465d      	mov	r5, fp
 80a318e:	4602      	mov	r2, r0
 80a3190:	4601      	mov	r1, r0
 80a3192:	e05a      	b.n	80a324a <_strtod_r+0x242>
 80a3194:	4650      	mov	r0, sl
 80a3196:	f7ff fe8b 	bl	80a2eb0 <_localeconv_r>
 80a319a:	6800      	ldr	r0, [r0, #0]
 80a319c:	f7ff fef5 	bl	80a2f8a <strlen>
 80a31a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a31a2:	181a      	adds	r2, r3, r0
 80a31a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80a31a6:	5c1b      	ldrb	r3, [r3, r0]
 80a31a8:	f1bb 0f00 	cmp.w	fp, #0
 80a31ac:	d145      	bne.n	80a323a <_strtod_r+0x232>
 80a31ae:	4658      	mov	r0, fp
 80a31b0:	2b30      	cmp	r3, #48	; 0x30
 80a31b2:	d105      	bne.n	80a31c0 <_strtod_r+0x1b8>
 80a31b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a31b6:	3001      	adds	r0, #1
 80a31b8:	1c5a      	adds	r2, r3, #1
 80a31ba:	9217      	str	r2, [sp, #92]	; 0x5c
 80a31bc:	785b      	ldrb	r3, [r3, #1]
 80a31be:	e7f7      	b.n	80a31b0 <_strtod_r+0x1a8>
 80a31c0:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80a31c4:	2a08      	cmp	r2, #8
 80a31c6:	d846      	bhi.n	80a3256 <_strtod_r+0x24e>
 80a31c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a31ca:	9206      	str	r2, [sp, #24]
 80a31cc:	4602      	mov	r2, r0
 80a31ce:	2000      	movs	r0, #0
 80a31d0:	4605      	mov	r5, r0
 80a31d2:	3b30      	subs	r3, #48	; 0x30
 80a31d4:	f100 0101 	add.w	r1, r0, #1
 80a31d8:	d029      	beq.n	80a322e <_strtod_r+0x226>
 80a31da:	440a      	add	r2, r1
 80a31dc:	4629      	mov	r1, r5
 80a31de:	eb05 0c00 	add.w	ip, r5, r0
 80a31e2:	260a      	movs	r6, #10
 80a31e4:	4561      	cmp	r1, ip
 80a31e6:	d00f      	beq.n	80a3208 <_strtod_r+0x200>
 80a31e8:	3101      	adds	r1, #1
 80a31ea:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 80a31ee:	f1be 0f08 	cmp.w	lr, #8
 80a31f2:	dc03      	bgt.n	80a31fc <_strtod_r+0x1f4>
 80a31f4:	9f04      	ldr	r7, [sp, #16]
 80a31f6:	4377      	muls	r7, r6
 80a31f8:	9704      	str	r7, [sp, #16]
 80a31fa:	e7f3      	b.n	80a31e4 <_strtod_r+0x1dc>
 80a31fc:	2910      	cmp	r1, #16
 80a31fe:	bfde      	ittt	le
 80a3200:	9f02      	ldrle	r7, [sp, #8]
 80a3202:	4377      	mulle	r7, r6
 80a3204:	9702      	strle	r7, [sp, #8]
 80a3206:	e7ed      	b.n	80a31e4 <_strtod_r+0x1dc>
 80a3208:	4428      	add	r0, r5
 80a320a:	2808      	cmp	r0, #8
 80a320c:	f100 0501 	add.w	r5, r0, #1
 80a3210:	dc05      	bgt.n	80a321e <_strtod_r+0x216>
 80a3212:	9804      	ldr	r0, [sp, #16]
 80a3214:	210a      	movs	r1, #10
 80a3216:	fb01 3300 	mla	r3, r1, r0, r3
 80a321a:	9304      	str	r3, [sp, #16]
 80a321c:	e006      	b.n	80a322c <_strtod_r+0x224>
 80a321e:	2d10      	cmp	r5, #16
 80a3220:	bfdf      	itttt	le
 80a3222:	9802      	ldrle	r0, [sp, #8]
 80a3224:	210a      	movle	r1, #10
 80a3226:	fb01 3300 	mlale	r3, r1, r0, r3
 80a322a:	9302      	strle	r3, [sp, #8]
 80a322c:	2100      	movs	r1, #0
 80a322e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a3230:	1c58      	adds	r0, r3, #1
 80a3232:	9017      	str	r0, [sp, #92]	; 0x5c
 80a3234:	785b      	ldrb	r3, [r3, #1]
 80a3236:	4608      	mov	r0, r1
 80a3238:	e002      	b.n	80a3240 <_strtod_r+0x238>
 80a323a:	465d      	mov	r5, fp
 80a323c:	4638      	mov	r0, r7
 80a323e:	463a      	mov	r2, r7
 80a3240:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80a3244:	2909      	cmp	r1, #9
 80a3246:	d9c4      	bls.n	80a31d2 <_strtod_r+0x1ca>
 80a3248:	2101      	movs	r1, #1
 80a324a:	2b65      	cmp	r3, #101	; 0x65
 80a324c:	d001      	beq.n	80a3252 <_strtod_r+0x24a>
 80a324e:	2b45      	cmp	r3, #69	; 0x45
 80a3250:	d14f      	bne.n	80a32f2 <_strtod_r+0x2ea>
 80a3252:	b96d      	cbnz	r5, 80a3270 <_strtod_r+0x268>
 80a3254:	e004      	b.n	80a3260 <_strtod_r+0x258>
 80a3256:	2b65      	cmp	r3, #101	; 0x65
 80a3258:	f040 84ad 	bne.w	80a3bb6 <_strtod_r+0xbae>
 80a325c:	2200      	movs	r2, #0
 80a325e:	2101      	movs	r1, #1
 80a3260:	b928      	cbnz	r0, 80a326e <_strtod_r+0x266>
 80a3262:	9b05      	ldr	r3, [sp, #20]
 80a3264:	2b00      	cmp	r3, #0
 80a3266:	f000 8092 	beq.w	80a338e <_strtod_r+0x386>
 80a326a:	4605      	mov	r5, r0
 80a326c:	e000      	b.n	80a3270 <_strtod_r+0x268>
 80a326e:	2500      	movs	r5, #0
 80a3270:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80a3272:	1c63      	adds	r3, r4, #1
 80a3274:	9317      	str	r3, [sp, #92]	; 0x5c
 80a3276:	7863      	ldrb	r3, [r4, #1]
 80a3278:	2b2b      	cmp	r3, #43	; 0x2b
 80a327a:	d006      	beq.n	80a328a <_strtod_r+0x282>
 80a327c:	2b2d      	cmp	r3, #45	; 0x2d
 80a327e:	d002      	beq.n	80a3286 <_strtod_r+0x27e>
 80a3280:	2600      	movs	r6, #0
 80a3282:	9603      	str	r6, [sp, #12]
 80a3284:	e006      	b.n	80a3294 <_strtod_r+0x28c>
 80a3286:	2301      	movs	r3, #1
 80a3288:	e000      	b.n	80a328c <_strtod_r+0x284>
 80a328a:	2300      	movs	r3, #0
 80a328c:	9303      	str	r3, [sp, #12]
 80a328e:	1ca3      	adds	r3, r4, #2
 80a3290:	9317      	str	r3, [sp, #92]	; 0x5c
 80a3292:	78a3      	ldrb	r3, [r4, #2]
 80a3294:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80a3298:	2e09      	cmp	r6, #9
 80a329a:	d829      	bhi.n	80a32f0 <_strtod_r+0x2e8>
 80a329c:	2b30      	cmp	r3, #48	; 0x30
 80a329e:	d104      	bne.n	80a32aa <_strtod_r+0x2a2>
 80a32a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a32a2:	1c5e      	adds	r6, r3, #1
 80a32a4:	9617      	str	r6, [sp, #92]	; 0x5c
 80a32a6:	785b      	ldrb	r3, [r3, #1]
 80a32a8:	e7f8      	b.n	80a329c <_strtod_r+0x294>
 80a32aa:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80a32ae:	2e08      	cmp	r6, #8
 80a32b0:	d81f      	bhi.n	80a32f2 <_strtod_r+0x2ea>
 80a32b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80a32b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a32b8:	461f      	mov	r7, r3
 80a32ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a32bc:	1c5e      	adds	r6, r3, #1
 80a32be:	9617      	str	r6, [sp, #92]	; 0x5c
 80a32c0:	785b      	ldrb	r3, [r3, #1]
 80a32c2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80a32c6:	f1bc 0f09 	cmp.w	ip, #9
 80a32ca:	d805      	bhi.n	80a32d8 <_strtod_r+0x2d0>
 80a32cc:	260a      	movs	r6, #10
 80a32ce:	fb06 3e0e 	mla	lr, r6, lr, r3
 80a32d2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80a32d6:	e7f0      	b.n	80a32ba <_strtod_r+0x2b2>
 80a32d8:	1bf6      	subs	r6, r6, r7
 80a32da:	2e08      	cmp	r6, #8
 80a32dc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80a32e0:	dc02      	bgt.n	80a32e8 <_strtod_r+0x2e0>
 80a32e2:	4576      	cmp	r6, lr
 80a32e4:	bfa8      	it	ge
 80a32e6:	4676      	movge	r6, lr
 80a32e8:	9f03      	ldr	r7, [sp, #12]
 80a32ea:	b11f      	cbz	r7, 80a32f4 <_strtod_r+0x2ec>
 80a32ec:	4276      	negs	r6, r6
 80a32ee:	e001      	b.n	80a32f4 <_strtod_r+0x2ec>
 80a32f0:	9417      	str	r4, [sp, #92]	; 0x5c
 80a32f2:	2600      	movs	r6, #0
 80a32f4:	2d00      	cmp	r5, #0
 80a32f6:	d152      	bne.n	80a339e <_strtod_r+0x396>
 80a32f8:	2800      	cmp	r0, #0
 80a32fa:	f040 844e 	bne.w	80a3b9a <_strtod_r+0xb92>
 80a32fe:	9a05      	ldr	r2, [sp, #20]
 80a3300:	2a00      	cmp	r2, #0
 80a3302:	f040 844a 	bne.w	80a3b9a <_strtod_r+0xb92>
 80a3306:	2900      	cmp	r1, #0
 80a3308:	d141      	bne.n	80a338e <_strtod_r+0x386>
 80a330a:	2b4e      	cmp	r3, #78	; 0x4e
 80a330c:	d020      	beq.n	80a3350 <_strtod_r+0x348>
 80a330e:	dc07      	bgt.n	80a3320 <_strtod_r+0x318>
 80a3310:	2b49      	cmp	r3, #73	; 0x49
 80a3312:	d00a      	beq.n	80a332a <_strtod_r+0x322>
 80a3314:	e03b      	b.n	80a338e <_strtod_r+0x386>
 80a3316:	bf00      	nop
 80a3318:	080a5668 	.word	0x080a5668
 80a331c:	7ff00000 	.word	0x7ff00000
 80a3320:	2b69      	cmp	r3, #105	; 0x69
 80a3322:	d002      	beq.n	80a332a <_strtod_r+0x322>
 80a3324:	2b6e      	cmp	r3, #110	; 0x6e
 80a3326:	d013      	beq.n	80a3350 <_strtod_r+0x348>
 80a3328:	e031      	b.n	80a338e <_strtod_r+0x386>
 80a332a:	49aa      	ldr	r1, [pc, #680]	; (80a35d4 <_strtod_r+0x5cc>)
 80a332c:	a817      	add	r0, sp, #92	; 0x5c
 80a332e:	f001 f9b9 	bl	80a46a4 <__match>
 80a3332:	b360      	cbz	r0, 80a338e <_strtod_r+0x386>
 80a3334:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a3336:	49a8      	ldr	r1, [pc, #672]	; (80a35d8 <_strtod_r+0x5d0>)
 80a3338:	3b01      	subs	r3, #1
 80a333a:	a817      	add	r0, sp, #92	; 0x5c
 80a333c:	9317      	str	r3, [sp, #92]	; 0x5c
 80a333e:	f001 f9b1 	bl	80a46a4 <__match>
 80a3342:	b910      	cbnz	r0, 80a334a <_strtod_r+0x342>
 80a3344:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a3346:	3301      	adds	r3, #1
 80a3348:	9317      	str	r3, [sp, #92]	; 0x5c
 80a334a:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 80a35f4 <_strtod_r+0x5ec>
 80a334e:	e01a      	b.n	80a3386 <_strtod_r+0x37e>
 80a3350:	49a2      	ldr	r1, [pc, #648]	; (80a35dc <_strtod_r+0x5d4>)
 80a3352:	a817      	add	r0, sp, #92	; 0x5c
 80a3354:	f001 f9a6 	bl	80a46a4 <__match>
 80a3358:	b1c8      	cbz	r0, 80a338e <_strtod_r+0x386>
 80a335a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a335c:	781b      	ldrb	r3, [r3, #0]
 80a335e:	2b28      	cmp	r3, #40	; 0x28
 80a3360:	d10f      	bne.n	80a3382 <_strtod_r+0x37a>
 80a3362:	aa1a      	add	r2, sp, #104	; 0x68
 80a3364:	499e      	ldr	r1, [pc, #632]	; (80a35e0 <_strtod_r+0x5d8>)
 80a3366:	a817      	add	r0, sp, #92	; 0x5c
 80a3368:	f001 f9af 	bl	80a46ca <__hexnan>
 80a336c:	2805      	cmp	r0, #5
 80a336e:	d108      	bne.n	80a3382 <_strtod_r+0x37a>
 80a3370:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a3372:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a3376:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80a337a:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80a337e:	f000 bc0c 	b.w	80a3b9a <_strtod_r+0xb92>
 80a3382:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80a35f8 <_strtod_r+0x5f0>
 80a3386:	f04f 0800 	mov.w	r8, #0
 80a338a:	f000 bc06 	b.w	80a3b9a <_strtod_r+0xb92>
 80a338e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a3390:	9417      	str	r4, [sp, #92]	; 0x5c
 80a3392:	2b00      	cmp	r3, #0
 80a3394:	f000 840c 	beq.w	80a3bb0 <_strtod_r+0xba8>
 80a3398:	2300      	movs	r3, #0
 80a339a:	930c      	str	r3, [sp, #48]	; 0x30
 80a339c:	e3ff      	b.n	80a3b9e <_strtod_r+0xb96>
 80a339e:	462c      	mov	r4, r5
 80a33a0:	f1bb 0f00 	cmp.w	fp, #0
 80a33a4:	bf08      	it	eq
 80a33a6:	46ab      	moveq	fp, r5
 80a33a8:	9804      	ldr	r0, [sp, #16]
 80a33aa:	2d10      	cmp	r5, #16
 80a33ac:	bfa8      	it	ge
 80a33ae:	2410      	movge	r4, #16
 80a33b0:	1ab7      	subs	r7, r6, r2
 80a33b2:	f7fe ff35 	bl	80a2220 <__aeabi_ui2d>
 80a33b6:	2c09      	cmp	r4, #9
 80a33b8:	4680      	mov	r8, r0
 80a33ba:	4689      	mov	r9, r1
 80a33bc:	dd13      	ble.n	80a33e6 <_strtod_r+0x3de>
 80a33be:	4b89      	ldr	r3, [pc, #548]	; (80a35e4 <_strtod_r+0x5dc>)
 80a33c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80a33c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80a33c8:	f7fe ffa0 	bl	80a230c <__aeabi_dmul>
 80a33cc:	4680      	mov	r8, r0
 80a33ce:	9802      	ldr	r0, [sp, #8]
 80a33d0:	4689      	mov	r9, r1
 80a33d2:	f7fe ff25 	bl	80a2220 <__aeabi_ui2d>
 80a33d6:	4602      	mov	r2, r0
 80a33d8:	460b      	mov	r3, r1
 80a33da:	4640      	mov	r0, r8
 80a33dc:	4649      	mov	r1, r9
 80a33de:	f7fe fde3 	bl	80a1fa8 <__adddf3>
 80a33e2:	4680      	mov	r8, r0
 80a33e4:	4689      	mov	r9, r1
 80a33e6:	2d0f      	cmp	r5, #15
 80a33e8:	dc33      	bgt.n	80a3452 <_strtod_r+0x44a>
 80a33ea:	2f00      	cmp	r7, #0
 80a33ec:	f000 83d5 	beq.w	80a3b9a <_strtod_r+0xb92>
 80a33f0:	dd22      	ble.n	80a3438 <_strtod_r+0x430>
 80a33f2:	2f16      	cmp	r7, #22
 80a33f4:	dc07      	bgt.n	80a3406 <_strtod_r+0x3fe>
 80a33f6:	4d7b      	ldr	r5, [pc, #492]	; (80a35e4 <_strtod_r+0x5dc>)
 80a33f8:	4642      	mov	r2, r8
 80a33fa:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 80a33fe:	464b      	mov	r3, r9
 80a3400:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a3404:	e013      	b.n	80a342e <_strtod_r+0x426>
 80a3406:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80a340a:	429f      	cmp	r7, r3
 80a340c:	dc21      	bgt.n	80a3452 <_strtod_r+0x44a>
 80a340e:	4c75      	ldr	r4, [pc, #468]	; (80a35e4 <_strtod_r+0x5dc>)
 80a3410:	f1c5 050f 	rsb	r5, r5, #15
 80a3414:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80a3418:	1b7d      	subs	r5, r7, r5
 80a341a:	4642      	mov	r2, r8
 80a341c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a3420:	464b      	mov	r3, r9
 80a3422:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80a3426:	f7fe ff71 	bl	80a230c <__aeabi_dmul>
 80a342a:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a342e:	f7fe ff6d 	bl	80a230c <__aeabi_dmul>
 80a3432:	4680      	mov	r8, r0
 80a3434:	4689      	mov	r9, r1
 80a3436:	e3b0      	b.n	80a3b9a <_strtod_r+0xb92>
 80a3438:	f117 0f16 	cmn.w	r7, #22
 80a343c:	db09      	blt.n	80a3452 <_strtod_r+0x44a>
 80a343e:	4d69      	ldr	r5, [pc, #420]	; (80a35e4 <_strtod_r+0x5dc>)
 80a3440:	4640      	mov	r0, r8
 80a3442:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 80a3446:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a344a:	4649      	mov	r1, r9
 80a344c:	f7ff f888 	bl	80a2560 <__aeabi_ddiv>
 80a3450:	e7ef      	b.n	80a3432 <_strtod_r+0x42a>
 80a3452:	1b2c      	subs	r4, r5, r4
 80a3454:	443c      	add	r4, r7
 80a3456:	2c00      	cmp	r4, #0
 80a3458:	dd5d      	ble.n	80a3516 <_strtod_r+0x50e>
 80a345a:	f014 010f 	ands.w	r1, r4, #15
 80a345e:	d00a      	beq.n	80a3476 <_strtod_r+0x46e>
 80a3460:	4b60      	ldr	r3, [pc, #384]	; (80a35e4 <_strtod_r+0x5dc>)
 80a3462:	4642      	mov	r2, r8
 80a3464:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80a3468:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a346c:	464b      	mov	r3, r9
 80a346e:	f7fe ff4d 	bl	80a230c <__aeabi_dmul>
 80a3472:	4680      	mov	r8, r0
 80a3474:	4689      	mov	r9, r1
 80a3476:	f034 040f 	bics.w	r4, r4, #15
 80a347a:	f000 80c1 	beq.w	80a3600 <_strtod_r+0x5f8>
 80a347e:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80a3482:	dd0f      	ble.n	80a34a4 <_strtod_r+0x49c>
 80a3484:	f04f 0b00 	mov.w	fp, #0
 80a3488:	f8cd b008 	str.w	fp, [sp, #8]
 80a348c:	f8cd b014 	str.w	fp, [sp, #20]
 80a3490:	f8cd b010 	str.w	fp, [sp, #16]
 80a3494:	2322      	movs	r3, #34	; 0x22
 80a3496:	f8ca 3000 	str.w	r3, [sl]
 80a349a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80a35f4 <_strtod_r+0x5ec>
 80a349e:	f04f 0800 	mov.w	r8, #0
 80a34a2:	e189      	b.n	80a37b8 <_strtod_r+0x7b0>
 80a34a4:	4640      	mov	r0, r8
 80a34a6:	4649      	mov	r1, r9
 80a34a8:	2300      	movs	r3, #0
 80a34aa:	4e4f      	ldr	r6, [pc, #316]	; (80a35e8 <_strtod_r+0x5e0>)
 80a34ac:	1124      	asrs	r4, r4, #4
 80a34ae:	9302      	str	r3, [sp, #8]
 80a34b0:	2c01      	cmp	r4, #1
 80a34b2:	dd0c      	ble.n	80a34ce <_strtod_r+0x4c6>
 80a34b4:	07e2      	lsls	r2, r4, #31
 80a34b6:	d504      	bpl.n	80a34c2 <_strtod_r+0x4ba>
 80a34b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a34bc:	f7fe ff26 	bl	80a230c <__aeabi_dmul>
 80a34c0:	2301      	movs	r3, #1
 80a34c2:	9a02      	ldr	r2, [sp, #8]
 80a34c4:	1064      	asrs	r4, r4, #1
 80a34c6:	3201      	adds	r2, #1
 80a34c8:	9202      	str	r2, [sp, #8]
 80a34ca:	3608      	adds	r6, #8
 80a34cc:	e7f0      	b.n	80a34b0 <_strtod_r+0x4a8>
 80a34ce:	b10b      	cbz	r3, 80a34d4 <_strtod_r+0x4cc>
 80a34d0:	4680      	mov	r8, r0
 80a34d2:	4689      	mov	r9, r1
 80a34d4:	4b44      	ldr	r3, [pc, #272]	; (80a35e8 <_strtod_r+0x5e0>)
 80a34d6:	9a02      	ldr	r2, [sp, #8]
 80a34d8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a34dc:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80a34e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a34e4:	4642      	mov	r2, r8
 80a34e6:	464b      	mov	r3, r9
 80a34e8:	f7fe ff10 	bl	80a230c <__aeabi_dmul>
 80a34ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a34f0:	4689      	mov	r9, r1
 80a34f2:	460a      	mov	r2, r1
 80a34f4:	0d1b      	lsrs	r3, r3, #20
 80a34f6:	493d      	ldr	r1, [pc, #244]	; (80a35ec <_strtod_r+0x5e4>)
 80a34f8:	051b      	lsls	r3, r3, #20
 80a34fa:	428b      	cmp	r3, r1
 80a34fc:	4680      	mov	r8, r0
 80a34fe:	d8c1      	bhi.n	80a3484 <_strtod_r+0x47c>
 80a3500:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80a3504:	428b      	cmp	r3, r1
 80a3506:	bf86      	itte	hi
 80a3508:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 80a35fc <_strtod_r+0x5f4>
 80a350c:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80a3510:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80a3514:	e074      	b.n	80a3600 <_strtod_r+0x5f8>
 80a3516:	d073      	beq.n	80a3600 <_strtod_r+0x5f8>
 80a3518:	4264      	negs	r4, r4
 80a351a:	f014 020f 	ands.w	r2, r4, #15
 80a351e:	d00a      	beq.n	80a3536 <_strtod_r+0x52e>
 80a3520:	4b30      	ldr	r3, [pc, #192]	; (80a35e4 <_strtod_r+0x5dc>)
 80a3522:	4640      	mov	r0, r8
 80a3524:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a3528:	4649      	mov	r1, r9
 80a352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a352e:	f7ff f817 	bl	80a2560 <__aeabi_ddiv>
 80a3532:	4680      	mov	r8, r0
 80a3534:	4689      	mov	r9, r1
 80a3536:	1124      	asrs	r4, r4, #4
 80a3538:	d062      	beq.n	80a3600 <_strtod_r+0x5f8>
 80a353a:	2c1f      	cmp	r4, #31
 80a353c:	dd08      	ble.n	80a3550 <_strtod_r+0x548>
 80a353e:	f04f 0b00 	mov.w	fp, #0
 80a3542:	f8cd b008 	str.w	fp, [sp, #8]
 80a3546:	f8cd b014 	str.w	fp, [sp, #20]
 80a354a:	f8cd b010 	str.w	fp, [sp, #16]
 80a354e:	e12c      	b.n	80a37aa <_strtod_r+0x7a2>
 80a3550:	4640      	mov	r0, r8
 80a3552:	4649      	mov	r1, r9
 80a3554:	f014 0f10 	tst.w	r4, #16
 80a3558:	bf0c      	ite	eq
 80a355a:	2300      	moveq	r3, #0
 80a355c:	236a      	movne	r3, #106	; 0x6a
 80a355e:	4e24      	ldr	r6, [pc, #144]	; (80a35f0 <_strtod_r+0x5e8>)
 80a3560:	9303      	str	r3, [sp, #12]
 80a3562:	2300      	movs	r3, #0
 80a3564:	2c00      	cmp	r4, #0
 80a3566:	dd09      	ble.n	80a357c <_strtod_r+0x574>
 80a3568:	07e2      	lsls	r2, r4, #31
 80a356a:	d504      	bpl.n	80a3576 <_strtod_r+0x56e>
 80a356c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a3570:	f7fe fecc 	bl	80a230c <__aeabi_dmul>
 80a3574:	2301      	movs	r3, #1
 80a3576:	1064      	asrs	r4, r4, #1
 80a3578:	3608      	adds	r6, #8
 80a357a:	e7f3      	b.n	80a3564 <_strtod_r+0x55c>
 80a357c:	b10b      	cbz	r3, 80a3582 <_strtod_r+0x57a>
 80a357e:	4680      	mov	r8, r0
 80a3580:	4689      	mov	r9, r1
 80a3582:	9b03      	ldr	r3, [sp, #12]
 80a3584:	b1eb      	cbz	r3, 80a35c2 <_strtod_r+0x5ba>
 80a3586:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80a358a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a358e:	2b00      	cmp	r3, #0
 80a3590:	4649      	mov	r1, r9
 80a3592:	dd16      	ble.n	80a35c2 <_strtod_r+0x5ba>
 80a3594:	2b1f      	cmp	r3, #31
 80a3596:	dd0e      	ble.n	80a35b6 <_strtod_r+0x5ae>
 80a3598:	2b34      	cmp	r3, #52	; 0x34
 80a359a:	bfde      	ittt	le
 80a359c:	3b20      	suble	r3, #32
 80a359e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80a35a2:	fa02 f303 	lslle.w	r3, r2, r3
 80a35a6:	f04f 0800 	mov.w	r8, #0
 80a35aa:	bfcc      	ite	gt
 80a35ac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80a35b0:	ea03 0901 	andle.w	r9, r3, r1
 80a35b4:	e005      	b.n	80a35c2 <_strtod_r+0x5ba>
 80a35b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a35ba:	fa02 f303 	lsl.w	r3, r2, r3
 80a35be:	ea03 0808 	and.w	r8, r3, r8
 80a35c2:	2200      	movs	r2, #0
 80a35c4:	2300      	movs	r3, #0
 80a35c6:	4640      	mov	r0, r8
 80a35c8:	4649      	mov	r1, r9
 80a35ca:	f7ff f907 	bl	80a27dc <__aeabi_dcmpeq>
 80a35ce:	2800      	cmp	r0, #0
 80a35d0:	d1b5      	bne.n	80a353e <_strtod_r+0x536>
 80a35d2:	e017      	b.n	80a3604 <_strtod_r+0x5fc>
 80a35d4:	080a567c 	.word	0x080a567c
 80a35d8:	080a567f 	.word	0x080a567f
 80a35dc:	080a5685 	.word	0x080a5685
 80a35e0:	080a5688 	.word	0x080a5688
 80a35e4:	080a5708 	.word	0x080a5708
 80a35e8:	080a57d0 	.word	0x080a57d0
 80a35ec:	7ca00000 	.word	0x7ca00000
 80a35f0:	080a56a0 	.word	0x080a56a0
 80a35f4:	7ff00000 	.word	0x7ff00000
 80a35f8:	fff80000 	.word	0xfff80000
 80a35fc:	7fefffff 	.word	0x7fefffff
 80a3600:	2300      	movs	r3, #0
 80a3602:	9303      	str	r3, [sp, #12]
 80a3604:	9b04      	ldr	r3, [sp, #16]
 80a3606:	465a      	mov	r2, fp
 80a3608:	9300      	str	r3, [sp, #0]
 80a360a:	9906      	ldr	r1, [sp, #24]
 80a360c:	462b      	mov	r3, r5
 80a360e:	4650      	mov	r0, sl
 80a3610:	f001 fa4f 	bl	80a4ab2 <__s2b>
 80a3614:	9005      	str	r0, [sp, #20]
 80a3616:	2800      	cmp	r0, #0
 80a3618:	f43f af34 	beq.w	80a3484 <_strtod_r+0x47c>
 80a361c:	2f00      	cmp	r7, #0
 80a361e:	f1c7 0300 	rsb	r3, r7, #0
 80a3622:	bfa8      	it	ge
 80a3624:	2300      	movge	r3, #0
 80a3626:	930d      	str	r3, [sp, #52]	; 0x34
 80a3628:	f04f 0b00 	mov.w	fp, #0
 80a362c:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 80a3630:	9312      	str	r3, [sp, #72]	; 0x48
 80a3632:	f8cd b008 	str.w	fp, [sp, #8]
 80a3636:	9b05      	ldr	r3, [sp, #20]
 80a3638:	4650      	mov	r0, sl
 80a363a:	6859      	ldr	r1, [r3, #4]
 80a363c:	f001 f9b2 	bl	80a49a4 <_Balloc>
 80a3640:	9004      	str	r0, [sp, #16]
 80a3642:	2800      	cmp	r0, #0
 80a3644:	f43f af26 	beq.w	80a3494 <_strtod_r+0x48c>
 80a3648:	9b05      	ldr	r3, [sp, #20]
 80a364a:	300c      	adds	r0, #12
 80a364c:	691a      	ldr	r2, [r3, #16]
 80a364e:	f103 010c 	add.w	r1, r3, #12
 80a3652:	3202      	adds	r2, #2
 80a3654:	0092      	lsls	r2, r2, #2
 80a3656:	f7ff fc2f 	bl	80a2eb8 <memcpy>
 80a365a:	ab1a      	add	r3, sp, #104	; 0x68
 80a365c:	9301      	str	r3, [sp, #4]
 80a365e:	ab19      	add	r3, sp, #100	; 0x64
 80a3660:	9300      	str	r3, [sp, #0]
 80a3662:	4642      	mov	r2, r8
 80a3664:	464b      	mov	r3, r9
 80a3666:	4650      	mov	r0, sl
 80a3668:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a366c:	f001 fcd1 	bl	80a5012 <__d2b>
 80a3670:	9018      	str	r0, [sp, #96]	; 0x60
 80a3672:	2800      	cmp	r0, #0
 80a3674:	f43f af0e 	beq.w	80a3494 <_strtod_r+0x48c>
 80a3678:	2101      	movs	r1, #1
 80a367a:	4650      	mov	r0, sl
 80a367c:	f001 faa4 	bl	80a4bc8 <__i2b>
 80a3680:	9002      	str	r0, [sp, #8]
 80a3682:	2800      	cmp	r0, #0
 80a3684:	f43f af06 	beq.w	80a3494 <_strtod_r+0x48c>
 80a3688:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a368a:	9903      	ldr	r1, [sp, #12]
 80a368c:	2b00      	cmp	r3, #0
 80a368e:	bfac      	ite	ge
 80a3690:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 80a3692:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80a3694:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80a3696:	bfac      	ite	ge
 80a3698:	18d6      	addge	r6, r2, r3
 80a369a:	1ad2      	sublt	r2, r2, r3
 80a369c:	eba3 0301 	sub.w	r3, r3, r1
 80a36a0:	4423      	add	r3, r4
 80a36a2:	49b1      	ldr	r1, [pc, #708]	; (80a3968 <_strtod_r+0x960>)
 80a36a4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80a36a8:	bfac      	ite	ge
 80a36aa:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 80a36ac:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 80a36ae:	428b      	cmp	r3, r1
 80a36b0:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 80a36b4:	f280 8085 	bge.w	80a37c2 <_strtod_r+0x7ba>
 80a36b8:	1ac9      	subs	r1, r1, r3
 80a36ba:	291f      	cmp	r1, #31
 80a36bc:	bfc8      	it	gt
 80a36be:	4dab      	ldrgt	r5, [pc, #684]	; (80a396c <_strtod_r+0x964>)
 80a36c0:	f04f 0701 	mov.w	r7, #1
 80a36c4:	bfd4      	ite	le
 80a36c6:	fa07 f301 	lslle.w	r3, r7, r1
 80a36ca:	1aed      	subgt	r5, r5, r3
 80a36cc:	eba4 0401 	sub.w	r4, r4, r1
 80a36d0:	bfd9      	ittee	le
 80a36d2:	9307      	strle	r3, [sp, #28]
 80a36d4:	2500      	movle	r5, #0
 80a36d6:	fa07 f505 	lslgt.w	r5, r7, r5
 80a36da:	9707      	strgt	r7, [sp, #28]
 80a36dc:	1937      	adds	r7, r6, r4
 80a36de:	9b03      	ldr	r3, [sp, #12]
 80a36e0:	42be      	cmp	r6, r7
 80a36e2:	4414      	add	r4, r2
 80a36e4:	441c      	add	r4, r3
 80a36e6:	4633      	mov	r3, r6
 80a36e8:	bfa8      	it	ge
 80a36ea:	463b      	movge	r3, r7
 80a36ec:	42a3      	cmp	r3, r4
 80a36ee:	bfa8      	it	ge
 80a36f0:	4623      	movge	r3, r4
 80a36f2:	2b00      	cmp	r3, #0
 80a36f4:	bfc2      	ittt	gt
 80a36f6:	1aff      	subgt	r7, r7, r3
 80a36f8:	1ae4      	subgt	r4, r4, r3
 80a36fa:	1af6      	subgt	r6, r6, r3
 80a36fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a36fe:	2b00      	cmp	r3, #0
 80a3700:	d163      	bne.n	80a37ca <_strtod_r+0x7c2>
 80a3702:	2f00      	cmp	r7, #0
 80a3704:	dc7a      	bgt.n	80a37fc <_strtod_r+0x7f4>
 80a3706:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a3708:	2b00      	cmp	r3, #0
 80a370a:	f040 8081 	bne.w	80a3810 <_strtod_r+0x808>
 80a370e:	2c00      	cmp	r4, #0
 80a3710:	f300 8088 	bgt.w	80a3824 <_strtod_r+0x81c>
 80a3714:	2e00      	cmp	r6, #0
 80a3716:	f300 808f 	bgt.w	80a3838 <_strtod_r+0x830>
 80a371a:	9a04      	ldr	r2, [sp, #16]
 80a371c:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a371e:	4650      	mov	r0, sl
 80a3720:	f001 fba7 	bl	80a4e72 <__mdiff>
 80a3724:	4683      	mov	fp, r0
 80a3726:	2800      	cmp	r0, #0
 80a3728:	f43f aeb4 	beq.w	80a3494 <_strtod_r+0x48c>
 80a372c:	68c3      	ldr	r3, [r0, #12]
 80a372e:	2400      	movs	r4, #0
 80a3730:	60c4      	str	r4, [r0, #12]
 80a3732:	9902      	ldr	r1, [sp, #8]
 80a3734:	9306      	str	r3, [sp, #24]
 80a3736:	f001 fb80 	bl	80a4e3a <__mcmp>
 80a373a:	42a0      	cmp	r0, r4
 80a373c:	f280 808b 	bge.w	80a3856 <_strtod_r+0x84e>
 80a3740:	9b06      	ldr	r3, [sp, #24]
 80a3742:	2b00      	cmp	r3, #0
 80a3744:	f040 8202 	bne.w	80a3b4c <_strtod_r+0xb44>
 80a3748:	f1b8 0f00 	cmp.w	r8, #0
 80a374c:	f040 81fe 	bne.w	80a3b4c <_strtod_r+0xb44>
 80a3750:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a3754:	2b00      	cmp	r3, #0
 80a3756:	f040 81f9 	bne.w	80a3b4c <_strtod_r+0xb44>
 80a375a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a375e:	0d1b      	lsrs	r3, r3, #20
 80a3760:	051b      	lsls	r3, r3, #20
 80a3762:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a3766:	f240 81f1 	bls.w	80a3b4c <_strtod_r+0xb44>
 80a376a:	f8db 3014 	ldr.w	r3, [fp, #20]
 80a376e:	2b00      	cmp	r3, #0
 80a3770:	d06c      	beq.n	80a384c <_strtod_r+0x844>
 80a3772:	4659      	mov	r1, fp
 80a3774:	2201      	movs	r2, #1
 80a3776:	4650      	mov	r0, sl
 80a3778:	f001 fb0e 	bl	80a4d98 <__lshift>
 80a377c:	9902      	ldr	r1, [sp, #8]
 80a377e:	4683      	mov	fp, r0
 80a3780:	f001 fb5b 	bl	80a4e3a <__mcmp>
 80a3784:	2800      	cmp	r0, #0
 80a3786:	f340 81e1 	ble.w	80a3b4c <_strtod_r+0xb44>
 80a378a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a378e:	9a03      	ldr	r2, [sp, #12]
 80a3790:	0d1b      	lsrs	r3, r3, #20
 80a3792:	051b      	lsls	r3, r3, #20
 80a3794:	2a00      	cmp	r2, #0
 80a3796:	f000 808d 	beq.w	80a38b4 <_strtod_r+0x8ac>
 80a379a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a379e:	f300 8089 	bgt.w	80a38b4 <_strtod_r+0x8ac>
 80a37a2:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80a37a6:	f300 81d3 	bgt.w	80a3b50 <_strtod_r+0xb48>
 80a37aa:	2322      	movs	r3, #34	; 0x22
 80a37ac:	f04f 0800 	mov.w	r8, #0
 80a37b0:	f04f 0900 	mov.w	r9, #0
 80a37b4:	f8ca 3000 	str.w	r3, [sl]
 80a37b8:	9b05      	ldr	r3, [sp, #20]
 80a37ba:	2b00      	cmp	r3, #0
 80a37bc:	f040 81d9 	bne.w	80a3b72 <_strtod_r+0xb6a>
 80a37c0:	e1eb      	b.n	80a3b9a <_strtod_r+0xb92>
 80a37c2:	2301      	movs	r3, #1
 80a37c4:	2500      	movs	r5, #0
 80a37c6:	9307      	str	r3, [sp, #28]
 80a37c8:	e788      	b.n	80a36dc <_strtod_r+0x6d4>
 80a37ca:	461a      	mov	r2, r3
 80a37cc:	9902      	ldr	r1, [sp, #8]
 80a37ce:	4650      	mov	r0, sl
 80a37d0:	f001 fa94 	bl	80a4cfc <__pow5mult>
 80a37d4:	9002      	str	r0, [sp, #8]
 80a37d6:	2800      	cmp	r0, #0
 80a37d8:	f43f ae5c 	beq.w	80a3494 <_strtod_r+0x48c>
 80a37dc:	4601      	mov	r1, r0
 80a37de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a37e0:	4650      	mov	r0, sl
 80a37e2:	f001 f9fa 	bl	80a4bda <__multiply>
 80a37e6:	9006      	str	r0, [sp, #24]
 80a37e8:	2800      	cmp	r0, #0
 80a37ea:	f43f ae53 	beq.w	80a3494 <_strtod_r+0x48c>
 80a37ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a37f0:	4650      	mov	r0, sl
 80a37f2:	f001 f90c 	bl	80a4a0e <_Bfree>
 80a37f6:	9b06      	ldr	r3, [sp, #24]
 80a37f8:	9318      	str	r3, [sp, #96]	; 0x60
 80a37fa:	e782      	b.n	80a3702 <_strtod_r+0x6fa>
 80a37fc:	463a      	mov	r2, r7
 80a37fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a3800:	4650      	mov	r0, sl
 80a3802:	f001 fac9 	bl	80a4d98 <__lshift>
 80a3806:	9018      	str	r0, [sp, #96]	; 0x60
 80a3808:	2800      	cmp	r0, #0
 80a380a:	f47f af7c 	bne.w	80a3706 <_strtod_r+0x6fe>
 80a380e:	e641      	b.n	80a3494 <_strtod_r+0x48c>
 80a3810:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80a3812:	9904      	ldr	r1, [sp, #16]
 80a3814:	4650      	mov	r0, sl
 80a3816:	f001 fa71 	bl	80a4cfc <__pow5mult>
 80a381a:	9004      	str	r0, [sp, #16]
 80a381c:	2800      	cmp	r0, #0
 80a381e:	f47f af76 	bne.w	80a370e <_strtod_r+0x706>
 80a3822:	e637      	b.n	80a3494 <_strtod_r+0x48c>
 80a3824:	4622      	mov	r2, r4
 80a3826:	9904      	ldr	r1, [sp, #16]
 80a3828:	4650      	mov	r0, sl
 80a382a:	f001 fab5 	bl	80a4d98 <__lshift>
 80a382e:	9004      	str	r0, [sp, #16]
 80a3830:	2800      	cmp	r0, #0
 80a3832:	f47f af6f 	bne.w	80a3714 <_strtod_r+0x70c>
 80a3836:	e62d      	b.n	80a3494 <_strtod_r+0x48c>
 80a3838:	4632      	mov	r2, r6
 80a383a:	9902      	ldr	r1, [sp, #8]
 80a383c:	4650      	mov	r0, sl
 80a383e:	f001 faab 	bl	80a4d98 <__lshift>
 80a3842:	9002      	str	r0, [sp, #8]
 80a3844:	2800      	cmp	r0, #0
 80a3846:	f47f af68 	bne.w	80a371a <_strtod_r+0x712>
 80a384a:	e623      	b.n	80a3494 <_strtod_r+0x48c>
 80a384c:	f8db 3010 	ldr.w	r3, [fp, #16]
 80a3850:	2b01      	cmp	r3, #1
 80a3852:	dc8e      	bgt.n	80a3772 <_strtod_r+0x76a>
 80a3854:	e17a      	b.n	80a3b4c <_strtod_r+0xb44>
 80a3856:	d161      	bne.n	80a391c <_strtod_r+0x914>
 80a3858:	9a06      	ldr	r2, [sp, #24]
 80a385a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a385e:	b322      	cbz	r2, 80a38aa <_strtod_r+0x8a2>
 80a3860:	4943      	ldr	r1, [pc, #268]	; (80a3970 <_strtod_r+0x968>)
 80a3862:	464a      	mov	r2, r9
 80a3864:	428b      	cmp	r3, r1
 80a3866:	d12e      	bne.n	80a38c6 <_strtod_r+0x8be>
 80a3868:	9b03      	ldr	r3, [sp, #12]
 80a386a:	4641      	mov	r1, r8
 80a386c:	b163      	cbz	r3, 80a3888 <_strtod_r+0x880>
 80a386e:	4b41      	ldr	r3, [pc, #260]	; (80a3974 <_strtod_r+0x96c>)
 80a3870:	4013      	ands	r3, r2
 80a3872:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a3876:	d807      	bhi.n	80a3888 <_strtod_r+0x880>
 80a3878:	0d1b      	lsrs	r3, r3, #20
 80a387a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a387e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3882:	fa00 f303 	lsl.w	r3, r0, r3
 80a3886:	e001      	b.n	80a388c <_strtod_r+0x884>
 80a3888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a388c:	428b      	cmp	r3, r1
 80a388e:	d11a      	bne.n	80a38c6 <_strtod_r+0x8be>
 80a3890:	4939      	ldr	r1, [pc, #228]	; (80a3978 <_strtod_r+0x970>)
 80a3892:	428a      	cmp	r2, r1
 80a3894:	d102      	bne.n	80a389c <_strtod_r+0x894>
 80a3896:	3301      	adds	r3, #1
 80a3898:	f43f adfc 	beq.w	80a3494 <_strtod_r+0x48c>
 80a389c:	4b35      	ldr	r3, [pc, #212]	; (80a3974 <_strtod_r+0x96c>)
 80a389e:	f04f 0800 	mov.w	r8, #0
 80a38a2:	4013      	ands	r3, r2
 80a38a4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80a38a8:	e150      	b.n	80a3b4c <_strtod_r+0xb44>
 80a38aa:	b963      	cbnz	r3, 80a38c6 <_strtod_r+0x8be>
 80a38ac:	f1b8 0f00 	cmp.w	r8, #0
 80a38b0:	d109      	bne.n	80a38c6 <_strtod_r+0x8be>
 80a38b2:	e76a      	b.n	80a378a <_strtod_r+0x782>
 80a38b4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80a38b8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80a38bc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a38c0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80a38c4:	e142      	b.n	80a3b4c <_strtod_r+0xb44>
 80a38c6:	b115      	cbz	r5, 80a38ce <_strtod_r+0x8c6>
 80a38c8:	ea15 0f09 	tst.w	r5, r9
 80a38cc:	e002      	b.n	80a38d4 <_strtod_r+0x8cc>
 80a38ce:	9b07      	ldr	r3, [sp, #28]
 80a38d0:	ea13 0f08 	tst.w	r3, r8
 80a38d4:	f000 813a 	beq.w	80a3b4c <_strtod_r+0xb44>
 80a38d8:	9b06      	ldr	r3, [sp, #24]
 80a38da:	9a03      	ldr	r2, [sp, #12]
 80a38dc:	4640      	mov	r0, r8
 80a38de:	4649      	mov	r1, r9
 80a38e0:	b153      	cbz	r3, 80a38f8 <_strtod_r+0x8f0>
 80a38e2:	f7ff fb6f 	bl	80a2fc4 <sulp>
 80a38e6:	4602      	mov	r2, r0
 80a38e8:	460b      	mov	r3, r1
 80a38ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a38ee:	f7fe fb5b 	bl	80a1fa8 <__adddf3>
 80a38f2:	4680      	mov	r8, r0
 80a38f4:	4689      	mov	r9, r1
 80a38f6:	e129      	b.n	80a3b4c <_strtod_r+0xb44>
 80a38f8:	f7ff fb64 	bl	80a2fc4 <sulp>
 80a38fc:	4602      	mov	r2, r0
 80a38fe:	460b      	mov	r3, r1
 80a3900:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a3904:	f7fe fb4e 	bl	80a1fa4 <__aeabi_dsub>
 80a3908:	2200      	movs	r2, #0
 80a390a:	2300      	movs	r3, #0
 80a390c:	4680      	mov	r8, r0
 80a390e:	4689      	mov	r9, r1
 80a3910:	f7fe ff64 	bl	80a27dc <__aeabi_dcmpeq>
 80a3914:	2800      	cmp	r0, #0
 80a3916:	f47f af48 	bne.w	80a37aa <_strtod_r+0x7a2>
 80a391a:	e117      	b.n	80a3b4c <_strtod_r+0xb44>
 80a391c:	9902      	ldr	r1, [sp, #8]
 80a391e:	4658      	mov	r0, fp
 80a3920:	f001 fbc5 	bl	80a50ae <__ratio>
 80a3924:	2200      	movs	r2, #0
 80a3926:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a392a:	4606      	mov	r6, r0
 80a392c:	460f      	mov	r7, r1
 80a392e:	f7fe ff69 	bl	80a2804 <__aeabi_dcmple>
 80a3932:	2800      	cmp	r0, #0
 80a3934:	d03f      	beq.n	80a39b6 <_strtod_r+0x9ae>
 80a3936:	9b06      	ldr	r3, [sp, #24]
 80a3938:	b113      	cbz	r3, 80a3940 <_strtod_r+0x938>
 80a393a:	2600      	movs	r6, #0
 80a393c:	4f0f      	ldr	r7, [pc, #60]	; (80a397c <_strtod_r+0x974>)
 80a393e:	e010      	b.n	80a3962 <_strtod_r+0x95a>
 80a3940:	f1b8 0f00 	cmp.w	r8, #0
 80a3944:	d103      	bne.n	80a394e <_strtod_r+0x946>
 80a3946:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a394a:	b93b      	cbnz	r3, 80a395c <_strtod_r+0x954>
 80a394c:	e01a      	b.n	80a3984 <_strtod_r+0x97c>
 80a394e:	f1b8 0f01 	cmp.w	r8, #1
 80a3952:	d103      	bne.n	80a395c <_strtod_r+0x954>
 80a3954:	f1b9 0f00 	cmp.w	r9, #0
 80a3958:	f43f af27 	beq.w	80a37aa <_strtod_r+0x7a2>
 80a395c:	4f08      	ldr	r7, [pc, #32]	; (80a3980 <_strtod_r+0x978>)
 80a395e:	2600      	movs	r6, #0
 80a3960:	2400      	movs	r4, #0
 80a3962:	4d06      	ldr	r5, [pc, #24]	; (80a397c <_strtod_r+0x974>)
 80a3964:	e03c      	b.n	80a39e0 <_strtod_r+0x9d8>
 80a3966:	bf00      	nop
 80a3968:	fffffc02 	.word	0xfffffc02
 80a396c:	fffffbe2 	.word	0xfffffbe2
 80a3970:	000fffff 	.word	0x000fffff
 80a3974:	7ff00000 	.word	0x7ff00000
 80a3978:	7fefffff 	.word	0x7fefffff
 80a397c:	3ff00000 	.word	0x3ff00000
 80a3980:	bff00000 	.word	0xbff00000
 80a3984:	2200      	movs	r2, #0
 80a3986:	4b9a      	ldr	r3, [pc, #616]	; (80a3bf0 <_strtod_r+0xbe8>)
 80a3988:	4630      	mov	r0, r6
 80a398a:	4639      	mov	r1, r7
 80a398c:	f7fe ff30 	bl	80a27f0 <__aeabi_dcmplt>
 80a3990:	b940      	cbnz	r0, 80a39a4 <_strtod_r+0x99c>
 80a3992:	2200      	movs	r2, #0
 80a3994:	4b97      	ldr	r3, [pc, #604]	; (80a3bf4 <_strtod_r+0xbec>)
 80a3996:	4630      	mov	r0, r6
 80a3998:	4639      	mov	r1, r7
 80a399a:	f7fe fcb7 	bl	80a230c <__aeabi_dmul>
 80a399e:	4604      	mov	r4, r0
 80a39a0:	460d      	mov	r5, r1
 80a39a2:	e001      	b.n	80a39a8 <_strtod_r+0x9a0>
 80a39a4:	9c06      	ldr	r4, [sp, #24]
 80a39a6:	4d93      	ldr	r5, [pc, #588]	; (80a3bf4 <_strtod_r+0xbec>)
 80a39a8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a39ac:	9414      	str	r4, [sp, #80]	; 0x50
 80a39ae:	9315      	str	r3, [sp, #84]	; 0x54
 80a39b0:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 80a39b4:	e014      	b.n	80a39e0 <_strtod_r+0x9d8>
 80a39b6:	4b8f      	ldr	r3, [pc, #572]	; (80a3bf4 <_strtod_r+0xbec>)
 80a39b8:	2200      	movs	r2, #0
 80a39ba:	4630      	mov	r0, r6
 80a39bc:	4639      	mov	r1, r7
 80a39be:	f7fe fca5 	bl	80a230c <__aeabi_dmul>
 80a39c2:	9b06      	ldr	r3, [sp, #24]
 80a39c4:	4604      	mov	r4, r0
 80a39c6:	460d      	mov	r5, r1
 80a39c8:	b923      	cbnz	r3, 80a39d4 <_strtod_r+0x9cc>
 80a39ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a39ce:	900e      	str	r0, [sp, #56]	; 0x38
 80a39d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80a39d2:	e003      	b.n	80a39dc <_strtod_r+0x9d4>
 80a39d4:	4602      	mov	r2, r0
 80a39d6:	460b      	mov	r3, r1
 80a39d8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80a39dc:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80a39e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a39e4:	0d1b      	lsrs	r3, r3, #20
 80a39e6:	051b      	lsls	r3, r3, #20
 80a39e8:	9307      	str	r3, [sp, #28]
 80a39ea:	9a07      	ldr	r2, [sp, #28]
 80a39ec:	4b82      	ldr	r3, [pc, #520]	; (80a3bf8 <_strtod_r+0xbf0>)
 80a39ee:	429a      	cmp	r2, r3
 80a39f0:	d12b      	bne.n	80a3a4a <_strtod_r+0xa42>
 80a39f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a39f6:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a39fa:	4640      	mov	r0, r8
 80a39fc:	4649      	mov	r1, r9
 80a39fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a3a02:	f001 fa95 	bl	80a4f30 <__ulp>
 80a3a06:	4602      	mov	r2, r0
 80a3a08:	460b      	mov	r3, r1
 80a3a0a:	4630      	mov	r0, r6
 80a3a0c:	4639      	mov	r1, r7
 80a3a0e:	f7fe fc7d 	bl	80a230c <__aeabi_dmul>
 80a3a12:	4642      	mov	r2, r8
 80a3a14:	464b      	mov	r3, r9
 80a3a16:	f7fe fac7 	bl	80a1fa8 <__adddf3>
 80a3a1a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a3a1e:	0d1b      	lsrs	r3, r3, #20
 80a3a20:	4a76      	ldr	r2, [pc, #472]	; (80a3bfc <_strtod_r+0xbf4>)
 80a3a22:	051b      	lsls	r3, r3, #20
 80a3a24:	4293      	cmp	r3, r2
 80a3a26:	4680      	mov	r8, r0
 80a3a28:	d90c      	bls.n	80a3a44 <_strtod_r+0xa3c>
 80a3a2a:	4b75      	ldr	r3, [pc, #468]	; (80a3c00 <_strtod_r+0xbf8>)
 80a3a2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a3a2e:	429a      	cmp	r2, r3
 80a3a30:	d103      	bne.n	80a3a3a <_strtod_r+0xa32>
 80a3a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3a34:	3301      	adds	r3, #1
 80a3a36:	f43f ad2d 	beq.w	80a3494 <_strtod_r+0x48c>
 80a3a3a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80a3c00 <_strtod_r+0xbf8>
 80a3a3e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a3a42:	e072      	b.n	80a3b2a <_strtod_r+0xb22>
 80a3a44:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80a3a48:	e039      	b.n	80a3abe <_strtod_r+0xab6>
 80a3a4a:	9b03      	ldr	r3, [sp, #12]
 80a3a4c:	b33b      	cbz	r3, 80a3a9e <_strtod_r+0xa96>
 80a3a4e:	9b07      	ldr	r3, [sp, #28]
 80a3a50:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a3a54:	d823      	bhi.n	80a3a9e <_strtod_r+0xa96>
 80a3a56:	a35e      	add	r3, pc, #376	; (adr r3, 80a3bd0 <_strtod_r+0xbc8>)
 80a3a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a5c:	4620      	mov	r0, r4
 80a3a5e:	4629      	mov	r1, r5
 80a3a60:	f7fe fed0 	bl	80a2804 <__aeabi_dcmple>
 80a3a64:	b1b8      	cbz	r0, 80a3a96 <_strtod_r+0xa8e>
 80a3a66:	4629      	mov	r1, r5
 80a3a68:	4620      	mov	r0, r4
 80a3a6a:	f7fe ff27 	bl	80a28bc <__aeabi_d2uiz>
 80a3a6e:	2800      	cmp	r0, #0
 80a3a70:	bf08      	it	eq
 80a3a72:	2001      	moveq	r0, #1
 80a3a74:	f7fe fbd4 	bl	80a2220 <__aeabi_ui2d>
 80a3a78:	9b06      	ldr	r3, [sp, #24]
 80a3a7a:	4604      	mov	r4, r0
 80a3a7c:	460d      	mov	r5, r1
 80a3a7e:	b923      	cbnz	r3, 80a3a8a <_strtod_r+0xa82>
 80a3a80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a3a84:	9010      	str	r0, [sp, #64]	; 0x40
 80a3a86:	9311      	str	r3, [sp, #68]	; 0x44
 80a3a88:	e003      	b.n	80a3a92 <_strtod_r+0xa8a>
 80a3a8a:	4602      	mov	r2, r0
 80a3a8c:	460b      	mov	r3, r1
 80a3a8e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a3a92:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80a3a96:	9a07      	ldr	r2, [sp, #28]
 80a3a98:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80a3a9c:	1a9f      	subs	r7, r3, r2
 80a3a9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a3aa2:	f001 fa45 	bl	80a4f30 <__ulp>
 80a3aa6:	4602      	mov	r2, r0
 80a3aa8:	460b      	mov	r3, r1
 80a3aaa:	4630      	mov	r0, r6
 80a3aac:	4639      	mov	r1, r7
 80a3aae:	f7fe fc2d 	bl	80a230c <__aeabi_dmul>
 80a3ab2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3ab6:	f7fe fa77 	bl	80a1fa8 <__adddf3>
 80a3aba:	4680      	mov	r8, r0
 80a3abc:	4689      	mov	r9, r1
 80a3abe:	9b03      	ldr	r3, [sp, #12]
 80a3ac0:	bb9b      	cbnz	r3, 80a3b2a <_strtod_r+0xb22>
 80a3ac2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a3ac6:	0d1b      	lsrs	r3, r3, #20
 80a3ac8:	9a07      	ldr	r2, [sp, #28]
 80a3aca:	051b      	lsls	r3, r3, #20
 80a3acc:	429a      	cmp	r2, r3
 80a3ace:	464e      	mov	r6, r9
 80a3ad0:	d12b      	bne.n	80a3b2a <_strtod_r+0xb22>
 80a3ad2:	4629      	mov	r1, r5
 80a3ad4:	4620      	mov	r0, r4
 80a3ad6:	f7fe fec9 	bl	80a286c <__aeabi_d2iz>
 80a3ada:	f7fe fbb1 	bl	80a2240 <__aeabi_i2d>
 80a3ade:	460b      	mov	r3, r1
 80a3ae0:	4602      	mov	r2, r0
 80a3ae2:	4629      	mov	r1, r5
 80a3ae4:	4620      	mov	r0, r4
 80a3ae6:	f7fe fa5d 	bl	80a1fa4 <__aeabi_dsub>
 80a3aea:	9b06      	ldr	r3, [sp, #24]
 80a3aec:	4604      	mov	r4, r0
 80a3aee:	460d      	mov	r5, r1
 80a3af0:	b92b      	cbnz	r3, 80a3afe <_strtod_r+0xaf6>
 80a3af2:	f1b8 0f00 	cmp.w	r8, #0
 80a3af6:	d102      	bne.n	80a3afe <_strtod_r+0xaf6>
 80a3af8:	f3c9 0613 	ubfx	r6, r9, #0, #20
 80a3afc:	b17e      	cbz	r6, 80a3b1e <_strtod_r+0xb16>
 80a3afe:	a336      	add	r3, pc, #216	; (adr r3, 80a3bd8 <_strtod_r+0xbd0>)
 80a3b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b04:	4620      	mov	r0, r4
 80a3b06:	4629      	mov	r1, r5
 80a3b08:	f7fe fe72 	bl	80a27f0 <__aeabi_dcmplt>
 80a3b0c:	bb88      	cbnz	r0, 80a3b72 <_strtod_r+0xb6a>
 80a3b0e:	a334      	add	r3, pc, #208	; (adr r3, 80a3be0 <_strtod_r+0xbd8>)
 80a3b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b14:	4620      	mov	r0, r4
 80a3b16:	4629      	mov	r1, r5
 80a3b18:	f7fe fe88 	bl	80a282c <__aeabi_dcmpgt>
 80a3b1c:	e004      	b.n	80a3b28 <_strtod_r+0xb20>
 80a3b1e:	a332      	add	r3, pc, #200	; (adr r3, 80a3be8 <_strtod_r+0xbe0>)
 80a3b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b24:	f7fe fe64 	bl	80a27f0 <__aeabi_dcmplt>
 80a3b28:	bb18      	cbnz	r0, 80a3b72 <_strtod_r+0xb6a>
 80a3b2a:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a3b2c:	4650      	mov	r0, sl
 80a3b2e:	f000 ff6e 	bl	80a4a0e <_Bfree>
 80a3b32:	9904      	ldr	r1, [sp, #16]
 80a3b34:	4650      	mov	r0, sl
 80a3b36:	f000 ff6a 	bl	80a4a0e <_Bfree>
 80a3b3a:	9902      	ldr	r1, [sp, #8]
 80a3b3c:	4650      	mov	r0, sl
 80a3b3e:	f000 ff66 	bl	80a4a0e <_Bfree>
 80a3b42:	4659      	mov	r1, fp
 80a3b44:	4650      	mov	r0, sl
 80a3b46:	f000 ff62 	bl	80a4a0e <_Bfree>
 80a3b4a:	e574      	b.n	80a3636 <_strtod_r+0x62e>
 80a3b4c:	9b03      	ldr	r3, [sp, #12]
 80a3b4e:	b183      	cbz	r3, 80a3b72 <_strtod_r+0xb6a>
 80a3b50:	4b2c      	ldr	r3, [pc, #176]	; (80a3c04 <_strtod_r+0xbfc>)
 80a3b52:	4640      	mov	r0, r8
 80a3b54:	930b      	str	r3, [sp, #44]	; 0x2c
 80a3b56:	2300      	movs	r3, #0
 80a3b58:	930a      	str	r3, [sp, #40]	; 0x28
 80a3b5a:	4649      	mov	r1, r9
 80a3b5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a3b60:	f7fe fbd4 	bl	80a230c <__aeabi_dmul>
 80a3b64:	4680      	mov	r8, r0
 80a3b66:	4689      	mov	r9, r1
 80a3b68:	b919      	cbnz	r1, 80a3b72 <_strtod_r+0xb6a>
 80a3b6a:	b910      	cbnz	r0, 80a3b72 <_strtod_r+0xb6a>
 80a3b6c:	2322      	movs	r3, #34	; 0x22
 80a3b6e:	f8ca 3000 	str.w	r3, [sl]
 80a3b72:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a3b74:	4650      	mov	r0, sl
 80a3b76:	f000 ff4a 	bl	80a4a0e <_Bfree>
 80a3b7a:	9904      	ldr	r1, [sp, #16]
 80a3b7c:	4650      	mov	r0, sl
 80a3b7e:	f000 ff46 	bl	80a4a0e <_Bfree>
 80a3b82:	9902      	ldr	r1, [sp, #8]
 80a3b84:	4650      	mov	r0, sl
 80a3b86:	f000 ff42 	bl	80a4a0e <_Bfree>
 80a3b8a:	9905      	ldr	r1, [sp, #20]
 80a3b8c:	4650      	mov	r0, sl
 80a3b8e:	f000 ff3e 	bl	80a4a0e <_Bfree>
 80a3b92:	4659      	mov	r1, fp
 80a3b94:	4650      	mov	r0, sl
 80a3b96:	f000 ff3a 	bl	80a4a0e <_Bfree>
 80a3b9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a3b9c:	b113      	cbz	r3, 80a3ba4 <_strtod_r+0xb9c>
 80a3b9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a3ba0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80a3ba2:	6013      	str	r3, [r2, #0]
 80a3ba4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a3ba6:	b11b      	cbz	r3, 80a3bb0 <_strtod_r+0xba8>
 80a3ba8:	4642      	mov	r2, r8
 80a3baa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a3bae:	e007      	b.n	80a3bc0 <_strtod_r+0xbb8>
 80a3bb0:	4642      	mov	r2, r8
 80a3bb2:	464b      	mov	r3, r9
 80a3bb4:	e004      	b.n	80a3bc0 <_strtod_r+0xbb8>
 80a3bb6:	2500      	movs	r5, #0
 80a3bb8:	462a      	mov	r2, r5
 80a3bba:	2101      	movs	r1, #1
 80a3bbc:	f7ff bb47 	b.w	80a324e <_strtod_r+0x246>
 80a3bc0:	4610      	mov	r0, r2
 80a3bc2:	4619      	mov	r1, r3
 80a3bc4:	b01d      	add	sp, #116	; 0x74
 80a3bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3bca:	bf00      	nop
 80a3bcc:	f3af 8000 	nop.w
 80a3bd0:	ffc00000 	.word	0xffc00000
 80a3bd4:	41dfffff 	.word	0x41dfffff
 80a3bd8:	94a03595 	.word	0x94a03595
 80a3bdc:	3fdfffff 	.word	0x3fdfffff
 80a3be0:	35afe535 	.word	0x35afe535
 80a3be4:	3fe00000 	.word	0x3fe00000
 80a3be8:	94a03595 	.word	0x94a03595
 80a3bec:	3fcfffff 	.word	0x3fcfffff
 80a3bf0:	3ff00000 	.word	0x3ff00000
 80a3bf4:	3fe00000 	.word	0x3fe00000
 80a3bf8:	7fe00000 	.word	0x7fe00000
 80a3bfc:	7c9fffff 	.word	0x7c9fffff
 80a3c00:	7fefffff 	.word	0x7fefffff
 80a3c04:	39500000 	.word	0x39500000

080a3c08 <strtof>:
 80a3c08:	b538      	push	{r3, r4, r5, lr}
 80a3c0a:	4b0b      	ldr	r3, [pc, #44]	; (80a3c38 <strtof+0x30>)
 80a3c0c:	460a      	mov	r2, r1
 80a3c0e:	4601      	mov	r1, r0
 80a3c10:	6818      	ldr	r0, [r3, #0]
 80a3c12:	f7ff f9f9 	bl	80a3008 <_strtod_r>
 80a3c16:	4602      	mov	r2, r0
 80a3c18:	460b      	mov	r3, r1
 80a3c1a:	4604      	mov	r4, r0
 80a3c1c:	460d      	mov	r5, r1
 80a3c1e:	f7fe fe0f 	bl	80a2840 <__aeabi_dcmpun>
 80a3c22:	b120      	cbz	r0, 80a3c2e <strtof+0x26>
 80a3c24:	2000      	movs	r0, #0
 80a3c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a3c2a:	f001 bab3 	b.w	80a5194 <nanf>
 80a3c2e:	4620      	mov	r0, r4
 80a3c30:	4629      	mov	r1, r5
 80a3c32:	f7fe fe63 	bl	80a28fc <__aeabi_d2f>
 80a3c36:	bd38      	pop	{r3, r4, r5, pc}
 80a3c38:	2000008c 	.word	0x2000008c

080a3c3c <_strtoul_r>:
 80a3c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3c40:	460e      	mov	r6, r1
 80a3c42:	4680      	mov	r8, r0
 80a3c44:	483b      	ldr	r0, [pc, #236]	; (80a3d34 <_strtoul_r+0xf8>)
 80a3c46:	f8d0 9000 	ldr.w	r9, [r0]
 80a3c4a:	4635      	mov	r5, r6
 80a3c4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a3c50:	eb09 0004 	add.w	r0, r9, r4
 80a3c54:	7840      	ldrb	r0, [r0, #1]
 80a3c56:	f000 0008 	and.w	r0, r0, #8
 80a3c5a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a3c5e:	b108      	cbz	r0, 80a3c64 <_strtoul_r+0x28>
 80a3c60:	462e      	mov	r6, r5
 80a3c62:	e7f2      	b.n	80a3c4a <_strtoul_r+0xe>
 80a3c64:	2c2d      	cmp	r4, #45	; 0x2d
 80a3c66:	d103      	bne.n	80a3c70 <_strtoul_r+0x34>
 80a3c68:	1cb5      	adds	r5, r6, #2
 80a3c6a:	7874      	ldrb	r4, [r6, #1]
 80a3c6c:	2701      	movs	r7, #1
 80a3c6e:	e003      	b.n	80a3c78 <_strtoul_r+0x3c>
 80a3c70:	2c2b      	cmp	r4, #43	; 0x2b
 80a3c72:	bf04      	itt	eq
 80a3c74:	7874      	ldrbeq	r4, [r6, #1]
 80a3c76:	1cb5      	addeq	r5, r6, #2
 80a3c78:	b113      	cbz	r3, 80a3c80 <_strtoul_r+0x44>
 80a3c7a:	2b10      	cmp	r3, #16
 80a3c7c:	d10a      	bne.n	80a3c94 <_strtoul_r+0x58>
 80a3c7e:	e053      	b.n	80a3d28 <_strtoul_r+0xec>
 80a3c80:	2c30      	cmp	r4, #48	; 0x30
 80a3c82:	d14f      	bne.n	80a3d24 <_strtoul_r+0xe8>
 80a3c84:	7828      	ldrb	r0, [r5, #0]
 80a3c86:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a3c8a:	2858      	cmp	r0, #88	; 0x58
 80a3c8c:	d145      	bne.n	80a3d1a <_strtoul_r+0xde>
 80a3c8e:	786c      	ldrb	r4, [r5, #1]
 80a3c90:	2310      	movs	r3, #16
 80a3c92:	3502      	adds	r5, #2
 80a3c94:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a3c98:	fbbc fcf3 	udiv	ip, ip, r3
 80a3c9c:	fb03 fa0c 	mul.w	sl, r3, ip
 80a3ca0:	2600      	movs	r6, #0
 80a3ca2:	ea6f 0a0a 	mvn.w	sl, sl
 80a3ca6:	4630      	mov	r0, r6
 80a3ca8:	eb09 0e04 	add.w	lr, r9, r4
 80a3cac:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a3cb0:	f01e 0f04 	tst.w	lr, #4
 80a3cb4:	d001      	beq.n	80a3cba <_strtoul_r+0x7e>
 80a3cb6:	3c30      	subs	r4, #48	; 0x30
 80a3cb8:	e00b      	b.n	80a3cd2 <_strtoul_r+0x96>
 80a3cba:	f01e 0e03 	ands.w	lr, lr, #3
 80a3cbe:	d01a      	beq.n	80a3cf6 <_strtoul_r+0xba>
 80a3cc0:	f1be 0f01 	cmp.w	lr, #1
 80a3cc4:	bf0c      	ite	eq
 80a3cc6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a3cca:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a3cce:	ebce 0404 	rsb	r4, lr, r4
 80a3cd2:	42a3      	cmp	r3, r4
 80a3cd4:	dd0f      	ble.n	80a3cf6 <_strtoul_r+0xba>
 80a3cd6:	2e00      	cmp	r6, #0
 80a3cd8:	db08      	blt.n	80a3cec <_strtoul_r+0xb0>
 80a3cda:	4560      	cmp	r0, ip
 80a3cdc:	d806      	bhi.n	80a3cec <_strtoul_r+0xb0>
 80a3cde:	d101      	bne.n	80a3ce4 <_strtoul_r+0xa8>
 80a3ce0:	4554      	cmp	r4, sl
 80a3ce2:	dc03      	bgt.n	80a3cec <_strtoul_r+0xb0>
 80a3ce4:	fb03 4000 	mla	r0, r3, r0, r4
 80a3ce8:	2601      	movs	r6, #1
 80a3cea:	e001      	b.n	80a3cf0 <_strtoul_r+0xb4>
 80a3cec:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a3cf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a3cf4:	e7d8      	b.n	80a3ca8 <_strtoul_r+0x6c>
 80a3cf6:	2e00      	cmp	r6, #0
 80a3cf8:	da07      	bge.n	80a3d0a <_strtoul_r+0xce>
 80a3cfa:	2322      	movs	r3, #34	; 0x22
 80a3cfc:	f8c8 3000 	str.w	r3, [r8]
 80a3d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3d04:	b92a      	cbnz	r2, 80a3d12 <_strtoul_r+0xd6>
 80a3d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3d0a:	b107      	cbz	r7, 80a3d0e <_strtoul_r+0xd2>
 80a3d0c:	4240      	negs	r0, r0
 80a3d0e:	b172      	cbz	r2, 80a3d2e <_strtoul_r+0xf2>
 80a3d10:	b106      	cbz	r6, 80a3d14 <_strtoul_r+0xd8>
 80a3d12:	1e69      	subs	r1, r5, #1
 80a3d14:	6011      	str	r1, [r2, #0]
 80a3d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3d1a:	2430      	movs	r4, #48	; 0x30
 80a3d1c:	2b00      	cmp	r3, #0
 80a3d1e:	d1b9      	bne.n	80a3c94 <_strtoul_r+0x58>
 80a3d20:	2308      	movs	r3, #8
 80a3d22:	e7b7      	b.n	80a3c94 <_strtoul_r+0x58>
 80a3d24:	230a      	movs	r3, #10
 80a3d26:	e7b5      	b.n	80a3c94 <_strtoul_r+0x58>
 80a3d28:	2c30      	cmp	r4, #48	; 0x30
 80a3d2a:	d0ab      	beq.n	80a3c84 <_strtoul_r+0x48>
 80a3d2c:	e7b2      	b.n	80a3c94 <_strtoul_r+0x58>
 80a3d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3d32:	bf00      	nop
 80a3d34:	20000028 	.word	0x20000028

080a3d38 <strtoul>:
 80a3d38:	4613      	mov	r3, r2
 80a3d3a:	460a      	mov	r2, r1
 80a3d3c:	4601      	mov	r1, r0
 80a3d3e:	4802      	ldr	r0, [pc, #8]	; (80a3d48 <strtoul+0x10>)
 80a3d40:	6800      	ldr	r0, [r0, #0]
 80a3d42:	f7ff bf7b 	b.w	80a3c3c <_strtoul_r>
 80a3d46:	bf00      	nop
 80a3d48:	2000008c 	.word	0x2000008c

080a3d4c <__tzcalc_limits>:
 80a3d4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3d50:	4604      	mov	r4, r0
 80a3d52:	f000 fd8d 	bl	80a4870 <__gettzinfo>
 80a3d56:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a3d5a:	429c      	cmp	r4, r3
 80a3d5c:	f340 8096 	ble.w	80a3e8c <__tzcalc_limits+0x140>
 80a3d60:	f240 156d 	movw	r5, #365	; 0x16d
 80a3d64:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a3d68:	18e3      	adds	r3, r4, r3
 80a3d6a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a3d6e:	109b      	asrs	r3, r3, #2
 80a3d70:	fb05 3502 	mla	r5, r5, r2, r3
 80a3d74:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a3d78:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a3d7c:	fb92 f3f3 	sdiv	r3, r2, r3
 80a3d80:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a3d84:	442b      	add	r3, r5
 80a3d86:	18a5      	adds	r5, r4, r2
 80a3d88:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a3d8c:	fb94 f7f2 	sdiv	r7, r4, r2
 80a3d90:	fb95 f5f2 	sdiv	r5, r5, r2
 80a3d94:	fb02 4717 	mls	r7, r2, r7, r4
 80a3d98:	441d      	add	r5, r3
 80a3d9a:	2364      	movs	r3, #100	; 0x64
 80a3d9c:	fb94 f6f3 	sdiv	r6, r4, r3
 80a3da0:	fab7 fe87 	clz	lr, r7
 80a3da4:	4601      	mov	r1, r0
 80a3da6:	fb03 4616 	mls	r6, r3, r6, r4
 80a3daa:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a3dae:	9301      	str	r3, [sp, #4]
 80a3db0:	f004 0303 	and.w	r3, r4, #3
 80a3db4:	6044      	str	r4, [r0, #4]
 80a3db6:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a3dba:	9300      	str	r3, [sp, #0]
 80a3dbc:	f04f 0c07 	mov.w	ip, #7
 80a3dc0:	7a0b      	ldrb	r3, [r1, #8]
 80a3dc2:	2b4a      	cmp	r3, #74	; 0x4a
 80a3dc4:	d10e      	bne.n	80a3de4 <__tzcalc_limits+0x98>
 80a3dc6:	694b      	ldr	r3, [r1, #20]
 80a3dc8:	9a00      	ldr	r2, [sp, #0]
 80a3dca:	18ec      	adds	r4, r5, r3
 80a3dcc:	b902      	cbnz	r2, 80a3dd0 <__tzcalc_limits+0x84>
 80a3dce:	b906      	cbnz	r6, 80a3dd2 <__tzcalc_limits+0x86>
 80a3dd0:	b927      	cbnz	r7, 80a3ddc <__tzcalc_limits+0x90>
 80a3dd2:	2b3b      	cmp	r3, #59	; 0x3b
 80a3dd4:	bfd4      	ite	le
 80a3dd6:	2300      	movle	r3, #0
 80a3dd8:	2301      	movgt	r3, #1
 80a3dda:	e000      	b.n	80a3dde <__tzcalc_limits+0x92>
 80a3ddc:	2300      	movs	r3, #0
 80a3dde:	4423      	add	r3, r4
 80a3de0:	3b01      	subs	r3, #1
 80a3de2:	e03f      	b.n	80a3e64 <__tzcalc_limits+0x118>
 80a3de4:	2b44      	cmp	r3, #68	; 0x44
 80a3de6:	d102      	bne.n	80a3dee <__tzcalc_limits+0xa2>
 80a3de8:	694b      	ldr	r3, [r1, #20]
 80a3dea:	442b      	add	r3, r5
 80a3dec:	e03a      	b.n	80a3e64 <__tzcalc_limits+0x118>
 80a3dee:	9b00      	ldr	r3, [sp, #0]
 80a3df0:	b92b      	cbnz	r3, 80a3dfe <__tzcalc_limits+0xb2>
 80a3df2:	2e00      	cmp	r6, #0
 80a3df4:	bf0c      	ite	eq
 80a3df6:	46f0      	moveq	r8, lr
 80a3df8:	f04f 0801 	movne.w	r8, #1
 80a3dfc:	e000      	b.n	80a3e00 <__tzcalc_limits+0xb4>
 80a3dfe:	46f0      	mov	r8, lr
 80a3e00:	46a9      	mov	r9, r5
 80a3e02:	4b24      	ldr	r3, [pc, #144]	; (80a3e94 <__tzcalc_limits+0x148>)
 80a3e04:	2230      	movs	r2, #48	; 0x30
 80a3e06:	fb02 3808 	mla	r8, r2, r8, r3
 80a3e0a:	68cc      	ldr	r4, [r1, #12]
 80a3e0c:	f1a8 0a04 	sub.w	sl, r8, #4
 80a3e10:	2301      	movs	r3, #1
 80a3e12:	42a3      	cmp	r3, r4
 80a3e14:	da04      	bge.n	80a3e20 <__tzcalc_limits+0xd4>
 80a3e16:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a3e1a:	3301      	adds	r3, #1
 80a3e1c:	44d9      	add	r9, fp
 80a3e1e:	e7f8      	b.n	80a3e12 <__tzcalc_limits+0xc6>
 80a3e20:	f109 0304 	add.w	r3, r9, #4
 80a3e24:	fb93 fbfc 	sdiv	fp, r3, ip
 80a3e28:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a3e2c:	ebca 0a03 	rsb	sl, sl, r3
 80a3e30:	694b      	ldr	r3, [r1, #20]
 80a3e32:	2c01      	cmp	r4, #1
 80a3e34:	bfb8      	it	lt
 80a3e36:	2401      	movlt	r4, #1
 80a3e38:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a3e3c:	690b      	ldr	r3, [r1, #16]
 80a3e3e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a3e42:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80a3e46:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80a3e4a:	bf48      	it	mi
 80a3e4c:	f10a 0a07 	addmi.w	sl, sl, #7
 80a3e50:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3e54:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a3e58:	4453      	add	r3, sl
 80a3e5a:	42a3      	cmp	r3, r4
 80a3e5c:	db01      	blt.n	80a3e62 <__tzcalc_limits+0x116>
 80a3e5e:	3b07      	subs	r3, #7
 80a3e60:	e7fb      	b.n	80a3e5a <__tzcalc_limits+0x10e>
 80a3e62:	444b      	add	r3, r9
 80a3e64:	698c      	ldr	r4, [r1, #24]
 80a3e66:	4a0c      	ldr	r2, [pc, #48]	; (80a3e98 <__tzcalc_limits+0x14c>)
 80a3e68:	fb02 4303 	mla	r3, r2, r3, r4
 80a3e6c:	6a0c      	ldr	r4, [r1, #32]
 80a3e6e:	4423      	add	r3, r4
 80a3e70:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a3e74:	9b01      	ldr	r3, [sp, #4]
 80a3e76:	4299      	cmp	r1, r3
 80a3e78:	d1a2      	bne.n	80a3dc0 <__tzcalc_limits+0x74>
 80a3e7a:	69c3      	ldr	r3, [r0, #28]
 80a3e7c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a3e7e:	4293      	cmp	r3, r2
 80a3e80:	bfac      	ite	ge
 80a3e82:	2300      	movge	r3, #0
 80a3e84:	2301      	movlt	r3, #1
 80a3e86:	6003      	str	r3, [r0, #0]
 80a3e88:	2001      	movs	r0, #1
 80a3e8a:	e000      	b.n	80a3e8e <__tzcalc_limits+0x142>
 80a3e8c:	2000      	movs	r0, #0
 80a3e8e:	b003      	add	sp, #12
 80a3e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3e94:	080a5608 	.word	0x080a5608
 80a3e98:	00015180 	.word	0x00015180

080a3e9c <__tz_lock>:
 80a3e9c:	4770      	bx	lr

080a3e9e <__tz_unlock>:
 80a3e9e:	4770      	bx	lr

080a3ea0 <_tzset_unlocked>:
 80a3ea0:	4b01      	ldr	r3, [pc, #4]	; (80a3ea8 <_tzset_unlocked+0x8>)
 80a3ea2:	6818      	ldr	r0, [r3, #0]
 80a3ea4:	f000 b802 	b.w	80a3eac <_tzset_unlocked_r>
 80a3ea8:	2000008c 	.word	0x2000008c

080a3eac <_tzset_unlocked_r>:
 80a3eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3eb0:	b08d      	sub	sp, #52	; 0x34
 80a3eb2:	4607      	mov	r7, r0
 80a3eb4:	f000 fcdc 	bl	80a4870 <__gettzinfo>
 80a3eb8:	49b0      	ldr	r1, [pc, #704]	; (80a417c <_tzset_unlocked_r+0x2d0>)
 80a3eba:	4604      	mov	r4, r0
 80a3ebc:	4638      	mov	r0, r7
 80a3ebe:	f000 fccf 	bl	80a4860 <_getenv_r>
 80a3ec2:	4eaf      	ldr	r6, [pc, #700]	; (80a4180 <_tzset_unlocked_r+0x2d4>)
 80a3ec4:	4605      	mov	r5, r0
 80a3ec6:	b960      	cbnz	r0, 80a3ee2 <_tzset_unlocked_r+0x36>
 80a3ec8:	4bae      	ldr	r3, [pc, #696]	; (80a4184 <_tzset_unlocked_r+0x2d8>)
 80a3eca:	4aaf      	ldr	r2, [pc, #700]	; (80a4188 <_tzset_unlocked_r+0x2dc>)
 80a3ecc:	6018      	str	r0, [r3, #0]
 80a3ece:	4baf      	ldr	r3, [pc, #700]	; (80a418c <_tzset_unlocked_r+0x2e0>)
 80a3ed0:	6018      	str	r0, [r3, #0]
 80a3ed2:	4baf      	ldr	r3, [pc, #700]	; (80a4190 <_tzset_unlocked_r+0x2e4>)
 80a3ed4:	6830      	ldr	r0, [r6, #0]
 80a3ed6:	601a      	str	r2, [r3, #0]
 80a3ed8:	605a      	str	r2, [r3, #4]
 80a3eda:	f7fc fdaf 	bl	80a0a3c <free>
 80a3ede:	6035      	str	r5, [r6, #0]
 80a3ee0:	e148      	b.n	80a4174 <_tzset_unlocked_r+0x2c8>
 80a3ee2:	6831      	ldr	r1, [r6, #0]
 80a3ee4:	b979      	cbnz	r1, 80a3f06 <_tzset_unlocked_r+0x5a>
 80a3ee6:	6830      	ldr	r0, [r6, #0]
 80a3ee8:	f7fc fda8 	bl	80a0a3c <free>
 80a3eec:	4628      	mov	r0, r5
 80a3eee:	f7ff f84c 	bl	80a2f8a <strlen>
 80a3ef2:	1c41      	adds	r1, r0, #1
 80a3ef4:	4638      	mov	r0, r7
 80a3ef6:	f7fc fdc9 	bl	80a0a8c <_malloc_r>
 80a3efa:	6030      	str	r0, [r6, #0]
 80a3efc:	b148      	cbz	r0, 80a3f12 <_tzset_unlocked_r+0x66>
 80a3efe:	4629      	mov	r1, r5
 80a3f00:	f7ff f820 	bl	80a2f44 <strcpy>
 80a3f04:	e005      	b.n	80a3f12 <_tzset_unlocked_r+0x66>
 80a3f06:	f7ff f813 	bl	80a2f30 <strcmp>
 80a3f0a:	2800      	cmp	r0, #0
 80a3f0c:	f000 8132 	beq.w	80a4174 <_tzset_unlocked_r+0x2c8>
 80a3f10:	e7e9      	b.n	80a3ee6 <_tzset_unlocked_r+0x3a>
 80a3f12:	782b      	ldrb	r3, [r5, #0]
 80a3f14:	ae0a      	add	r6, sp, #40	; 0x28
 80a3f16:	2b3a      	cmp	r3, #58	; 0x3a
 80a3f18:	bf08      	it	eq
 80a3f1a:	3501      	addeq	r5, #1
 80a3f1c:	4633      	mov	r3, r6
 80a3f1e:	4a9d      	ldr	r2, [pc, #628]	; (80a4194 <_tzset_unlocked_r+0x2e8>)
 80a3f20:	499d      	ldr	r1, [pc, #628]	; (80a4198 <_tzset_unlocked_r+0x2ec>)
 80a3f22:	4628      	mov	r0, r5
 80a3f24:	f7fc fd9a 	bl	80a0a5c <siscanf>
 80a3f28:	2800      	cmp	r0, #0
 80a3f2a:	f340 8123 	ble.w	80a4174 <_tzset_unlocked_r+0x2c8>
 80a3f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3f30:	18ef      	adds	r7, r5, r3
 80a3f32:	5ceb      	ldrb	r3, [r5, r3]
 80a3f34:	2b2d      	cmp	r3, #45	; 0x2d
 80a3f36:	d103      	bne.n	80a3f40 <_tzset_unlocked_r+0x94>
 80a3f38:	3701      	adds	r7, #1
 80a3f3a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a3f3e:	e003      	b.n	80a3f48 <_tzset_unlocked_r+0x9c>
 80a3f40:	2b2b      	cmp	r3, #43	; 0x2b
 80a3f42:	bf08      	it	eq
 80a3f44:	3701      	addeq	r7, #1
 80a3f46:	2501      	movs	r5, #1
 80a3f48:	f10d 0a20 	add.w	sl, sp, #32
 80a3f4c:	f10d 0b1e 	add.w	fp, sp, #30
 80a3f50:	f04f 0800 	mov.w	r8, #0
 80a3f54:	9603      	str	r6, [sp, #12]
 80a3f56:	f8cd a008 	str.w	sl, [sp, #8]
 80a3f5a:	9601      	str	r6, [sp, #4]
 80a3f5c:	f8cd b000 	str.w	fp, [sp]
 80a3f60:	4633      	mov	r3, r6
 80a3f62:	aa07      	add	r2, sp, #28
 80a3f64:	498d      	ldr	r1, [pc, #564]	; (80a419c <_tzset_unlocked_r+0x2f0>)
 80a3f66:	4638      	mov	r0, r7
 80a3f68:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a3f6c:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a3f70:	f7fc fd74 	bl	80a0a5c <siscanf>
 80a3f74:	4540      	cmp	r0, r8
 80a3f76:	f340 80fd 	ble.w	80a4174 <_tzset_unlocked_r+0x2c8>
 80a3f7a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a3f7e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a3f82:	213c      	movs	r1, #60	; 0x3c
 80a3f84:	fb01 3302 	mla	r3, r1, r2, r3
 80a3f88:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a3f8c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a3f90:	fb01 3302 	mla	r3, r1, r2, r3
 80a3f94:	435d      	muls	r5, r3
 80a3f96:	4b7f      	ldr	r3, [pc, #508]	; (80a4194 <_tzset_unlocked_r+0x2e8>)
 80a3f98:	6225      	str	r5, [r4, #32]
 80a3f9a:	4d7d      	ldr	r5, [pc, #500]	; (80a4190 <_tzset_unlocked_r+0x2e4>)
 80a3f9c:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a41a8 <_tzset_unlocked_r+0x2fc>
 80a3fa0:	602b      	str	r3, [r5, #0]
 80a3fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3fa4:	464a      	mov	r2, r9
 80a3fa6:	441f      	add	r7, r3
 80a3fa8:	497b      	ldr	r1, [pc, #492]	; (80a4198 <_tzset_unlocked_r+0x2ec>)
 80a3faa:	4633      	mov	r3, r6
 80a3fac:	4638      	mov	r0, r7
 80a3fae:	f7fc fd55 	bl	80a0a5c <siscanf>
 80a3fb2:	4540      	cmp	r0, r8
 80a3fb4:	dc08      	bgt.n	80a3fc8 <_tzset_unlocked_r+0x11c>
 80a3fb6:	682b      	ldr	r3, [r5, #0]
 80a3fb8:	6a22      	ldr	r2, [r4, #32]
 80a3fba:	606b      	str	r3, [r5, #4]
 80a3fbc:	4b71      	ldr	r3, [pc, #452]	; (80a4184 <_tzset_unlocked_r+0x2d8>)
 80a3fbe:	601a      	str	r2, [r3, #0]
 80a3fc0:	4b72      	ldr	r3, [pc, #456]	; (80a418c <_tzset_unlocked_r+0x2e0>)
 80a3fc2:	f8c3 8000 	str.w	r8, [r3]
 80a3fc6:	e0d5      	b.n	80a4174 <_tzset_unlocked_r+0x2c8>
 80a3fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3fca:	f8c5 9004 	str.w	r9, [r5, #4]
 80a3fce:	18fd      	adds	r5, r7, r3
 80a3fd0:	5cfb      	ldrb	r3, [r7, r3]
 80a3fd2:	2b2d      	cmp	r3, #45	; 0x2d
 80a3fd4:	d103      	bne.n	80a3fde <_tzset_unlocked_r+0x132>
 80a3fd6:	3501      	adds	r5, #1
 80a3fd8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a3fdc:	e003      	b.n	80a3fe6 <_tzset_unlocked_r+0x13a>
 80a3fde:	2b2b      	cmp	r3, #43	; 0x2b
 80a3fe0:	bf08      	it	eq
 80a3fe2:	3501      	addeq	r5, #1
 80a3fe4:	2701      	movs	r7, #1
 80a3fe6:	2300      	movs	r3, #0
 80a3fe8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a3fec:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a3ff0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a3ff4:	930a      	str	r3, [sp, #40]	; 0x28
 80a3ff6:	9603      	str	r6, [sp, #12]
 80a3ff8:	f8cd a008 	str.w	sl, [sp, #8]
 80a3ffc:	9601      	str	r6, [sp, #4]
 80a3ffe:	f8cd b000 	str.w	fp, [sp]
 80a4002:	4633      	mov	r3, r6
 80a4004:	aa07      	add	r2, sp, #28
 80a4006:	4965      	ldr	r1, [pc, #404]	; (80a419c <_tzset_unlocked_r+0x2f0>)
 80a4008:	4628      	mov	r0, r5
 80a400a:	f7fc fd27 	bl	80a0a5c <siscanf>
 80a400e:	2800      	cmp	r0, #0
 80a4010:	dc04      	bgt.n	80a401c <_tzset_unlocked_r+0x170>
 80a4012:	6a23      	ldr	r3, [r4, #32]
 80a4014:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a4018:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a401a:	e00e      	b.n	80a403a <_tzset_unlocked_r+0x18e>
 80a401c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a4020:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a4024:	213c      	movs	r1, #60	; 0x3c
 80a4026:	fb01 3302 	mla	r3, r1, r2, r3
 80a402a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a402e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a4032:	fb01 3302 	mla	r3, r1, r2, r3
 80a4036:	435f      	muls	r7, r3
 80a4038:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a403a:	4627      	mov	r7, r4
 80a403c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a403e:	f04f 0900 	mov.w	r9, #0
 80a4042:	441d      	add	r5, r3
 80a4044:	782b      	ldrb	r3, [r5, #0]
 80a4046:	2b2c      	cmp	r3, #44	; 0x2c
 80a4048:	bf08      	it	eq
 80a404a:	3501      	addeq	r5, #1
 80a404c:	f895 8000 	ldrb.w	r8, [r5]
 80a4050:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a4054:	d126      	bne.n	80a40a4 <_tzset_unlocked_r+0x1f8>
 80a4056:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a405a:	9302      	str	r3, [sp, #8]
 80a405c:	ab09      	add	r3, sp, #36	; 0x24
 80a405e:	9300      	str	r3, [sp, #0]
 80a4060:	9603      	str	r6, [sp, #12]
 80a4062:	9601      	str	r6, [sp, #4]
 80a4064:	4633      	mov	r3, r6
 80a4066:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a406a:	494d      	ldr	r1, [pc, #308]	; (80a41a0 <_tzset_unlocked_r+0x2f4>)
 80a406c:	4628      	mov	r0, r5
 80a406e:	f7fc fcf5 	bl	80a0a5c <siscanf>
 80a4072:	2803      	cmp	r0, #3
 80a4074:	d17e      	bne.n	80a4174 <_tzset_unlocked_r+0x2c8>
 80a4076:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a407a:	1e4b      	subs	r3, r1, #1
 80a407c:	2b0b      	cmp	r3, #11
 80a407e:	d879      	bhi.n	80a4174 <_tzset_unlocked_r+0x2c8>
 80a4080:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a4084:	1e53      	subs	r3, r2, #1
 80a4086:	2b04      	cmp	r3, #4
 80a4088:	d874      	bhi.n	80a4174 <_tzset_unlocked_r+0x2c8>
 80a408a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a408e:	2b06      	cmp	r3, #6
 80a4090:	d870      	bhi.n	80a4174 <_tzset_unlocked_r+0x2c8>
 80a4092:	f887 8008 	strb.w	r8, [r7, #8]
 80a4096:	60f9      	str	r1, [r7, #12]
 80a4098:	613a      	str	r2, [r7, #16]
 80a409a:	617b      	str	r3, [r7, #20]
 80a409c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a409e:	eb05 0803 	add.w	r8, r5, r3
 80a40a2:	e02a      	b.n	80a40fa <_tzset_unlocked_r+0x24e>
 80a40a4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a40a8:	bf06      	itte	eq
 80a40aa:	4643      	moveq	r3, r8
 80a40ac:	3501      	addeq	r5, #1
 80a40ae:	2344      	movne	r3, #68	; 0x44
 80a40b0:	220a      	movs	r2, #10
 80a40b2:	a90b      	add	r1, sp, #44	; 0x2c
 80a40b4:	4628      	mov	r0, r5
 80a40b6:	9305      	str	r3, [sp, #20]
 80a40b8:	f7ff fe3e 	bl	80a3d38 <strtoul>
 80a40bc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a40c0:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a40c4:	4545      	cmp	r5, r8
 80a40c6:	9b05      	ldr	r3, [sp, #20]
 80a40c8:	d114      	bne.n	80a40f4 <_tzset_unlocked_r+0x248>
 80a40ca:	234d      	movs	r3, #77	; 0x4d
 80a40cc:	f1b9 0f00 	cmp.w	r9, #0
 80a40d0:	d107      	bne.n	80a40e2 <_tzset_unlocked_r+0x236>
 80a40d2:	7223      	strb	r3, [r4, #8]
 80a40d4:	2303      	movs	r3, #3
 80a40d6:	60e3      	str	r3, [r4, #12]
 80a40d8:	2302      	movs	r3, #2
 80a40da:	6123      	str	r3, [r4, #16]
 80a40dc:	f8c4 9014 	str.w	r9, [r4, #20]
 80a40e0:	e00b      	b.n	80a40fa <_tzset_unlocked_r+0x24e>
 80a40e2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a40e6:	230b      	movs	r3, #11
 80a40e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80a40ea:	2301      	movs	r3, #1
 80a40ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a40ee:	2300      	movs	r3, #0
 80a40f0:	6323      	str	r3, [r4, #48]	; 0x30
 80a40f2:	e002      	b.n	80a40fa <_tzset_unlocked_r+0x24e>
 80a40f4:	b280      	uxth	r0, r0
 80a40f6:	723b      	strb	r3, [r7, #8]
 80a40f8:	6178      	str	r0, [r7, #20]
 80a40fa:	2302      	movs	r3, #2
 80a40fc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a4100:	2300      	movs	r3, #0
 80a4102:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a4106:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a410a:	930a      	str	r3, [sp, #40]	; 0x28
 80a410c:	f898 3000 	ldrb.w	r3, [r8]
 80a4110:	2b2f      	cmp	r3, #47	; 0x2f
 80a4112:	d10b      	bne.n	80a412c <_tzset_unlocked_r+0x280>
 80a4114:	9603      	str	r6, [sp, #12]
 80a4116:	f8cd a008 	str.w	sl, [sp, #8]
 80a411a:	9601      	str	r6, [sp, #4]
 80a411c:	f8cd b000 	str.w	fp, [sp]
 80a4120:	4633      	mov	r3, r6
 80a4122:	aa07      	add	r2, sp, #28
 80a4124:	491f      	ldr	r1, [pc, #124]	; (80a41a4 <_tzset_unlocked_r+0x2f8>)
 80a4126:	4640      	mov	r0, r8
 80a4128:	f7fc fc98 	bl	80a0a5c <siscanf>
 80a412c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a4130:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a4134:	213c      	movs	r1, #60	; 0x3c
 80a4136:	fb01 3302 	mla	r3, r1, r2, r3
 80a413a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a413e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a4142:	fb01 3302 	mla	r3, r1, r2, r3
 80a4146:	61bb      	str	r3, [r7, #24]
 80a4148:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a414a:	f109 0901 	add.w	r9, r9, #1
 80a414e:	f1b9 0f02 	cmp.w	r9, #2
 80a4152:	4445      	add	r5, r8
 80a4154:	f107 071c 	add.w	r7, r7, #28
 80a4158:	f47f af74 	bne.w	80a4044 <_tzset_unlocked_r+0x198>
 80a415c:	6860      	ldr	r0, [r4, #4]
 80a415e:	f7ff fdf5 	bl	80a3d4c <__tzcalc_limits>
 80a4162:	6a22      	ldr	r2, [r4, #32]
 80a4164:	4b07      	ldr	r3, [pc, #28]	; (80a4184 <_tzset_unlocked_r+0x2d8>)
 80a4166:	601a      	str	r2, [r3, #0]
 80a4168:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a416a:	1a9b      	subs	r3, r3, r2
 80a416c:	4a07      	ldr	r2, [pc, #28]	; (80a418c <_tzset_unlocked_r+0x2e0>)
 80a416e:	bf18      	it	ne
 80a4170:	2301      	movne	r3, #1
 80a4172:	6013      	str	r3, [r2, #0]
 80a4174:	b00d      	add	sp, #52	; 0x34
 80a4176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a417a:	bf00      	nop
 80a417c:	080a56c8 	.word	0x080a56c8
 80a4180:	20000724 	.word	0x20000724
 80a4184:	2000072c 	.word	0x2000072c
 80a4188:	080a56cb 	.word	0x080a56cb
 80a418c:	20000728 	.word	0x20000728
 80a4190:	200000c8 	.word	0x200000c8
 80a4194:	20000717 	.word	0x20000717
 80a4198:	080a56cf 	.word	0x080a56cf
 80a419c:	080a56f2 	.word	0x080a56f2
 80a41a0:	080a56de 	.word	0x080a56de
 80a41a4:	080a56f1 	.word	0x080a56f1
 80a41a8:	2000070c 	.word	0x2000070c

080a41ac <rshift>:
 80a41ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a41ae:	6906      	ldr	r6, [r0, #16]
 80a41b0:	114b      	asrs	r3, r1, #5
 80a41b2:	42b3      	cmp	r3, r6
 80a41b4:	f100 0514 	add.w	r5, r0, #20
 80a41b8:	da27      	bge.n	80a420a <rshift+0x5e>
 80a41ba:	f011 011f 	ands.w	r1, r1, #31
 80a41be:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80a41c2:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80a41c6:	d101      	bne.n	80a41cc <rshift+0x20>
 80a41c8:	4629      	mov	r1, r5
 80a41ca:	e016      	b.n	80a41fa <rshift+0x4e>
 80a41cc:	1d14      	adds	r4, r2, #4
 80a41ce:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80a41d2:	462b      	mov	r3, r5
 80a41d4:	f1c1 0e20 	rsb	lr, r1, #32
 80a41d8:	40ca      	lsrs	r2, r1
 80a41da:	42b4      	cmp	r4, r6
 80a41dc:	d209      	bcs.n	80a41f2 <rshift+0x46>
 80a41de:	6827      	ldr	r7, [r4, #0]
 80a41e0:	fa07 f70e 	lsl.w	r7, r7, lr
 80a41e4:	433a      	orrs	r2, r7
 80a41e6:	f843 2b04 	str.w	r2, [r3], #4
 80a41ea:	f854 2b04 	ldr.w	r2, [r4], #4
 80a41ee:	40ca      	lsrs	r2, r1
 80a41f0:	e7f3      	b.n	80a41da <rshift+0x2e>
 80a41f2:	601a      	str	r2, [r3, #0]
 80a41f4:	b152      	cbz	r2, 80a420c <rshift+0x60>
 80a41f6:	3304      	adds	r3, #4
 80a41f8:	e008      	b.n	80a420c <rshift+0x60>
 80a41fa:	42b2      	cmp	r2, r6
 80a41fc:	460b      	mov	r3, r1
 80a41fe:	d205      	bcs.n	80a420c <rshift+0x60>
 80a4200:	f852 3b04 	ldr.w	r3, [r2], #4
 80a4204:	f841 3b04 	str.w	r3, [r1], #4
 80a4208:	e7f7      	b.n	80a41fa <rshift+0x4e>
 80a420a:	462b      	mov	r3, r5
 80a420c:	1b5b      	subs	r3, r3, r5
 80a420e:	109b      	asrs	r3, r3, #2
 80a4210:	6103      	str	r3, [r0, #16]
 80a4212:	b903      	cbnz	r3, 80a4216 <rshift+0x6a>
 80a4214:	6143      	str	r3, [r0, #20]
 80a4216:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a4218 <__hexdig_fun>:
 80a4218:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a421c:	2b09      	cmp	r3, #9
 80a421e:	d801      	bhi.n	80a4224 <__hexdig_fun+0xc>
 80a4220:	3820      	subs	r0, #32
 80a4222:	e00a      	b.n	80a423a <__hexdig_fun+0x22>
 80a4224:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80a4228:	2b05      	cmp	r3, #5
 80a422a:	d801      	bhi.n	80a4230 <__hexdig_fun+0x18>
 80a422c:	3847      	subs	r0, #71	; 0x47
 80a422e:	e004      	b.n	80a423a <__hexdig_fun+0x22>
 80a4230:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80a4234:	2b05      	cmp	r3, #5
 80a4236:	d802      	bhi.n	80a423e <__hexdig_fun+0x26>
 80a4238:	3827      	subs	r0, #39	; 0x27
 80a423a:	b2c0      	uxtb	r0, r0
 80a423c:	4770      	bx	lr
 80a423e:	2000      	movs	r0, #0
 80a4240:	4770      	bx	lr

080a4242 <__gethex>:
 80a4242:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4246:	b08b      	sub	sp, #44	; 0x2c
 80a4248:	468a      	mov	sl, r1
 80a424a:	4690      	mov	r8, r2
 80a424c:	9306      	str	r3, [sp, #24]
 80a424e:	9002      	str	r0, [sp, #8]
 80a4250:	f7fe fe2e 	bl	80a2eb0 <_localeconv_r>
 80a4254:	6803      	ldr	r3, [r0, #0]
 80a4256:	f04f 0b00 	mov.w	fp, #0
 80a425a:	4618      	mov	r0, r3
 80a425c:	9303      	str	r3, [sp, #12]
 80a425e:	f7fe fe94 	bl	80a2f8a <strlen>
 80a4262:	9b03      	ldr	r3, [sp, #12]
 80a4264:	9001      	str	r0, [sp, #4]
 80a4266:	4403      	add	r3, r0
 80a4268:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80a426c:	9307      	str	r3, [sp, #28]
 80a426e:	f8da 3000 	ldr.w	r3, [sl]
 80a4272:	3302      	adds	r3, #2
 80a4274:	461f      	mov	r7, r3
 80a4276:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a427a:	2830      	cmp	r0, #48	; 0x30
 80a427c:	d102      	bne.n	80a4284 <__gethex+0x42>
 80a427e:	f10b 0b01 	add.w	fp, fp, #1
 80a4282:	e7f7      	b.n	80a4274 <__gethex+0x32>
 80a4284:	f7ff ffc8 	bl	80a4218 <__hexdig_fun>
 80a4288:	4604      	mov	r4, r0
 80a428a:	b9e0      	cbnz	r0, 80a42c6 <__gethex+0x84>
 80a428c:	9a01      	ldr	r2, [sp, #4]
 80a428e:	9903      	ldr	r1, [sp, #12]
 80a4290:	4638      	mov	r0, r7
 80a4292:	f7fe fe82 	bl	80a2f9a <strncmp>
 80a4296:	2800      	cmp	r0, #0
 80a4298:	d134      	bne.n	80a4304 <__gethex+0xc2>
 80a429a:	9b01      	ldr	r3, [sp, #4]
 80a429c:	5cf8      	ldrb	r0, [r7, r3]
 80a429e:	18fe      	adds	r6, r7, r3
 80a42a0:	f7ff ffba 	bl	80a4218 <__hexdig_fun>
 80a42a4:	b380      	cbz	r0, 80a4308 <__gethex+0xc6>
 80a42a6:	4633      	mov	r3, r6
 80a42a8:	7818      	ldrb	r0, [r3, #0]
 80a42aa:	461f      	mov	r7, r3
 80a42ac:	2830      	cmp	r0, #48	; 0x30
 80a42ae:	f103 0301 	add.w	r3, r3, #1
 80a42b2:	d0f9      	beq.n	80a42a8 <__gethex+0x66>
 80a42b4:	f7ff ffb0 	bl	80a4218 <__hexdig_fun>
 80a42b8:	fab0 f580 	clz	r5, r0
 80a42bc:	4634      	mov	r4, r6
 80a42be:	096d      	lsrs	r5, r5, #5
 80a42c0:	f04f 0b01 	mov.w	fp, #1
 80a42c4:	e001      	b.n	80a42ca <__gethex+0x88>
 80a42c6:	2500      	movs	r5, #0
 80a42c8:	462c      	mov	r4, r5
 80a42ca:	463a      	mov	r2, r7
 80a42cc:	4616      	mov	r6, r2
 80a42ce:	7830      	ldrb	r0, [r6, #0]
 80a42d0:	3201      	adds	r2, #1
 80a42d2:	f7ff ffa1 	bl	80a4218 <__hexdig_fun>
 80a42d6:	2800      	cmp	r0, #0
 80a42d8:	d1f8      	bne.n	80a42cc <__gethex+0x8a>
 80a42da:	9a01      	ldr	r2, [sp, #4]
 80a42dc:	9903      	ldr	r1, [sp, #12]
 80a42de:	4630      	mov	r0, r6
 80a42e0:	f7fe fe5b 	bl	80a2f9a <strncmp>
 80a42e4:	b950      	cbnz	r0, 80a42fc <__gethex+0xba>
 80a42e6:	b954      	cbnz	r4, 80a42fe <__gethex+0xbc>
 80a42e8:	9b01      	ldr	r3, [sp, #4]
 80a42ea:	18f4      	adds	r4, r6, r3
 80a42ec:	4622      	mov	r2, r4
 80a42ee:	4616      	mov	r6, r2
 80a42f0:	7830      	ldrb	r0, [r6, #0]
 80a42f2:	3201      	adds	r2, #1
 80a42f4:	f7ff ff90 	bl	80a4218 <__hexdig_fun>
 80a42f8:	2800      	cmp	r0, #0
 80a42fa:	d1f8      	bne.n	80a42ee <__gethex+0xac>
 80a42fc:	b134      	cbz	r4, 80a430c <__gethex+0xca>
 80a42fe:	1ba4      	subs	r4, r4, r6
 80a4300:	00a4      	lsls	r4, r4, #2
 80a4302:	e003      	b.n	80a430c <__gethex+0xca>
 80a4304:	463e      	mov	r6, r7
 80a4306:	e000      	b.n	80a430a <__gethex+0xc8>
 80a4308:	4604      	mov	r4, r0
 80a430a:	2501      	movs	r5, #1
 80a430c:	7833      	ldrb	r3, [r6, #0]
 80a430e:	2b50      	cmp	r3, #80	; 0x50
 80a4310:	d001      	beq.n	80a4316 <__gethex+0xd4>
 80a4312:	2b70      	cmp	r3, #112	; 0x70
 80a4314:	d12a      	bne.n	80a436c <__gethex+0x12a>
 80a4316:	7873      	ldrb	r3, [r6, #1]
 80a4318:	2b2b      	cmp	r3, #43	; 0x2b
 80a431a:	d008      	beq.n	80a432e <__gethex+0xec>
 80a431c:	2b2d      	cmp	r3, #45	; 0x2d
 80a431e:	d003      	beq.n	80a4328 <__gethex+0xe6>
 80a4320:	1c71      	adds	r1, r6, #1
 80a4322:	f04f 0900 	mov.w	r9, #0
 80a4326:	e005      	b.n	80a4334 <__gethex+0xf2>
 80a4328:	f04f 0901 	mov.w	r9, #1
 80a432c:	e001      	b.n	80a4332 <__gethex+0xf0>
 80a432e:	f04f 0900 	mov.w	r9, #0
 80a4332:	1cb1      	adds	r1, r6, #2
 80a4334:	7808      	ldrb	r0, [r1, #0]
 80a4336:	f7ff ff6f 	bl	80a4218 <__hexdig_fun>
 80a433a:	1e43      	subs	r3, r0, #1
 80a433c:	b2db      	uxtb	r3, r3
 80a433e:	2b18      	cmp	r3, #24
 80a4340:	d814      	bhi.n	80a436c <__gethex+0x12a>
 80a4342:	f1a0 0210 	sub.w	r2, r0, #16
 80a4346:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80a434a:	f7ff ff65 	bl	80a4218 <__hexdig_fun>
 80a434e:	1e43      	subs	r3, r0, #1
 80a4350:	b2db      	uxtb	r3, r3
 80a4352:	2b18      	cmp	r3, #24
 80a4354:	d804      	bhi.n	80a4360 <__gethex+0x11e>
 80a4356:	230a      	movs	r3, #10
 80a4358:	fb03 0202 	mla	r2, r3, r2, r0
 80a435c:	3a10      	subs	r2, #16
 80a435e:	e7f2      	b.n	80a4346 <__gethex+0x104>
 80a4360:	f1b9 0f00 	cmp.w	r9, #0
 80a4364:	d000      	beq.n	80a4368 <__gethex+0x126>
 80a4366:	4252      	negs	r2, r2
 80a4368:	4414      	add	r4, r2
 80a436a:	e000      	b.n	80a436e <__gethex+0x12c>
 80a436c:	4631      	mov	r1, r6
 80a436e:	f8ca 1000 	str.w	r1, [sl]
 80a4372:	b12d      	cbz	r5, 80a4380 <__gethex+0x13e>
 80a4374:	f1bb 0f00 	cmp.w	fp, #0
 80a4378:	bf14      	ite	ne
 80a437a:	2000      	movne	r0, #0
 80a437c:	2006      	moveq	r0, #6
 80a437e:	e17c      	b.n	80a467a <__gethex+0x438>
 80a4380:	4629      	mov	r1, r5
 80a4382:	1bf3      	subs	r3, r6, r7
 80a4384:	3b01      	subs	r3, #1
 80a4386:	2b07      	cmp	r3, #7
 80a4388:	dd02      	ble.n	80a4390 <__gethex+0x14e>
 80a438a:	3101      	adds	r1, #1
 80a438c:	105b      	asrs	r3, r3, #1
 80a438e:	e7fa      	b.n	80a4386 <__gethex+0x144>
 80a4390:	9802      	ldr	r0, [sp, #8]
 80a4392:	f000 fb07 	bl	80a49a4 <_Balloc>
 80a4396:	f04f 0900 	mov.w	r9, #0
 80a439a:	4605      	mov	r5, r0
 80a439c:	46cb      	mov	fp, r9
 80a439e:	9b01      	ldr	r3, [sp, #4]
 80a43a0:	f100 0a14 	add.w	sl, r0, #20
 80a43a4:	f1c3 0301 	rsb	r3, r3, #1
 80a43a8:	f8cd a010 	str.w	sl, [sp, #16]
 80a43ac:	9308      	str	r3, [sp, #32]
 80a43ae:	42b7      	cmp	r7, r6
 80a43b0:	d22f      	bcs.n	80a4412 <__gethex+0x1d0>
 80a43b2:	1e73      	subs	r3, r6, #1
 80a43b4:	9305      	str	r3, [sp, #20]
 80a43b6:	9a07      	ldr	r2, [sp, #28]
 80a43b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80a43bc:	4293      	cmp	r3, r2
 80a43be:	d00b      	beq.n	80a43d8 <__gethex+0x196>
 80a43c0:	f1bb 0f20 	cmp.w	fp, #32
 80a43c4:	d116      	bne.n	80a43f4 <__gethex+0x1b2>
 80a43c6:	9b04      	ldr	r3, [sp, #16]
 80a43c8:	f8c3 9000 	str.w	r9, [r3]
 80a43cc:	3304      	adds	r3, #4
 80a43ce:	f04f 0900 	mov.w	r9, #0
 80a43d2:	9304      	str	r3, [sp, #16]
 80a43d4:	46cb      	mov	fp, r9
 80a43d6:	e00d      	b.n	80a43f4 <__gethex+0x1b2>
 80a43d8:	9b05      	ldr	r3, [sp, #20]
 80a43da:	9a08      	ldr	r2, [sp, #32]
 80a43dc:	4413      	add	r3, r2
 80a43de:	429f      	cmp	r7, r3
 80a43e0:	d8ee      	bhi.n	80a43c0 <__gethex+0x17e>
 80a43e2:	4618      	mov	r0, r3
 80a43e4:	9a01      	ldr	r2, [sp, #4]
 80a43e6:	9903      	ldr	r1, [sp, #12]
 80a43e8:	9309      	str	r3, [sp, #36]	; 0x24
 80a43ea:	f7fe fdd6 	bl	80a2f9a <strncmp>
 80a43ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a43f0:	b168      	cbz	r0, 80a440e <__gethex+0x1cc>
 80a43f2:	e7e5      	b.n	80a43c0 <__gethex+0x17e>
 80a43f4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80a43f8:	f7ff ff0e 	bl	80a4218 <__hexdig_fun>
 80a43fc:	f000 000f 	and.w	r0, r0, #15
 80a4400:	fa00 f00b 	lsl.w	r0, r0, fp
 80a4404:	9b05      	ldr	r3, [sp, #20]
 80a4406:	ea49 0900 	orr.w	r9, r9, r0
 80a440a:	f10b 0b04 	add.w	fp, fp, #4
 80a440e:	461e      	mov	r6, r3
 80a4410:	e7cd      	b.n	80a43ae <__gethex+0x16c>
 80a4412:	9804      	ldr	r0, [sp, #16]
 80a4414:	f840 9b04 	str.w	r9, [r0], #4
 80a4418:	ebca 0000 	rsb	r0, sl, r0
 80a441c:	1080      	asrs	r0, r0, #2
 80a441e:	6128      	str	r0, [r5, #16]
 80a4420:	0147      	lsls	r7, r0, #5
 80a4422:	4648      	mov	r0, r9
 80a4424:	f000 fb83 	bl	80a4b2e <__hi0bits>
 80a4428:	f8d8 6000 	ldr.w	r6, [r8]
 80a442c:	1a38      	subs	r0, r7, r0
 80a442e:	42b0      	cmp	r0, r6
 80a4430:	dd26      	ble.n	80a4480 <__gethex+0x23e>
 80a4432:	1b87      	subs	r7, r0, r6
 80a4434:	4639      	mov	r1, r7
 80a4436:	4628      	mov	r0, r5
 80a4438:	f000 fe7b 	bl	80a5132 <__any_on>
 80a443c:	b1c8      	cbz	r0, 80a4472 <__gethex+0x230>
 80a443e:	1e7b      	subs	r3, r7, #1
 80a4440:	1159      	asrs	r1, r3, #5
 80a4442:	f003 021f 	and.w	r2, r3, #31
 80a4446:	f04f 0901 	mov.w	r9, #1
 80a444a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80a444e:	fa09 f202 	lsl.w	r2, r9, r2
 80a4452:	420a      	tst	r2, r1
 80a4454:	d00e      	beq.n	80a4474 <__gethex+0x232>
 80a4456:	454b      	cmp	r3, r9
 80a4458:	dc02      	bgt.n	80a4460 <__gethex+0x21e>
 80a445a:	f04f 0902 	mov.w	r9, #2
 80a445e:	e009      	b.n	80a4474 <__gethex+0x232>
 80a4460:	1eb9      	subs	r1, r7, #2
 80a4462:	4628      	mov	r0, r5
 80a4464:	f000 fe65 	bl	80a5132 <__any_on>
 80a4468:	2800      	cmp	r0, #0
 80a446a:	d0f6      	beq.n	80a445a <__gethex+0x218>
 80a446c:	f04f 0903 	mov.w	r9, #3
 80a4470:	e000      	b.n	80a4474 <__gethex+0x232>
 80a4472:	4681      	mov	r9, r0
 80a4474:	4639      	mov	r1, r7
 80a4476:	4628      	mov	r0, r5
 80a4478:	f7ff fe98 	bl	80a41ac <rshift>
 80a447c:	443c      	add	r4, r7
 80a447e:	e00c      	b.n	80a449a <__gethex+0x258>
 80a4480:	da09      	bge.n	80a4496 <__gethex+0x254>
 80a4482:	1a37      	subs	r7, r6, r0
 80a4484:	4629      	mov	r1, r5
 80a4486:	463a      	mov	r2, r7
 80a4488:	9802      	ldr	r0, [sp, #8]
 80a448a:	f000 fc85 	bl	80a4d98 <__lshift>
 80a448e:	4605      	mov	r5, r0
 80a4490:	1be4      	subs	r4, r4, r7
 80a4492:	f100 0a14 	add.w	sl, r0, #20
 80a4496:	f04f 0900 	mov.w	r9, #0
 80a449a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a449e:	429c      	cmp	r4, r3
 80a44a0:	dd08      	ble.n	80a44b4 <__gethex+0x272>
 80a44a2:	9802      	ldr	r0, [sp, #8]
 80a44a4:	4629      	mov	r1, r5
 80a44a6:	f000 fab2 	bl	80a4a0e <_Bfree>
 80a44aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a44ac:	2300      	movs	r3, #0
 80a44ae:	6013      	str	r3, [r2, #0]
 80a44b0:	20a3      	movs	r0, #163	; 0xa3
 80a44b2:	e0e2      	b.n	80a467a <__gethex+0x438>
 80a44b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a44b8:	4284      	cmp	r4, r0
 80a44ba:	da53      	bge.n	80a4564 <__gethex+0x322>
 80a44bc:	1b04      	subs	r4, r0, r4
 80a44be:	42a6      	cmp	r6, r4
 80a44c0:	dc2e      	bgt.n	80a4520 <__gethex+0x2de>
 80a44c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a44c6:	2b02      	cmp	r3, #2
 80a44c8:	d01a      	beq.n	80a4500 <__gethex+0x2be>
 80a44ca:	2b03      	cmp	r3, #3
 80a44cc:	d01c      	beq.n	80a4508 <__gethex+0x2c6>
 80a44ce:	2b01      	cmp	r3, #1
 80a44d0:	d11d      	bne.n	80a450e <__gethex+0x2cc>
 80a44d2:	42a6      	cmp	r6, r4
 80a44d4:	d11b      	bne.n	80a450e <__gethex+0x2cc>
 80a44d6:	2e01      	cmp	r6, #1
 80a44d8:	dc0b      	bgt.n	80a44f2 <__gethex+0x2b0>
 80a44da:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a44de:	9a06      	ldr	r2, [sp, #24]
 80a44e0:	2062      	movs	r0, #98	; 0x62
 80a44e2:	6013      	str	r3, [r2, #0]
 80a44e4:	2301      	movs	r3, #1
 80a44e6:	612b      	str	r3, [r5, #16]
 80a44e8:	f8ca 3000 	str.w	r3, [sl]
 80a44ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a44ee:	601d      	str	r5, [r3, #0]
 80a44f0:	e0c3      	b.n	80a467a <__gethex+0x438>
 80a44f2:	1e71      	subs	r1, r6, #1
 80a44f4:	4628      	mov	r0, r5
 80a44f6:	f000 fe1c 	bl	80a5132 <__any_on>
 80a44fa:	2800      	cmp	r0, #0
 80a44fc:	d1ed      	bne.n	80a44da <__gethex+0x298>
 80a44fe:	e006      	b.n	80a450e <__gethex+0x2cc>
 80a4500:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a4502:	2b00      	cmp	r3, #0
 80a4504:	d0e9      	beq.n	80a44da <__gethex+0x298>
 80a4506:	e002      	b.n	80a450e <__gethex+0x2cc>
 80a4508:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a450a:	2b00      	cmp	r3, #0
 80a450c:	d1e5      	bne.n	80a44da <__gethex+0x298>
 80a450e:	9802      	ldr	r0, [sp, #8]
 80a4510:	4629      	mov	r1, r5
 80a4512:	f000 fa7c 	bl	80a4a0e <_Bfree>
 80a4516:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a4518:	2300      	movs	r3, #0
 80a451a:	6013      	str	r3, [r2, #0]
 80a451c:	2050      	movs	r0, #80	; 0x50
 80a451e:	e0ac      	b.n	80a467a <__gethex+0x438>
 80a4520:	1e67      	subs	r7, r4, #1
 80a4522:	f1b9 0f00 	cmp.w	r9, #0
 80a4526:	d106      	bne.n	80a4536 <__gethex+0x2f4>
 80a4528:	b13f      	cbz	r7, 80a453a <__gethex+0x2f8>
 80a452a:	4639      	mov	r1, r7
 80a452c:	4628      	mov	r0, r5
 80a452e:	f000 fe00 	bl	80a5132 <__any_on>
 80a4532:	4681      	mov	r9, r0
 80a4534:	e001      	b.n	80a453a <__gethex+0x2f8>
 80a4536:	f04f 0901 	mov.w	r9, #1
 80a453a:	117a      	asrs	r2, r7, #5
 80a453c:	2301      	movs	r3, #1
 80a453e:	f007 071f 	and.w	r7, r7, #31
 80a4542:	fa03 f707 	lsl.w	r7, r3, r7
 80a4546:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 80a454a:	4621      	mov	r1, r4
 80a454c:	421f      	tst	r7, r3
 80a454e:	4628      	mov	r0, r5
 80a4550:	bf18      	it	ne
 80a4552:	f049 0902 	orrne.w	r9, r9, #2
 80a4556:	1b36      	subs	r6, r6, r4
 80a4558:	f7ff fe28 	bl	80a41ac <rshift>
 80a455c:	2702      	movs	r7, #2
 80a455e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80a4562:	e000      	b.n	80a4566 <__gethex+0x324>
 80a4564:	2701      	movs	r7, #1
 80a4566:	f1b9 0f00 	cmp.w	r9, #0
 80a456a:	f000 8081 	beq.w	80a4670 <__gethex+0x42e>
 80a456e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a4572:	2b02      	cmp	r3, #2
 80a4574:	d00e      	beq.n	80a4594 <__gethex+0x352>
 80a4576:	2b03      	cmp	r3, #3
 80a4578:	d010      	beq.n	80a459c <__gethex+0x35a>
 80a457a:	2b01      	cmp	r3, #1
 80a457c:	d176      	bne.n	80a466c <__gethex+0x42a>
 80a457e:	f019 0f02 	tst.w	r9, #2
 80a4582:	d073      	beq.n	80a466c <__gethex+0x42a>
 80a4584:	f8da 0000 	ldr.w	r0, [sl]
 80a4588:	ea49 0900 	orr.w	r9, r9, r0
 80a458c:	f019 0f01 	tst.w	r9, #1
 80a4590:	d107      	bne.n	80a45a2 <__gethex+0x360>
 80a4592:	e06b      	b.n	80a466c <__gethex+0x42a>
 80a4594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a4596:	f1c3 0301 	rsb	r3, r3, #1
 80a459a:	9315      	str	r3, [sp, #84]	; 0x54
 80a459c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a459e:	2b00      	cmp	r3, #0
 80a45a0:	d064      	beq.n	80a466c <__gethex+0x42a>
 80a45a2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80a45a6:	f105 0314 	add.w	r3, r5, #20
 80a45aa:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80a45ae:	eb03 0109 	add.w	r1, r3, r9
 80a45b2:	2000      	movs	r0, #0
 80a45b4:	681a      	ldr	r2, [r3, #0]
 80a45b6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80a45ba:	d002      	beq.n	80a45c2 <__gethex+0x380>
 80a45bc:	3201      	adds	r2, #1
 80a45be:	601a      	str	r2, [r3, #0]
 80a45c0:	e020      	b.n	80a4604 <__gethex+0x3c2>
 80a45c2:	f843 0b04 	str.w	r0, [r3], #4
 80a45c6:	4299      	cmp	r1, r3
 80a45c8:	d8f4      	bhi.n	80a45b4 <__gethex+0x372>
 80a45ca:	68ab      	ldr	r3, [r5, #8]
 80a45cc:	459a      	cmp	sl, r3
 80a45ce:	db12      	blt.n	80a45f6 <__gethex+0x3b4>
 80a45d0:	6869      	ldr	r1, [r5, #4]
 80a45d2:	9802      	ldr	r0, [sp, #8]
 80a45d4:	3101      	adds	r1, #1
 80a45d6:	f000 f9e5 	bl	80a49a4 <_Balloc>
 80a45da:	4683      	mov	fp, r0
 80a45dc:	692a      	ldr	r2, [r5, #16]
 80a45de:	f105 010c 	add.w	r1, r5, #12
 80a45e2:	3202      	adds	r2, #2
 80a45e4:	0092      	lsls	r2, r2, #2
 80a45e6:	300c      	adds	r0, #12
 80a45e8:	f7fe fc66 	bl	80a2eb8 <memcpy>
 80a45ec:	4629      	mov	r1, r5
 80a45ee:	9802      	ldr	r0, [sp, #8]
 80a45f0:	f000 fa0d 	bl	80a4a0e <_Bfree>
 80a45f4:	465d      	mov	r5, fp
 80a45f6:	692b      	ldr	r3, [r5, #16]
 80a45f8:	1c5a      	adds	r2, r3, #1
 80a45fa:	612a      	str	r2, [r5, #16]
 80a45fc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80a4600:	2201      	movs	r2, #1
 80a4602:	615a      	str	r2, [r3, #20]
 80a4604:	2f02      	cmp	r7, #2
 80a4606:	f105 0214 	add.w	r2, r5, #20
 80a460a:	d111      	bne.n	80a4630 <__gethex+0x3ee>
 80a460c:	f8d8 3000 	ldr.w	r3, [r8]
 80a4610:	3b01      	subs	r3, #1
 80a4612:	429e      	cmp	r6, r3
 80a4614:	d127      	bne.n	80a4666 <__gethex+0x424>
 80a4616:	1171      	asrs	r1, r6, #5
 80a4618:	2301      	movs	r3, #1
 80a461a:	f006 061f 	and.w	r6, r6, #31
 80a461e:	fa03 f606 	lsl.w	r6, r3, r6
 80a4622:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80a4626:	421e      	tst	r6, r3
 80a4628:	bf0c      	ite	eq
 80a462a:	2702      	moveq	r7, #2
 80a462c:	2701      	movne	r7, #1
 80a462e:	e01a      	b.n	80a4666 <__gethex+0x424>
 80a4630:	692b      	ldr	r3, [r5, #16]
 80a4632:	459a      	cmp	sl, r3
 80a4634:	da0a      	bge.n	80a464c <__gethex+0x40a>
 80a4636:	2101      	movs	r1, #1
 80a4638:	4628      	mov	r0, r5
 80a463a:	f7ff fdb7 	bl	80a41ac <rshift>
 80a463e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a4642:	3401      	adds	r4, #1
 80a4644:	429c      	cmp	r4, r3
 80a4646:	f73f af2c 	bgt.w	80a44a2 <__gethex+0x260>
 80a464a:	e00b      	b.n	80a4664 <__gethex+0x422>
 80a464c:	f016 061f 	ands.w	r6, r6, #31
 80a4650:	d008      	beq.n	80a4664 <__gethex+0x422>
 80a4652:	4491      	add	r9, r2
 80a4654:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80a4658:	f000 fa69 	bl	80a4b2e <__hi0bits>
 80a465c:	f1c6 0620 	rsb	r6, r6, #32
 80a4660:	42b0      	cmp	r0, r6
 80a4662:	dbe8      	blt.n	80a4636 <__gethex+0x3f4>
 80a4664:	2701      	movs	r7, #1
 80a4666:	f047 0720 	orr.w	r7, r7, #32
 80a466a:	e001      	b.n	80a4670 <__gethex+0x42e>
 80a466c:	f047 0710 	orr.w	r7, r7, #16
 80a4670:	4638      	mov	r0, r7
 80a4672:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a4674:	601d      	str	r5, [r3, #0]
 80a4676:	9b06      	ldr	r3, [sp, #24]
 80a4678:	601c      	str	r4, [r3, #0]
 80a467a:	b00b      	add	sp, #44	; 0x2c
 80a467c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a4680 <L_shift>:
 80a4680:	f1c2 0208 	rsb	r2, r2, #8
 80a4684:	0092      	lsls	r2, r2, #2
 80a4686:	b570      	push	{r4, r5, r6, lr}
 80a4688:	f1c2 0620 	rsb	r6, r2, #32
 80a468c:	6843      	ldr	r3, [r0, #4]
 80a468e:	6805      	ldr	r5, [r0, #0]
 80a4690:	fa03 f406 	lsl.w	r4, r3, r6
 80a4694:	432c      	orrs	r4, r5
 80a4696:	40d3      	lsrs	r3, r2
 80a4698:	6004      	str	r4, [r0, #0]
 80a469a:	f840 3f04 	str.w	r3, [r0, #4]!
 80a469e:	4288      	cmp	r0, r1
 80a46a0:	d3f4      	bcc.n	80a468c <L_shift+0xc>
 80a46a2:	bd70      	pop	{r4, r5, r6, pc}

080a46a4 <__match>:
 80a46a4:	b530      	push	{r4, r5, lr}
 80a46a6:	6803      	ldr	r3, [r0, #0]
 80a46a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a46ac:	3301      	adds	r3, #1
 80a46ae:	b14c      	cbz	r4, 80a46c4 <__match+0x20>
 80a46b0:	781a      	ldrb	r2, [r3, #0]
 80a46b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80a46b6:	2d19      	cmp	r5, #25
 80a46b8:	bf98      	it	ls
 80a46ba:	3220      	addls	r2, #32
 80a46bc:	42a2      	cmp	r2, r4
 80a46be:	d0f3      	beq.n	80a46a8 <__match+0x4>
 80a46c0:	2000      	movs	r0, #0
 80a46c2:	bd30      	pop	{r4, r5, pc}
 80a46c4:	6003      	str	r3, [r0, #0]
 80a46c6:	2001      	movs	r0, #1
 80a46c8:	bd30      	pop	{r4, r5, pc}

080a46ca <__hexnan>:
 80a46ca:	680b      	ldr	r3, [r1, #0]
 80a46cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a46d0:	115e      	asrs	r6, r3, #5
 80a46d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80a46d6:	f013 031f 	ands.w	r3, r3, #31
 80a46da:	bf18      	it	ne
 80a46dc:	3604      	addne	r6, #4
 80a46de:	1f35      	subs	r5, r6, #4
 80a46e0:	4617      	mov	r7, r2
 80a46e2:	2200      	movs	r2, #0
 80a46e4:	4682      	mov	sl, r0
 80a46e6:	46a8      	mov	r8, r5
 80a46e8:	462c      	mov	r4, r5
 80a46ea:	4691      	mov	r9, r2
 80a46ec:	b085      	sub	sp, #20
 80a46ee:	f8d0 b000 	ldr.w	fp, [r0]
 80a46f2:	9301      	str	r3, [sp, #4]
 80a46f4:	f846 2c04 	str.w	r2, [r6, #-4]
 80a46f8:	9200      	str	r2, [sp, #0]
 80a46fa:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 80a46fe:	2900      	cmp	r1, #0
 80a4700:	d03c      	beq.n	80a477c <__hexnan+0xb2>
 80a4702:	4608      	mov	r0, r1
 80a4704:	9203      	str	r2, [sp, #12]
 80a4706:	9102      	str	r1, [sp, #8]
 80a4708:	f7ff fd86 	bl	80a4218 <__hexdig_fun>
 80a470c:	9a03      	ldr	r2, [sp, #12]
 80a470e:	bb00      	cbnz	r0, 80a4752 <__hexnan+0x88>
 80a4710:	9902      	ldr	r1, [sp, #8]
 80a4712:	2920      	cmp	r1, #32
 80a4714:	d816      	bhi.n	80a4744 <__hexnan+0x7a>
 80a4716:	9b00      	ldr	r3, [sp, #0]
 80a4718:	4599      	cmp	r9, r3
 80a471a:	ddee      	ble.n	80a46fa <__hexnan+0x30>
 80a471c:	4544      	cmp	r4, r8
 80a471e:	d205      	bcs.n	80a472c <__hexnan+0x62>
 80a4720:	2a07      	cmp	r2, #7
 80a4722:	dc03      	bgt.n	80a472c <__hexnan+0x62>
 80a4724:	4641      	mov	r1, r8
 80a4726:	4620      	mov	r0, r4
 80a4728:	f7ff ffaa 	bl	80a4680 <L_shift>
 80a472c:	42bc      	cmp	r4, r7
 80a472e:	d923      	bls.n	80a4778 <__hexnan+0xae>
 80a4730:	2300      	movs	r3, #0
 80a4732:	f1a4 0804 	sub.w	r8, r4, #4
 80a4736:	f844 3c04 	str.w	r3, [r4, #-4]
 80a473a:	f8cd 9000 	str.w	r9, [sp]
 80a473e:	4644      	mov	r4, r8
 80a4740:	461a      	mov	r2, r3
 80a4742:	e7da      	b.n	80a46fa <__hexnan+0x30>
 80a4744:	2929      	cmp	r1, #41	; 0x29
 80a4746:	d148      	bne.n	80a47da <__hexnan+0x110>
 80a4748:	f10b 0301 	add.w	r3, fp, #1
 80a474c:	f8ca 3000 	str.w	r3, [sl]
 80a4750:	e014      	b.n	80a477c <__hexnan+0xb2>
 80a4752:	3201      	adds	r2, #1
 80a4754:	2a08      	cmp	r2, #8
 80a4756:	f109 0901 	add.w	r9, r9, #1
 80a475a:	dd06      	ble.n	80a476a <__hexnan+0xa0>
 80a475c:	42bc      	cmp	r4, r7
 80a475e:	d9cc      	bls.n	80a46fa <__hexnan+0x30>
 80a4760:	2300      	movs	r3, #0
 80a4762:	f844 3c04 	str.w	r3, [r4, #-4]
 80a4766:	2201      	movs	r2, #1
 80a4768:	3c04      	subs	r4, #4
 80a476a:	6821      	ldr	r1, [r4, #0]
 80a476c:	f000 000f 	and.w	r0, r0, #15
 80a4770:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80a4774:	6020      	str	r0, [r4, #0]
 80a4776:	e7c0      	b.n	80a46fa <__hexnan+0x30>
 80a4778:	2208      	movs	r2, #8
 80a477a:	e7be      	b.n	80a46fa <__hexnan+0x30>
 80a477c:	f1b9 0f00 	cmp.w	r9, #0
 80a4780:	d02b      	beq.n	80a47da <__hexnan+0x110>
 80a4782:	4544      	cmp	r4, r8
 80a4784:	d205      	bcs.n	80a4792 <__hexnan+0xc8>
 80a4786:	2a07      	cmp	r2, #7
 80a4788:	dc03      	bgt.n	80a4792 <__hexnan+0xc8>
 80a478a:	4641      	mov	r1, r8
 80a478c:	4620      	mov	r0, r4
 80a478e:	f7ff ff77 	bl	80a4680 <L_shift>
 80a4792:	42bc      	cmp	r4, r7
 80a4794:	d90c      	bls.n	80a47b0 <__hexnan+0xe6>
 80a4796:	463b      	mov	r3, r7
 80a4798:	f854 2b04 	ldr.w	r2, [r4], #4
 80a479c:	42a5      	cmp	r5, r4
 80a479e:	f843 2b04 	str.w	r2, [r3], #4
 80a47a2:	d2f9      	bcs.n	80a4798 <__hexnan+0xce>
 80a47a4:	2200      	movs	r2, #0
 80a47a6:	f843 2b04 	str.w	r2, [r3], #4
 80a47aa:	429d      	cmp	r5, r3
 80a47ac:	d2fb      	bcs.n	80a47a6 <__hexnan+0xdc>
 80a47ae:	e00b      	b.n	80a47c8 <__hexnan+0xfe>
 80a47b0:	9b01      	ldr	r3, [sp, #4]
 80a47b2:	b14b      	cbz	r3, 80a47c8 <__hexnan+0xfe>
 80a47b4:	f1c3 0220 	rsb	r2, r3, #32
 80a47b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a47bc:	40d3      	lsrs	r3, r2
 80a47be:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80a47c2:	4013      	ands	r3, r2
 80a47c4:	f846 3c04 	str.w	r3, [r6, #-4]
 80a47c8:	682b      	ldr	r3, [r5, #0]
 80a47ca:	b943      	cbnz	r3, 80a47de <__hexnan+0x114>
 80a47cc:	42bd      	cmp	r5, r7
 80a47ce:	d102      	bne.n	80a47d6 <__hexnan+0x10c>
 80a47d0:	2301      	movs	r3, #1
 80a47d2:	602b      	str	r3, [r5, #0]
 80a47d4:	e003      	b.n	80a47de <__hexnan+0x114>
 80a47d6:	3d04      	subs	r5, #4
 80a47d8:	e7f6      	b.n	80a47c8 <__hexnan+0xfe>
 80a47da:	2004      	movs	r0, #4
 80a47dc:	e000      	b.n	80a47e0 <__hexnan+0x116>
 80a47de:	2005      	movs	r0, #5
 80a47e0:	b005      	add	sp, #20
 80a47e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a47e8 <_findenv_r>:
 80a47e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a47ec:	4607      	mov	r7, r0
 80a47ee:	468b      	mov	fp, r1
 80a47f0:	4690      	mov	r8, r2
 80a47f2:	f000 fcd3 	bl	80a519c <__env_lock>
 80a47f6:	4b19      	ldr	r3, [pc, #100]	; (80a485c <_findenv_r+0x74>)
 80a47f8:	681d      	ldr	r5, [r3, #0]
 80a47fa:	469a      	mov	sl, r3
 80a47fc:	b13d      	cbz	r5, 80a480e <_findenv_r+0x26>
 80a47fe:	465c      	mov	r4, fp
 80a4800:	4623      	mov	r3, r4
 80a4802:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a4806:	b142      	cbz	r2, 80a481a <_findenv_r+0x32>
 80a4808:	2a3d      	cmp	r2, #61	; 0x3d
 80a480a:	461c      	mov	r4, r3
 80a480c:	d1f8      	bne.n	80a4800 <_findenv_r+0x18>
 80a480e:	4638      	mov	r0, r7
 80a4810:	f000 fcc5 	bl	80a519e <__env_unlock>
 80a4814:	2000      	movs	r0, #0
 80a4816:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a481a:	ebcb 0404 	rsb	r4, fp, r4
 80a481e:	46a9      	mov	r9, r5
 80a4820:	f859 0b04 	ldr.w	r0, [r9], #4
 80a4824:	2800      	cmp	r0, #0
 80a4826:	d0f2      	beq.n	80a480e <_findenv_r+0x26>
 80a4828:	4622      	mov	r2, r4
 80a482a:	4659      	mov	r1, fp
 80a482c:	f7fe fbb5 	bl	80a2f9a <strncmp>
 80a4830:	b988      	cbnz	r0, 80a4856 <_findenv_r+0x6e>
 80a4832:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a4836:	191e      	adds	r6, r3, r4
 80a4838:	5d1b      	ldrb	r3, [r3, r4]
 80a483a:	2b3d      	cmp	r3, #61	; 0x3d
 80a483c:	d10b      	bne.n	80a4856 <_findenv_r+0x6e>
 80a483e:	f8da 3000 	ldr.w	r3, [sl]
 80a4842:	4638      	mov	r0, r7
 80a4844:	1aed      	subs	r5, r5, r3
 80a4846:	10ad      	asrs	r5, r5, #2
 80a4848:	f8c8 5000 	str.w	r5, [r8]
 80a484c:	f000 fca7 	bl	80a519e <__env_unlock>
 80a4850:	1c70      	adds	r0, r6, #1
 80a4852:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4856:	464d      	mov	r5, r9
 80a4858:	e7e1      	b.n	80a481e <_findenv_r+0x36>
 80a485a:	bf00      	nop
 80a485c:	20000110 	.word	0x20000110

080a4860 <_getenv_r>:
 80a4860:	b507      	push	{r0, r1, r2, lr}
 80a4862:	aa01      	add	r2, sp, #4
 80a4864:	f7ff ffc0 	bl	80a47e8 <_findenv_r>
 80a4868:	b003      	add	sp, #12
 80a486a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a4870 <__gettzinfo>:
 80a4870:	4800      	ldr	r0, [pc, #0]	; (80a4874 <__gettzinfo+0x4>)
 80a4872:	4770      	bx	lr
 80a4874:	200000d0 	.word	0x200000d0

080a4878 <gmtime_r>:
 80a4878:	6802      	ldr	r2, [r0, #0]
 80a487a:	4b46      	ldr	r3, [pc, #280]	; (80a4994 <gmtime_r+0x11c>)
 80a487c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a487e:	fb92 f4f3 	sdiv	r4, r2, r3
 80a4882:	fb03 2214 	mls	r2, r3, r4, r2
 80a4886:	2a00      	cmp	r2, #0
 80a4888:	bfbc      	itt	lt
 80a488a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a488e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a4892:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a4896:	fb92 f3f0 	sdiv	r3, r2, r0
 80a489a:	fb00 2213 	mls	r2, r0, r3, r2
 80a489e:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a48a2:	608b      	str	r3, [r1, #8]
 80a48a4:	fb92 f3f0 	sdiv	r3, r2, r0
 80a48a8:	fb00 2213 	mls	r2, r0, r3, r2
 80a48ac:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a48b0:	bfac      	ite	ge
 80a48b2:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a48b6:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a48ba:	604b      	str	r3, [r1, #4]
 80a48bc:	600a      	str	r2, [r1, #0]
 80a48be:	2307      	movs	r3, #7
 80a48c0:	1ce2      	adds	r2, r4, #3
 80a48c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80a48c6:	4d34      	ldr	r5, [pc, #208]	; (80a4998 <gmtime_r+0x120>)
 80a48c8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a48cc:	fb94 f5f5 	sdiv	r5, r4, r5
 80a48d0:	1ad3      	subs	r3, r2, r3
 80a48d2:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a48d6:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a48da:	618b      	str	r3, [r1, #24]
 80a48dc:	4b2f      	ldr	r3, [pc, #188]	; (80a499c <gmtime_r+0x124>)
 80a48de:	4830      	ldr	r0, [pc, #192]	; (80a49a0 <gmtime_r+0x128>)
 80a48e0:	fb03 4405 	mla	r4, r3, r5, r4
 80a48e4:	fbb4 f2f2 	udiv	r2, r4, r2
 80a48e8:	fbb4 f3f7 	udiv	r3, r4, r7
 80a48ec:	fbb4 f0f0 	udiv	r0, r4, r0
 80a48f0:	4422      	add	r2, r4
 80a48f2:	1ad2      	subs	r2, r2, r3
 80a48f4:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a48f8:	1a13      	subs	r3, r2, r0
 80a48fa:	f240 126d 	movw	r2, #365	; 0x16d
 80a48fe:	fbb3 f6f6 	udiv	r6, r3, r6
 80a4902:	fbb3 f0f2 	udiv	r0, r3, r2
 80a4906:	fbb3 f3f7 	udiv	r3, r3, r7
 80a490a:	4434      	add	r4, r6
 80a490c:	1ae3      	subs	r3, r4, r3
 80a490e:	fb02 3310 	mls	r3, r2, r0, r3
 80a4912:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a4916:	2499      	movs	r4, #153	; 0x99
 80a4918:	3202      	adds	r2, #2
 80a491a:	fbb2 f2f4 	udiv	r2, r2, r4
 80a491e:	4354      	muls	r4, r2
 80a4920:	1ca6      	adds	r6, r4, #2
 80a4922:	2405      	movs	r4, #5
 80a4924:	fbb6 f4f4 	udiv	r4, r6, r4
 80a4928:	2a0a      	cmp	r2, #10
 80a492a:	bf34      	ite	cc
 80a492c:	2602      	movcc	r6, #2
 80a492e:	f06f 0609 	mvncs.w	r6, #9
 80a4932:	4416      	add	r6, r2
 80a4934:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a4938:	fb02 0505 	mla	r5, r2, r5, r0
 80a493c:	1c5f      	adds	r7, r3, #1
 80a493e:	2e01      	cmp	r6, #1
 80a4940:	bf98      	it	ls
 80a4942:	3501      	addls	r5, #1
 80a4944:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a4948:	eba7 0704 	sub.w	r7, r7, r4
 80a494c:	d302      	bcc.n	80a4954 <gmtime_r+0xdc>
 80a494e:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a4952:	e014      	b.n	80a497e <gmtime_r+0x106>
 80a4954:	0782      	lsls	r2, r0, #30
 80a4956:	d105      	bne.n	80a4964 <gmtime_r+0xec>
 80a4958:	2464      	movs	r4, #100	; 0x64
 80a495a:	fbb0 f2f4 	udiv	r2, r0, r4
 80a495e:	fb04 0212 	mls	r2, r4, r2, r0
 80a4962:	b94a      	cbnz	r2, 80a4978 <gmtime_r+0x100>
 80a4964:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a4968:	fbb0 f4f2 	udiv	r4, r0, r2
 80a496c:	fb02 0014 	mls	r0, r2, r4, r0
 80a4970:	fab0 f280 	clz	r2, r0
 80a4974:	0952      	lsrs	r2, r2, #5
 80a4976:	e000      	b.n	80a497a <gmtime_r+0x102>
 80a4978:	2201      	movs	r2, #1
 80a497a:	333b      	adds	r3, #59	; 0x3b
 80a497c:	441a      	add	r2, r3
 80a497e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a4982:	2300      	movs	r3, #0
 80a4984:	61ca      	str	r2, [r1, #28]
 80a4986:	614d      	str	r5, [r1, #20]
 80a4988:	610e      	str	r6, [r1, #16]
 80a498a:	60cf      	str	r7, [r1, #12]
 80a498c:	620b      	str	r3, [r1, #32]
 80a498e:	4608      	mov	r0, r1
 80a4990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4992:	bf00      	nop
 80a4994:	00015180 	.word	0x00015180
 80a4998:	00023ab1 	.word	0x00023ab1
 80a499c:	fffdc54f 	.word	0xfffdc54f
 80a49a0:	00023ab0 	.word	0x00023ab0

080a49a4 <_Balloc>:
 80a49a4:	b570      	push	{r4, r5, r6, lr}
 80a49a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80a49a8:	4604      	mov	r4, r0
 80a49aa:	460e      	mov	r6, r1
 80a49ac:	b93d      	cbnz	r5, 80a49be <_Balloc+0x1a>
 80a49ae:	2010      	movs	r0, #16
 80a49b0:	f7fc f83c 	bl	80a0a2c <malloc>
 80a49b4:	6260      	str	r0, [r4, #36]	; 0x24
 80a49b6:	6045      	str	r5, [r0, #4]
 80a49b8:	6085      	str	r5, [r0, #8]
 80a49ba:	6005      	str	r5, [r0, #0]
 80a49bc:	60c5      	str	r5, [r0, #12]
 80a49be:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80a49c0:	68eb      	ldr	r3, [r5, #12]
 80a49c2:	b143      	cbz	r3, 80a49d6 <_Balloc+0x32>
 80a49c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a49c6:	68db      	ldr	r3, [r3, #12]
 80a49c8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80a49cc:	b178      	cbz	r0, 80a49ee <_Balloc+0x4a>
 80a49ce:	6802      	ldr	r2, [r0, #0]
 80a49d0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80a49d4:	e017      	b.n	80a4a06 <_Balloc+0x62>
 80a49d6:	2221      	movs	r2, #33	; 0x21
 80a49d8:	2104      	movs	r1, #4
 80a49da:	4620      	mov	r0, r4
 80a49dc:	f000 fbcb 	bl	80a5176 <_calloc_r>
 80a49e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a49e2:	60e8      	str	r0, [r5, #12]
 80a49e4:	68db      	ldr	r3, [r3, #12]
 80a49e6:	2b00      	cmp	r3, #0
 80a49e8:	d1ec      	bne.n	80a49c4 <_Balloc+0x20>
 80a49ea:	2000      	movs	r0, #0
 80a49ec:	bd70      	pop	{r4, r5, r6, pc}
 80a49ee:	2101      	movs	r1, #1
 80a49f0:	fa01 f506 	lsl.w	r5, r1, r6
 80a49f4:	1d6a      	adds	r2, r5, #5
 80a49f6:	0092      	lsls	r2, r2, #2
 80a49f8:	4620      	mov	r0, r4
 80a49fa:	f000 fbbc 	bl	80a5176 <_calloc_r>
 80a49fe:	2800      	cmp	r0, #0
 80a4a00:	d0f3      	beq.n	80a49ea <_Balloc+0x46>
 80a4a02:	6046      	str	r6, [r0, #4]
 80a4a04:	6085      	str	r5, [r0, #8]
 80a4a06:	2300      	movs	r3, #0
 80a4a08:	6103      	str	r3, [r0, #16]
 80a4a0a:	60c3      	str	r3, [r0, #12]
 80a4a0c:	bd70      	pop	{r4, r5, r6, pc}

080a4a0e <_Bfree>:
 80a4a0e:	b570      	push	{r4, r5, r6, lr}
 80a4a10:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80a4a12:	4606      	mov	r6, r0
 80a4a14:	460d      	mov	r5, r1
 80a4a16:	b93c      	cbnz	r4, 80a4a28 <_Bfree+0x1a>
 80a4a18:	2010      	movs	r0, #16
 80a4a1a:	f7fc f807 	bl	80a0a2c <malloc>
 80a4a1e:	6270      	str	r0, [r6, #36]	; 0x24
 80a4a20:	6044      	str	r4, [r0, #4]
 80a4a22:	6084      	str	r4, [r0, #8]
 80a4a24:	6004      	str	r4, [r0, #0]
 80a4a26:	60c4      	str	r4, [r0, #12]
 80a4a28:	b13d      	cbz	r5, 80a4a3a <_Bfree+0x2c>
 80a4a2a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80a4a2c:	686a      	ldr	r2, [r5, #4]
 80a4a2e:	68db      	ldr	r3, [r3, #12]
 80a4a30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80a4a34:	6029      	str	r1, [r5, #0]
 80a4a36:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80a4a3a:	bd70      	pop	{r4, r5, r6, pc}

080a4a3c <__multadd>:
 80a4a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4a40:	4606      	mov	r6, r0
 80a4a42:	460c      	mov	r4, r1
 80a4a44:	690d      	ldr	r5, [r1, #16]
 80a4a46:	461f      	mov	r7, r3
 80a4a48:	f101 0e14 	add.w	lr, r1, #20
 80a4a4c:	2300      	movs	r3, #0
 80a4a4e:	f8de 0000 	ldr.w	r0, [lr]
 80a4a52:	3301      	adds	r3, #1
 80a4a54:	b281      	uxth	r1, r0
 80a4a56:	fb02 7101 	mla	r1, r2, r1, r7
 80a4a5a:	0c00      	lsrs	r0, r0, #16
 80a4a5c:	0c0f      	lsrs	r7, r1, #16
 80a4a5e:	fb02 7000 	mla	r0, r2, r0, r7
 80a4a62:	b289      	uxth	r1, r1
 80a4a64:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80a4a68:	429d      	cmp	r5, r3
 80a4a6a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80a4a6e:	f84e 1b04 	str.w	r1, [lr], #4
 80a4a72:	dcec      	bgt.n	80a4a4e <__multadd+0x12>
 80a4a74:	b1d7      	cbz	r7, 80a4aac <__multadd+0x70>
 80a4a76:	68a3      	ldr	r3, [r4, #8]
 80a4a78:	429d      	cmp	r5, r3
 80a4a7a:	db12      	blt.n	80a4aa2 <__multadd+0x66>
 80a4a7c:	6861      	ldr	r1, [r4, #4]
 80a4a7e:	4630      	mov	r0, r6
 80a4a80:	3101      	adds	r1, #1
 80a4a82:	f7ff ff8f 	bl	80a49a4 <_Balloc>
 80a4a86:	4680      	mov	r8, r0
 80a4a88:	6922      	ldr	r2, [r4, #16]
 80a4a8a:	f104 010c 	add.w	r1, r4, #12
 80a4a8e:	3202      	adds	r2, #2
 80a4a90:	0092      	lsls	r2, r2, #2
 80a4a92:	300c      	adds	r0, #12
 80a4a94:	f7fe fa10 	bl	80a2eb8 <memcpy>
 80a4a98:	4621      	mov	r1, r4
 80a4a9a:	4630      	mov	r0, r6
 80a4a9c:	f7ff ffb7 	bl	80a4a0e <_Bfree>
 80a4aa0:	4644      	mov	r4, r8
 80a4aa2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80a4aa6:	3501      	adds	r5, #1
 80a4aa8:	615f      	str	r7, [r3, #20]
 80a4aaa:	6125      	str	r5, [r4, #16]
 80a4aac:	4620      	mov	r0, r4
 80a4aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a4ab2 <__s2b>:
 80a4ab2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a4ab6:	4606      	mov	r6, r0
 80a4ab8:	4615      	mov	r5, r2
 80a4aba:	461f      	mov	r7, r3
 80a4abc:	2209      	movs	r2, #9
 80a4abe:	3308      	adds	r3, #8
 80a4ac0:	460c      	mov	r4, r1
 80a4ac2:	fb93 f3f2 	sdiv	r3, r3, r2
 80a4ac6:	2100      	movs	r1, #0
 80a4ac8:	2201      	movs	r2, #1
 80a4aca:	429a      	cmp	r2, r3
 80a4acc:	da02      	bge.n	80a4ad4 <__s2b+0x22>
 80a4ace:	0052      	lsls	r2, r2, #1
 80a4ad0:	3101      	adds	r1, #1
 80a4ad2:	e7fa      	b.n	80a4aca <__s2b+0x18>
 80a4ad4:	4630      	mov	r0, r6
 80a4ad6:	f7ff ff65 	bl	80a49a4 <_Balloc>
 80a4ada:	9b08      	ldr	r3, [sp, #32]
 80a4adc:	2d09      	cmp	r5, #9
 80a4ade:	6143      	str	r3, [r0, #20]
 80a4ae0:	f04f 0301 	mov.w	r3, #1
 80a4ae4:	6103      	str	r3, [r0, #16]
 80a4ae6:	dd11      	ble.n	80a4b0c <__s2b+0x5a>
 80a4ae8:	f104 0809 	add.w	r8, r4, #9
 80a4aec:	46c1      	mov	r9, r8
 80a4aee:	442c      	add	r4, r5
 80a4af0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80a4af4:	4601      	mov	r1, r0
 80a4af6:	3b30      	subs	r3, #48	; 0x30
 80a4af8:	220a      	movs	r2, #10
 80a4afa:	4630      	mov	r0, r6
 80a4afc:	f7ff ff9e 	bl	80a4a3c <__multadd>
 80a4b00:	45a1      	cmp	r9, r4
 80a4b02:	d1f5      	bne.n	80a4af0 <__s2b+0x3e>
 80a4b04:	eb08 0405 	add.w	r4, r8, r5
 80a4b08:	3c08      	subs	r4, #8
 80a4b0a:	e001      	b.n	80a4b10 <__s2b+0x5e>
 80a4b0c:	340a      	adds	r4, #10
 80a4b0e:	2509      	movs	r5, #9
 80a4b10:	1b2d      	subs	r5, r5, r4
 80a4b12:	1963      	adds	r3, r4, r5
 80a4b14:	429f      	cmp	r7, r3
 80a4b16:	dd08      	ble.n	80a4b2a <__s2b+0x78>
 80a4b18:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a4b1c:	4601      	mov	r1, r0
 80a4b1e:	3b30      	subs	r3, #48	; 0x30
 80a4b20:	220a      	movs	r2, #10
 80a4b22:	4630      	mov	r0, r6
 80a4b24:	f7ff ff8a 	bl	80a4a3c <__multadd>
 80a4b28:	e7f3      	b.n	80a4b12 <__s2b+0x60>
 80a4b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a4b2e <__hi0bits>:
 80a4b2e:	0c03      	lsrs	r3, r0, #16
 80a4b30:	041b      	lsls	r3, r3, #16
 80a4b32:	b913      	cbnz	r3, 80a4b3a <__hi0bits+0xc>
 80a4b34:	0400      	lsls	r0, r0, #16
 80a4b36:	2310      	movs	r3, #16
 80a4b38:	e000      	b.n	80a4b3c <__hi0bits+0xe>
 80a4b3a:	2300      	movs	r3, #0
 80a4b3c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80a4b40:	bf04      	itt	eq
 80a4b42:	0200      	lsleq	r0, r0, #8
 80a4b44:	3308      	addeq	r3, #8
 80a4b46:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80a4b4a:	bf04      	itt	eq
 80a4b4c:	0100      	lsleq	r0, r0, #4
 80a4b4e:	3304      	addeq	r3, #4
 80a4b50:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80a4b54:	bf04      	itt	eq
 80a4b56:	0080      	lsleq	r0, r0, #2
 80a4b58:	3302      	addeq	r3, #2
 80a4b5a:	2800      	cmp	r0, #0
 80a4b5c:	db03      	blt.n	80a4b66 <__hi0bits+0x38>
 80a4b5e:	0042      	lsls	r2, r0, #1
 80a4b60:	d503      	bpl.n	80a4b6a <__hi0bits+0x3c>
 80a4b62:	1c58      	adds	r0, r3, #1
 80a4b64:	4770      	bx	lr
 80a4b66:	4618      	mov	r0, r3
 80a4b68:	4770      	bx	lr
 80a4b6a:	2020      	movs	r0, #32
 80a4b6c:	4770      	bx	lr

080a4b6e <__lo0bits>:
 80a4b6e:	6803      	ldr	r3, [r0, #0]
 80a4b70:	f013 0207 	ands.w	r2, r3, #7
 80a4b74:	d00b      	beq.n	80a4b8e <__lo0bits+0x20>
 80a4b76:	07d9      	lsls	r1, r3, #31
 80a4b78:	d422      	bmi.n	80a4bc0 <__lo0bits+0x52>
 80a4b7a:	079a      	lsls	r2, r3, #30
 80a4b7c:	bf4b      	itete	mi
 80a4b7e:	085b      	lsrmi	r3, r3, #1
 80a4b80:	089b      	lsrpl	r3, r3, #2
 80a4b82:	6003      	strmi	r3, [r0, #0]
 80a4b84:	6003      	strpl	r3, [r0, #0]
 80a4b86:	bf4c      	ite	mi
 80a4b88:	2001      	movmi	r0, #1
 80a4b8a:	2002      	movpl	r0, #2
 80a4b8c:	4770      	bx	lr
 80a4b8e:	b299      	uxth	r1, r3
 80a4b90:	b909      	cbnz	r1, 80a4b96 <__lo0bits+0x28>
 80a4b92:	0c1b      	lsrs	r3, r3, #16
 80a4b94:	2210      	movs	r2, #16
 80a4b96:	f013 0fff 	tst.w	r3, #255	; 0xff
 80a4b9a:	bf04      	itt	eq
 80a4b9c:	0a1b      	lsreq	r3, r3, #8
 80a4b9e:	3208      	addeq	r2, #8
 80a4ba0:	0719      	lsls	r1, r3, #28
 80a4ba2:	bf04      	itt	eq
 80a4ba4:	091b      	lsreq	r3, r3, #4
 80a4ba6:	3204      	addeq	r2, #4
 80a4ba8:	0799      	lsls	r1, r3, #30
 80a4baa:	bf04      	itt	eq
 80a4bac:	089b      	lsreq	r3, r3, #2
 80a4bae:	3202      	addeq	r2, #2
 80a4bb0:	07d9      	lsls	r1, r3, #31
 80a4bb2:	d402      	bmi.n	80a4bba <__lo0bits+0x4c>
 80a4bb4:	085b      	lsrs	r3, r3, #1
 80a4bb6:	d005      	beq.n	80a4bc4 <__lo0bits+0x56>
 80a4bb8:	3201      	adds	r2, #1
 80a4bba:	6003      	str	r3, [r0, #0]
 80a4bbc:	4610      	mov	r0, r2
 80a4bbe:	4770      	bx	lr
 80a4bc0:	2000      	movs	r0, #0
 80a4bc2:	4770      	bx	lr
 80a4bc4:	2020      	movs	r0, #32
 80a4bc6:	4770      	bx	lr

080a4bc8 <__i2b>:
 80a4bc8:	b510      	push	{r4, lr}
 80a4bca:	460c      	mov	r4, r1
 80a4bcc:	2101      	movs	r1, #1
 80a4bce:	f7ff fee9 	bl	80a49a4 <_Balloc>
 80a4bd2:	2201      	movs	r2, #1
 80a4bd4:	6144      	str	r4, [r0, #20]
 80a4bd6:	6102      	str	r2, [r0, #16]
 80a4bd8:	bd10      	pop	{r4, pc}

080a4bda <__multiply>:
 80a4bda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4bde:	4614      	mov	r4, r2
 80a4be0:	690a      	ldr	r2, [r1, #16]
 80a4be2:	6923      	ldr	r3, [r4, #16]
 80a4be4:	4688      	mov	r8, r1
 80a4be6:	429a      	cmp	r2, r3
 80a4be8:	bfbe      	ittt	lt
 80a4bea:	460b      	movlt	r3, r1
 80a4bec:	46a0      	movlt	r8, r4
 80a4bee:	461c      	movlt	r4, r3
 80a4bf0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80a4bf4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80a4bf8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a4bfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80a4c00:	eb07 0609 	add.w	r6, r7, r9
 80a4c04:	429e      	cmp	r6, r3
 80a4c06:	bfc8      	it	gt
 80a4c08:	3101      	addgt	r1, #1
 80a4c0a:	f7ff fecb 	bl	80a49a4 <_Balloc>
 80a4c0e:	f100 0514 	add.w	r5, r0, #20
 80a4c12:	462b      	mov	r3, r5
 80a4c14:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 80a4c18:	2200      	movs	r2, #0
 80a4c1a:	4563      	cmp	r3, ip
 80a4c1c:	d202      	bcs.n	80a4c24 <__multiply+0x4a>
 80a4c1e:	f843 2b04 	str.w	r2, [r3], #4
 80a4c22:	e7fa      	b.n	80a4c1a <__multiply+0x40>
 80a4c24:	f104 0214 	add.w	r2, r4, #20
 80a4c28:	f108 0114 	add.w	r1, r8, #20
 80a4c2c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80a4c30:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80a4c34:	9300      	str	r3, [sp, #0]
 80a4c36:	9b00      	ldr	r3, [sp, #0]
 80a4c38:	9201      	str	r2, [sp, #4]
 80a4c3a:	4293      	cmp	r3, r2
 80a4c3c:	d957      	bls.n	80a4cee <__multiply+0x114>
 80a4c3e:	f8b2 b000 	ldrh.w	fp, [r2]
 80a4c42:	f1bb 0f00 	cmp.w	fp, #0
 80a4c46:	d023      	beq.n	80a4c90 <__multiply+0xb6>
 80a4c48:	4689      	mov	r9, r1
 80a4c4a:	46ae      	mov	lr, r5
 80a4c4c:	f04f 0800 	mov.w	r8, #0
 80a4c50:	f859 4b04 	ldr.w	r4, [r9], #4
 80a4c54:	f8be a000 	ldrh.w	sl, [lr]
 80a4c58:	b2a3      	uxth	r3, r4
 80a4c5a:	fb0b a303 	mla	r3, fp, r3, sl
 80a4c5e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80a4c62:	f8de 4000 	ldr.w	r4, [lr]
 80a4c66:	4443      	add	r3, r8
 80a4c68:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a4c6c:	fb0b 840a 	mla	r4, fp, sl, r8
 80a4c70:	46f2      	mov	sl, lr
 80a4c72:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80a4c76:	b29b      	uxth	r3, r3
 80a4c78:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80a4c7c:	454f      	cmp	r7, r9
 80a4c7e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a4c82:	f84a 3b04 	str.w	r3, [sl], #4
 80a4c86:	d901      	bls.n	80a4c8c <__multiply+0xb2>
 80a4c88:	46d6      	mov	lr, sl
 80a4c8a:	e7e1      	b.n	80a4c50 <__multiply+0x76>
 80a4c8c:	f8ce 8004 	str.w	r8, [lr, #4]
 80a4c90:	9b01      	ldr	r3, [sp, #4]
 80a4c92:	3204      	adds	r2, #4
 80a4c94:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80a4c98:	f1ba 0f00 	cmp.w	sl, #0
 80a4c9c:	d021      	beq.n	80a4ce2 <__multiply+0x108>
 80a4c9e:	462c      	mov	r4, r5
 80a4ca0:	4689      	mov	r9, r1
 80a4ca2:	682b      	ldr	r3, [r5, #0]
 80a4ca4:	f04f 0800 	mov.w	r8, #0
 80a4ca8:	f8b9 e000 	ldrh.w	lr, [r9]
 80a4cac:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80a4cb0:	b29b      	uxth	r3, r3
 80a4cb2:	fb0a be0e 	mla	lr, sl, lr, fp
 80a4cb6:	46a3      	mov	fp, r4
 80a4cb8:	44f0      	add	r8, lr
 80a4cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80a4cbe:	f84b 3b04 	str.w	r3, [fp], #4
 80a4cc2:	f859 3b04 	ldr.w	r3, [r9], #4
 80a4cc6:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80a4cca:	0c1b      	lsrs	r3, r3, #16
 80a4ccc:	fb0a e303 	mla	r3, sl, r3, lr
 80a4cd0:	454f      	cmp	r7, r9
 80a4cd2:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80a4cd6:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80a4cda:	d901      	bls.n	80a4ce0 <__multiply+0x106>
 80a4cdc:	465c      	mov	r4, fp
 80a4cde:	e7e3      	b.n	80a4ca8 <__multiply+0xce>
 80a4ce0:	6063      	str	r3, [r4, #4]
 80a4ce2:	3504      	adds	r5, #4
 80a4ce4:	e7a7      	b.n	80a4c36 <__multiply+0x5c>
 80a4ce6:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 80a4cea:	b913      	cbnz	r3, 80a4cf2 <__multiply+0x118>
 80a4cec:	3e01      	subs	r6, #1
 80a4cee:	2e00      	cmp	r6, #0
 80a4cf0:	dcf9      	bgt.n	80a4ce6 <__multiply+0x10c>
 80a4cf2:	6106      	str	r6, [r0, #16]
 80a4cf4:	b003      	add	sp, #12
 80a4cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a4cfc <__pow5mult>:
 80a4cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a4d00:	4615      	mov	r5, r2
 80a4d02:	f012 0203 	ands.w	r2, r2, #3
 80a4d06:	4606      	mov	r6, r0
 80a4d08:	460f      	mov	r7, r1
 80a4d0a:	d007      	beq.n	80a4d1c <__pow5mult+0x20>
 80a4d0c:	4c21      	ldr	r4, [pc, #132]	; (80a4d94 <__pow5mult+0x98>)
 80a4d0e:	3a01      	subs	r2, #1
 80a4d10:	2300      	movs	r3, #0
 80a4d12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80a4d16:	f7ff fe91 	bl	80a4a3c <__multadd>
 80a4d1a:	4607      	mov	r7, r0
 80a4d1c:	10ad      	asrs	r5, r5, #2
 80a4d1e:	d036      	beq.n	80a4d8e <__pow5mult+0x92>
 80a4d20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80a4d22:	b93c      	cbnz	r4, 80a4d34 <__pow5mult+0x38>
 80a4d24:	2010      	movs	r0, #16
 80a4d26:	f7fb fe81 	bl	80a0a2c <malloc>
 80a4d2a:	6270      	str	r0, [r6, #36]	; 0x24
 80a4d2c:	6044      	str	r4, [r0, #4]
 80a4d2e:	6084      	str	r4, [r0, #8]
 80a4d30:	6004      	str	r4, [r0, #0]
 80a4d32:	60c4      	str	r4, [r0, #12]
 80a4d34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80a4d38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80a4d3c:	b94c      	cbnz	r4, 80a4d52 <__pow5mult+0x56>
 80a4d3e:	f240 2171 	movw	r1, #625	; 0x271
 80a4d42:	4630      	mov	r0, r6
 80a4d44:	f7ff ff40 	bl	80a4bc8 <__i2b>
 80a4d48:	4604      	mov	r4, r0
 80a4d4a:	2300      	movs	r3, #0
 80a4d4c:	f8c8 0008 	str.w	r0, [r8, #8]
 80a4d50:	6003      	str	r3, [r0, #0]
 80a4d52:	f04f 0800 	mov.w	r8, #0
 80a4d56:	07eb      	lsls	r3, r5, #31
 80a4d58:	d50a      	bpl.n	80a4d70 <__pow5mult+0x74>
 80a4d5a:	4639      	mov	r1, r7
 80a4d5c:	4622      	mov	r2, r4
 80a4d5e:	4630      	mov	r0, r6
 80a4d60:	f7ff ff3b 	bl	80a4bda <__multiply>
 80a4d64:	4681      	mov	r9, r0
 80a4d66:	4639      	mov	r1, r7
 80a4d68:	4630      	mov	r0, r6
 80a4d6a:	f7ff fe50 	bl	80a4a0e <_Bfree>
 80a4d6e:	464f      	mov	r7, r9
 80a4d70:	106d      	asrs	r5, r5, #1
 80a4d72:	d00c      	beq.n	80a4d8e <__pow5mult+0x92>
 80a4d74:	6820      	ldr	r0, [r4, #0]
 80a4d76:	b108      	cbz	r0, 80a4d7c <__pow5mult+0x80>
 80a4d78:	4604      	mov	r4, r0
 80a4d7a:	e7ec      	b.n	80a4d56 <__pow5mult+0x5a>
 80a4d7c:	4622      	mov	r2, r4
 80a4d7e:	4621      	mov	r1, r4
 80a4d80:	4630      	mov	r0, r6
 80a4d82:	f7ff ff2a 	bl	80a4bda <__multiply>
 80a4d86:	6020      	str	r0, [r4, #0]
 80a4d88:	f8c0 8000 	str.w	r8, [r0]
 80a4d8c:	e7f4      	b.n	80a4d78 <__pow5mult+0x7c>
 80a4d8e:	4638      	mov	r0, r7
 80a4d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a4d94:	080a57f8 	.word	0x080a57f8

080a4d98 <__lshift>:
 80a4d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4d9c:	460c      	mov	r4, r1
 80a4d9e:	4607      	mov	r7, r0
 80a4da0:	4691      	mov	r9, r2
 80a4da2:	6926      	ldr	r6, [r4, #16]
 80a4da4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80a4da8:	4456      	add	r6, sl
 80a4daa:	6849      	ldr	r1, [r1, #4]
 80a4dac:	68a3      	ldr	r3, [r4, #8]
 80a4dae:	1c75      	adds	r5, r6, #1
 80a4db0:	42ab      	cmp	r3, r5
 80a4db2:	da02      	bge.n	80a4dba <__lshift+0x22>
 80a4db4:	3101      	adds	r1, #1
 80a4db6:	005b      	lsls	r3, r3, #1
 80a4db8:	e7fa      	b.n	80a4db0 <__lshift+0x18>
 80a4dba:	4638      	mov	r0, r7
 80a4dbc:	f7ff fdf2 	bl	80a49a4 <_Balloc>
 80a4dc0:	2300      	movs	r3, #0
 80a4dc2:	4680      	mov	r8, r0
 80a4dc4:	461a      	mov	r2, r3
 80a4dc6:	f100 0114 	add.w	r1, r0, #20
 80a4dca:	4553      	cmp	r3, sl
 80a4dcc:	da03      	bge.n	80a4dd6 <__lshift+0x3e>
 80a4dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80a4dd2:	3301      	adds	r3, #1
 80a4dd4:	e7f9      	b.n	80a4dca <__lshift+0x32>
 80a4dd6:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80a4dda:	6920      	ldr	r0, [r4, #16]
 80a4ddc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a4de0:	f019 091f 	ands.w	r9, r9, #31
 80a4de4:	f104 0114 	add.w	r1, r4, #20
 80a4de8:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80a4dec:	d014      	beq.n	80a4e18 <__lshift+0x80>
 80a4dee:	f1c9 0c20 	rsb	ip, r9, #32
 80a4df2:	2200      	movs	r2, #0
 80a4df4:	6808      	ldr	r0, [r1, #0]
 80a4df6:	469a      	mov	sl, r3
 80a4df8:	fa00 f009 	lsl.w	r0, r0, r9
 80a4dfc:	4302      	orrs	r2, r0
 80a4dfe:	f843 2b04 	str.w	r2, [r3], #4
 80a4e02:	f851 2b04 	ldr.w	r2, [r1], #4
 80a4e06:	458e      	cmp	lr, r1
 80a4e08:	fa22 f20c 	lsr.w	r2, r2, ip
 80a4e0c:	d8f2      	bhi.n	80a4df4 <__lshift+0x5c>
 80a4e0e:	f8ca 2004 	str.w	r2, [sl, #4]
 80a4e12:	b142      	cbz	r2, 80a4e26 <__lshift+0x8e>
 80a4e14:	1cb5      	adds	r5, r6, #2
 80a4e16:	e006      	b.n	80a4e26 <__lshift+0x8e>
 80a4e18:	3b04      	subs	r3, #4
 80a4e1a:	f851 2b04 	ldr.w	r2, [r1], #4
 80a4e1e:	458e      	cmp	lr, r1
 80a4e20:	f843 2f04 	str.w	r2, [r3, #4]!
 80a4e24:	d8f9      	bhi.n	80a4e1a <__lshift+0x82>
 80a4e26:	3d01      	subs	r5, #1
 80a4e28:	4638      	mov	r0, r7
 80a4e2a:	f8c8 5010 	str.w	r5, [r8, #16]
 80a4e2e:	4621      	mov	r1, r4
 80a4e30:	f7ff fded 	bl	80a4a0e <_Bfree>
 80a4e34:	4640      	mov	r0, r8
 80a4e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a4e3a <__mcmp>:
 80a4e3a:	6903      	ldr	r3, [r0, #16]
 80a4e3c:	690a      	ldr	r2, [r1, #16]
 80a4e3e:	b510      	push	{r4, lr}
 80a4e40:	1a9b      	subs	r3, r3, r2
 80a4e42:	d111      	bne.n	80a4e68 <__mcmp+0x2e>
 80a4e44:	0092      	lsls	r2, r2, #2
 80a4e46:	3014      	adds	r0, #20
 80a4e48:	3114      	adds	r1, #20
 80a4e4a:	1883      	adds	r3, r0, r2
 80a4e4c:	440a      	add	r2, r1
 80a4e4e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80a4e52:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80a4e56:	428c      	cmp	r4, r1
 80a4e58:	d002      	beq.n	80a4e60 <__mcmp+0x26>
 80a4e5a:	d307      	bcc.n	80a4e6c <__mcmp+0x32>
 80a4e5c:	2001      	movs	r0, #1
 80a4e5e:	bd10      	pop	{r4, pc}
 80a4e60:	4298      	cmp	r0, r3
 80a4e62:	d3f4      	bcc.n	80a4e4e <__mcmp+0x14>
 80a4e64:	2000      	movs	r0, #0
 80a4e66:	bd10      	pop	{r4, pc}
 80a4e68:	4618      	mov	r0, r3
 80a4e6a:	bd10      	pop	{r4, pc}
 80a4e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a4e70:	bd10      	pop	{r4, pc}

080a4e72 <__mdiff>:
 80a4e72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a4e76:	460c      	mov	r4, r1
 80a4e78:	4607      	mov	r7, r0
 80a4e7a:	4611      	mov	r1, r2
 80a4e7c:	4620      	mov	r0, r4
 80a4e7e:	4615      	mov	r5, r2
 80a4e80:	f7ff ffdb 	bl	80a4e3a <__mcmp>
 80a4e84:	1e06      	subs	r6, r0, #0
 80a4e86:	d108      	bne.n	80a4e9a <__mdiff+0x28>
 80a4e88:	4631      	mov	r1, r6
 80a4e8a:	4638      	mov	r0, r7
 80a4e8c:	f7ff fd8a 	bl	80a49a4 <_Balloc>
 80a4e90:	2301      	movs	r3, #1
 80a4e92:	6103      	str	r3, [r0, #16]
 80a4e94:	6146      	str	r6, [r0, #20]
 80a4e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a4e9a:	bfbc      	itt	lt
 80a4e9c:	4623      	movlt	r3, r4
 80a4e9e:	462c      	movlt	r4, r5
 80a4ea0:	4638      	mov	r0, r7
 80a4ea2:	6861      	ldr	r1, [r4, #4]
 80a4ea4:	bfba      	itte	lt
 80a4ea6:	461d      	movlt	r5, r3
 80a4ea8:	2601      	movlt	r6, #1
 80a4eaa:	2600      	movge	r6, #0
 80a4eac:	f7ff fd7a 	bl	80a49a4 <_Balloc>
 80a4eb0:	692b      	ldr	r3, [r5, #16]
 80a4eb2:	60c6      	str	r6, [r0, #12]
 80a4eb4:	6926      	ldr	r6, [r4, #16]
 80a4eb6:	f105 0914 	add.w	r9, r5, #20
 80a4eba:	f104 0114 	add.w	r1, r4, #20
 80a4ebe:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 80a4ec2:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80a4ec6:	f100 0514 	add.w	r5, r0, #20
 80a4eca:	f04f 0c00 	mov.w	ip, #0
 80a4ece:	f851 2b04 	ldr.w	r2, [r1], #4
 80a4ed2:	f859 4b04 	ldr.w	r4, [r9], #4
 80a4ed6:	b293      	uxth	r3, r2
 80a4ed8:	449c      	add	ip, r3
 80a4eda:	b2a3      	uxth	r3, r4
 80a4edc:	0c24      	lsrs	r4, r4, #16
 80a4ede:	ebc3 030c 	rsb	r3, r3, ip
 80a4ee2:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 80a4ee6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80a4eea:	b29b      	uxth	r3, r3
 80a4eec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80a4ef0:	45c8      	cmp	r8, r9
 80a4ef2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a4ef6:	468e      	mov	lr, r1
 80a4ef8:	f845 2b04 	str.w	r2, [r5], #4
 80a4efc:	d8e7      	bhi.n	80a4ece <__mdiff+0x5c>
 80a4efe:	45be      	cmp	lr, r7
 80a4f00:	d20e      	bcs.n	80a4f20 <__mdiff+0xae>
 80a4f02:	f85e 1b04 	ldr.w	r1, [lr], #4
 80a4f06:	b28a      	uxth	r2, r1
 80a4f08:	4462      	add	r2, ip
 80a4f0a:	1413      	asrs	r3, r2, #16
 80a4f0c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 80a4f10:	b292      	uxth	r2, r2
 80a4f12:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80a4f16:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80a4f1a:	f845 2b04 	str.w	r2, [r5], #4
 80a4f1e:	e7ee      	b.n	80a4efe <__mdiff+0x8c>
 80a4f20:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80a4f24:	b90b      	cbnz	r3, 80a4f2a <__mdiff+0xb8>
 80a4f26:	3e01      	subs	r6, #1
 80a4f28:	e7fa      	b.n	80a4f20 <__mdiff+0xae>
 80a4f2a:	6106      	str	r6, [r0, #16]
 80a4f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a4f30 <__ulp>:
 80a4f30:	4b10      	ldr	r3, [pc, #64]	; (80a4f74 <__ulp+0x44>)
 80a4f32:	400b      	ands	r3, r1
 80a4f34:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80a4f38:	2b00      	cmp	r3, #0
 80a4f3a:	dd02      	ble.n	80a4f42 <__ulp+0x12>
 80a4f3c:	2000      	movs	r0, #0
 80a4f3e:	4619      	mov	r1, r3
 80a4f40:	4770      	bx	lr
 80a4f42:	425b      	negs	r3, r3
 80a4f44:	151b      	asrs	r3, r3, #20
 80a4f46:	2b13      	cmp	r3, #19
 80a4f48:	f04f 0000 	mov.w	r0, #0
 80a4f4c:	f04f 0100 	mov.w	r1, #0
 80a4f50:	dc04      	bgt.n	80a4f5c <__ulp+0x2c>
 80a4f52:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80a4f56:	fa42 f103 	asr.w	r1, r2, r3
 80a4f5a:	4770      	bx	lr
 80a4f5c:	3b14      	subs	r3, #20
 80a4f5e:	2b1e      	cmp	r3, #30
 80a4f60:	f04f 0201 	mov.w	r2, #1
 80a4f64:	bfce      	itee	gt
 80a4f66:	4613      	movgt	r3, r2
 80a4f68:	f1c3 031f 	rsble	r3, r3, #31
 80a4f6c:	fa02 f303 	lslle.w	r3, r2, r3
 80a4f70:	4618      	mov	r0, r3
 80a4f72:	4770      	bx	lr
 80a4f74:	7ff00000 	.word	0x7ff00000

080a4f78 <__b2d>:
 80a4f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4f7a:	6905      	ldr	r5, [r0, #16]
 80a4f7c:	f100 0614 	add.w	r6, r0, #20
 80a4f80:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80a4f84:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80a4f88:	1f2f      	subs	r7, r5, #4
 80a4f8a:	4620      	mov	r0, r4
 80a4f8c:	f7ff fdcf 	bl	80a4b2e <__hi0bits>
 80a4f90:	f1c0 0320 	rsb	r3, r0, #32
 80a4f94:	280a      	cmp	r0, #10
 80a4f96:	600b      	str	r3, [r1, #0]
 80a4f98:	dc14      	bgt.n	80a4fc4 <__b2d+0x4c>
 80a4f9a:	f1c0 0e0b 	rsb	lr, r0, #11
 80a4f9e:	fa24 f10e 	lsr.w	r1, r4, lr
 80a4fa2:	42be      	cmp	r6, r7
 80a4fa4:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 80a4fa8:	bf34      	ite	cc
 80a4faa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a4fae:	2100      	movcs	r1, #0
 80a4fb0:	3015      	adds	r0, #21
 80a4fb2:	fa04 f000 	lsl.w	r0, r4, r0
 80a4fb6:	fa21 f10e 	lsr.w	r1, r1, lr
 80a4fba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a4fbe:	ea40 0201 	orr.w	r2, r0, r1
 80a4fc2:	e023      	b.n	80a500c <__b2d+0x94>
 80a4fc4:	42be      	cmp	r6, r7
 80a4fc6:	bf3a      	itte	cc
 80a4fc8:	f1a5 0708 	subcc.w	r7, r5, #8
 80a4fcc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a4fd0:	2100      	movcs	r1, #0
 80a4fd2:	380b      	subs	r0, #11
 80a4fd4:	d015      	beq.n	80a5002 <__b2d+0x8a>
 80a4fd6:	4084      	lsls	r4, r0
 80a4fd8:	f1c0 0520 	rsb	r5, r0, #32
 80a4fdc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80a4fe0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80a4fe4:	42b7      	cmp	r7, r6
 80a4fe6:	fa21 fe05 	lsr.w	lr, r1, r5
 80a4fea:	ea44 030e 	orr.w	r3, r4, lr
 80a4fee:	bf8c      	ite	hi
 80a4ff0:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 80a4ff4:	2400      	movls	r4, #0
 80a4ff6:	fa01 f000 	lsl.w	r0, r1, r0
 80a4ffa:	40ec      	lsrs	r4, r5
 80a4ffc:	ea40 0204 	orr.w	r2, r0, r4
 80a5000:	e004      	b.n	80a500c <__b2d+0x94>
 80a5002:	460a      	mov	r2, r1
 80a5004:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80a5008:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a500c:	4610      	mov	r0, r2
 80a500e:	4619      	mov	r1, r3
 80a5010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a5012 <__d2b>:
 80a5012:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a5016:	461c      	mov	r4, r3
 80a5018:	2101      	movs	r1, #1
 80a501a:	4690      	mov	r8, r2
 80a501c:	9e08      	ldr	r6, [sp, #32]
 80a501e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a5020:	f7ff fcc0 	bl	80a49a4 <_Balloc>
 80a5024:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80a5028:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80a502c:	4607      	mov	r7, r0
 80a502e:	b10c      	cbz	r4, 80a5034 <__d2b+0x22>
 80a5030:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80a5034:	9201      	str	r2, [sp, #4]
 80a5036:	f1b8 0f00 	cmp.w	r8, #0
 80a503a:	d019      	beq.n	80a5070 <__d2b+0x5e>
 80a503c:	a802      	add	r0, sp, #8
 80a503e:	f840 8d08 	str.w	r8, [r0, #-8]!
 80a5042:	f7ff fd94 	bl	80a4b6e <__lo0bits>
 80a5046:	9b00      	ldr	r3, [sp, #0]
 80a5048:	b148      	cbz	r0, 80a505e <__d2b+0x4c>
 80a504a:	9a01      	ldr	r2, [sp, #4]
 80a504c:	f1c0 0120 	rsb	r1, r0, #32
 80a5050:	fa02 f101 	lsl.w	r1, r2, r1
 80a5054:	430b      	orrs	r3, r1
 80a5056:	40c2      	lsrs	r2, r0
 80a5058:	617b      	str	r3, [r7, #20]
 80a505a:	9201      	str	r2, [sp, #4]
 80a505c:	e000      	b.n	80a5060 <__d2b+0x4e>
 80a505e:	617b      	str	r3, [r7, #20]
 80a5060:	9b01      	ldr	r3, [sp, #4]
 80a5062:	2b00      	cmp	r3, #0
 80a5064:	bf14      	ite	ne
 80a5066:	2102      	movne	r1, #2
 80a5068:	2101      	moveq	r1, #1
 80a506a:	61bb      	str	r3, [r7, #24]
 80a506c:	6139      	str	r1, [r7, #16]
 80a506e:	e007      	b.n	80a5080 <__d2b+0x6e>
 80a5070:	a801      	add	r0, sp, #4
 80a5072:	f7ff fd7c 	bl	80a4b6e <__lo0bits>
 80a5076:	9b01      	ldr	r3, [sp, #4]
 80a5078:	2101      	movs	r1, #1
 80a507a:	617b      	str	r3, [r7, #20]
 80a507c:	6139      	str	r1, [r7, #16]
 80a507e:	3020      	adds	r0, #32
 80a5080:	b134      	cbz	r4, 80a5090 <__d2b+0x7e>
 80a5082:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80a5086:	4404      	add	r4, r0
 80a5088:	6034      	str	r4, [r6, #0]
 80a508a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80a508e:	e009      	b.n	80a50a4 <__d2b+0x92>
 80a5090:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80a5094:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80a5098:	6030      	str	r0, [r6, #0]
 80a509a:	6918      	ldr	r0, [r3, #16]
 80a509c:	f7ff fd47 	bl	80a4b2e <__hi0bits>
 80a50a0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80a50a4:	6028      	str	r0, [r5, #0]
 80a50a6:	4638      	mov	r0, r7
 80a50a8:	b002      	add	sp, #8
 80a50aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a50ae <__ratio>:
 80a50ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a50b2:	4688      	mov	r8, r1
 80a50b4:	4669      	mov	r1, sp
 80a50b6:	4681      	mov	r9, r0
 80a50b8:	f7ff ff5e 	bl	80a4f78 <__b2d>
 80a50bc:	460d      	mov	r5, r1
 80a50be:	4604      	mov	r4, r0
 80a50c0:	a901      	add	r1, sp, #4
 80a50c2:	4640      	mov	r0, r8
 80a50c4:	f7ff ff58 	bl	80a4f78 <__b2d>
 80a50c8:	460f      	mov	r7, r1
 80a50ca:	4606      	mov	r6, r0
 80a50cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80a50d0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80a50d4:	4620      	mov	r0, r4
 80a50d6:	1a9a      	subs	r2, r3, r2
 80a50d8:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80a50dc:	1ac9      	subs	r1, r1, r3
 80a50de:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 80a50e2:	2b00      	cmp	r3, #0
 80a50e4:	bfcc      	ite	gt
 80a50e6:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 80a50ea:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 80a50ee:	4632      	mov	r2, r6
 80a50f0:	463b      	mov	r3, r7
 80a50f2:	4629      	mov	r1, r5
 80a50f4:	f7fd fa34 	bl	80a2560 <__aeabi_ddiv>
 80a50f8:	b003      	add	sp, #12
 80a50fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a50fe <__copybits>:
 80a50fe:	3901      	subs	r1, #1
 80a5100:	b510      	push	{r4, lr}
 80a5102:	1149      	asrs	r1, r1, #5
 80a5104:	6914      	ldr	r4, [r2, #16]
 80a5106:	3101      	adds	r1, #1
 80a5108:	f102 0314 	add.w	r3, r2, #20
 80a510c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80a5110:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80a5114:	42a3      	cmp	r3, r4
 80a5116:	4602      	mov	r2, r0
 80a5118:	d204      	bcs.n	80a5124 <__copybits+0x26>
 80a511a:	f853 2b04 	ldr.w	r2, [r3], #4
 80a511e:	f840 2b04 	str.w	r2, [r0], #4
 80a5122:	e7f7      	b.n	80a5114 <__copybits+0x16>
 80a5124:	2300      	movs	r3, #0
 80a5126:	428a      	cmp	r2, r1
 80a5128:	d202      	bcs.n	80a5130 <__copybits+0x32>
 80a512a:	f842 3b04 	str.w	r3, [r2], #4
 80a512e:	e7fa      	b.n	80a5126 <__copybits+0x28>
 80a5130:	bd10      	pop	{r4, pc}

080a5132 <__any_on>:
 80a5132:	f100 0214 	add.w	r2, r0, #20
 80a5136:	6900      	ldr	r0, [r0, #16]
 80a5138:	114b      	asrs	r3, r1, #5
 80a513a:	4298      	cmp	r0, r3
 80a513c:	b510      	push	{r4, lr}
 80a513e:	db0c      	blt.n	80a515a <__any_on+0x28>
 80a5140:	dd0c      	ble.n	80a515c <__any_on+0x2a>
 80a5142:	f011 011f 	ands.w	r1, r1, #31
 80a5146:	d009      	beq.n	80a515c <__any_on+0x2a>
 80a5148:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80a514c:	fa24 f001 	lsr.w	r0, r4, r1
 80a5150:	fa00 f101 	lsl.w	r1, r0, r1
 80a5154:	428c      	cmp	r4, r1
 80a5156:	d10c      	bne.n	80a5172 <__any_on+0x40>
 80a5158:	e000      	b.n	80a515c <__any_on+0x2a>
 80a515a:	4603      	mov	r3, r0
 80a515c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a5160:	4293      	cmp	r3, r2
 80a5162:	d904      	bls.n	80a516e <__any_on+0x3c>
 80a5164:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80a5168:	2900      	cmp	r1, #0
 80a516a:	d0f9      	beq.n	80a5160 <__any_on+0x2e>
 80a516c:	e001      	b.n	80a5172 <__any_on+0x40>
 80a516e:	2000      	movs	r0, #0
 80a5170:	bd10      	pop	{r4, pc}
 80a5172:	2001      	movs	r0, #1
 80a5174:	bd10      	pop	{r4, pc}

080a5176 <_calloc_r>:
 80a5176:	b538      	push	{r3, r4, r5, lr}
 80a5178:	fb02 f401 	mul.w	r4, r2, r1
 80a517c:	4621      	mov	r1, r4
 80a517e:	f7fb fc85 	bl	80a0a8c <_malloc_r>
 80a5182:	4605      	mov	r5, r0
 80a5184:	b118      	cbz	r0, 80a518e <_calloc_r+0x18>
 80a5186:	4622      	mov	r2, r4
 80a5188:	2100      	movs	r1, #0
 80a518a:	f7fd fea0 	bl	80a2ece <memset>
 80a518e:	4628      	mov	r0, r5
 80a5190:	bd38      	pop	{r3, r4, r5, pc}
	...

080a5194 <nanf>:
 80a5194:	4800      	ldr	r0, [pc, #0]	; (80a5198 <nanf+0x4>)
 80a5196:	4770      	bx	lr
 80a5198:	7fc00000 	.word	0x7fc00000

080a519c <__env_lock>:
 80a519c:	4770      	bx	lr

080a519e <__env_unlock>:
 80a519e:	4770      	bx	lr

080a51a0 <dynalib_user>:
 80a51a0:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a51b0:	0000 0000 3425 312e 2066 416d 0068 3325     ....%4.1f mAh.%3
 80a51c0:	312e 2066 2525 5300 7465 432d 7061 6361     .1f %%.Set-Capac
 80a51d0:	7469 0079 6553 2d74 6843 7261 6567 5200     ity.Set-Charge.R
 80a51e0:	7365 7465 542d 7365 0074 544c 3443 3531     eset-Test.LTC415
 80a51f0:	2030 6f43 6c75 6d6f 2062 6f43 6e75 6574     0 Coulomb Counte
 80a5200:	0072 7453 7261 7574 0070 7453 7461 7375     r.Startup.Status
 80a5210:	203a 3425 302e 2066 416d 2c68 2520 2e33     : %4.0f mAh, %3.
 80a5220:	6631 2525 6320 6168 6772 2c65 2520 2e34     1f%% charge, %4.
 80a5230:	6633 6d20 2041 7461 7420 6d69 2065 6925     3f mA at time %i
 80a5240:	253a 3a69 6925 253a 2069 6573 6f63 646e     :%i:%i:%i second
 80a5250:	0073 7453 7461 7375 0000 0000               s.Status....

080a525c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a5264:	0acb 080a 0ad1 080a 0b27 080a 0adf 080a     ........'.......
 80a5274:	0acd 080a                                   ....

080a5278 <_ZTV7TwoWire>:
	...
 80a5280:	10ed 080a 1137 080a 110f 080a 10ef 080a     ....7...........
 80a5290:	1117 080a 111f 080a 1127 080a 112f 080a     ........'.../...

080a52a0 <_ZTV9IPAddress>:
	...
 80a52a8:	11d1 080a 11c1 080a 11c3 080a 6e6c 6600     ............ln.f
 80a52b8:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
 80a52c8:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
 80a52d8:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
 80a52e8:	2500 0069 6564 6174 6c69 2073 203d 6200     .%i.details = .b
 80a52f8:	7561 0064 6553 6972 6c61 5500 4253 6553     aud.Serial.USBSe
 80a5308:	6972 6c61 0031 7974 6570 7000 7261 6d61     rial1.type.param
 80a5318:	6300 646d 6900 0064 6e68 0064 7473 6d72     .cmd.id.hnd.strm
 80a5328:	6600 6c69 0074 766c 006c 6461 4864 6e61     .filt.lvl.addHan
 80a5338:	6c64 7265 7200 6d65 766f 4865 6e61 6c64     dler.removeHandl
 80a5348:	7265 6500 756e 486d 6e61 6c64 7265 0073     er.enumHandlers.
 80a5358:	534a 4e4f 7453 6572 6d61 6f4c 4867 6e61     JSONStreamLogHan
 80a5368:	6c64 7265 6100 7070 6e00 6e6f 0065 7274     dler.app.none.tr
 80a5378:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a5388:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a5398 <_ZTVN5spark12NetworkClassE>:
	...
 80a53a0:	1299 080a 12a3 080a 12ad 080a 12b7 080a     ................
 80a53b0:	12c1 080a 12cd 080a 12d9 080a 12e5 080a     ................
 80a53c0:	12ed 080a 12f7 080a 1301 080a               ............

080a53cc <_ZTV8SPIClass>:
	...
 80a53d4:	1439 080a 143b 080a 2b25 3330 3a64 3025     9...;...%+03d:%0
 80a53e4:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80a53f4:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080a5404 <_ZTV11USARTSerial>:
	...
 80a540c:	16c1 080a 1711 080a 171f 080a 1365 080a     ............e...
 80a541c:	16d5 080a 16f7 080a 16e3 080a 170b 080a     ................
 80a542c:	16c3 080a 16c7 080a                         ........

080a5434 <_ZTV9USBSerial>:
	...
 80a543c:	17c9 080a 1819 080a 1827 080a 1365 080a     ........'...e...
 80a544c:	1805 080a 17cb 080a 17e1 080a 1813 080a     ................
 80a545c:	17f7 080a 17c5 080a                         ........

080a5464 <_ZTVN5spark9WiFiClassE>:
	...
 80a546c:	1a03 080a 19f9 080a 19ef 080a 1961 080a     ............a...
 80a547c:	19e3 080a 19d7 080a 19cb 080a 19c3 080a     ................
 80a548c:	19b9 080a 19af 080a 196b 080a               ........k...

080a5498 <_ctype_>:
 80a5498:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a54a8:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a54b8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a54c8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a54d8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a54e8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a54f8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a5508:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a5518:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a559c <__sf_fake_stdin>:
	...

080a55bc <__sf_fake_stdout>:
	...

080a55dc <__sf_fake_stderr>:
	...
 80a55fc:	0043 4f50 4953 0058 002e 0000               C.POSIX.....

080a5608 <__month_lengths>:
 80a5608:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a5618:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a5628:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a5638:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a5648:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a5658:	001e 0000 001f 0000 001e 0000 001f 0000     ................

080a5668 <fpi.5342>:
 80a5668:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80a5678:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

080a5688 <fpinan.5378>:
 80a5688:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

080a56a0 <tinytens>:
 80a56a0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80a56b0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80a56c0:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
 80a56d0:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
 80a56e0:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
 80a56f0:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
 80a5700:	2575 006e 0000 0000                         u%n.....

080a5708 <__mprec_tens>:
 80a5708:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80a5718:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80a5728:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80a5738:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80a5748:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80a5758:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80a5768:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80a5778:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80a5788:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80a5798:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80a57a8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80a57b8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80a57c8:	9db4 79d9 7843 44ea                         ...yCx.D

080a57d0 <__mprec_bigtens>:
 80a57d0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80a57e0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80a57f0:	bf3c 7f73 4fdd 7515                         <.s..O.u

080a57f8 <p05.5385>:
 80a57f8:	0005 0000 0019 0000 007d 0000               ........}...

080a5804 <link_const_variable_data_end>:
 80a5804:	080a0601 	.word	0x080a0601
 80a5808:	080a1289 	.word	0x080a1289
 80a580c:	080a1351 	.word	0x080a1351
 80a5810:	080a141d 	.word	0x080a141d
 80a5814:	080a1585 	.word	0x080a1585
 80a5818:	080a16ad 	.word	0x080a16ad
 80a581c:	080a1a0d 	.word	0x080a1a0d
 80a5820:	080a1c85 	.word	0x080a1c85
 80a5824:	080a1cb5 	.word	0x080a1cb5
 80a5828:	080a1d0d 	.word	0x080a1d0d
 80a582c:	080a1dd1 	.word	0x080a1dd1
 80a5830:	080a1e55 	.word	0x080a1e55
 80a5834:	080a1ed9 	.word	0x080a1ed9

080a5838 <link_constructors_end>:
	...
